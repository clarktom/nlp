
#######################################
Sentence: 

Besides len you can also use operator.length_hint (requires python 3.4+).

('Besides', 'IN')
('len', 'VBN')
('you', 'PRP')
('can', 'MD')
('also', 'RB')
('use', 'VB')
('operator.length_hint', 'NN')
('(', '(')
('requires', 'VBZ')
('python', 'RB')
('3.4+', 'CD')
(')', ')')
('.', '.')

#######################################
Sentence: 
pytz.construct("UTC-07:00")

which gives you Canada/Pacific timezone.

('pytz.construct', 'NN')
('(', '(')
('``', '``')
('UTC-07:00', 'NNP')
("''", "''")
(')', ')')
('which', 'WDT')
('gives', 'VBZ')
('you', 'PRP')
('Canada/Pacific', 'NNP')
('timezone', 'NN')
('.', '.')

#######################################
Sentence: 
Instead, as many posters have mentioned make it:

Not worth reverse engineering time (Your software is so good, it makes sense to pay)
Make them sign a contract and do a license audit if feasible.

('Instead', 'RB')
(',', ',')
('as', 'IN')
('many', 'JJ')
('posters', 'NNS')
('have', 'VBP')
('mentioned', 'VBN')
('make', 'VBP')
('it', 'PRP')
(':', ':')
('Not', 'RB')
('worth', 'JJ')
('reverse', 'VB')
('engineering', 'NN')
('time', 'NN')
('(', '(')
('Your', 'PRP$')
('software', 'NN')
('is', 'VBZ')
('so', 'RB')
('good', 'JJ')
(',', ',')
('it', 'PRP')
('makes', 'VBZ')
('sense', 'NN')
('to', 'TO')
('pay', 'VB')
(')', ')')
('Make', 'VB')
('them', 'PRP')
('sign', 'VB')
('a', 'DT')
('contract', 'NN')
('and', 'CC')
('do', 'VB')
('a', 'DT')
('license', 'NN')
('audit', 'NN')
('if', 'IN')
('feasible', 'JJ')
('.', '.')

#######################################
Sentence: 
Hence, now we need to look at :
Objectives
Even with the latest modern features, writing Javascript is terrible.

('Hence', 'NNP')
(',', ',')
('now', 'RB')
('we', 'PRP')
('need', 'VBP')
('to', 'TO')
('look', 'VB')
('at', 'IN')
(':', ':')
('Objectives', 'NNS')
('Even', 'RB')
('with', 'IN')
('the', 'DT')
('latest', 'JJS')
('modern', 'JJ')
('features', 'NNS')
(',', ',')
('writing', 'VBG')
('Javascript', 'NNP')
('is', 'VBZ')
('terrible', 'JJ')
('.', '.')

#######################################
Sentence: 
Because they escape escape sequences, you cannot end a string literal with a single backslash: that's not a valid escape sequence (e.g.

('Because', 'IN')
('they', 'PRP')
('escape', 'VBP')
('escape', 'JJ')
('sequences', 'NNS')
(',', ',')
('you', 'PRP')
('can', 'MD')
('not', 'RB')
('end', 'VB')
('a', 'DT')
('string', 'JJ')
('literal', 'JJ')
('with', 'IN')
('a', 'DT')
('single', 'JJ')
('backslash', 'NN')
(':', ':')
('that', 'DT')
("'s", 'VBZ')
('not', 'RB')
('a', 'DT')
('valid', 'JJ')
('escape', 'NN')
('sequence', 'NN')
('(', '(')
('e.g', 'NN')
('.', '.')

#######################################
Sentence: 

You can try to do json.loads(), which will throw a ValueError if the string you pass can't be decoded as JSON.

('You', 'PRP')
('can', 'MD')
('try', 'VB')
('to', 'TO')
('do', 'VB')
('json.loads', 'NNS')
('(', '(')
(')', ')')
(',', ',')
('which', 'WDT')
('will', 'MD')
('throw', 'VB')
('a', 'DT')
('ValueError', 'NN')
('if', 'IN')
('the', 'DT')
('string', 'NN')
('you', 'PRP')
('pass', 'VBP')
('ca', 'MD')
("n't", 'RB')
('be', 'VB')
('decoded', 'VBN')
('as', 'IN')
('JSON', 'NNP')
('.', '.')

#######################################
Sentence: 
As the MagicMock is the more capable class it makes a sensible one to use by default.

('As', 'IN')
('the', 'DT')
('MagicMock', 'NNP')
('is', 'VBZ')
('the', 'DT')
('more', 'RBR')
('capable', 'JJ')
('class', 'NN')
('it', 'PRP')
('makes', 'VBZ')
('a', 'DT')
('sensible', 'JJ')
('one', 'CD')
('to', 'TO')
('use', 'VB')
('by', 'IN')
('default', 'NN')
('.', '.')

#######################################
Sentence: 
In this case, inconsistency_type is set in each except block, so that behaviour is complemented in the no-error case in else.

('In', 'IN')
('this', 'DT')
('case', 'NN')
(',', ',')
('inconsistency_type', 'NN')
('is', 'VBZ')
('set', 'VBN')
('in', 'IN')
('each', 'DT')
('except', 'IN')
('block', 'NN')
(',', ',')
('so', 'IN')
('that', 'DT')
('behaviour', 'NN')
('is', 'VBZ')
('complemented', 'VBN')
('in', 'IN')
('the', 'DT')
('no-error', 'JJ')
('case', 'NN')
('in', 'IN')
('else', 'RB')
('.', '.')

#######################################
Sentence: 
I'm not trying to prove anything here; I just thought the problem was fun and I wanted to see what sort of easy performance improvements I could glean.

('I', 'PRP')
("'m", 'VBP')
('not', 'RB')
('trying', 'VBG')
('to', 'TO')
('prove', 'VB')
('anything', 'NN')
('here', 'RB')
(';', ':')
('I', 'PRP')
('just', 'RB')
('thought', 'VBD')
('the', 'DT')
('problem', 'NN')
('was', 'VBD')
('fun', 'NN')
('and', 'CC')
('I', 'PRP')
('wanted', 'VBD')
('to', 'TO')
('see', 'VB')
('what', 'WP')
('sort', 'NN')
('of', 'IN')
('easy', 'JJ')
('performance', 'NN')
('improvements', 'NNS')
('I', 'PRP')
('could', 'MD')
('glean', 'VB')
('.', '.')

#######################################
Sentence: 

If the list contains numbers, you can use map() with join().

('If', 'IN')
('the', 'DT')
('list', 'NN')
('contains', 'VBZ')
('numbers', 'NNS')
(',', ',')
('you', 'PRP')
('can', 'MD')
('use', 'VB')
('map', 'FW')
('(', '(')
(')', ')')
('with', 'IN')
('join', 'NN')
('(', '(')
(')', ')')
('.', '.')
#######################################
