[
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What is the use of the <code>yield</code> keyword in Python? What does it do?</p>\n\n<p>For example, I'm trying to understand this code<sup><strong>1</strong></sup>:</p>\n\n<pre><code>def _get_child_candidates(self, distance, min_dist, max_dist):\n    if self._leftchild and distance - max_dist &lt; self._median:\n        yield self._leftchild\n    if self._rightchild and distance + max_dist &gt;= self._median:\n        yield self._rightchild  \n</code></pre>\n\n<p>And this is the caller:</p>\n\n<pre><code>result, candidates = list(), [self]\nwhile candidates:\n    node = candidates.pop()\n    distance = node._get_dist(obj)\n    if distance &lt;= max_dist and distance &gt;= min_dist:\n        result.extend(node._values)\n    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))\nreturn result\n</code></pre>\n\n<p>What happens when the method <code>_get_child_candidates</code> is called?\nIs a list returned? A single element? Is it called again? When will subsequent calls stop?</p>\n\n<hr>\n\n<p><sub>\n1. The code comes from Jochen Schulz (jrschulz), who made a great Python library for metric spaces. This is the link to the complete source: <a href=\"http://well-adjusted.de/~jrschulz/mspace/\" rel=\"noreferrer\">Module mspace</a>.</sub></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>To understand what <code>yield</code> does, you must understand what <em>generators</em> are. And before generators come <em>iterables</em>.</p>\n\n<h2>Iterables</h2>\n\n<p>When you create a list, you can read its items one by one. Reading its items one by one is called iteration:</p>\n\n<pre><code>&gt;&gt;&gt; mylist = [1, 2, 3]\n&gt;&gt;&gt; for i in mylist:\n...    print(i)\n1\n2\n3\n</code></pre>\n\n<p><code>mylist</code> is an <em>iterable</em>. When you use a list comprehension, you create a list, and so an iterable:</p>\n\n<pre><code>&gt;&gt;&gt; mylist = [x*x for x in range(3)]\n&gt;&gt;&gt; for i in mylist:\n...    print(i)\n0\n1\n4\n</code></pre>\n\n<p>Everything you can use \"<code>for... in...</code>\" on is an iterable; <code>lists</code>, <code>strings</code>, files...</p>\n\n<p>These iterables are handy because you can read them as much as you wish, but you store all the values in memory and this is not always what you want when you have a lot of values.</p>\n\n<h2>Generators</h2>\n\n<p>Generators are iterators, but <strong>you can only iterate over them once</strong>. It's because they do not store all the values in memory, <strong>they generate the values on the fly</strong>:</p>\n\n<pre><code>&gt;&gt;&gt; mygenerator = (x*x for x in range(3))\n&gt;&gt;&gt; for i in mygenerator:\n...    print(i)\n0\n1\n4\n</code></pre>\n\n<p>It is just the same except you used <code>()</code> instead of <code>[]</code>. BUT, you <strong>cannot</strong> perform <code>for i in mygenerator</code> a second time since generators can only be used once: they calculate 0, then forget about it and calculate 1, and end calculating 4, one by one.</p>\n\n<h2>Yield</h2>\n\n<p><code>yield</code> is a keyword that is used like <code>return</code>, except the function will return a generator.</p>\n\n<pre><code>&gt;&gt;&gt; def createGenerator():\n...    mylist = range(3)\n...    for i in mylist:\n...        yield i*i\n...\n&gt;&gt;&gt; mygenerator = createGenerator() # create a generator\n&gt;&gt;&gt; print(mygenerator) # mygenerator is an object!\n&lt;generator object createGenerator at 0xb7555c34&gt;\n&gt;&gt;&gt; for i in mygenerator:\n...     print(i)\n0\n1\n4\n</code></pre>\n\n<p>Here it's a useless example, but it's handy when you know your function will return a huge set of values that you will only need to read once.</p>\n\n<p>To master <code>yield</code>, you must understand that <strong>when you call the function, the code you have written in the function body does not run.</strong> The function only returns the generator object, this is a bit tricky :-)</p>\n\n<p>Then, your code will be run each time the <code>for</code> uses the generator.</p>\n\n<p>Now the hard part:</p>\n\n<p>The first time the <code>for</code> calls the generator object created from your function, it will run the code in your function from the beginning until it hits <code>yield</code>, then it'll return the first value of the loop. Then, each other call will run the loop you have written in the function one more time, and return the next value, until there is no value to return.</p>\n\n<p>The generator is considered empty once the function runs but does not hit <code>yield</code> anymore. It can be because the loop had come to an end, or because you do not satisfy an <code>\"if/else\"</code> anymore.</p>\n\n<hr>\n\n<h2>Your code explained</h2>\n\n<p>Generator:</p>\n\n<pre><code># Here you create the method of the node object that will return the generator\ndef _get_child_candidates(self, distance, min_dist, max_dist):\n\n    # Here is the code that will be called each time you use the generator object:\n\n    # If there is still a child of the node object on its left\n    # AND if distance is ok, return the next child\n    if self._leftchild and distance - max_dist &lt; self._median:\n        yield self._leftchild\n\n    # If there is still a child of the node object on its right\n    # AND if distance is ok, return the next child\n    if self._rightchild and distance + max_dist &gt;= self._median:\n        yield self._rightchild\n\n    # If the function arrives here, the generator will be considered empty\n    # there is no more than two values: the left and the right children\n</code></pre>\n\n<p>Caller:</p>\n\n<pre><code># Create an empty list and a list with the current object reference\nresult, candidates = list(), [self]\n\n# Loop on candidates (they contain only one element at the beginning)\nwhile candidates:\n\n    # Get the last candidate and remove it from the list\n    node = candidates.pop()\n\n    # Get the distance between obj and the candidate\n    distance = node._get_dist(obj)\n\n    # If distance is ok, then you can fill the result\n    if distance &lt;= max_dist and distance &gt;= min_dist:\n        result.extend(node._values)\n\n    # Add the children of the candidate in the candidates list\n    # so the loop will keep running until it will have looked\n    # at all the children of the children of the children, etc. of the candidate\n    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))\n\nreturn result\n</code></pre>\n\n<p>This code contains several smart parts:</p>\n\n<ul>\n<li><p>The loop iterates on a list but the list expands while the loop is being iterated :-) It's a concise way to go through all these nested data even if it's a bit dangerous since you can end up with an infinite loop. In this case, <code>candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))</code> exhausts all the values of the generator, but <code>while</code> keeps creating new generator objects which will produce different values from the previous ones since it's not applied on the same node.</p></li>\n<li><p>The <code>extend()</code> method is a list object method that expects an iterable and adds its values to the list.</p></li>\n</ul>\n\n<p>Usually we pass a list to it:</p>\n\n<pre><code>&gt;&gt;&gt; a = [1, 2]\n&gt;&gt;&gt; b = [3, 4]\n&gt;&gt;&gt; a.extend(b)\n&gt;&gt;&gt; print(a)\n[1, 2, 3, 4]\n</code></pre>\n\n<p>But in your code it gets a generator, which is good because:</p>\n\n<ol>\n<li>You don't need to read the values twice.</li>\n<li>You may have a lot of children and you don't want them all stored in memory.</li>\n</ol>\n\n<p>And it works because Python does not care if the argument of a method is a list or not. Python expects iterables so it will work with strings, lists, tuples and generators! This is called duck typing and is one of the reason why Python is so cool. But this is another story, for another question...</p>\n\n<p>You can stop here, or read a little bit to see an advanced use of a generator:</p>\n\n<h2>Controlling a generator exhaustion</h2>\n\n<pre><code>&gt;&gt;&gt; class Bank(): # let's create a bank, building ATMs\n...    crisis = False\n...    def create_atm(self):\n...        while not self.crisis:\n...            yield \"$100\"\n&gt;&gt;&gt; hsbc = Bank() # when everything's ok the ATM gives you as much as you want\n&gt;&gt;&gt; corner_street_atm = hsbc.create_atm()\n&gt;&gt;&gt; print(corner_street_atm.next())\n$100\n&gt;&gt;&gt; print(corner_street_atm.next())\n$100\n&gt;&gt;&gt; print([corner_street_atm.next() for cash in range(5)])\n['$100', '$100', '$100', '$100', '$100']\n&gt;&gt;&gt; hsbc.crisis = True # crisis is coming, no more money!\n&gt;&gt;&gt; print(corner_street_atm.next())\n&lt;type 'exceptions.StopIteration'&gt;\n&gt;&gt;&gt; wall_street_atm = hsbc.create_atm() # it's even true for new ATMs\n&gt;&gt;&gt; print(wall_street_atm.next())\n&lt;type 'exceptions.StopIteration'&gt;\n&gt;&gt;&gt; hsbc.crisis = False # trouble is, even post-crisis the ATM remains empty\n&gt;&gt;&gt; print(corner_street_atm.next())\n&lt;type 'exceptions.StopIteration'&gt;\n&gt;&gt;&gt; brand_new_atm = hsbc.create_atm() # build a new one to get back in business\n&gt;&gt;&gt; for cash in brand_new_atm:\n...    print cash\n$100\n$100\n$100\n$100\n$100\n$100\n$100\n$100\n$100\n...\n</code></pre>\n\n<p>It can be useful for various things like controlling access to a resource.</p>\n\n<h2>Itertools, your best friend</h2>\n\n<p>The itertools module contains special functions to manipulate iterables. Ever wish to duplicate a generator?\nChain two generators? Group values in a nested list with a one liner? <code>Map / Zip</code> without creating another list?</p>\n\n<p>Then just <code>import itertools</code>.</p>\n\n<p>An example? Let's see the possible orders of arrival for a 4 horse race:</p>\n\n<pre><code>&gt;&gt;&gt; horses = [1, 2, 3, 4]\n&gt;&gt;&gt; races = itertools.permutations(horses)\n&gt;&gt;&gt; print(races)\n&lt;itertools.permutations object at 0xb754f1dc&gt;\n&gt;&gt;&gt; print(list(itertools.permutations(horses)))\n[(1, 2, 3, 4),\n (1, 2, 4, 3),\n (1, 3, 2, 4),\n (1, 3, 4, 2),\n (1, 4, 2, 3),\n (1, 4, 3, 2),\n (2, 1, 3, 4),\n (2, 1, 4, 3),\n (2, 3, 1, 4),\n (2, 3, 4, 1),\n (2, 4, 1, 3),\n (2, 4, 3, 1),\n (3, 1, 2, 4),\n (3, 1, 4, 2),\n (3, 2, 1, 4),\n (3, 2, 4, 1),\n (3, 4, 1, 2),\n (3, 4, 2, 1),\n (4, 1, 2, 3),\n (4, 1, 3, 2),\n (4, 2, 1, 3),\n (4, 2, 3, 1),\n (4, 3, 1, 2),\n (4, 3, 2, 1)]\n</code></pre>\n\n<h2>Understanding the inner mechanisms of iteration</h2>\n\n<p>Iteration is a process implying iterables (implementing the <code>__iter__()</code> method) and iterators (implementing the <code>__next__()</code> method).\nIterables are any objects you can get an iterator from. Iterators are objects that let you iterate on iterables.</p>\n\n<p>More about it in this article about <a href=\"http://effbot.org/zone/python-for-statement.htm\" rel=\"noreferrer\">how does the for loop work</a>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I need a good explanation (references are a plus) on Python's slice notation. </p>\n\n<p>To me, this notation needs a bit of picking up. </p>\n\n<p>It looks extremely powerful, but I haven't quite got my head around it.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It's pretty simple really:</p>\n\n<pre><code>a[start:end] # items start through end-1\na[start:]    # items start through the rest of the array\na[:end]      # items from the beginning through end-1\na[:]         # a copy of the whole array\n</code></pre>\n\n<p>There is also the <code>step</code> value, which can be used with any of the above:</p>\n\n<pre><code>a[start:end:step] # start through not past end, by step\n</code></pre>\n\n<p>The key point to remember is that the <code>:end</code> value represents the first value that is <em>not</em> in the selected slice. So, the difference beween <code>end</code> and <code>start</code> is the number of elements selected (if <code>step</code> is 1, the default).</p>\n\n<p>The other feature is that <code>start</code> or <code>end</code> may be a <em>negative</em> number, which means it counts from the end of the array instead of the beginning. So:</p>\n\n<pre><code>a[-1]    # last item in the array\na[-2:]   # last two items in the array\na[:-2]   # everything except the last two items\n</code></pre>\n\n<p>Python is kind to the programmer if there are fewer items than you ask for. For example, if you ask for <code>a[:-2]</code> and <code>a</code> only contains one element, you get an empty list instead of an error. Sometimes you would prefer the error, so you have to be aware that this may happen.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I wanted to test if a key exists in a dictionary before updating the value for the key.\nI wrote the following code:</p>\n\n<pre><code>if 'key1' in dict.keys():\n  print \"blah\"\nelse:\n  print \"boo\"\n</code></pre>\n\n<p>I think this is not the best way to accomplish this task. Is there a better way to test for a key in the dictionary?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>in</code> is the intended way to test for the existence of a key in a <code>dict</code>.</p>\n\n<pre><code>d = dict()\n\nfor i in xrange(100):\n    key = i % 10\n    if key in d:\n        d[key] += 1\n    else:\n        d[key] = 1\n</code></pre>\n\n<p>If you wanted a default, you can always use <code>dict.get()</code>:</p>\n\n<pre><code>d = dict()\n\nfor i in xrange(100):\n    key = i % 10\n    d[key] = d.get(key, 0) + 1\n</code></pre>\n\n<p>... and if you wanted to always ensure a default value for any key you can use <code>defaultdict</code> from the <code>collections</code> module, like so:</p>\n\n<pre><code>from collections import defaultdict\n\nd = defaultdict(lambda: 0)\n\nfor i in xrange(100):\n    d[i % 10] += 1\n</code></pre>\n\n<p>... but in general, the <code>in</code> keyword is the best way to do it.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/222877/what-does-super-do-in-python\" dir=\"ltr\">What does 'super' do in Python?</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    5 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>I'm trying to understand <code>super()</code>. From the looks of it, both child classes can be created just fine. I'm curious as to what difference there actually is between the following child classes:</p>\n\n<pre><code>class Base(object):\n    def __init__(self):\n        print \"Base created\"\n\nclass ChildA(Base):\n    def __init__(self):\n        Base.__init__(self)\n\nclass ChildB(Base):\n    def __init__(self):\n        super(ChildB, self).__init__()\n\nChildA() \nChildB()\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>super()</code> lets you avoid referring to the base class explicitly, which can be nice. But the main advantage comes with multiple inheritance, where all sorts of <a href=\"http://www.artima.com/weblogs/viewpost.jsp?thread=236275\" rel=\"noreferrer\">fun stuff</a> can happen. See the <a href=\"https://docs.python.org/2/library/functions.html#super\" rel=\"noreferrer\">standard docs on super</a> if you haven't already.</p>\n\n<p>Note that the syntax changed in Python 3.0: you can just say <code>super().__init__()</code> instead of <code>super(ChildB, self).__init__()</code> which IMO is quite a bit nicer.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>For a list <code>[\"foo\", \"bar\", \"baz\"]</code> and an item in the list <code>\"bar\"</code>, what's the cleanest way to get its index (1) in Python?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>&gt;&gt;&gt; [\"foo\", \"bar\", \"baz\"].index(\"bar\")\n1\n</code></pre>\n\n<p>Reference: <a href=\"http://docs.python.org/2/tutorial/datastructures.html#more-on-lists\" rel=\"noreferrer\">Data Structures &gt; More on Lists</a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What is the difference between <code>__str__</code> and <code>__repr__</code> in <code>Python</code>?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Alex summarized well but, surprisingly, was too succinct.</p>\n\n<p>First, let me reiterate the main points in Alex\u2019s post:</p>\n\n<ul>\n<li>The default implementation is useless (it\u2019s hard to think of one which wouldn\u2019t be, but yeah)</li>\n<li><code>__repr__</code> goal is to be unambiguous</li>\n<li><code>__str__</code> goal is to be readable</li>\n<li>Container\u2019s <code>__str__</code> uses contained objects\u2019 <code>__repr__</code></li>\n</ul>\n\n<p><strong>Default implementation is useless</strong></p>\n\n<p>This is mostly a surprise because Python\u2019s defaults tend to be fairly useful. However, in this case, having a default for <code>__repr__</code> which would act like:</p>\n\n<pre><code>return \"%s(%r)\" % (self.__class__, self.__dict__)\n</code></pre>\n\n<p>would have been too dangerous (for example, too easy to get into infinite recursion if objects reference each other). So Python cops out. Note that there is one default which is true: if <code>__repr__</code> is defined, and <code>__str__</code> is not, the object will behave as though <code>__str__=__repr__</code>.</p>\n\n<p>This means, in simple terms: almost every object you implement should have a functional <code>__repr__</code> that\u2019s usable for understanding the object. Implementing <code>__str__</code> is optional: do that if you need a \u201cpretty print\u201d functionality (for example, used by a report generator).</p>\n\n<p><strong>The goal of <code>__repr__</code> is to be unambiguous</strong></p>\n\n<p>Let me come right out and say it \u2014 I do not believe in debuggers. I don\u2019t really know how to use any debugger, and have never used one seriously. Furthermore, I believe that the big fault in debuggers is their basic nature \u2014 most failures I debug happened a long long time ago, in a galaxy far far away. This means that I do believe, with religious fervor, in logging. Logging is the lifeblood of any decent fire-and-forget server system. Python makes it easy to log: with maybe some project specific wrappers, all you need is a</p>\n\n<pre><code>log(INFO, \"I am in the weird function and a is\", a, \"and b is\", b, \"but I got a null C \u2014 using default\", default_c)\n</code></pre>\n\n<p>But you have to do the last step \u2014 make sure every object you implement has a useful repr, so code like that can just work. This is why the \u201ceval\u201d thing comes up: if you have enough information so <code>eval(repr(c))==c</code>, that means you know everything there is to know about <code>c</code>. If that\u2019s easy enough, at least in a fuzzy way, do it. If not, make sure you have enough information about <code>c</code> anyway. I usually use an eval-like format: <code>\"MyClass(this=%r,that=%r)\" % (self.this,self.that)</code>. It does not mean that you can actually construct MyClass, or that those are the right constructor arguments \u2014 but it is a useful form to express \u201cthis is everything you need to know about this instance\u201d.</p>\n\n<p>Note: I used <code>%r</code> above, not <code>%s</code>. You always want to use <code>repr()</code> [or <code>%r</code> formatting character, equivalently] inside <code>__repr__</code> implementation, or you\u2019re defeating the goal of repr. You want to be able to differentiate <code>MyClass(3)</code> and <code>MyClass(\"3\")</code>.</p>\n\n<p><strong>The goal of <code>__str__</code> is to be readable</strong></p>\n\n<p>Specifically, it is not intended to be unambiguous \u2014 notice that <code>str(3)==str(\"3\")</code>. Likewise, if you implement an IP abstraction, having the str of it look like 192.168.1.1 is just fine. When implementing a date/time abstraction, the str can be \"2010/4/12 15:35:22\", etc. The goal is to represent it in a way that a user, not a programmer, would want to read it. Chop off useless digits, pretend to be some other class \u2014 as long is it supports readability, it is an improvement.</p>\n\n<p><strong>Container\u2019s <code>__str__</code> uses contained objects\u2019 <code>__repr__</code></strong></p>\n\n<p>This seems surprising, doesn\u2019t it? It is a little, but how readable would</p>\n\n<pre><code>[moshe is, 3, hello\nworld, this is a list, oh I don't know, containing just 4 elements]\n</code></pre>\n\n<p>be? Not very. Specifically, the strings in a container would find it way too easy to disturb its string representation. In the face of ambiguity, remember, Python resists the temptation to guess. If you want the above behavior when you\u2019re printing a list, just</p>\n\n<pre><code>print \"[\"+\", \".join(l)+\"]\"\n</code></pre>\n\n<p>(you can probably also figure out what to do about dictionaries.</p>\n\n<p><strong>Summary</strong></p>\n\n<p>Implement <code>__repr__</code> for any class you implement. This should be second nature. Implement <code>__str__</code> if you think it would be useful to have a string version which errs on the side of more readability in favor of more ambiguity.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>The Python documentation seems unclear about whether parameters are passed by reference or value, and the following code produces the unchanged value 'Original'</p>\n\n<pre><code>class PassByReference:\n    def __init__(self):\n        self.variable = 'Original'\n        self.change(self.variable)\n        print(self.variable)\n\n    def change(self, var):\n        var = 'Changed'\n</code></pre>\n\n<p>Is there something I can do to pass the variable by actual reference?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Arguments are <a href=\"http://docs.python.org/3/faq/programming.html#how-do-i-write-a-function-with-output-parameters-call-by-reference\" rel=\"noreferrer\">passed by assignment</a>. The rationale behind this is twofold:</p>\n\n<ol>\n<li>the parameter passed in is actually a <em>reference</em> to an object (but the reference is passed by value)</li>\n<li>some data types are mutable, but others aren't</li>\n</ol>\n\n<p>So:</p>\n\n<ul>\n<li><p>If you pass a <em>mutable</em> object into a method, the method gets a reference to that same object and you can mutate it to your heart's delight, but if you rebind the reference in the method, the outer scope will know nothing about it, and after you're done, the outer reference will still point at the original object. </p></li>\n<li><p>If you pass an <em>immutable</em> object to a method, you still can't rebind the outer reference, and you can't even mutate the object.</p></li>\n</ul>\n\n<p>To make it even more clear, let's have some examples. </p>\n\n<h2>List - a mutable type</h2>\n\n<p><strong>Let's try to modify the list that was passed to a method:</strong></p>\n\n<pre><code>def try_to_change_list_contents(the_list):\n    print('got', the_list)\n    the_list.append('four')\n    print('changed to', the_list)\n\nouter_list = ['one', 'two', 'three']\n\nprint('before, outer_list =', outer_list)\ntry_to_change_list_contents(outer_list)\nprint('after, outer_list =', outer_list)\n</code></pre>\n\n<p>Output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>before, outer_list = ['one', 'two', 'three']\ngot ['one', 'two', 'three']\nchanged to ['one', 'two', 'three', 'four']\nafter, outer_list = ['one', 'two', 'three', 'four']\n</code></pre>\n\n<p>Since the parameter passed in is a reference to <code>outer_list</code>, not a copy of it, we can use the mutating list methods to change it and have the changes reflected in the outer scope.</p>\n\n<p><strong>Now let's see what happens when we try to change the reference that was passed in as a parameter:</strong></p>\n\n<pre><code>def try_to_change_list_reference(the_list):\n    print('got', the_list)\n    the_list = ['and', 'we', 'can', 'not', 'lie']\n    print('set to', the_list)\n\nouter_list = ['we', 'like', 'proper', 'English']\n\nprint('before, outer_list =', outer_list)\ntry_to_change_list_reference(outer_list)\nprint('after, outer_list =', outer_list)\n</code></pre>\n\n<p>Output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>before, outer_list = ['we', 'like', 'proper', 'English']\ngot ['we', 'like', 'proper', 'English']\nset to ['and', 'we', 'can', 'not', 'lie']\nafter, outer_list = ['we', 'like', 'proper', 'English']\n</code></pre>\n\n<p>Since the <code>the_list</code> parameter was passed by value, assigning a new list to it had no effect that the code outside the method could see. The <code>the_list</code> was a copy of the <code>outer_list</code> reference, and we had <code>the_list</code> point to a new list, but there was no way to change where <code>outer_list</code> pointed.</p>\n\n<h2>String - an immutable type</h2>\n\n<p><strong>It's immutable, so there's nothing we can do to change the contents of the string</strong></p>\n\n<p><strong>Now, let's try to change the reference</strong></p>\n\n<pre><code>def try_to_change_string_reference(the_string):\n    print('got', the_string)\n    the_string = 'In a kingdom by the sea'\n    print('set to', the_string)\n\nouter_string = 'It was many and many a year ago'\n\nprint('before, outer_string =', outer_string)\ntry_to_change_string_reference(outer_string)\nprint('after, outer_string =', outer_string)\n</code></pre>\n\n<p>Output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>before, outer_string = It was many and many a year ago\ngot It was many and many a year ago\nset to In a kingdom by the sea\nafter, outer_string = It was many and many a year ago\n</code></pre>\n\n<p>Again, since the <code>the_string</code> parameter was passed by value, assigning a new string to it had no effect that the code outside the method could see. The <code>the_string</code> was a copy of the <code>outer_string</code> reference, and we had <code>the_string</code> point to a new string, but there was no way to change where <code>outer_string</code> pointed.</p>\n\n<p>I hope this clears things up a little.</p>\n\n<p><strong>EDIT:</strong> It's been noted that this doesn't answer the question that @David originally asked, \"Is there something I can do to pass the variable by actual reference?\". Let's work on that.</p>\n\n<h2>How do we get around this?</h2>\n\n<p>As @Andrea's answer shows, you could return the new value. This doesn't change the way things are passed in, but does let you get the information you want back out:</p>\n\n<pre><code>def return_a_whole_new_string(the_string):\n    new_string = something_to_do_with_the_old_string(the_string)\n    return new_string\n\n# then you could call it like\nmy_string = return_a_whole_new_string(my_string)\n</code></pre>\n\n<p>If you really wanted to avoid using a return value, you could create a class to hold your value and pass it into the function or use an existing class, like a list:</p>\n\n<pre><code>def use_a_wrapper_to_simulate_pass_by_reference(stuff_to_change):\n    new_string = something_to_do_with_the_old_string(stuff_to_change[0])\n    stuff_to_change[0] = new_string\n\n# then you could call it like\nwrapper = [my_string]\nuse_a_wrapper_to_simulate_pass_by_reference(wrapper)\n\ndo_something_with(wrapper[0])\n</code></pre>\n\n<p>Although this seems a little cumbersome.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>We are working on an <a href=\"http://en.wikipedia.org/wiki/S60_%28software_platform%29\" rel=\"noreferrer\">S60</a> version and this platform has a nice Python API. </p>\n\n<p>However, there is nothing official about Python on Android, but since <a href=\"http://en.wikipedia.org/wiki/Jython\" rel=\"noreferrer\">Jython</a> exists, is there a way to let the snake and the robot work together?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>One way is to use <a href=\"http://kivy.org/\" rel=\"noreferrer\">Kivy</a>:</p>\n\n<blockquote>\n  <p>Open source Python library for rapid development of applications\n  that make use of innovative user interfaces, such as multi-touch apps.</p>\n</blockquote>\n\n<p></p>\n\n<blockquote>\n  <p>Kivy runs on Linux, Windows, OS X, Android and iOS. You can run the same [python] code on all supported platforms.</p>\n</blockquote>\n\n<p><a href=\"https://play.google.com/store/apps/details?id=org.kivy.showcase\" rel=\"noreferrer\">Kivy Showcase app</a>  </p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Anyone tinkering with Python long enough has been bitten (or torn to pieces) by the following issue:</p>\n\n<pre><code>def foo(a=[]):\n    a.append(5)\n    return a\n</code></pre>\n\n<p>Python novices would expect this function to always return a list with only one element: <code>[5]</code>. The result is instead very different, and very astonishing (for a novice):</p>\n\n<pre><code>&gt;&gt;&gt; foo()\n[5]\n&gt;&gt;&gt; foo()\n[5, 5]\n&gt;&gt;&gt; foo()\n[5, 5, 5]\n&gt;&gt;&gt; foo()\n[5, 5, 5, 5]\n&gt;&gt;&gt; foo()\n</code></pre>\n\n<p>A manager of mine once had his first encounter with this feature, and called it \"a dramatic design flaw\" of the language. I replied that the behavior had an underlying explanation, and it is indeed very puzzling and unexpected if you don't understand the internals. However, I was not able to answer (to myself) the following question: what is the reason for binding the default argument at function definition, and not at function execution? I doubt the experienced behavior has a practical use (who really used static variables in C, without breeding bugs?)</p>\n\n<p><strong>Edit</strong>: </p>\n\n<p>Baczek made an interesting example. Together with most of your comments and Utaal's in particular, I elaborated further:</p>\n\n<pre><code>&gt;&gt;&gt; def a():\n...     print(\"a executed\")\n...     return []\n... \n&gt;&gt;&gt;            \n&gt;&gt;&gt; def b(x=a()):\n...     x.append(5)\n...     print(x)\n... \na executed\n&gt;&gt;&gt; b()\n[5]\n&gt;&gt;&gt; b()\n[5, 5]\n</code></pre>\n\n<p>To me, it seems that the design decision was relative to where to put the scope of parameters: inside the function or \"together\" with it?</p>\n\n<p>Doing the binding inside the function would mean that <code>x</code> is effectively bound to the specified default when the function is called, not defined, something that would present a deep flaw: the <code>def</code> line would be \"hybrid\" in the sense that part of the binding (of the function object) would happen at definition, and part (assignment of default parameters) at function invocation time.</p>\n\n<p>The actual behavior is more consistent: everything of that line gets evaluated when that line is executed, meaning at function definition.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Actually, this is not a design flaw, and it is not because of internals, or performance.<br>\nIt comes simply from the fact that functions in Python are first-class objects, and not only a piece of code.</p>\n\n<p>As soon as you get to think into this way, then it completely makes sense: a function is an object being evaluated on its definition; default parameters are kind of \"member data\" and therefore their state may change from one call to the other - exactly as in any other object.</p>\n\n<p>In any case, Effbot has a very nice explanation of the reasons for this behavior in <a href=\"http://effbot.org/zone/default-values.htm\" rel=\"noreferrer\">Default Parameter Values in Python</a>.<br>\nI found it very clear, and I really suggest reading it for a better knowledge of how function objects work.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p><a href=\"https://pip.pypa.io/en/stable/\" rel=\"noreferrer\"><code>pip</code></a> is a replacement for <a href=\"http://setuptools.readthedocs.io/en/latest/easy_install.html\" rel=\"noreferrer\"><code>easy_install</code></a>. But should I install <code>pip</code> using <code>easy_install</code> on Windows?  Is there a better way?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<h2>Python 2.7.9+ and 3.4+</h2>\n\n<p>Good news! <a href=\"https://docs.python.org/3/whatsnew/3.4.html\" rel=\"noreferrer\">Python 3.4</a> (released March 2014) and <a href=\"https://docs.python.org/2/whatsnew/2.7.html#pep-477-backport-ensurepip-pep-453-to-python-2-7\" rel=\"noreferrer\">Python 2.7.9</a> (released December 2014) ship with Pip. This is the best feature of any Python release. It makes the community's wealth of libraries accessible to everyone. Newbies are no longer excluded from using community libraries by the prohibitive difficulty of setup. In shipping with a package manager, Python joins <a href=\"http://en.wikipedia.org/wiki/Ruby_%28programming_language%29\" rel=\"noreferrer\">Ruby</a>, <a href=\"http://en.wikipedia.org/wiki/Node.js\" rel=\"noreferrer\">Node.js</a>, <a href=\"http://en.wikipedia.org/wiki/Haskell_%28programming_language%29\" rel=\"noreferrer\">Haskell</a>, <a href=\"http://en.wikipedia.org/wiki/Perl\" rel=\"noreferrer\">Perl</a>, <a href=\"http://en.wikipedia.org/wiki/Go_%28programming_language%29\" rel=\"noreferrer\">Go</a>--almost every other contemporary language with a majority open-source community. Thank you Python.</p>\n\n<p>Of course, that doesn't mean Python packaging is problem solved. The experience remains frustrating. I discuss this <a href=\"https://stackoverflow.com/questions/2436731/does-python-have-a-package-module-management-system/13445719#13445719\">in Stack Overflow question <em>Does Python have a package/module management system?</em></a>.</p>\n\n<p>And, alas for everyone using Python 2.7.8 or earlier (a sizable portion of the community). There's no plan to ship Pip to you. Manual instructions follow.</p>\n\n<h2>Python 2 \u2264 2.7.8 and Python 3 \u2264 3.3</h2>\n\n<p>Flying in the face of its <a href=\"http://www.python.org/about/\" rel=\"noreferrer\">'batteries included'</a> motto, Python ships without a package manager. To make matters worse, Pip was--until recently--ironically difficult to install.</p>\n\n<h3>Official instructions</h3>\n\n<p>Per <a href=\"https://pip.pypa.io/en/stable/installing/#do-i-need-to-install-pip\" rel=\"noreferrer\">https://pip.pypa.io/en/stable/installing/#do-i-need-to-install-pip</a>:</p>\n\n<p>Download <a href=\"https://bootstrap.pypa.io/get-pip.py\" rel=\"noreferrer\"><code>get-pip.py</code></a>, being careful to save it as a <code>.py</code> file rather than <code>.txt</code>. Then, run it from the command prompt:</p>\n\n<pre><code>python get-pip.py\n</code></pre>\n\n<p>You possibly need an administrator command prompt to do this. Follow <em><a href=\"http://technet.microsoft.com/en-us/library/cc947813(v=ws.10).aspx\" rel=\"noreferrer\">Start a Command Prompt as an Administrator</a></em> (Microsoft TechNet).</p>\n\n<p>This installs the pip package, which (in Windows) contains ...\\Scripts\\pip.exe that path must be in PATH environment variable to use pip from the command line (see second part of 'Alternative Instructions' for adding it to your PATH,</p>\n\n<h3>Alternative instructions</h3>\n\n<p>The official documentation tells users to install Pip and each of its dependencies from source. That's tedious for the experienced, and prohibitively difficult for newbies.</p>\n\n<p>For our sake, Christoph Gohlke prepares Windows installers (<code>.msi</code>) for popular Python packages. He builds installers for all Python versions, both 32 and 64 bit. You need to:</p>\n\n<ol>\n<li><a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/#setuptools\" rel=\"noreferrer\">Install setuptools</a></li>\n<li><a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/#pip\" rel=\"noreferrer\">Install pip</a></li>\n</ol>\n\n<p>For me, this installed Pip at <code>C:\\Python27\\Scripts\\pip.exe</code>. Find <code>pip.exe</code> on your computer, then add its folder (for example, <code>C:\\Python27\\Scripts</code>) to your path (Start / Edit environment variables). Now you should be able to run <code>pip</code> from the command line. Try installing a package:</p>\n\n<pre><code>pip install httpie\n</code></pre>\n\n<p>There you go (hopefully)! Solutions for common problems are given below:</p>\n\n<h3>Proxy problems</h3>\n\n<p>If you work in an office, you might be behind a HTTP proxy. If so, set the environment variables <a href=\"http://docs.python.org/2/library/urllib.html\" rel=\"noreferrer\"><code>http_proxy</code> and <code>https_proxy</code></a>. Most Python applications (and other free software) respect these. Example syntax:</p>\n\n<pre><code>http://proxy_url:port\nhttp://username:password@proxy_url:port\n</code></pre>\n\n<p>If you're really unlucky, your proxy might be a Microsoft <a href=\"https://en.wikipedia.org/wiki/NT_LAN_Manager\" rel=\"noreferrer\">NTLM</a> proxy. Free software can't cope. The only solution is to install a free software friendly proxy that forwards to the nasty proxy. <a href=\"http://cntlm.sourceforge.net/\" rel=\"noreferrer\">http://cntlm.sourceforge.net/</a></p>\n\n<h3>Unable to find vcvarsall.bat</h3>\n\n<p>Python modules can be part written in C or C++. Pip tries to compile from source. If you don't have a C/C++ compiler installed and configured, you'll see this cryptic error message.</p>\n\n<blockquote>\n  <p>Error: Unable to find vcvarsall.bat</p>\n</blockquote>\n\n<p>You can fix that by <a href=\"https://stackoverflow.com/questions/2817869/error-unable-to-find-vcvarsall-bat\">installing a C++ compiler</a> such as <a href=\"http://en.wikipedia.org/wiki/MinGW\" rel=\"noreferrer\">MinGW</a> or <a href=\"http://en.wikipedia.org/wiki/Visual_C%2B%2B#32-bit_versions\" rel=\"noreferrer\">Visual C++</a>. Microsoft actually ship one specifically for use with Python. Or try <em><a href=\"http://aka.ms/vcpython27\" rel=\"noreferrer\">Microsoft Visual C++ Compiler for Python 2.7</a></em>.</p>\n\n<p>Often though it's easier to check <a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/\" rel=\"noreferrer\">Christoph's site</a> for your package.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How do I access the index itself for a list like the following?</p>\n\n<pre><code>ints = [8, 23, 45, 12, 78]\n</code></pre>\n\n<p>When I loop through it using a <code>for</code> loop, how do I access the loop index, from 1 to 5 in this case?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Using an additional state variable, such as an index variable (which you would normally use in languages such as C or PHP), is considered non-pythonic.</p>\n\n<p>The better option is to use the built-in function <a href=\"https://docs.python.org/3/library/functions.html#enumerate\" rel=\"noreferrer\" title=\"enumerate\"><code>enumerate()</code></a>, available in both Python 2 and 3:</p>\n\n<pre><code>for idx, val in enumerate(ints):\n    print(idx, val)\n</code></pre>\n\n<p>Check out <a href=\"https://www.python.org/dev/peps/pep-0279/\" rel=\"noreferrer\" title=\"PEP 279\">PEP 279</a> for more.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>If I create a global variable in one function, how can I use that variable in another function?<br>\nDo I need to store the global variable in a local variable of the function which needs its access?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use a global variable in other functions by declaring it as <code>global</code> in each function that assigns to it:</p>\n\n<pre><code>globvar = 0\n\ndef set_globvar_to_one():\n    global globvar    # Needed to modify global copy of globvar\n    globvar = 1\n\ndef print_globvar():\n    print(globvar)     # No need for global declaration to read value of globvar\n\nset_globvar_to_one()\nprint_globvar()       # Prints 1\n</code></pre>\n\n<p>I imagine the reason for it is that, since global variables are so dangerous, Python wants to make sure that you really know that's what you're playing with by explicitly requiring the <code>global</code> keyword.</p>\n\n<p>See other answers if you want to share a global variable across modules.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How can I list all files of a directory in Python and add them to a list?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"https://docs.python.org/2/library/os.html#os.listdir\" rel=\"noreferrer\" title=\"os.listdir\"><code>os.listdir()</code></a> will get you everything that's in a directory - files and directories.</p>\n\n<p>If you want <em>just</em> files, you could either filter this down using <a href=\"https://docs.python.org/2/library/os.path.html#module-os.path\" rel=\"noreferrer\"><code>os.path</code></a>:</p>\n\n<pre><code>from os import listdir\nfrom os.path import isfile, join\nonlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]\n</code></pre>\n\n<p>or you could use <a href=\"https://docs.python.org/2/library/os.html#os.walk\" rel=\"noreferrer\" title=\"os.walk\"><code>os.walk()</code></a> which will yield two lists for each directory it visits - splitting into files and dirs for you. If you only want the top directory you can just break the first time it yields</p>\n\n<pre><code>from os import walk\n\nf = []\nfor (dirpath, dirnames, filenames) in walk(mypath):\n    f.extend(filenames)\n    break\n</code></pre>\n\n<p>And lastly, as that example shows, adding one list to another you can either use <a href=\"https://docs.python.org/3/tutorial/datastructures.html#more-on-lists\" rel=\"noreferrer\"><code>.extend()</code></a> or </p>\n\n<pre><code>&gt;&gt;&gt; q = [1, 2, 3]\n&gt;&gt;&gt; w = [4, 5, 6]\n&gt;&gt;&gt; q = q + w\n&gt;&gt;&gt; q\n[1, 2, 3, 4, 5, 6]\n</code></pre>\n\n<p>Personally, I prefer <code>.extend()</code></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm looking for a <code>string.contains</code> or <code>string.indexof</code> method in Python.</p>\n\n<p>I want to do:</p>\n\n<pre><code>if not somestring.contains(\"blah\"):\n   continue\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use the <a href=\"https://docs.python.org/reference/expressions.html#membership-test-details\" rel=\"noreferrer\"><code>in</code> operator</a>:</p>\n\n<pre><code>if \"blah\" not in somestring: \n    continue\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What is the difference between a function decorated with <a href=\"http://docs.python.org/library/functions.html#staticmethod\" rel=\"noreferrer\"><code>@staticmethod</code></a> and one decorated with <a href=\"http://docs.python.org/library/functions.html#classmethod\" rel=\"noreferrer\"><code>@classmethod</code></a>?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Maybe a bit of example code will help: Notice the difference in the call signatures of <code>foo</code>, <code>class_foo</code> and <code>static_foo</code>:</p>\n\n<pre><code>class A(object):\n    def foo(self,x):\n        print \"executing foo(%s,%s)\"%(self,x)\n\n    @classmethod\n    def class_foo(cls,x):\n        print \"executing class_foo(%s,%s)\"%(cls,x)\n\n    @staticmethod\n    def static_foo(x):\n        print \"executing static_foo(%s)\"%x    \n\na=A()\n</code></pre>\n\n<p>Below is the usual way an object instance calls a method. The object instance, <code>a</code>, is implicitly passed as the first argument.</p>\n\n<pre><code>a.foo(1)\n# executing foo(&lt;__main__.A object at 0xb7dbef0c&gt;,1)\n</code></pre>\n\n<hr>\n\n<p><strong>With classmethods</strong>, the class of the object instance is implicitly passed as the first argument instead of <code>self</code>.</p>\n\n<pre><code>a.class_foo(1)\n# executing class_foo(&lt;class '__main__.A'&gt;,1)\n</code></pre>\n\n<p>You can also call <code>class_foo</code> using the class. In fact, if you define something to be\na classmethod, it is probably because you intend to call it from the class rather than from a class instance. <code>A.foo(1)</code> would have raised a TypeError, but <code>A.class_foo(1)</code> works just fine:</p>\n\n<pre><code>A.class_foo(1)\n# executing class_foo(&lt;class '__main__.A'&gt;,1)\n</code></pre>\n\n<p>One use people have found for class methods is to create <a href=\"https://stackoverflow.com/a/1950927/190597\">inheritable alternative constructors</a>.</p>\n\n<hr>\n\n<p><strong>With staticmethods</strong>, neither <code>self</code> (the object instance) nor  <code>cls</code> (the class) is implicitly passed as the first argument. They behave like plain functions except that you can call them from an instance or the class:</p>\n\n<pre><code>a.static_foo(1)\n# executing static_foo(1)\n\nA.static_foo('hi')\n# executing static_foo(hi)\n</code></pre>\n\n<p>Staticmethods are used to group functions which have some logical connection with a class to the class.</p>\n\n<hr>\n\n<p><code>foo</code> is just a function, but when you call <code>a.foo</code> you don't just get the function,\nyou get a \"partially applied\" version of the function with the object instance <code>a</code> bound as the first argument to the function. <code>foo</code> expects 2 arguments, while <code>a.foo</code> only expects 1 argument.</p>\n\n<p><code>a</code> is bound to <code>foo</code>. That is what is meant by the term \"bound\" below:</p>\n\n<pre><code>print(a.foo)\n# &lt;bound method A.foo of &lt;__main__.A object at 0xb7d52f0c&gt;&gt;\n</code></pre>\n\n<p>With <code>a.class_foo</code>, <code>a</code> is not bound to <code>class_foo</code>, rather the class <code>A</code> is bound to <code>class_foo</code>.</p>\n\n<pre><code>print(a.class_foo)\n# &lt;bound method type.class_foo of &lt;class '__main__.A'&gt;&gt;\n</code></pre>\n\n<p>Here, with a staticmethod, even though it is a method, <code>a.static_foo</code> just returns\na good 'ole function with no arguments bound. <code>static_foo</code> expects 1 argument, and\n<code>a.static_foo</code> expects 1 argument too.</p>\n\n<pre><code>print(a.static_foo)\n# &lt;function static_foo at 0xb7d479cc&gt;\n</code></pre>\n\n<p>And of course the same thing happens when you call <code>static_foo</code> with the class <code>A</code> instead.</p>\n\n<pre><code>print(A.static_foo)\n# &lt;function static_foo at 0xb7d479cc&gt;\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is there a way to convert an entire user inputted string from uppercase, or even part uppercase to lowercase? </p>\n\n<p>E.g. Kilometers --&gt; kilometers.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>s = \"Kilometer\"\nprint(s.lower())\n</code></pre>\n\n<p>The official documentation is <a href=\"https://docs.python.org/3.4/library/stdtypes.html?highlight=str.lower#str.lower\" rel=\"noreferrer\"><code>str.lower()</code></a>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>For example, if passed the following:</p>\n\n<pre><code>a = []\n</code></pre>\n\n<p>How do I check to see if <code>a</code> is empty?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>if not a:\n  print(\"List is empty\")\n</code></pre>\n\n<p>Using the implicit booleanness of the empty list is quite pythonic.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How can I raise an exception in Python so that it can later be caught via an <code>except</code> block?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<blockquote>\n  <h1>How do I manually throw/raise an exception in Python?</h1>\n</blockquote>\n\n<p><a href=\"https://docs.python.org/3/library/exceptions.html#exception-hierarchy\" rel=\"noreferrer\">Use the most specific Exception constructor that semantically fits your issue</a>.  </p>\n\n<p>Be specific in your message, e.g.:</p>\n\n<pre><code>raise ValueError('A very specific bad thing happened')\n</code></pre>\n\n<h1>Don't raise generic exceptions:</h1>\n\n<p>Avoid raising a generic Exception, to catch it, you'll have to catch all other more specific exceptions that subclass it.</p>\n\n<h2>Problem 1: Hiding bugs</h2>\n\n<pre><code>raise Exception('I know Python!') # don't, if you catch, likely to hide bugs.\n</code></pre>\n\n<p>For example:</p>\n\n<pre><code>def demo_bad_catch():\n    try:\n        raise ValueError('represents a hidden bug, do not catch this')\n        raise Exception('This is the exception you expect to handle')\n    except Exception as error:\n        print('caught this error: ' + repr(error))\n\n&gt;&gt;&gt; demo_bad_catch()\ncaught this error: ValueError('represents a hidden bug, do not catch this',)\n</code></pre>\n\n<h2>Problem 2: Won't catch</h2>\n\n<p>and more specific catches won't catch the general exception:</p>\n\n<pre><code>def demo_no_catch():\n    try:\n        raise Exception('general exceptions not caught by specific handling')\n    except ValueError as e:\n        print('we will not catch e')\n\n\n&gt;&gt;&gt; demo_no_catch()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;stdin&gt;\", line 3, in demo_no_catch\nException: general exceptions not caught by specific handling\n</code></pre>\n\n<h1>Best Practice:</h1>\n\n<h2><code>raise</code> statement</h2>\n\n<p><a href=\"https://docs.python.org/3/library/exceptions.html#exception-hierarchy\" rel=\"noreferrer\">Instead, use the most specific Exception constructor that semantically fits your issue</a>.</p>\n\n<pre><code>raise ValueError('A very specific bad thing happened')\n</code></pre>\n\n<p>which also handily allows an arbitrary number of arguments to be passed to the constructor. This works in Python 2 and 3.</p>\n\n<pre><code>raise ValueError('A very specific bad thing happened', 'foo', 'bar', 'baz') \n</code></pre>\n\n<p>These arguments are accessed by the <code>args</code> attribute on the Exception object. For example:</p>\n\n<pre><code>try:\n    some_code_that_may_raise_our_value_error()\nexcept ValueError as err:\n    print(err.args)\n</code></pre>\n\n<p>prints </p>\n\n<pre><code>('message', 'foo', 'bar', 'baz')    \n</code></pre>\n\n<p>In Python 2.5, an actual <code>message</code> attribute was added to BaseException in favor of encouraging users to subclass Exceptions and stop using <code>args</code>, but <a href=\"http://www.python.org/dev/peps/pep-0352/#retracted-ideas\" rel=\"noreferrer\">the introduction of <code>message</code> and the original deprecation of args has been retracted</a>.</p>\n\n<h2><code>except</code> clause</h2>\n\n<p>When inside an except clause, you might want to, e.g. log that a specific type of error happened, and then reraise. The best way to do this while preserving the stack trace is to use a bare raise statement, e.g.:</p>\n\n<pre><code>logger = logging.getLogger(__name__)\n\ntry:\n    do_something_in_app_that_breaks_easily()\nexcept AppError as error:\n    logger.error(error)\n    raise                 # just this!\n    # raise AppError      # Don't do this, you'll lose the stack trace!\n</code></pre>\n\n<h3>Don't modify your errors... but if you insist.</h3>\n\n<p>You can preserve the stacktrace (and error value) with <code>sys.exc_info()</code>, but <strong>this is way more error prone</strong> and <strong>has compatibility problems between Python 2 and 3</strong>, prefer to use a bare <code>raise</code> to reraise. </p>\n\n<p>To explain - the <code>sys.exc_info()</code> returns the type, value, and traceback. </p>\n\n<pre><code>type, value, traceback = sys.exc_info()\n</code></pre>\n\n<p>This is the syntax in Python 2 - note this is not compatible with Python 3:</p>\n\n<pre><code>    raise AppError, error, sys.exc_info()[2] # avoid this.\n    # Equivalently, as error *is* the second object:\n    raise sys.exc_info()[0], sys.exc_info()[1], sys.exc_info()[2]\n</code></pre>\n\n<p>If you want to, you can modify what happens with your new raise - e.g. setting new args for the instance:</p>\n\n<pre><code>def error():\n    raise ValueError('oops!')\n\ndef catch_error_modify_message():\n    try:\n        error()\n    except ValueError:\n        error_type, error_instance, traceback = sys.exc_info()\n        error_instance.args = (error_instance.args[0] + ' &lt;modification&gt;',)\n        raise error_type, error_instance, traceback\n</code></pre>\n\n<p>And we have preserved the whole traceback while modifying the args. Note that this is <strong>not a best practice</strong> and it is <strong>invalid syntax</strong> in Python 3 (making keeping compatibility much harder to work around).</p>\n\n<pre><code>&gt;&gt;&gt; catch_error_modify_message()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;stdin&gt;\", line 3, in catch_error_modify_message\n  File \"&lt;stdin&gt;\", line 2, in error\nValueError: oops! &lt;modification&gt;\n</code></pre>\n\n<p>In <a href=\"https://docs.python.org/3/reference/simple_stmts.html#the-raise-statement\" rel=\"noreferrer\">Python 3</a>:</p>\n\n<pre><code>    raise error.with_traceback(sys.exc_info()[2])\n</code></pre>\n\n<p>Again: avoid manually manipulating tracebacks. It's <a href=\"https://docs.python.org/2/reference/simple_stmts.html#the-raise-statement\" rel=\"noreferrer\">less efficient</a> and more error prone. And if you're using threading and <code>sys.exc_info</code> you may even get the wrong traceback (especially if you're using exception handling for control flow - which I'd personally tend to avoid.)</p>\n\n<h3>Python 3, Exception chaining</h3>\n\n<p>In Python 3, you can chain Exceptions, which preserve tracebacks:</p>\n\n<pre><code>    raise RuntimeError('specific message') from error\n</code></pre>\n\n<p>Be aware:</p>\n\n<ul>\n<li>this <em>does</em> allow changing the error type raised, and</li>\n<li>this is <em>not</em> compatible with Python 2.</li>\n</ul>\n\n<h2>Deprecated Methods:</h2>\n\n<p>These can easily hide and even get into production code. You want to raise an exception/error, and doing them will raise an error, <strong>but not the one intended!</strong></p>\n\n<p><a href=\"http://www.python.org/dev/peps/pep-3109/\" rel=\"noreferrer\">Valid in Python 2, but not in Python 3</a> is the following:</p>\n\n<pre><code>raise ValueError, 'message' # Don't do this, it's deprecated!\n</code></pre>\n\n<p>Only <a href=\"https://docs.python.org/2/whatsnew/2.5.html#pep-352-exceptions-as-new-style-classes\" rel=\"noreferrer\">valid in much older versions of Python</a> (2.4 and lower), you may still see people raising strings:</p>\n\n<pre><code>raise 'message' # really really wrong. don't do this.\n</code></pre>\n\n<p>In all modern versions, this will actually raise a TypeError, because you're not raising a BaseException type. If you're not checking for the right exception and don't have a reviewer that's aware of the issue, it could get into production.</p>\n\n<h1>Example Usage:</h1>\n\n<p>I raise Exceptions to warn consumers of my API if they're using it incorrectly:</p>\n\n<pre><code>def api_func(foo):\n    '''foo should be either 'baz' or 'bar'. returns something very useful.'''\n    if foo not in _ALLOWED_ARGS:\n        raise ValueError('{foo} wrong, use \"baz\" or \"bar\"'.format(foo=repr(foo)))\n</code></pre>\n\n<h1>Create your own error types when apropos:</h1>\n\n<blockquote>\n  <p><strong>\"I want to make an error on purpose, so that it would go into the except\"</strong></p>\n</blockquote>\n\n<p>You can create your own error types, if you want to indicate something specific is wrong with your application, just subclass the appropriate point in the exception hierarchy:</p>\n\n<pre><code>class MyAppLookupError(LookupError):\n    '''raise this when there's a lookup error for my app'''\n</code></pre>\n\n<p>and usage:</p>\n\n<pre><code>if important_key not in resource_dict and not ok_to_be_missing:\n    raise MyAppLookupError('resource is missing, and that is not ok.')\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In Python, what commands can I use to find:</p>\n\n<ol>\n<li>the current directory (where I was in the terminal when I ran the Python script), and</li>\n<li>where the file I am executing is?</li>\n</ol>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>To get the full path to the directory a Python file is contained in, write this in that file:</p>\n\n<pre><code>import os \ndir_path = os.path.dirname(os.path.realpath(__file__))\n</code></pre>\n\n<p>(Note that the incantation above won't work if you've already used <code>os.chdir()</code> to change your current working directory, since the value of the <code>__file__</code> constant is relative to the current working directory and is not changed by an <code>os.chdir()</code> call.)</p>\n\n<hr>\n\n<p>To get the current working directory use </p>\n\n<pre><code>import os\ncwd = os.getcwd()\n</code></pre>\n\n<hr>\n\n<p>Documentation references for the modules, constants and functions used above:</p>\n\n<ul>\n<li>The <a href=\"https://docs.python.org/library/os.html\"><code>os</code></a> and <a href=\"https://docs.python.org/library/os.path.html#module-os.path\"><code>os.path</code></a> modules.</li>\n<li>The <a href=\"https://docs.python.org/reference/datamodel.html\"><code>__file__</code></a> constant</li>\n<li><a href=\"https://docs.python.org/library/os.path.html#os.path.realpath\"><code>os.path.realpath(path)</code></a> (returns <em>\"the canonical path of the specified filename, eliminating any symbolic links encountered in the path\"</em>)</li>\n<li><a href=\"https://docs.python.org/library/os.path.html#os.path.dirname\"><code>os.path.dirname(path)</code></a> (returns <em>\"the directory name of pathname <code>path</code>\"</em>)</li>\n<li><a href=\"https://docs.python.org/library/os.html#os.getcwd\"><code>os.getcwd()</code></a> (returns <em>\"a string representing the current working directory\"</em>)</li>\n<li><a href=\"https://docs.python.org/library/os.html#os.chdir\"><code>os.chdir(path)</code></a> (<em>\"change the current working directory to <code>path</code>\"</em>)</li>\n</ul>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>This has always confused me. It seems like this would be nicer:</p>\n\n<pre><code>my_list = [\"Hello\", \"world\"]\nprint my_list.join(\"-\")\n# Produce: \"Hello-world\"\n</code></pre>\n\n<p>Than this:</p>\n\n<pre><code>my_list = [\"Hello\", \"world\"]\nprint \"-\".join(my_list)\n# Produce: \"Hello-world\"\n</code></pre>\n\n<p>Is there a specific reason it is like this?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It's because any iterable can be joined, not just lists, but the result and the \"joiner\" are always strings.</p>\n\n<p>E.G:</p>\n\n<pre><code>import urllib2\nprint '\\n############\\n'.join(\n    urllib2.urlopen('http://data.stackexchange.com/users/7095'))\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In the following method definitions, what does the <code>*</code> and <code>**</code> do for <code>param2</code>?</p>\n\n<pre><code>def foo(param1, *param2):\ndef bar(param1, **param2):\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The <code>*args</code> and <code>**kwargs</code> is a common idiom to allow arbitrary number of arguments to functions as described in the section <a href=\"http://docs.python.org/dev/tutorial/controlflow.html#more-on-defining-functions\" rel=\"noreferrer\">more on defining functions</a> in the Python documentation.</p>\n\n<p>The <code>*args</code> will give you all function parameters <a href=\"https://docs.python.org/dev/tutorial/controlflow.html#arbitrary-argument-lists\" rel=\"noreferrer\">as a tuple</a>:</p>\n\n<pre><code>In [1]: def foo(*args):\n   ...:     for a in args:\n   ...:         print a\n   ...:         \n   ...:         \n\nIn [2]: foo(1)\n1\n\n\nIn [4]: foo(1,2,3)\n1\n2\n3\n</code></pre>\n\n<p>The <code>**kwargs</code> will give you all \n<strong>keyword arguments</strong> except for those corresponding to a formal parameter as a dictionary.</p>\n\n<pre><code>In [5]: def bar(**kwargs):\n   ...:     for a in kwargs:\n   ...:         print a, kwargs[a]\n   ...:         \n   ...:         \n\nIn [6]: bar(name='one', age=27)\nage 27\nname one\n</code></pre>\n\n<p>Both idioms can be mixed with normal arguments to allow a set of fixed and some variable arguments:</p>\n\n<pre><code>def foo(kind, *args, **kwargs):\n   pass\n</code></pre>\n\n<p>Another usage of the <code>*l</code> idiom is to <strong>unpack argument lists</strong> when calling a function.</p>\n\n<pre><code>In [9]: def foo(bar, lee):\n   ...:     print bar, lee\n   ...:     \n   ...:     \n\nIn [10]: l = [1,2]\n\nIn [11]: foo(*l)\n1 2\n</code></pre>\n\n<p>In Python 3 it is possible to use <code>*l</code> on the left side of an assignment (<a href=\"http://www.python.org/dev/peps/pep-3132/\" rel=\"noreferrer\">Extended Iterable Unpacking</a>), though it gives a list instead of a tuple in this context:</p>\n\n<pre><code>first, *rest = [1,2,3,4]\nfirst, *l, last = [1,2,3,4]\n</code></pre>\n\n<p>Also Python 3 adds new semantic (refer <a href=\"https://www.python.org/dev/peps/pep-3102/\" rel=\"noreferrer\">PEP 3102</a>):</p>\n\n<pre><code>def func(arg1, arg2, arg3, *, kwarg1, kwarg2):\n    pass\n</code></pre>\n\n<p>Such function accepts only 3 positional arguments, and everything after <code>*</code> can only be passed as keyword arguments.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What is the Python equivalent of Perl's <code>chomp</code> function, which removes the last character of a value?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Try the method <code>rstrip()</code> (see doc <a href=\"http://docs.python.org/2/library/stdtypes.html#str.rstrip\" rel=\"noreferrer\">Python 2</a> and <a href=\"https://docs.python.org/3/library/stdtypes.html#str.rstrip\" rel=\"noreferrer\">Python 3</a>)</p>\n\n<pre><code>&gt;&gt;&gt; 'test string\\n'.rstrip()\n'test string'\n</code></pre>\n\n<p>Python's <code>rstrip()</code> method strips <em>all</em> kinds of trailing whitespace by default, not just one newline as Perl does with <a href=\"http://perldoc.perl.org/functions/chomp.html\" rel=\"noreferrer\"><code>chomp</code></a>.</p>\n\n<pre><code>&gt;&gt;&gt; 'test string \\n \\r\\n\\n\\r \\n\\n'.rstrip()\n'test string'\n</code></pre>\n\n<p>To strip only newlines:</p>\n\n<pre><code>&gt;&gt;&gt; 'test string \\n \\r\\n\\n\\r \\n\\n'.rstrip('\\n')\n'test string \\n \\r\\n\\n\\r '\n</code></pre>\n\n<p>There are also the methods <code>lstrip()</code> and <code>strip()</code>:</p>\n\n<pre><code>&gt;&gt;&gt; s = \"   \\n\\r\\n  \\n  abc   def \\n\\r\\n  \\n  \"\n&gt;&gt;&gt; s.strip()\n'abc   def'\n&gt;&gt;&gt; s.lstrip()\n'abc   def \\n\\r\\n  \\n  '\n&gt;&gt;&gt; s.rstrip()\n'   \\n\\r\\n  \\n  abc   def'\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is it possible to upgrade all Python packages at one time with <strong><a href=\"https://pypi.python.org/pypi/pip\" rel=\"noreferrer\"><code>pip</code></a></strong>?</p>\n\n<p>Note that there is <a href=\"https://github.com/pypa/pip/issues/59\" rel=\"noreferrer\">a feature request</a> for this on the official issue tracker.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There isn't a built-in flag yet, but you can use</p>\n\n<pre><code>pip freeze --local | grep -v '^\\-e' | cut -d = -f 1  | xargs -n1 pip install -U\n</code></pre>\n\n<p>Note: there are infinite potential variations for this. I'm trying to keep this answer short and simple, but please do suggest variations in the comments!</p>\n\n<p>Relevant edits:</p>\n\n<ul>\n<li>Added a <code>grep</code> to skip \"-e\" package definitions, as suggested by @jawache (Yes, you could replace <code>grep</code>+<code>cut</code> with <code>sed</code> or <code>awk</code> or <code>perl</code> or...).</li>\n<li><p>Newer versions of <code>pip</code> allow you to list outdated packages: </p>\n\n<pre><code>pip list --outdated --format=freeze\n</code></pre></li>\n<li><p>Added <code>-n1</code> to <code>xargs</code>, prevents stopping everything if updating one package fails (thanks <a href=\"https://stackoverflow.com/users/339505/andsens\">@andsens</a>)</p></li>\n</ul>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is it possible to have static methods in Python so I can call them without initializing a class, like:</p>\n\n<pre><code>ClassName.StaticMethod ( )\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Yep, using the <a href=\"https://docs.python.org/2/library/functions.html#staticmethod\" rel=\"noreferrer\" title=\"staticmethod\">staticmethod</a> decorator</p>\n\n<pre><code>class MyClass(object):\n    @staticmethod\n    def the_static_method(x):\n        print x\n\nMyClass.the_static_method(2) # outputs 2\n</code></pre>\n\n<p>Note that some code might use the old method of defining a static method, using <code>staticmethod</code> as a function rather than a decorator. This should only be used if you have to support ancient versions of Python (2.2 and 2.3)</p>\n\n<pre><code>class MyClass(object):\n    def the_static_method(x):\n        print x\n    the_static_method = staticmethod(the_static_method)\n\nMyClass.the_static_method(2) # outputs 2\n</code></pre>\n\n<p>This is entirely identical to the first example (using <code>@staticmethod</code>), just not using the nice decorator syntax</p>\n\n<p>Finally, use <a href=\"https://docs.python.org/2/library/functions.html#staticmethod\" rel=\"noreferrer\" title=\"staticmethod\"><code>staticmethod()</code></a> sparingly! There are very few situations where static-methods are necessary in Python, and I've seen them used many times where a separate \"top-level\" function would have been clearer.</p>\n\n<hr>\n\n<p><a href=\"https://docs.python.org/2/library/functions.html#staticmethod\" rel=\"noreferrer\" title=\"staticmethod\">The following is verbatim from the documentation:</a>:</p>\n\n<blockquote>\n  <p>A static method does not receive an implicit first argument. To declare a static method, use this idiom:</p>\n\n<pre><code>class C:\n    @staticmethod\n    def f(arg1, arg2, ...): ...\n</code></pre>\n  \n  <p>The @staticmethod form is a function <a href=\"https://docs.python.org/2/glossary.html#term-decorator\" rel=\"noreferrer\" title=\"term-decorator\"><em>decorator</em></a> \u2013 see the description of function definitions in <a href=\"https://docs.python.org/2/reference/compound_stmts.html#function\" rel=\"noreferrer\" title=\"Function definitions\"><em>Function definitions</em></a> for details.</p>\n  \n  <p>It can be called either on the class (such as <code>C.f()</code>) or on an instance (such as <code>C().f()</code>). The instance is ignored except for its class.</p>\n  \n  <p>Static methods in Python are similar to those found in Java or C++. For a more advanced concept, see <a href=\"https://docs.python.org/2/library/functions.html#classmethod\" rel=\"noreferrer\" title=\"classmethod\"><code>classmethod()</code></a>.</p>\n  \n  <p>For more information on static methods, consult the documentation on the standard type hierarchy in <a href=\"https://docs.python.org/2/reference/datamodel.html#types\" rel=\"noreferrer\" title=\"types\"><em>The standard type hierarchy</em></a>.</p>\n  \n  <p>New in version 2.2.</p>\n  \n  <p>Changed in version 2.4: Function decorator syntax added.</p>\n</blockquote>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<pre><code>items = []\nitems.append(\"apple\")\nitems.append(\"orange\")\nitems.append(\"banana\")\n\n# FAKE METHOD::\nitems.amount()  # Should return 3\n</code></pre>\n\n<p>How do I get the number of elements in the list?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The <a href=\"https://docs.python.org/2/library/functions.html#len\" rel=\"noreferrer\" title=\"len()\"><code>len()</code></a> function can be used with a lot of types in <a href=\"http://en.wikipedia.org/wiki/Python_%28programming_language%29\" rel=\"noreferrer\">Python</a> - both built-in types and library types.</p>\n\n<pre><code>&gt;&gt;&gt; len([1,2,3])\n3\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How can I output colored text to the terminal, in Python?\nWhat is the best Unicode symbol to represent a solid block?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This somewhat depends on what platform you are on. The most common way to do this is by printing ANSI escape sequences. For a simple example, here's some python code from the <a href=\"https://svn.blender.org/svnroot/bf-blender/trunk/blender/build_files/scons/tools/bcolors.py\" rel=\"noreferrer\">blender build scripts</a>:</p>\n\n<pre><code>class bcolors:\n    HEADER = '\\033[95m'\n    OKBLUE = '\\033[94m'\n    OKGREEN = '\\033[92m'\n    WARNING = '\\033[93m'\n    FAIL = '\\033[91m'\n    ENDC = '\\033[0m'\n    BOLD = '\\033[1m'\n    UNDERLINE = '\\033[4m'\n</code></pre>\n\n<p>To use code like this, you can do something like </p>\n\n<pre><code>print bcolors.WARNING + \"Warning: No active frommets remain. Continue?\" \n      + bcolors.ENDC\n</code></pre>\n\n<p>This will work on unixes including OS X, linux and windows (provided you use <a href=\"https://github.com/adoxa/ansicon\" rel=\"noreferrer\">ANSICON</a>, or in Windows 10 provided you enable <a href=\"https://msdn.microsoft.com/en-us/library/mt638032\" rel=\"noreferrer\">VT100 emulation</a>). There are ansi codes for setting the color, moving the cursor, and more.</p>\n\n<p>If you are going to get complicated with this (and it sounds like you are if you are writing a game), you should look into the \"curses\" module, which handles a lot of the complicated parts of this for you. The <a href=\"http://docs.python.org/howto/curses.html\" rel=\"noreferrer\" title=\"Python Curses howto\">Python Curses HowTO</a> is a good introduction.</p>\n\n<p>If you are not using extended ASCII (i.e. not on a PC), you are stuck with the ascii characters below 127, and '#' or '@' is probably your best bet for a block. If you can ensure your terminal is using a IBM <a href=\"http://telecom.tbi.net/asc-ibm.html\" rel=\"noreferrer\">extended ascii character set</a>, you have many more options. Characters 176, 177, 178 and 219 are the \"block characters\".</p>\n\n<p>Some modern text-based programs, such as \"Dwarf Fortress\", emulate text mode in a graphical mode, and use images of the classic PC font. You can find some of these bitmaps that you can use on the <a href=\"http://dwarffortresswiki.org/DF2014:Tilesets\" rel=\"noreferrer\">Dwarf Fortress Wiki</a> see (<a href=\"http://dwarffortresswiki.org/Tileset_repository\" rel=\"noreferrer\">user-made tilesets</a>).</p>\n\n<p>The <a href=\"http://en.wikipedia.org/wiki/TMDC\" rel=\"noreferrer\" title=\"text mode demo contest\">Text Mode Demo Contest</a> has more resources for doing graphics in text mode.</p>\n\n<p>Hmm.. I think got a little carried away on this answer. I am in the midst of planning an epic text-based adventure game, though. Good luck with your colored text!</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is there a way to substring a string in Python, to get a new string from the 3rd character to the end of the string?</p>\n\n<p>Maybe like <code>myString[2:end]</code>?</p>\n\n<p>If leaving the second part means 'till the end', if you leave the first part, does it start from the start?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>&gt;&gt;&gt; x = \"Hello World!\"\n&gt;&gt;&gt; x[2:]\n'llo World!'\n&gt;&gt;&gt; x[:2]\n'He'\n&gt;&gt;&gt; x[:-2]\n'Hello Worl'\n&gt;&gt;&gt; x[-2:]\n'd!'\n&gt;&gt;&gt; x[2:-2]\n'llo Worl'\n</code></pre>\n\n<p>Python calls this concept \"slicing\" and it works on more than just strings. Take a look <a href=\"https://stackoverflow.com/questions/509211/good-primer-for-python-slice-notation\">here</a> for a comprehensive introduction.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a list of arbitrary length, and I need to split it up into equal size chunks and operate on it. There are some obvious ways to do this, like keeping a counter and two lists, and when the second list fills up, add it to the first list and empty the second list for the next round of data, but this is potentially extremely expensive.</p>\n\n<p>I was wondering if anyone had a good solution to this for lists of any length, e.g. using generators.</p>\n\n<p>I was looking for something useful in <code>itertools</code> but I couldn't find anything obviously useful. Might've missed it, though.</p>\n\n<p>Related question: <a href=\"https://stackoverflow.com/questions/434287/what-is-the-most-pythonic-way-to-iterate-over-a-list-in-chunks\">What is the most \u201cpythonic\u201d way to iterate over a list in chunks?</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here's a generator that yields the chunks you want:</p>\n\n<pre><code>def chunks(l, n):\n    \"\"\"Yield successive n-sized chunks from l.\"\"\"\n    for i in range(0, len(l), n):\n        yield l[i:i + n]\n</code></pre>\n\n<hr>\n\n<pre><code>import pprint\npprint.pprint(list(chunks(range(10, 75), 10)))\n[[10, 11, 12, 13, 14, 15, 16, 17, 18, 19],\n [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],\n [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],\n [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],\n [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],\n [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],\n [70, 71, 72, 73, 74]]\n</code></pre>\n\n<hr>\n\n<p>If you're using Python 2, you should use <code>xrange()</code> instead of <code>range()</code>:</p>\n\n<pre><code>def chunks(l, n):\n    \"\"\"Yield successive n-sized chunks from l.\"\"\"\n    for i in xrange(0, len(l), n):\n        yield l[i:i + n]\n</code></pre>\n\n<hr>\n\n<p>Also you can simply use list comprehension instead of writing a function. Python 3:</p>\n\n<pre><code>[l[i:i + n] for i in range(0, len(l), n)]\n</code></pre>\n\n<p>Python 2 version:</p>\n\n<pre><code>[l[i:i + n] for i in xrange(0, len(l), n)]\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How do I concatenate two lists in Python?</p>\n\n<p>Example:</p>\n\n<pre><code>listone = [1, 2, 3]\nlisttwo = [4, 5, 6]\n</code></pre>\n\n<p>Expected outcome:</p>\n\n<pre><code>joinedlist == [1, 2, 3, 4, 5, 6]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Python makes this ridiculously easy.</p>\n\n<pre><code>mergedlist = listone + listtwo\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is it possible to have static class variables or methods in python? What syntax is required to do this?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Variables declared inside the class definition, but not inside a method are class or static variables:</p>\n\n<pre><code>&gt;&gt;&gt; class MyClass:\n...     i = 3\n...\n&gt;&gt;&gt; MyClass.i\n3 \n</code></pre>\n\n<p>As @<a href=\"https://stackoverflow.com/questions/68645/static-class-variables-in-python#answer-69067\">millerdev</a> points out, this creates a class-level <code>i</code> variable, but this is distinct from any instance-level <code>i</code> variable, so you could have</p>\n\n<pre><code>&gt;&gt;&gt; m = MyClass()\n&gt;&gt;&gt; m.i = 4\n&gt;&gt;&gt; MyClass.i, m.i\n&gt;&gt;&gt; (3, 4)\n</code></pre>\n\n<p>This is different from C++ and Java, but not so different from C#, where a static member can't be accessed using a reference to an instance.</p>\n\n<p>See <a href=\"https://docs.python.org/2/tutorial/classes.html#class-objects\" rel=\"noreferrer\">what the Python tutorial has to say on the subject of classes and class objects</a>.</p>\n\n<p>@Steve Johnson has already answered regarding <a href=\"http://web.archive.org/web/20090214211613/http://pyref.infogami.com/staticmethod\" rel=\"noreferrer\">static methods</a>, also documented under <a href=\"https://docs.python.org/2/library/functions.html#staticmethod\" rel=\"noreferrer\">\"Built-in Functions\" in the Python Library Reference</a>.</p>\n\n<pre><code>class C:\n    @staticmethod\n    def f(arg1, arg2, ...): ...\n</code></pre>\n\n<p>@beidy recommends <a href=\"https://docs.python.org/2/library/functions.html#classmethod\" rel=\"noreferrer\">classmethod</a>s over staticmethod, as the method then receives the class type as the first argument, but I'm still a little fuzzy on the advantages of this approach over staticmethod. If you are too, then it probably doesn't matter.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What are the options to clone or copy a list in Python?</p>\n\n<p>Using <code>new_list = my_list</code> then modifies <code>new_list</code> every time <code>my_list</code> changes.<br>\nWhy is this?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>With <code>new_list = my_list</code>, you don't actually have two lists. The assignment just copies the reference to the list, not the actual list, so both <code>new_list</code> and <code>my_list</code> refer to the same list after the assignment.</p>\n\n<p>To actually copy the list, you have various possibilities:</p>\n\n<ul>\n<li><p>You can slice it: </p>\n\n<pre><code>new_list = old_list[:]\n</code></pre>\n\n<p><a href=\"https://en.wikipedia.org/wiki/Alex_Martelli\" rel=\"noreferrer\" title=\"Alex Martelli\">Alex Martelli's</a> opinion (at least <a href=\"https://www.youtube.com/watch?v=g7V89K8QfgQ\" rel=\"noreferrer\" title=\"Bay Area Python Interest Group August 2007 Meeting\">back in 2007</a>) about this is, that <em>it is a weird syntax and it does not make sense to use it ever</em>. ;) (In his opinion, the next one is more readable).</p></li>\n<li><p>You can use the built in <a href=\"https://docs.python.org/2/library/functions.html#list\" rel=\"noreferrer\" title=\"list\"><code>list()</code></a> function:</p>\n\n<pre><code>new_list = list(old_list)\n</code></pre></li>\n<li><p>You can use generic <a href=\"https://docs.python.org/2/library/copy.html#copy.copy\" rel=\"noreferrer\" title=\"copy.copy\"><code>copy.copy()</code></a>:</p>\n\n<pre><code>import copy\nnew_list = copy.copy(old_list)\n</code></pre>\n\n<p>This is a little slower than <code>list()</code> because it has to find out the datatype of <code>old_list</code> first.</p></li>\n<li><p>If the list contains objects and you want to copy them as well, use generic <a href=\"https://docs.python.org/2/library/copy.html#copy.deepcopy\" rel=\"noreferrer\" title=\"copy.deepcopy\"><code>copy.deepcopy()</code></a>:</p>\n\n<pre><code>import copy\nnew_list = copy.deepcopy(old_list)\n</code></pre>\n\n<p>Obviously the slowest and most memory-needing method, but sometimes unavoidable.</p></li>\n</ul>\n\n<p><strong>Example:</strong></p>\n\n<pre><code>import copy\n\nclass Foo(object):\n    def __init__(self, val):\n         self.val = val\n\n    def __repr__(self):\n        return str(self.val)\n\nfoo = Foo(1)\n\na = ['foo', foo]\nb = a[:]\nc = list(a)\nd = copy.copy(a)\ne = copy.deepcopy(a)\n\n# edit orignal list and instance \na.append('baz')\nfoo.val = 5\n\nprint('original: %r\\n slice: %r\\n list(): %r\\n copy: %r\\n deepcopy: %r'\n      % (a, b, c, d, e))\n</code></pre>\n\n<p>Result:</p>\n\n<pre><code>original: ['foo', 5, 'baz']\nslice: ['foo', 5]\nlist(): ['foo', 5]\ncopy: ['foo', 5]\ndeepcopy: ['foo', 1]\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I spent most of the day yesterday searching for a clear answer for installing <code>pip</code> (package manager for Python). I can't find a good solution.</p>\n\n<p>How do I install it?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>All you need to do is</p>\n\n<pre><code>sudo easy_install pip\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What are the lesser-known but useful features of the Python programming language?</p>\n\n<ul>\n<li>Try to limit answers to Python core.</li>\n<li>One feature per answer.</li>\n<li>Give an example and short description of the feature, not just a link to documentation.</li>\n<li>Label the feature using a title as the first line.</li>\n</ul>\n\n<h2>Quick links to answers:</h2>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#111176\">Argument Unpacking</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#112303\">Braces</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#101945\">Chaining Comparison Operators</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#101447\">Decorators</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#113198\">Default Argument Gotchas / Dangers of Mutable Default arguments</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#102062\">Descriptors</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#111970\">Dictionary default <code>.get</code> value</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#102065\">Docstring Tests</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python/112316#112316\">Ellipsis Slicing Syntax</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#117116\">Enumeration</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#114420\">For/else</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#102202\">Function as iter() argument</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#101310\">Generator expressions</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#101276\"><code>import this</code></a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#102037\">In Place Value Swapping</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#101840\">List stepping</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#112286\"><code>__missing__</code> items</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#101537\">Multi-line Regex</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#113164\">Named string formatting</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#101549\">Nested list/generator comprehensions</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#108297\">New types at runtime</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#113833\"><code>.pth</code> files</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#1024693\">ROT13 Encoding</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#143636\">Regex Debugging</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#101739\">Sending to Generators</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#168270\">Tab Completion in Interactive Interpreter</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#116480\">Ternary Expression</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#114157\"><code>try/except/else</code></a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#3267903\">Unpacking+<code>print()</code> function</a></li>\n<li><a href=\"https://stackoverflow.com/questions/101268/hidden-features-of-python#109182\"><code>with</code> statement</a></li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<h2>Chaining comparison operators:</h2>\n\n<pre><code>&gt;&gt;&gt; x = 5\n&gt;&gt;&gt; 1 &lt; x &lt; 10\nTrue\n&gt;&gt;&gt; 10 &lt; x &lt; 20 \nFalse\n&gt;&gt;&gt; x &lt; 10 &lt; x*10 &lt; 100\nTrue\n&gt;&gt;&gt; 10 &gt; x &lt;= 9\nTrue\n&gt;&gt;&gt; 5 == x &gt; 4\nTrue\n</code></pre>\n\n<p>In case you're thinking it's doing <code>1 &lt; x</code>, which comes out as <code>True</code>, and then comparing <code>True &lt; 10</code>, which is also <code>True</code>, then no, that's really not what happens (see the last example.) It's really translating into <code>1 &lt; x and x &lt; 10</code>, and <code>x &lt; 10 and 10 &lt; x * 10 and x*10 &lt; 100</code>, but with less typing and each term is only evaluated once.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is there a Python function that will trim whitespace (spaces and tabs) from a string?</p>\n\n<p>Example: <code>\\t example string\\t</code> \u2192 <code>example string</code></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Whitespace on both sides:</p>\n\n<pre><code>s = \"  \\t a string example\\t  \"\ns = s.strip()\n</code></pre>\n\n<p>Whitespace on the right side:</p>\n\n<pre><code>s = s.rstrip()\n</code></pre>\n\n<p>Whitespace on the left side:</p>\n\n<pre><code>s = s.lstrip()\n</code></pre>\n\n<p>As <a href=\"https://stackoverflow.com/users/84380/thedz\">thedz</a> points out, you can provide an argument to strip arbitrary characters to any of these functions like this:</p>\n\n<pre><code>s = s.strip(' \\t\\n\\r')\n</code></pre>\n\n<p>This will strip any space, <code>\\t</code>, <code>\\n</code>, or <code>\\r</code> characters from the left-hand side, right-hand side, or both sides of the string. </p>\n\n<p>The examples above only remove strings from the left-hand and right-hand sides of strings. If you want to also remove characters from the middle of a string, try <code>re.sub</code>:</p>\n\n<pre><code>import re\nprint re.sub('[\\s+]', '', s)\n</code></pre>\n\n<p>That should print out:</p>\n\n<pre><code>astringexample\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What is the difference between old style and new style classes in Python?  Is there ever a reason to use old-style classes these days?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>From <a href=\"http://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes\" rel=\"noreferrer\">http://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes</a> :</p>\n\n<blockquote>\n  <p>Up to Python 2.1, old-style classes were the only flavour available to the user. The concept of (old-style) class is unrelated to the concept of type: if <code>x</code> is an instance of an old-style class, then <code>x.__class__</code> designates the class of <code>x</code>, but <code>type(x)</code> is always <code>&lt;type 'instance'&gt;</code>. This reflects the fact that all old-style instances, independently of their class, are implemented with a single built-in type, called instance. </p>\n  \n  <p><strong>New-style classes were introduced in Python 2.2 to unify the concepts of class and type</strong>. A new-style class is simply a user-defined type, no more, no less. If x is an instance of a new-style class, then <code>type(x)</code> is typically the same as <code>x.__class__</code> (although this is not guaranteed \u2013 a new-style class instance is permitted to override the value returned for <code>x.__class__</code>).</p>\n  \n  <p><strong>The major motivation for introducing new-style classes is to provide a unified object model with a full meta-model</strong>. It also has a number of immediate benefits, like the ability to subclass most built-in types, or the introduction of \"descriptors\", which enable computed properties. </p>\n  \n  <p><strong>For compatibility reasons, classes are still old-style by default</strong>. New-style classes are created by specifying another new-style class (i.e. a type) as a parent class, or the \"top-level type\" object if no other parent is needed. The behaviour of new-style classes differs from that of old-style classes in a number of important details in addition to what type returns. Some of these changes are fundamental to the new object model, like the way special methods are invoked. Others are \"fixes\" that could not be implemented before for compatibility concerns, like the method resolution order in case of multiple inheritance. </p>\n  \n  <p><strong>Python 3 only has new-style classes</strong>. No matter if you subclass from <code>object</code> or not, classes are new-style in Python 3.</p>\n</blockquote>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What are the differences between these two code fragments? Which way is considered to be more pythonic?</p>\n\n<p>Using <code>type()</code>:</p>\n\n<pre><code>import types\n\nif type(a) is types.DictType:\n    do_something()\nif type(b) in types.StringTypes:\n    do_something_else()\n</code></pre>\n\n<p>Using <code>isinstance()</code>:</p>\n\n<pre><code>if isinstance(a, dict):\n    do_something()\nif isinstance(b, str) or isinstance(b, unicode):\n    do_something_else()\n</code></pre>\n\n<p><strong>Edit:</strong> This seems to be discussed already: <a href=\"https://stackoverflow.com/questions/378927/what-is-the-best-idiomatic-way-to-check-the-type-of-a-python-variable\">link</a>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>To summarize the contents of other (already good!) answers, <code>isinstance</code> caters for inheritance (an instance of a derived class <em>is an</em> instance of a base class, too), while checking for equality of <code>type</code> does not (it demands identity of types and rejects instances of subtypes, AKA subclasses).</p>\n\n<p>Normally, in Python, you want your code to support inheritance, of course (since inheritance is so handy, it would be bad to stop code using yours from using it!), so <code>isinstance</code> is less bad than checking identity of <code>type</code>s because it seamlessly supports inheritance.</p>\n\n<p>It's not that <code>isinstance</code> is <em>good</em>, mind you\u2014it's just <em>less bad</em> than checking equality of types.  The normal, Pythonic, preferred solution is almost invariably \"duck typing\": try using the argument <em>as if</em> it was of a certain desired type, do it in a <code>try</code>/<code>except</code> statement catching all exceptions that could arise if the argument was not in fact of that type (or any other type nicely duck-mimicking it;-), and in the <code>except</code> clause, try something else (using the argument \"as if\" it was of some other type).</p>\n\n<p><code>basestring</code> <strong>is</strong>, however, quite a special case\u2014a builtin type that exists <strong>only</strong> to let you use <code>isinstance</code> (both <code>str</code> and <code>Unicode</code> subclass <code>basestring</code>). Strings are sequences (you could loop over them, index them, slice them, ...), but you generally want to treat them as \"scalar\" types\u2014it's somewhat incovenient (but a reasonably frequent use case) to treat all kinds of strings (and maybe other scalar types, i.e., ones you can't loop on) one way, all containers (lists, sets, dicts, ...) in another way, and <code>basestring</code> plus <code>isinstance</code> helps you do that\u2014the overall structure of this idiom is something like:</p>\n\n<pre><code>if isinstance(x, basestring)\n  return treatasscalar(x)\ntry:\n  return treatasiter(iter(x))\nexcept TypeError:\n  return treatasscalar(x)\n</code></pre>\n\n<p>You could say that <code>basestring</code> is an <em>Abstract Base Class</em> (\"ABC\")\u2014it offers no concrete functionality to subclasses, but rather exists as a \"marker\", mainly for use with <code>isinstance</code>. The concept is obviously a growing one in Python, since <a href=\"http://www.python.org/dev/peps/pep-3119/\" rel=\"noreferrer\">PEP 3119</a>, which introduces a generalization of it, was accepted and has been implemented starting with Python 2.6 and 3.0.</p>\n\n<p>The PEP makes it clear that, while ABCs can often substitute for duck typing, there is generally no big pressure to do that (see <a href=\"http://www.python.org/dev/peps/pep-3119/#abcs-vs-duck-typing\" rel=\"noreferrer\">here</a>). ABCs as implemented in recent Python versions do however offer extra goodies: <code>isinstance</code> (and <code>issubclass</code>) can now mean more than just \"[an instance of] a derived class\" (in particular, any class can be \"registered\" with an ABC so that it will show as a subclass, and its instances as instances of the ABC); and ABCs can also offer extra convenience to actual subclasses in a very natural way via Template Method design pattern applications (see <a href=\"http://en.wikipedia.org/wiki/Template_method_pattern\" rel=\"noreferrer\">here</a> and <a href=\"http://www.catonmat.net/blog/learning-python-design-patterns-through-video-lectures/\" rel=\"noreferrer\">here</a> [[part II]] for more on the TM DP, in general and specifically in Python, independent of ABCs).</p>\n\n<p>For the underlying mechanics of ABC support as offered in Python 2.6, see <a href=\"http://docs.python.org/library/abc.html\" rel=\"noreferrer\">here</a>; for their 3.1 version, very similar, see <a href=\"http://docs.python.org/3.1/library/abc.html\" rel=\"noreferrer\">here</a>.  In both versions, standard library module <a href=\"http://docs.python.org/3.1/library/collections.html#module-collections\" rel=\"noreferrer\">collections</a> (that's the 3.1 version\u2014for the very similar 2.6 version, see <a href=\"http://docs.python.org/library/collections.html#module-collections\" rel=\"noreferrer\">here</a>) offers several useful ABCs.</p>\n\n<p>For the purpose of this answer, the key thing to retain about ABCs (beyond an arguably more natural placement for TM DP functionality, compared to the classic Python alternative of mixin classes such as <a href=\"http://docs.python.org/library/userdict.html?highlight=userdict#UserDict.DictMixin\" rel=\"noreferrer\">UserDict.DictMixin</a>) is that they make <code>isinstance</code> (and <code>issubclass</code>) much more attractive and pervasive (in Python 2.6 and going forward) than they used to be (in 2.5 and before), and therefore, by contrast, make checking type equality an even worse practice in recent Python versions than it already used to be.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I tried to install the Python package <a href=\"https://pypi.python.org/pypi/dulwich\" rel=\"noreferrer\">dulwich</a>:</p>\n\n<pre><code>pip install dulwich\n</code></pre>\n\n<p>But I get a cryptic error message:</p>\n\n<pre><code>error: Unable to find vcvarsall.bat\n</code></pre>\n\n<p>The same happens if I try installing the package manually:</p>\n\n<pre><code>&gt; python setup.py install\nrunning build_ext\nbuilding 'dulwich._objects' extension\nerror: Unable to find vcvarsall.bat\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong><em>Update</em></strong>: Comments point out that the instructions here may be dangerous. Consider using the Visual C++ 2008 Express edition or the purpose-built <a href=\"http://www.microsoft.com/en-us/download/details.aspx?id=44266\" rel=\"noreferrer\">Microsoft Visual C++ Compiler for Python</a> (<a href=\"/a/26127562/2778484\">details</a>) and <strong>NOT</strong> using the original answer below. Original error message means the required version of Visual C++ is not installed.</p>\n\n<hr>\n\n<p>For Windows installations:</p>\n\n<p>While running setup.py for package installations, Python 2.7 searches for an installed Visual Studio 2008. You can trick Python to use a newer Visual Studio by setting the correct path in <code>VS90COMNTOOLS</code> environment variable before calling <code>setup.py</code>.</p>\n\n<p>Execute the following command based on the version of Visual Studio installed:</p>\n\n<ul>\n<li>Visual Studio 2010 (VS10): <code>SET VS90COMNTOOLS=%VS100COMNTOOLS%</code></li>\n<li>Visual Studio 2012 (VS11): <code>SET VS90COMNTOOLS=%VS110COMNTOOLS%</code></li>\n<li>Visual Studio 2013 (VS12): <code>SET VS90COMNTOOLS=%VS120COMNTOOLS%</code></li>\n<li>Visual Studio 2015 (VS14): <code>SET VS90COMNTOOLS=%VS140COMNTOOLS%</code></li>\n</ul>\n\n<hr>\n\n<p>WARNING: As noted below, this answer is unlikely to work if you are trying to compile python modules.</p>\n\n<p>See <a href=\"https://stackoverflow.com/questions/3047542\">Building lxml for Python 2.7 on Windows</a> for details.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In Python, how can I parse a numeric string like <code>\"545.2222\"</code> to its corresponding float value, <code>542.2222</code>? Or parse the string <code>\"31\"</code> to an integer, <code>31</code>?</p>\n\n<p>I just want to know how to parse a float string to a float, and (separately) an int string to an int.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>&gt;&gt;&gt; a = \"545.2222\"\n&gt;&gt;&gt; float(a)\n545.22220000000004\n&gt;&gt;&gt; int(float(a))\n545\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm building a web application with Django. The reasons I chose Django were:</p>\n\n<ul>\n<li>I wanted to work with free/open-source tools.</li>\n<li>I like Python and feel it's a \"long term\" language, whereas regarding Ruby I wasn't sure, and PHP seemed like a huge hassle to learn.</li>\n<li>I'm building a prototype for an idea and wasn't thinking too much about the future. Development speed was the main factor, and I already knew Python.</li>\n<li>I knew the migration to Google App Engine would be easier should I choose to do so in the future.</li>\n<li>I heard Django was \"nice\".</li>\n</ul>\n\n<p>Now that I'm getting closer to thinking about publishing my work, I start being concerned about scale. The only information I found about the scaling capabilities of Django is provided by the Django team (I'm not saying anything to disregard them, but this is clearly not objective information...).</p>\n\n<p>My questions:</p>\n\n<ul>\n<li>What's the \"largest\" site that's built on Django today? (I measure size mostly by user traffic)</li>\n<li>Can Django deal with 100,000 users daily, each visiting the site for a couple of hours?</li>\n<li>Could a site like Stack Overflow run on Django?</li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<ol>\n<li><p><strong>\"What are the largest sites built on Django today?\"</strong></p>\n\n<p>There isn't any single place that collects information about traffic on Django built sites, so I'll have to take a stab at it using data from various locations.  First, we have a list of Django sites on the front page of <a href=\"http://www.djangoproject.com/\" rel=\"noreferrer\">the main Django project page</a> and then a list of Django built sites at <a href=\"http://www.djangosites.org/\" rel=\"noreferrer\">djangosites.org</a>.  Going through the lists and picking some that I know have decent traffic we see:</p>\n\n<ul>\n<li><p><strong><a href=\"http://instagram.com\" rel=\"noreferrer\">Instagram</a></strong>: <a href=\"http://instagram-engineering.tumblr.com/post/13649370142/what-powers-instagram-hundreds-of-instances\" rel=\"noreferrer\">What Powers Instagram: Hundreds of Instances, Dozens of Technologies</a>.</p></li>\n<li><p><strong><a href=\"http://pinterest.com/\" rel=\"noreferrer\">Pinterest</a></strong>: <a href=\"http://www.alexa.com/siteinfo/Pinterest.com\" rel=\"noreferrer\">Alexa rank 37 (21.4.2015)</a> and 70 Million users in 2013</p></li>\n<li><p><strong><a href=\"http://bitbucket.org/\" rel=\"noreferrer\">Bitbucket</a></strong>: <a href=\"https://blog.bitbucket.org/2015/02/05/bitbucket-2014-in-review/\" rel=\"noreferrer\">200TB of Code and 2.500.000 Users</a></p></li>\n<li><p><strong><a href=\"http://disqus.com\" rel=\"noreferrer\">Disqus</a></strong>: <a href=\"http://pyvideo.org/video/418/pycon-2011--disqus--serving-400-million-people-wi\" rel=\"noreferrer\">Serving 400 million people with Python</a>.</p></li>\n<li><p><strong><a href=\"http://curse.com/\" rel=\"noreferrer\">curse.com</a></strong>: <a href=\"http://www.quantcast.com/curse.com\" rel=\"noreferrer\">600k daily visits</a>.</p></li>\n<li><p><strong><a href=\"http://tabblo.com/\" rel=\"noreferrer\">tabblo.com</a></strong>: <a href=\"http://www.quantcast.com/tabblo.com\" rel=\"noreferrer\">44k daily visits</a>, see Ned Batchelder's posts <a href=\"http://nedbatchelder.com/blog/200902/infrastructure_for_modern_web_sites.html\" rel=\"noreferrer\">Infrastructure for modern web sites</a>.</p></li>\n<li><p><strong><a href=\"http://chesspark.com/\" rel=\"noreferrer\">chesspark.com</a></strong>: <a href=\"http://www.alexa.com/siteinfo/chesspark.com\" rel=\"noreferrer\">Alexa</a> rank about 179k.</p></li>\n<li><p><strong><a href=\"http://pownce.com/\" rel=\"noreferrer\">pownce.com</a></strong> (no longer active): <a href=\"http://www.alexa.com/siteinfo/pownce.com\" rel=\"noreferrer\">alexa</a> rank about 65k.\nMike Malone of Pownce, in his EuroDjangoCon presentation on <strong><a href=\"http://www.slideshare.net/road76/scaling-django\" rel=\"noreferrer\">Scaling Django Web Apps</a></strong> says \"hundreds of hits per second\".  This is a very good presentation on how to scale Django, and makes some good points including (current) shortcomings in Django scalability.</p></li>\n<li><p>HP had a site built with Django 1.5: <a href=\"http://www.eprintcenter.com\" rel=\"noreferrer\">ePrint center</a>. However, as for novemer/2015 the entire website was migrated and this link is just a redirect. This website was a world-wide service attending subscription to Instant Ink and related services HP offered (*).</p></li>\n</ul></li>\n<li><p><strong>\"Can Django deal with 100,000 users daily, each visiting the site for a couple of hours?\"</strong></p>\n\n<p>Yes, see above.</p></li>\n<li><p><strong>\"Could a site like Stack Overflow run on Django?\"</strong></p>\n\n<p>My gut feeling is yes but, as others answered and Mike Malone mentions in his presentation, database design is critical. Strong proof might also be found at www.cnprog.com if we can find any reliable traffic stats. Anyway, it's not just something that will happen by throwing together a bunch of Django models :)</p></li>\n</ol>\n\n<p>There are, of course, many more sites and bloggers of interest, but I have got to stop somewhere!</p>\n\n<hr>\n\n<p>Blog post about <a href=\"http://web.archive.org/web/20130307032621/http://concentricsky.com/blog/2009/oct/michaelmoorecom\" rel=\"noreferrer\">Using Django to build high-traffic site michaelmoore.com</a> described as a <a href=\"http://www.alexa.com/siteinfo/http%3A%2F%2Fmichaelmoore.com\" rel=\"noreferrer\">top 10,000 website</a>.  <a href=\"http://www.quantcast.com/michaelmoore.com\" rel=\"noreferrer\">Quantcast stats</a> and <a href=\"http://siteanalytics.compete.com/michaelmoore.com/\" rel=\"noreferrer\">compete.com stats</a>.</p>\n\n<hr>\n\n<p><sub>(*) The author of the edit, including such reference, used to work as outsourced developer in that project.</sub></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a data table using pandas and column labels that I need to edit to replace the original column labels. </p>\n\n<p>I'd like to change the column names in a data table <code>A</code> where the original column names are:</p>\n\n<pre><code>['$a', '$b', '$c', '$d', '$e'] \n</code></pre>\n\n<p>to </p>\n\n<pre><code>['a', 'b', 'c', 'd', 'e'].\n</code></pre>\n\n<p>I have the edited column names stored it in a list, but I don't know how to replace the column names.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Just assign it to the <code>.columns</code> attribute:</p>\n\n<pre><code>&gt;&gt;&gt; df = pd.DataFrame({'$a':[1,2], '$b': [10,20]})\n&gt;&gt;&gt; df.columns = ['a', 'b']\n&gt;&gt;&gt; df\n   a   b\n0  1  10\n1  2  20\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>When trying to delete a key from a dictionary, I write:</p>\n\n<pre><code>if 'key' in myDict:\n    del myDict['key']\n</code></pre>\n\n<p>Is there a one line way of doing this?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use <a href=\"http://docs.python.org/library/stdtypes.html#dict.pop\" rel=\"noreferrer\"><code>dict.pop()</code></a>:</p>\n\n<pre><code>my_dict.pop('key', None)\n</code></pre>\n\n<p>This will return <code>my_dict[key]</code> if <code>key</code> exists in the dictionary, and <code>None</code> otherwise. If the second parameter is not specified (ie. <code>my_dict.pop('key')</code>) and <code>key</code> does not exist, a <code>KeyError</code> is raised.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have this JSON in a file:</p>\n\n<pre class=\"lang-json prettyprint-override\"><code>{\n    \"maps\": [\n        {\n            \"id\": \"blabla\",\n            \"iscategorical\": \"0\"\n        },\n        {\n            \"id\": \"blabla\",\n            \"iscategorical\": \"0\"\n        }\n    ],\n    \"masks\": [\n        \"id\": \"valore\"\n    ],\n    \"om_points\": \"value\",\n    \"parameters\": [\n        \"id\": \"valore\"\n    ]\n}\n</code></pre>\n\n<p>I wrote this script which prints all of the json text:</p>\n\n<pre><code>json_data=open(file_directory).read()\n\ndata = json.loads(json_data)\npprint(data)\n</code></pre>\n\n<p>How can I parse the file and extract single values?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I think what Ignacio is saying is that your JSON file is incorrect. You have <code>[]</code> when you should have <code>{}</code>. <code>[]</code> are for lists, <code>{}</code> are for dictionaries.</p>\n\n<p>Here's how your JSON file should look, your JSON file wouldn't even load for me:</p>\n\n<pre><code>{\n    \"maps\": [\n        {\n            \"id\": \"blabla\",\n            \"iscategorical\": \"0\"\n        },\n        {\n            \"id\": \"blabla\",\n            \"iscategorical\": \"0\"\n        }\n    ],\n    \"masks\": {\n        \"id\": \"valore\"\n    },\n    \"om_points\": \"value\",\n    \"parameters\": {\n        \"id\": \"valore\"\n    }\n}\n</code></pre>\n\n<p>Then you can use your code:</p>\n\n<pre><code>import json\nfrom pprint import pprint\n\nwith open('data.json') as data_file:    \n    data = json.load(data_file)\n\npprint(data)\n</code></pre>\n\n<p>With data, you can now also find values like so:</p>\n\n<pre><code>data[\"maps\"][0][\"id\"]\ndata[\"masks\"][\"id\"]\ndata[\"om_points\"]\n</code></pre>\n\n<p>Try those out and see if it starts to make sense.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How do you change the size of figure drawn with matplotlib?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"http://matplotlib.sourceforge.net/api/figure_api.html#matplotlib.figure.Figure\" rel=\"noreferrer\">figure</a> tells you the call signature:</p>\n\n<pre><code>figure(num=None, figsize=(8, 6), dpi=80, facecolor='w', edgecolor='k')\n</code></pre>\n\n<p>So <code>figure(figsize=(1,1))</code> creates an inch-by-inch image, which will be 80-by-80 pixels unless you also give a different dpi argument.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>A <a href=\"http://twitter.com/jperras/statuses/18160589493\" rel=\"noreferrer\">tweet</a> reads: </p>\n\n<blockquote>\n  <p>Don't use easy_install, unless you\n  like stabbing yourself in the face.\n  Use pip.</p>\n</blockquote>\n\n<p>Why use pip over easy_install? Doesn't the <a href=\"http://mail.python.org/pipermail/catalog-sig/2010-June/002985.html\" rel=\"noreferrer\">fault lie with PyPI and package authors mostly</a>? If an author uploads crap source tarball (eg: missing files, no setup.py) to PyPI, then both pip and easy_install will fail. Other than cosmetic differences, why do Python people (like in the above tweet) seem to <strong>strongly</strong> favor pip over easy_install?</p>\n\n<p>(Let's assume that we're talking about easy_install from the Distribute package, that is maintained by the community)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Many of the answers here are out of date for 2015 (although <a href=\"https://stackoverflow.com/a/3220572/908494\">the initially accepted one from Daniel Roseman</a> is not). Here's the current state of things:</p>\n\n<ul>\n<li>Binary packages are now distributed as wheels (<code>.whl</code> files)\u2014not just on PyPI, but in third-party repositories like <a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/\" rel=\"noreferrer\">Christoph Gohlke's Extension Packages for Windows</a>. <code>pip</code> can handle wheels; <code>easy_install</code> cannot.</li>\n<li>Virtual environments (which come built-in with 3.4, or can be added to 2.6+/3.1+ with <a href=\"https://pypi.python.org/pypi/virtualenv\" rel=\"noreferrer\"><code>virtualenv</code></a>) have become a very important and prominent tool (and recommended in <a href=\"https://docs.python.org/3/installing/index.html\" rel=\"noreferrer\">the official docs</a>); they include <code>pip</code> out of the box, but don't even work properly with <code>easy_install</code>.</li>\n<li>The <code>distribute</code> package that included <code>easy_install</code> is no longer maintained. Its improvements over <code>setuptools</code> got merged back into <code>setuptools</code>. Trying to install <code>distribute</code> will just install <code>setuptools</code> instead.</li>\n<li><code>easy_install</code> itself is only quasi-maintained.</li>\n<li>All of the cases where <code>pip</code> used to be inferior to <code>easy_install</code>\u2014installing from an unpacked source tree, from a DVCS repo, etc.\u2014are long-gone; you can <code>pip install .</code>, <code>pip install git+https://</code>.</li>\n<li><code>pip</code> comes with the official Python 2.7 and 3.4+ packages from python.org, and a <code>pip</code> bootstrap is included by default if you build from source.</li>\n<li>The various incomplete bits of documentation on installing, using, and building packages have been replaced by the <a href=\"https://packaging.python.org/\" rel=\"noreferrer\">Python Packaging User Guide</a>. Python's own documentation on <a href=\"https://docs.python.org/3/installing/index.html\" rel=\"noreferrer\">Installing Python Modules</a> now defers to this user guide, and explicitly calls out <code>pip</code> as \"the preferred installer program\".</li>\n<li>Other new features have been added to <code>pip</code> over the years that will never be in <code>easy_install</code>. For example, <code>pip</code> makes it easy to clone your site-packages by building a requirements file and then installing it with a single command on each side. Or to convert your requirements file to a local repo to use for in-house development. And so on.</li>\n</ul>\n\n<p>The only good reason that I know of to use <code>easy_install</code> in 2015 is the special case of using Apple's pre-installed Python versions with OS X 10.5-10.8. Since 10.5, Apple has included <code>easy_install</code>, but as of 10.10 they still don't include <code>pip</code>. With 10.9+, you should still just use <code>get-pip.py</code>, but for 10.5-10.8, this has some problems, so it's easier to <code>sudo easy_install pip</code>. (In general, <code>easy_install pip</code> is a bad idea; it's only for OS X 10.5-10.8 that you want to do this.) Also, 10.5-10.8 include <code>readline</code> in a way that <code>easy_install</code> knows how to kludge around but <code>pip</code> doesn't, so you also want to <code>sudo easy_install readline</code> if you want to upgrade that.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I want to convert an integer to a string in Python. I am typecasting it in vain:</p>\n\n<pre><code>t=raw_input()\nc=[]\nfor j in range(0,int(t)):\n    n=raw_input()\n    a=[]\n    a,b= (int(i) for i in n.split(' '))\n    d=pow(a,b)\n    d.str()\n    c.append(d[0])\nfor j in c:\n    print j\n</code></pre>\n\n<p>When I try to convert it to string, it's showing an error like <code>int</code> doesn't have any attribute called <code>str</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>&gt;&gt;&gt; str(10)\n'10'\n&gt;&gt;&gt; int('10')\n10\n</code></pre>\n\n<p>[Edit]</p>\n\n<p>Links to the documentation:<br>\n<a href=\"https://docs.python.org/2/library/functions.html#int\" rel=\"noreferrer\"><code>int()</code></a><br>\n<a href=\"https://docs.python.org/2/library/functions.html#str\" rel=\"noreferrer\"><code>str()</code></a></p>\n\n<p>[Edit]</p>\n\n<p>The problem seems to come from this line: <code>d.str()</code><br>\nConversion to string is done with the builtin <code>str()</code> function, which basically calls the <code>__str__()</code> method of its parameter.</p>\n\n<p>Also, it shouldn't be necessary to call <code>pow()</code>. Try using the <code>**</code> operator.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I want to clear this up once and for all. Can someone please explain the exact meaning of having leading underscores before an object's name in Python? Also explain the difference between a single and a double leading underscore. Also, does that meaning stay the same whether the object in question is a variable, a function, a method, etc?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<h2>Single Underscore</h2>\n\n<p>Names, in a class, with a leading underscore are simply to indicate to other programmers that the attribute or method is intended to be private.  However, nothing special is done with the name itself.</p>\n\n<p>To quote <a href=\"http://www.python.org/dev/peps/pep-0008/\" rel=\"noreferrer\">PEP-8</a>:</p>\n\n<blockquote>\n  <p>_single_leading_underscore: weak \"internal use\" indicator. E.g. <code>from M import *</code> does not import objects whose name starts with an underscore.</p>\n</blockquote>\n\n<h2>Double Underscore (Name Mangling)</h2>\n\n<p>From <a href=\"http://docs.python.org/tutorial/classes.html#private-variables-and-class-local-references\" rel=\"noreferrer\">the Python docs</a>:</p>\n\n<blockquote>\n  <p>Any identifier of the form <code>__spam</code> (at least two leading underscores, at most one trailing underscore) is textually replaced with <code>_classname__spam</code>, where <code>classname</code> is the current class name with leading underscore(s) stripped. This mangling is done without regard to the syntactic position of the identifier, so it can be used to define class-private instance and class variables, methods, variables stored in globals, and even variables stored in instances. private to this class on instances of other classes. </p>\n</blockquote>\n\n<p>And a warning from the same page:</p>\n\n<blockquote>\n  <p>Name mangling is intended to give classes an easy way to define \u201cprivate\u201d instance variables and methods, without having to worry about instance variables defined by derived classes, or mucking with instance variables by code outside the class. Note that the mangling rules are designed mostly to avoid accidents; it still is possible for a determined soul to access or modify a variable that is considered private.</p>\n</blockquote>\n\n<h2>Example</h2>\n\n<pre><code>&gt;&gt;&gt; class MyClass():\n...     def __init__(self):\n...             self.__superprivate = \"Hello\"\n...             self._semiprivate = \", world!\"\n...\n&gt;&gt;&gt; mc = MyClass()\n&gt;&gt;&gt; print mc.__superprivate\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: myClass instance has no attribute '__superprivate'\n&gt;&gt;&gt; print mc._semiprivate\n, world!\n&gt;&gt;&gt; print mc.__dict__\n{'_MyClass__superprivate': 'Hello', '_semiprivate': ', world!'}\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I've come across at least three ways to print to stderr:</p>\n\n<pre><code> import sys\n\n print &gt;&gt; sys.stderr, 'spam'\n\n sys.stderr.write('spam\\n')\n\n from __future__ import print_function\n print('spam', file=sys.stderr)\n</code></pre>\n\n<p>It seems to contradict <em>zen of Python #13</em> <sup>\u2020</sup>, so what's the preferred way to do it? Are there any advantages or disadvantages to one way or the other?</p>\n\n<p><sup>\u2020</sup> <sub>There should be one \u2014 and preferably only one \u2014 obvious way to do it.</sub></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I found this to be the only one short + flexible + portable + readable:</p>\n\n<pre><code>from __future__ import print_function\nimport sys\n\ndef eprint(*args, **kwargs):\n    print(*args, file=sys.stderr, **kwargs)\n</code></pre>\n\n<p>The function <code>eprint</code> can be used in the same was as the standard <code>print</code> function:</p>\n\n<pre><code>&gt;&gt;&gt; print(\"Test\")\nTest\n&gt;&gt;&gt; eprint(\"Test\")\nTest\n&gt;&gt;&gt; eprint(\"foo\", \"bar\", \"baz\", sep=\"---\")\nfoo---bar---baz\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What is the most pythonic way to pad a numeric string with zeroes to the left, i.e., so the numeric string has a specific length?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Strings:</p>\n\n<pre><code>&gt;&gt;&gt; n = '4'\n&gt;&gt;&gt; print n.zfill(3)\n004\n</code></pre>\n\n<p>And for numbers:</p>\n\n<pre><code>&gt;&gt;&gt; n = 4\n&gt;&gt;&gt; print '%03d' % n\n004\n&gt;&gt;&gt; print format(n, '03') # python &gt;= 2.6\n004\n&gt;&gt;&gt; print '{0:03d}'.format(n)  # python &gt;= 2.6\n004\n&gt;&gt;&gt; print '{foo:03d}'.format(foo=n)  # python &gt;= 2.6\n004\n&gt;&gt;&gt; print('{:03d}'.format(n))  # python &gt;= 2.7 + python3\n004\n&gt;&gt;&gt; print('{0:03d}'.format(n))  # python 3\n004\n&gt;&gt;&gt; print(f'{n:03}') # python &gt;= 3.6\n004\n</code></pre>\n\n<p><a href=\"https://docs.python.org/2/library/string.html#formatexamples\" rel=\"noreferrer\">String formatting documentation</a>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How do I find out a name of class that created an instance of an object in Python if the function I am doing this from is the base class of which the class of the instance has been derived?</p>\n\n<p>Was thinking maybe <a href=\"https://docs.python.org/2/library/inspect.html\" rel=\"noreferrer\" title=\"inspect \u2014 Inspect live objects\">the inspect module</a> might have helped me out here, but it doesn't seem to give me what I want. And short of parsing the <code>__class__</code> member, I'm not sure how to get at this information.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Have you tried the <code>__name__</code> attribute of the class? ie <code>type(x).__name__</code> will give you the name of the class, which I think is what you want.</p>\n\n<pre><code>&gt;&gt;&gt; import itertools\n&gt;&gt;&gt; x = itertools.count(0)\n&gt;&gt;&gt; type(x).__name__\n'count'\n</code></pre>\n\n<p>This method works with <a href=\"https://wiki.python.org/moin/NewClassVsClassicClass\" rel=\"noreferrer\">new-style classes</a> only. Your code might use some old-style classes. The following works for both:</p>\n\n<pre><code>x.__class__.__name__\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How do I connect to a MySQL database using a python program?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n\n\n<h2>Connecting to MYSQL with Python in 3 steps</h2>\n\n<p><strong>1 - Setting</strong></p>\n\n<p>You must install a MySQL driver before doing anything. Unlike PHP, only the SQLite driver is installed by default with Python. The most used package to do so is <a href=\"http://pypi.python.org/pypi/MySQL-python/\" rel=\"noreferrer\">MySQLdb</a> but it's hard to install it using easy_install.</p>\n\n<p>For Windows user, you can get an <a href=\"http://sourceforge.net/project/showfiles.php?group_id=22307\" rel=\"noreferrer\">exe of MySQLdb</a>. </p>\n\n<p>For Linux, this is a casual package (python-mysqldb). (You can use <code>sudo apt-get install python-mysqldb</code> (for debian based distros), <code>yum install MySQL-python</code> (for rpm-based), or <code>dnf install python-mysql</code> (for modern fedora distro) in command line to download.)</p>\n\n<p>For Mac, you can <a href=\"https://stackoverflow.com/questions/1448429/how-to-install-mysqldb-python-data-access-library-to-mysql-on-mac-os-x#1448476\">install MySQLdb using Macport</a>.</p>\n\n<p><strong>2 - Usage</strong></p>\n\n<p>After installing, reboot. This is not mandatory, but will prevent me from answering 3 or 4 other questions in this post if something goes wrong. So please reboot.</p>\n\n<p>Then it is just like using another package :</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>#!/usr/bin/python\nimport MySQLdb\n\ndb = MySQLdb.connect(host=\"localhost\",    # your host, usually localhost\n                     user=\"john\",         # your username\n                     passwd=\"megajonhy\",  # your password\n                     db=\"jonhydb\")        # name of the data base\n\n# you must create a Cursor object. It will let\n#  you execute all the queries you need\ncur = db.cursor()\n\n# Use all the SQL you like\ncur.execute(\"SELECT * FROM YOUR_TABLE_NAME\")\n\n# print all the first cell of all the rows\nfor row in cur.fetchall():\n    print row[0]\n\ndb.close()\n</code></pre>\n\n<p>Of course, there are thousand of possibilities and options; this is a very basic example. You will have to look at the documentation. <a href=\"http://www.mikusa.com/python-mysql-docs/\" rel=\"noreferrer\">A good starting point</a>.</p>\n\n<p><strong>3 - More advanced usage</strong></p>\n\n<p>Once you know how it works, you may want to use an <a href=\"https://en.wikipedia.org/wiki/Object-Relational_Mapping\" rel=\"noreferrer\">ORM</a> to avoid writting SQL manually and manipulate your tables as they were Python objects. The most famous ORM in the Python community is <a href=\"http://www.sqlalchemy.org/\" rel=\"noreferrer\">SQLAlchemy</a>. </p>\n\n<p>I strongly advise you to use it: your life is going to be much easier.</p>\n\n<p>I recently discovered another jewel in the Python world: <a href=\"http://peewee.readthedocs.org/en/latest/index.html\" rel=\"noreferrer\">peewee</a>. It's a very lite ORM, really easy and fast to setup then use. It makes my day for small projects or stand alone apps, where using big tools like SQLAlchemy or Django is overkill :</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>import peewee\nfrom peewee import *\n\ndb = MySQLDatabase('jonhydb', user='john', passwd='megajonhy')\n\nclass Book(peewee.Model):\n    author = peewee.CharField()\n    title = peewee.TextField()\n\n    class Meta:\n        database = db\n\nBook.create_table()\nbook = Book(author=\"me\", title='Peewee is cool')\nbook.save()\nfor book in Book.filter(author=\"me\"):\n    print book.title\n</code></pre>\n\n<p>This example works out of the box. Nothing other than having peewee (<code>pip install peewee</code>) is required.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How do I see the type of a variable whether it is unsigned 32 bit, signed 16 bit, etc.?</p>\n\n<p>How do I view it?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Python doesn't have the same types as C/C++, which appears to be your question.</p>\n\n<p>Try this:</p>\n\n<pre><code>&gt;&gt;&gt; i = 123\n&gt;&gt;&gt; type(i)\n&lt;type 'int'&gt;\n&gt;&gt;&gt; type(i) is int\nTrue\n&gt;&gt;&gt; i = 123456789L\n&gt;&gt;&gt; type(i)\n&lt;type 'long'&gt;\n&gt;&gt;&gt; type(i) is long\nTrue\n&gt;&gt;&gt; i = 123.456\n&gt;&gt;&gt; type(i)\n&lt;type 'float'&gt;\n&gt;&gt;&gt; type(i) is float\nTrue\n</code></pre>\n\n<p>The distinction between int and long goes away in Python 3.0, though.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I want to generate a string of size N.</p>\n\n<p>It should be made up of numbers and uppercase English letters such as:</p>\n\n<ul>\n<li>6U1S75</li>\n<li>4Z4UKK</li>\n<li>U911K4</li>\n</ul>\n\n<p>How can I achieve this in a <a href=\"https://en.wikipedia.org/wiki/Python_%28programming_language%29#Features_and_philosophy\">pythonic</a> way?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>Answer in one line:</strong></p>\n\n<pre><code>''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N))\n</code></pre>\n\n<p>or even shorter starting with Python 3.6 using <a href=\"https://docs.python.org/3/library/random.html#random.choices\" rel=\"noreferrer\"><code>random.choices()</code></a>:</p>\n\n<pre><code>''.join(random.choices(string.ascii_uppercase + string.digits, k=N))\n</code></pre>\n\n<p><strong>A cryptographically more secure version; see <a href=\"https://stackoverflow.com/a/23728630/2213647\">https://stackoverflow.com/a/23728630/2213647</a>:</strong></p>\n\n<pre><code>''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(N))\n</code></pre>\n\n<p><strong>In details, with a clean function for further reuse:</strong></p>\n\n<pre><code>&gt;&gt;&gt; import string\n&gt;&gt;&gt; import random\n&gt;&gt;&gt; def id_generator(size=6, chars=string.ascii_uppercase + string.digits):\n...    return ''.join(random.choice(chars) for _ in range(size))\n...\n&gt;&gt;&gt; id_generator()\n'G5G74W'\n&gt;&gt;&gt; id_generator(3, \"6793YUIO\")\n'Y3U'\n</code></pre>\n\n<p><strong>How does it work ?</strong></p>\n\n<p>We import <code>string</code>, a module that contains sequences of common ASCII characters, and <code>random</code>, a module that deals with random generation.</p>\n\n<p><code>string.ascii_uppercase + string.digits</code> just concatenates the list of characters representing uppercase ASCII chars and digits:</p>\n\n<pre><code>&gt;&gt;&gt; string.ascii_uppercase\n'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n&gt;&gt;&gt; string.digits\n'0123456789'\n&gt;&gt;&gt; string.ascii_uppercase + string.digits\n'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n</code></pre>\n\n<p>Then we use a list comprehension to create a list of 'n' elements:</p>\n\n<pre><code>&gt;&gt;&gt; range(4) # range create a list of 'n' numbers\n[0, 1, 2, 3]\n&gt;&gt;&gt; ['elem' for _ in range(4)] # we use range to create 4 times 'elem'\n['elem', 'elem', 'elem', 'elem']\n</code></pre>\n\n<p>In the example above, we use <code>[</code> to create the list, but we don't in the <code>id_generator</code> function so Python doesn't create the list in memory, but generates the elements on the fly, one by one (more about this <a href=\"https://stackoverflow.com/questions/231767/the-python-yield-keyword-explained/231855#231855\">here</a>).</p>\n\n<p>Instead of asking to create 'n' times the string <code>elem</code>, we will ask Python to create 'n' times a random character, picked from a sequence of characters:</p>\n\n<pre><code>&gt;&gt;&gt; random.choice(\"abcde\")\n'a'\n&gt;&gt;&gt; random.choice(\"abcde\")\n'd'\n&gt;&gt;&gt; random.choice(\"abcde\")\n'b'\n</code></pre>\n\n<p>Therefore <code>random.choice(chars) for _ in range(size)</code> really is creating a sequence of <code>size</code> characters. Characters that are randomly picked from <code>chars</code>:</p>\n\n<pre><code>&gt;&gt;&gt; [random.choice('abcde') for _ in range(3)]\n['a', 'b', 'b']\n&gt;&gt;&gt; [random.choice('abcde') for _ in range(3)]\n['e', 'b', 'e']\n&gt;&gt;&gt; [random.choice('abcde') for _ in range(3)]\n['d', 'a', 'c']\n</code></pre>\n\n<p>Then we just join them with an empty string so the sequence becomes a string:</p>\n\n<pre><code>&gt;&gt;&gt; ''.join(['a', 'b', 'b'])\n'abb'\n&gt;&gt;&gt; [random.choice('abcde') for _ in range(3)]\n['d', 'c', 'b']\n&gt;&gt;&gt; ''.join(random.choice('abcde') for _ in range(3))\n'dac'\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How to remove an element from a list by index in Python?</p>\n\n<p>I found the <code>list.remove</code> method, but say I want to remove the last element, how do I do this? It seems like the default remove searches the list, but I don't want any search to be performed.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use <code>del</code> and specify the element you want to delete with the index:</p>\n\n<pre><code>In [9]: a = list(range(10))\nIn [10]: a\nOut[10]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nIn [11]: del a[-1]\nIn [12]: a\nOut[12]: [0, 1, 2, 3, 4, 5, 6, 7, 8]\n</code></pre>\n\n<p><a href=\"http://docs.python.org/tutorial/datastructures.html#the-del-statement\" rel=\"noreferrer\">Here</a> is the section from the tutorial.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a script that needs to do some stuff based on file creation &amp; modification dates but has to run on Linux &amp; Windows.</p>\n\n<p>What's the best <strong>cross-platform</strong> way to get file creation &amp; modification date/times in Python?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Getting some sort of modification date in a cross-platform way is easy - just call <a href=\"https://docs.python.org/library/os.path.html#os.path.getmtime\" rel=\"noreferrer\"><code>os.path.getmtime(path)</code></a> and you'll get the Unix timestamp of when the file at <code>path</code> was last modified.</p>\n\n<p>Getting file <em>creation</em> dates, on the other hand, is fiddly and platform-dependent, differing even between the three big OSes:</p>\n\n<ul>\n<li>On <strong>Windows</strong>, a file's <code>ctime</code> (documented at <a href=\"https://msdn.microsoft.com/en-us/library/14h5k7ff.aspx\" rel=\"noreferrer\">https://msdn.microsoft.com/en-us/library/14h5k7ff.aspx</a>) stores its creation date. You can access this in Python through <a href=\"https://docs.python.org/library/os.path.html#os.path.getctime\" rel=\"noreferrer\"><code>os.path.getctime()</code></a> or the <a href=\"https://docs.python.org/3/library/os.html#os.stat_result.st_ctime\" rel=\"noreferrer\"><code>.st_ctime</code></a> attribute of the result of a call to <a href=\"https://docs.python.org/3/library/os.html#os.stat\" rel=\"noreferrer\"><code>os.stat()</code></a>. This <em>won't</em> work on Unix, where the <code>ctime</code> <a href=\"http://www.linux-faqs.info/general/difference-between-mtime-ctime-and-atime\" rel=\"noreferrer\">is the last time that the file's attributes <em>or</em> content were changed</a>.</li>\n<li>On <strong>Mac</strong>, as well as some other Unix-based OSes, you can use the <a href=\"https://docs.python.org/3/library/os.html#os.stat_result.st_birthtime\" rel=\"noreferrer\"><code>.st_birthtime</code></a> attribute of the result of a call to <code>os.stat()</code>.</li>\n<li><p>On <strong>Linux</strong>, this is currently impossible, at least without writing a C extension for Python. Although some file systems commonly used with Linux <a href=\"https://unix.stackexchange.com/questions/7562/what-file-systems-on-linux-store-the-creation-time\">do store creation dates</a> (for example, <code>ext4</code> stores them in <code>st_crtime</code>) , the Linux kernel <a href=\"https://unix.stackexchange.com/questions/91197/how-to-find-creation-date-of-file\">offers no way of accessing them</a>; in particular, the structs it returns from <code>stat()</code> calls in C, as of the latest kernel version, <a href=\"https://github.com/torvalds/linux/blob/v4.8-rc6/include/linux/stat.h\" rel=\"noreferrer\">don't contain any creation date fields</a>. You can also see that the identifier <code>st_crtime</code> doesn't currently feature anywhere in the <a href=\"https://github.com/python/cpython/search?utf8=%E2%9C%93&amp;q=st_crtime\" rel=\"noreferrer\">Python source</a>. At least if you're on <code>ext4</code>, the data <em>is</em> attached to the inodes in the file system, but there's no convenient way of accessing it.</p>\n\n<p>The next-best thing on Linux is to access the file's <code>mtime</code>, through either <a href=\"https://docs.python.org/library/os.path.html#os.path.getmtime\" rel=\"noreferrer\"><code>os.path.getmtime()</code></a> or the <a href=\"https://docs.python.org/3/library/os.html#os.stat_result.st_ctime\" rel=\"noreferrer\"><code>.st_mtime</code></a> attribute of an <code>os.stat()</code> result. This will give you the last time the file's content was modified, which may be adequate for some use cases.</p></li>\n</ul>\n\n<p>Putting this all together, cross-platform code should look something like this...</p>\n\n<pre><code>import os\nimport platform\n\ndef creation_date(path_to_file):\n    \"\"\"\n    Try to get the date that a file was created, falling back to when it was\n    last modified if that isn't possible.\n    See http://stackoverflow.com/a/39501288/1709587 for explanation.\n    \"\"\"\n    if platform.system() == 'Windows':\n        return os.path.getctime(path_to_file)\n    else:\n        stat = os.stat(path_to_file)\n        try:\n            return stat.st_birthtime\n        except AttributeError:\n            # We're probably on Linux. No easy way to get creation dates here,\n            # so we'll settle for when its content was last modified.\n            return stat.st_mtime\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm iterating over a list of tuples in Python, and am attempting to remove them if they meet certain criteria. </p>\n\n<pre><code>for tup in somelist:\n    if determine(tup):\n         code_to_remove_tup\n</code></pre>\n\n<p>What should I use in place of <code>code_to_remove_tup</code>? I can't figure out how to remove the item in this fashion.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use a list comprehension to create a new list containing only the elements you don't want to remove:</p>\n\n<pre><code>somelist = [x for x in somelist if not determine(x)]\n</code></pre>\n\n<p>Or, by assigning to the slice <code>somelist[:]</code>, you can mutate the existing list to contain only the items you want:</p>\n\n<pre><code>somelist[:] = [x for x in somelist if not determine(x)]\n</code></pre>\n\n<p>This approach could be useful if there are other references to <code>somelist</code> that need to reflect the changes.</p>\n\n<p>Instead of a comprehension, you could also use <code>itertools</code>. In Python 2:</p>\n\n<pre><code>from itertools import ifilterfalse\nsomelist[:] = ifilterfalse(determine, somelist)\n</code></pre>\n\n<p>Or in Python 3:</p>\n\n<pre><code>from itertools import filterfalse\nsomelist[:] = filterfalse(determine, somelist)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Here is a pure Python-specific design question: </p>\n\n<pre><code>class MyClass(object):\n    ...\n    def get_my_attr(self):\n        ...\n\n    def set_my_attr(self, value):\n        ...\n</code></pre>\n\n<p>and </p>\n\n<pre><code>class MyClass(object):\n    ...        \n    @property\n    def my_attr(self):\n        ...\n\n    @my_attr.setter\n    def my_attr(self, value):\n        ...\n</code></pre>\n\n<p>Python lets us to do it either way. If you would design a Python program, which approach would you use and why?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><em>Prefer properties</em>. It's what they're there for.</p>\n\n<p>The reason is that all attributes are public in Python. Starting names with an underscore or two is just a warning that the given attribute is an implementation detail that may not stay the same in future versions of the code. It doesn't prevent you from actually getting or setting that attribute. Therefore, standard attribute access is the normal, Pythonic way of, well, accessing attributes.</p>\n\n<p>The advantage of properties is that they are syntactically identical to attribute access, so you can change from one to another without any changes to client code. You could even have one version of a class that uses properties (say, for code-by-contract or debugging) and one that doesn't for production, without changing the code that uses it. At the same time, you don't have to write getters and setters for everything just in case you might need to better control access later.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p><strong>This is the error I get</strong></p>\n\n<pre><code>(mysite)zjm1126@zjm1126-G41MT-S2:~/zjm_test/mysite$ pip install mysql-python\nDownloading/unpacking mysql-python\n  Downloading MySQL-python-1.2.3.tar.gz (70Kb): 70Kb downloaded\n  Running setup.py egg_info for package mysql-python\n    sh: mysql_config: not found\n    Traceback (most recent call last):\n      File \"&lt;string&gt;\", line 14, in &lt;module&gt;\n      File \"/home/zjm1126/zjm_test/mysite/build/mysql-python/setup.py\", line 15, in &lt;module&gt;\n        metadata, options = get_config()\n      File \"setup_posix.py\", line 43, in get_config\n        libs = mysql_config(\"libs_r\")\n      File \"setup_posix.py\", line 24, in mysql_config\n        raise EnvironmentError(\"%s not found\" % (mysql_config.path,))\n    EnvironmentError: mysql_config not found\n    Complete output from command python setup.py egg_info:\n    sh: mysql_config: not found\n\nTraceback (most recent call last):\n\n  File \"&lt;string&gt;\", line 14, in &lt;module&gt;\n\n  File \"/home/zjm1126/zjm_test/mysite/build/mysql-python/setup.py\", line 15, in &lt;module&gt;\n\n    metadata, options = get_config()\n\n  File \"setup_posix.py\", line 43, in get_config\n\n    libs = mysql_config(\"libs_r\")\n\n  File \"setup_posix.py\", line 24, in mysql_config\n\n    raise EnvironmentError(\"%s not found\" % (mysql_config.path,))\n\nEnvironmentError: mysql_config not found\n\n----------------------------------------\nCommand python setup.py egg_info failed with error code 1\nStoring complete log in /home/zjm1126/.pip/pip.log\n(mysite)zjm1126@zjm1126-G41MT-S2:~/zjm_test/mysite$ pip install mysql-python\nDownloading/unpacking mysql-python\n  Running setup.py egg_info for package mysql-python\n    sh: mysql_config: not found\n    Traceback (most recent call last):\n      File \"&lt;string&gt;\", line 14, in &lt;module&gt;\n      File \"/home/zjm1126/zjm_test/mysite/build/mysql-python/setup.py\", line 15, in &lt;module&gt;\n        metadata, options = get_config()\n      File \"setup_posix.py\", line 43, in get_config\n        libs = mysql_config(\"libs_r\")\n      File \"setup_posix.py\", line 24, in mysql_config\n        raise EnvironmentError(\"%s not found\" % (mysql_config.path,))\n    EnvironmentError: mysql_config not found\n    Complete output from command python setup.py egg_info:\n    sh: mysql_config: not found\n\nTraceback (most recent call last):\n\n  File \"&lt;string&gt;\", line 14, in &lt;module&gt;\n\n  File \"/home/zjm1126/zjm_test/mysite/build/mysql-python/setup.py\", line 15, in &lt;module&gt;\n\n    metadata, options = get_config()\n\n  File \"setup_posix.py\", line 43, in get_config\n\n    libs = mysql_config(\"libs_r\")\n\n  File \"setup_posix.py\", line 24, in mysql_config\n\n    raise EnvironmentError(\"%s not found\" % (mysql_config.path,))\n\nEnvironmentError: mysql_config not found\n\n----------------------------------------\nCommand python setup.py egg_info failed with error code 1\nStoring complete log in /home/zjm1126/.pip/pip.log\n</code></pre>\n\n<p>What can I do to resolve this?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It seems mysql_config is missing on your system or the installer could not find it.\nBe sure mysql_config is really installed.</p>\n\n<p>For example on Debian/Ubuntu you must install the package:</p>\n\n<pre><code>sudo apt-get install libmysqlclient-dev\n</code></pre>\n\n<p>Maybe the mysql_config is not in your path, it will be the case when you compile by yourself\nthe mysql suite.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am getting an 'access is denied' error when I attempt to delete a folder that is not empty. I used the following command in my attempt: <code>os.remove(\"/folder_name\")</code>. </p>\n\n<p>What is the most effective way of removing/deleting a folder/directory that is not empty?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>import shutil\n\nshutil.rmtree('/folder_name')\n</code></pre>\n\n<p><a href=\"http://docs.python.org/library/shutil.html#shutil.rmtree\" rel=\"noreferrer\">Standard Library Reference: shutil.rmtree</a>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have tried to puzzle out an answer to this question for many months while learning pandas.  I use SAS for my day-to-day work and it is great for it's out-of-core support.  However, SAS is horrible as a piece of software for numerous other reasons.</p>\n\n<p>One day I hope to replace my use of SAS with python and pandas, but I currently lack an out-of-core workflow for large datasets.  I'm not talking about \"big data\" that requires a distributed network, but rather files too large to fit in memory but small enough to fit on a hard-drive.</p>\n\n<p>My first thought is to use <code>HDFStore</code> to hold large datasets on disk and pull only the pieces I need into dataframes for analysis.  Others have mentioned MongoDB as an easier to use alternative.  My question is this:</p>\n\n<p>What are some best-practice workflows for accomplishing the following:</p>\n\n<ol>\n<li>Loading flat files into a permanent, on-disk database structure</li>\n<li>Querying that database to retrieve data to feed into a pandas data structure</li>\n<li>Updating the database after manipulating pieces in pandas</li>\n</ol>\n\n<p>Real-world examples would be much appreciated, especially from anyone who uses pandas on \"large data\".</p>\n\n<p>Edit -- an example of how I would like this to work:</p>\n\n<ol>\n<li>Iteratively import a large flat-file and store it in a permanent, on-disk database structure.  These files are typically too large to fit in memory.</li>\n<li>In order to use Pandas, I would like to read subsets of this data (usually just a few columns at a time) that can fit in memory.</li>\n<li>I would create new columns by performing various operations on the selected columns.</li>\n<li>I would then have to append these new columns into the database structure.</li>\n</ol>\n\n<p>I am trying to find a best-practice way of performing these steps. Reading links about pandas and pytables it seems that appending a new column could be a problem.</p>\n\n<p>Edit -- Responding to Jeff's questions specifically:</p>\n\n<ol>\n<li>I am building consumer credit risk models. The kinds of data include phone, SSN and address characteristics; property values; derogatory information like criminal records, bankruptcies, etc... The datasets I use every day have nearly 1,000 to 2,000 fields on average of mixed data types: continuous, nominal and ordinal variables of both numeric and character data.  I rarely append rows, but I do perform many operations that create new columns.</li>\n<li>Typical operations involve combining several columns using conditional logic into a new, compound column. For example, <code>if var1 &gt; 2 then newvar = 'A' elif var2 = 4 then newvar = 'B'</code>.  The result of these operations is a new column for every record in my dataset.</li>\n<li>Finally, I would like to append these new columns into the on-disk data structure.  I would repeat step 2, exploring the data with crosstabs and descriptive statistics trying to find interesting, intuitive relationships to model.</li>\n<li>A typical project file is usually about 1GB.  Files are organized into such a manner where a row consists of a record of consumer data.  Each row has the same number of columns for every record.  This will always be the case.</li>\n<li>It's pretty rare that I would subset by rows when creating a new column.  However, it's pretty common for me to subset on rows when creating reports or generating descriptive statistics.  For example, I might want to create a simple frequency for a specific line of business, say Retail credit cards.  To do this, I would select only those records where the line of business = retail in addition to whichever columns I want to report on.  When creating new columns, however, I would pull all rows of data and only the columns I need for the operations.</li>\n<li>The modeling process requires that I analyze every column, look for interesting relationships with some outcome variable, and create new compound columns that describe those relationships.  The columns that I explore are usually done in small sets.  For example, I will focus on a set of say 20 columns just dealing with property values and observe how they relate to defaulting on a loan.  Once those are explored and new columns are created, I then move on to another group of columns, say college education, and repeat the process.  What I'm doing is creating candidate variables that explain the relationship between my data and some outcome.  At the very end of this process, I apply some learning techniques that create an equation out of those compound columns.</li>\n</ol>\n\n<p>It is rare that I would ever add rows to the dataset.  I will nearly always be creating new columns (variables or features in statistics/machine learning parlance).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I routinely use tens of gigabytes of data in just this fashion\ne.g. I have tables on disk that I read via queries, create data and append back.</p>\n\n<p>It's worth reading <a href=\"http://pandas-docs.github.io/pandas-docs-travis/io.html#hdf5-pytables\">the docs</a> and <a href=\"https://groups.google.com/forum/m/?fromgroups#!topic/pydata/cmw1F3OFJSc\">late in this thread</a> for several suggestions for how to store your data.</p>\n\n<p>Details which will affect how you store your data, like:<br>\n<em>Give as much detail as you can; and I can help you develop a structure.</em></p>\n\n<ol>\n<li>Size of data, # of rows, columns, types of columns; are you appending\nrows, or just columns? </li>\n<li>What will typical operations look like. E.g. do a query on columns to select a bunch of rows and specific columns, then do an operation (in-memory), create new columns, save these.<br>\n(Giving a toy example could enable us to offer more specific recommendations.)</li>\n<li>After that processing, then what do you do? Is step 2 ad hoc, or repeatable?</li>\n<li>Input flat files: how many, rough total size in Gb. How are these organized e.g. by records? Does each one contains different fields, or do they have some records per file with all of the fields in each file?</li>\n<li>Do you ever select subsets of rows (records) based on criteria (e.g. select the rows with field A &gt; 5)? and then do something, or do you just select fields A, B, C with all of the records (and then do something)?</li>\n<li>Do you 'work on' all of your columns (in groups), or are there a good proportion that you may only use for reports (e.g. you want to keep the data around, but don't need to pull in that column explicity until final results time)?</li>\n</ol>\n\n<h2>Solution</h2>\n\n<p><em>Ensure you have <a href=\"http://pandas.pydata.org/getpandas.html\">pandas at least <code>0.10.1</code></a> installed.</em></p>\n\n<p>Read <a href=\"http://pandas-docs.github.io/pandas-docs-travis/io.html#iterating-through-files-chunk-by-chunk\">iterating files chunk-by-chunk</a> and <a href=\"http://pandas-docs.github.io/pandas-docs-travis/io.html#multiple-table-queries\">multiple table queries</a>.</p>\n\n<p>Since pytables is optimized to operate on row-wise (which is what you query on), we will create a table for each group of fields. This way it's easy to select a small group of fields (which will work with a big table, but it's more efficient to do it this way... I think I may be able to fix this limitation in the future... this is more intuitive anyhow):<br>\n(The following is pseudocode.)</p>\n\n<pre><code>import numpy as np\nimport pandas as pd\n\n# create a store\nstore = pd.HDFStore('mystore.h5')\n\n# this is the key to your storage:\n#    this maps your fields to a specific group, and defines \n#    what you want to have as data_columns.\n#    you might want to create a nice class wrapping this\n#    (as you will want to have this map and its inversion)  \ngroup_map = dict(\n    A = dict(fields = ['field_1','field_2',.....], dc = ['field_1',....,'field_5']),\n    B = dict(fields = ['field_10',......        ], dc = ['field_10']),\n    .....\n    REPORTING_ONLY = dict(fields = ['field_1000','field_1001',...], dc = []),\n\n)\n\ngroup_map_inverted = dict()\nfor g, v in group_map.items():\n    group_map_inverted.update(dict([ (f,g) for f in v['fields'] ]))\n</code></pre>\n\n<p>Reading in the files and creating the storage (essentially doing what <code>append_to_multiple</code> does):</p>\n\n<pre><code>for f in files:\n   # read in the file, additional options hmay be necessary here\n   # the chunksize is not strictly necessary, you may be able to slurp each \n   # file into memory in which case just eliminate this part of the loop \n   # (you can also change chunksize if necessary)\n   for chunk in pd.read_table(f, chunksize=50000):\n       # we are going to append to each table by group\n       # we are not going to create indexes at this time\n       # but we *ARE* going to create (some) data_columns\n\n       # figure out the field groupings\n       for g, v in group_map.items():\n             # create the frame for this group\n             frame = chunk.reindex(columns = v['fields'], copy = False)    \n\n             # append it\n             store.append(g, frame, index=False, data_columns = v['dc'])\n</code></pre>\n\n<p>Now you have all of the tables in the file (actually you could store them in separate files if you wish, you would prob have to add the filename to the group_map, but probably this isn't necessary).</p>\n\n<p>This is how you get columns and create new ones:</p>\n\n<pre><code>frame = store.select(group_that_I_want)\n# you can optionally specify:\n# columns = a list of the columns IN THAT GROUP (if you wanted to\n#     select only say 3 out of the 20 columns in this sub-table)\n# and a where clause if you want a subset of the rows\n\n# do calculations on this frame\nnew_frame = cool_function_on_frame(frame)\n\n# to 'add columns', create a new group (you probably want to\n# limit the columns in this new_group to be only NEW ones\n# (e.g. so you don't overlap from the other tables)\n# add this info to the group_map\nstore.append(new_group, new_frame.reindex(columns = new_columns_created, copy = False), data_columns = new_columns_created)\n</code></pre>\n\n<p>When you are ready for post_processing:</p>\n\n<pre><code># This may be a bit tricky; and depends what you are actually doing.\n# I may need to modify this function to be a bit more general:\nreport_data = store.select_as_multiple([groups_1,groups_2,.....], where =['field_1&gt;0', 'field_1000=foo'], selector = group_1)\n</code></pre>\n\n<p>About data_columns, you don't actually need to define <strong>ANY</strong> data_columns; they allow you to sub-select rows based on the column. E.g. something like:</p>\n\n<pre><code>store.select(group, where = ['field_1000=foo', 'field_1001&gt;0'])\n</code></pre>\n\n<p>They may be most interesting to you in the final report generation stage (essentially a data column is segregated from other columns, which might impact efficiency somewhat if you define a lot).</p>\n\n<p>You also might want to:</p>\n\n<ul>\n<li>create a function which takes a list of fields, looks up the groups in the groups_map, then selects these and concatenates the results so you get the resulting frame (this is essentially what select_as_multiple does). <em>This way the structure would be pretty transparent to you.</em></li>\n<li>indexes on certain data columns (makes row-subsetting much faster).</li>\n<li>enable compression.</li>\n</ul>\n\n<p>Let me know when you have questions!</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I wonder what is better to do:</p>\n\n<pre><code>d = {'a': 1, 'b': 2}\n'a' in d\nTrue\n</code></pre>\n\n<p>or:</p>\n\n<pre><code>d = {'a': 1, 'b': 2}\nd.has_key('a')\nTrue\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>in</code> is definitely more pythonic.</p>\n\n<p>In fact <a href=\"http://docs.python.org/3.1/whatsnew/3.0.html#builtins\" rel=\"noreferrer\"><code>has_key()</code> was removed in Python 3.x</a>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a small utility that I use to download a MP3 from a website on a schedule and then builds/updates a podcast XML file which I've obviously added to iTunes.</p>\n\n<p>The text processing that creates/updates the XML file is written in Python. I use wget inside a Windows <code>.bat</code> file to download the actual MP3 however. I would prefer to have the entire utility written in Python though.</p>\n\n<p>I struggled though to find a way to actually down load the file in Python, thus why I resorted to <code>wget</code>.</p>\n\n<p>So, how do I download the file using Python?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In Python 2, use urllib2 which comes with the standard library.</p>\n\n<pre><code>import urllib2\nresponse = urllib2.urlopen('http://www.example.com/')\nhtml = response.read()\n</code></pre>\n\n<p>This is the most basic way to use the library, minus any error handling.  You can also do more complex stuff such as changing headers.  The documentation can be found <a href=\"http://docs.python.org/2/library/urllib2.html\" rel=\"noreferrer\">here.</a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Imagine that you have:</p>\n\n<pre><code>keys = ('name', 'age', 'food')\nvalues = ('Monty', 42, 'spam')\n</code></pre>\n\n<p>What is the simplest way to produce the following dictionary ?</p>\n\n<pre><code>a_dict = {'name' : 'Monty', 'age' : 42, 'food' : 'spam'}\n</code></pre>\n\n<p>This code works, but I'm not really proud of it :</p>\n\n<pre><code>a_dict = {}\njunk = map(lambda k, v: a_dict.update({k: v}), keys, values)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Like this:</p>\n\n<pre><code>&gt;&gt;&gt; keys = ['a', 'b', 'c']\n&gt;&gt;&gt; values = [1, 2, 3]\n&gt;&gt;&gt; dictionary = dict(zip(keys, values))\n&gt;&gt;&gt; print(dictionary)\n{'a': 1, 'b': 2, 'c': 3}\n</code></pre>\n\n<p>Voila :-)  The pairwise dict constructor and zip function are awesomely useful: <a href=\"https://docs.python.org/3/library/functions.html#func-dict\" rel=\"noreferrer\">https://docs.python.org/3/library/functions.html#func-dict</a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I need to get a line count of a large file (hundreds of thousands of lines) in python. What is the most efficient way both memory- and time-wise?</p>\n\n<p>At the moment I do:</p>\n\n<pre><code>def file_len(fname):\n    with open(fname) as f:\n        for i, l in enumerate(f):\n            pass\n    return i + 1\n</code></pre>\n\n<p>is it possible to do any better?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can't get any better than that.</p>\n\n<p>After all, any solution will have to read the entire file, figure out how many <code>\\n</code> you have, and return that result.</p>\n\n<p>Do you have a better way of doing that without reading the entire file? Not sure... The best solution will always be I/O-bound, best you can do is make sure you don't use unnecessary memory, but it looks like you have that covered.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am aware of the <code>die()</code> command in PHP which stops a script early.</p>\n\n<p>How can I do this in Python?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>import sys\nsys.exit()\n</code></pre>\n\n<p>details from the <a href=\"https://docs.python.org/2/library/constants.html#exit\" rel=\"noreferrer\" title=\"exit\"><code>sys</code> module documentation</a>:</p>\n\n<blockquote>\n  <p><code>sys.<strong>exit</strong>([<em>arg</em>])</code></p>\n  \n  <blockquote>\n    <p>Exit from Python. This is implemented by raising the\n    <a href=\"https://docs.python.org/2/library/exceptions.html#SystemExit\" rel=\"noreferrer\" title=\"SystemExit\"><code>SystemExit</code></a> exception, so cleanup actions specified by finally clauses\n    of <a href=\"https://docs.python.org/2/reference/compound_stmts.html#try\" rel=\"noreferrer\" title=\"try\"><code>try</code></a> statements are honored, and it is possible to intercept the\n    exit attempt at an outer level.</p>\n    \n    <p>The optional argument <em>arg</em> can be an integer giving the exit status\n    (defaulting to zero), or another type of object. If it is an integer,\n    zero is considered \u201csuccessful termination\u201d and any nonzero value is\n    considered \u201cabnormal termination\u201d by shells and the like. Most systems\n    require it to be in the range 0-127, and produce undefined results\n    otherwise. Some systems have a convention for assigning specific\n    meanings to specific exit codes, but these are generally\n    underdeveloped; Unix programs generally use 2 for command line syntax\n    errors and 1 for all other kind of errors. If another type of object\n    is passed, None is equivalent to passing zero, and any other object is\n    printed to <a href=\"https://docs.python.org/2/library/sys.html#sys.stderr\" rel=\"noreferrer\" title=\"sys.stderr\"><code>stderr</code></a> and results in an exit code of 1. In particular,\n    <code>sys.exit(\"some error message\")</code> is a quick way to exit a program when\n    an error occurs.</p>\n    \n    <p>Since <a href=\"https://docs.python.org/2/library/constants.html#exit\" rel=\"noreferrer\" title=\"exit\"><code>exit()</code></a> ultimately \u201conly\u201d raises an exception, it will only exit\n    the process when called from the main thread, and the exception is not\n    intercepted.</p>\n  </blockquote>\n</blockquote>\n\n<p>Note that this is the 'nice' way to exit.  @<a href=\"https://stackoverflow.com/questions/73663/terminating-a-python-script#76374\">glyphtwistedmatrix</a> below points out that if you want a 'hard exit', you can use os._exit(<em>errorcode</em>), though it's likely os-specific to some extent (it might not take an errorcode under windows, for example), and it definitely is less friendly since it doesn't let the interpreter do any cleanup before the process dies.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>The canonical way to return multiple values in languages that support it is often <a href=\"https://stackoverflow.com/questions/38508/whats-the-best-way-to-return-multiple-values-from-a-function-in-python\">tupling</a>. </p>\n\n<h3>Option: Using a tuple</h3>\n\n<p>Consider this trivial example:</p>\n\n<pre><code>def f(x):\n  y0 = x + 1\n  y1 = x * 3\n  y2 = y0 ** y3\n  return (y0,y1,y2)\n</code></pre>\n\n<p>However, this quickly gets problematic as the number of values returned increases. What if you want to return four or five values? Sure, you could keep tupling them, but it gets easy to forget which value is where. It's also rather ugly to unpack them wherever you want to receive them.</p>\n\n<h3>Option: Using a dictionary</h3>\n\n<p>The next logical step seems to be to introduce some sort of 'record notation'. In python, the obvious way to do this is by means of a <code>dict</code>. </p>\n\n<p>Consider the following:</p>\n\n<pre><code>def g(x):\n  y0 = x + 1\n  y1 = x * 3\n  y2 = y0 ** y3\n  return {'y0':y0, 'y1':y1 ,'y2':y2 }\n</code></pre>\n\n<p>(edit- Just to be clear, y0, y1 and y2 are just meant as abstract identifiers. As pointed out, in practice you'd use meaningful identifiers)</p>\n\n<p>Now, we have a mechanism whereby we can project out a particular member of the returned object. For example, </p>\n\n<pre><code>result['y0']\n</code></pre>\n\n<h3>Option: Using a class</h3>\n\n<p>However, there is another option. We could instead return a specialized structure. I've framed this in the context of Python, but I'm sure it applies to other languages as well. Indeed, if you were working in C this might very well be your only option. Here goes:</p>\n\n<pre><code>class ReturnValue(object):\n  def __init__(self, y0, y1, y2):\n     self.y0 = y0\n     self.y1 = y1\n     self.y2 = y2\n\ndef g(x):\n  y0 = x + 1\n  y1 = x * 3\n  y2 = y0 ** y3\n  return ReturnValue(y0, y1, y2)\n</code></pre>\n\n<p>In python the previous two are perhaps very similar in terms of plumbing- After all <code>{ y0, y1, y2 }</code> just end up being entries in the internal <code>__dict__</code> of the <code>ReturnValue</code>.</p>\n\n<p>There is one additional feature provided by Python though for tiny objects, the <code>__slots__</code> attribute. The class could be expressed as:</p>\n\n<pre><code>class ReturnValue(object):\n  __slots__ = [\"y0\", \"y1\", \"y2\"]\n  def __init__(self, y0, y1, y2):\n     self.y0 = y0\n     self.y1 = y1\n     self.y2 = y2\n</code></pre>\n\n<p>From the <a href=\"http://www.network-theory.co.uk/docs/pylang/__slots__.html\" rel=\"noreferrer\">Python Reference Manual</a>:</p>\n\n<blockquote>\n  <p>The <code>__slots__</code> declaration takes a sequence of instance variables and reserves just enough space in each instance to hold a value for each variable. Space is saved because <code>__dict__</code> is not created for each instance.</p>\n</blockquote>\n\n<h3>Option: Using a list</h3>\n\n<p>Another suggestion which I'd overlooked comes from Bill the Lizard:</p>\n\n<pre><code>def h(x):\n  result = [x + 1]\n  result.append(x * 3)\n  result.append(y0 ** y3)\n  return result\n</code></pre>\n\n<p>This is my least favorite method though. I suppose I'm tainted by exposure to Haskell, but the idea of mixed-type lists has always felt uncomfortable to me. In this particular example the list is -not- mixed type, but it conceivably could be. A list used in this way really doesn't gain anything with respect to the tuple as far as I can tell. The only real difference between lists and tuples in Python is that lists are <a href=\"http://docs.python.org/library/stdtypes.html#typesseq-mutable\" rel=\"noreferrer\">mutable</a>, wheras tuples are not. I personally tend to carry over the conventions from functional programming: use lists for any number of elements of the same type, and tuples for a fixed number of elements of predetermined types.</p>\n\n<h1>Question</h1>\n\n<p>After the lengthy preamble, comes the inevitable question. Which method (do you think) is best?</p>\n\n<p>I've typically found myself going the dictionary route because it involves less set-up work. From a types perspective however, you might be better off going the class route, since that may help you avoid confusing what a dictionary represents. On the other hand, there are some in the Python community that feel <a href=\"http://www.canonical.org/~kragen/isinstance/\" rel=\"noreferrer\">implied interfaces should be preferred to explicit interfaces</a>, at which point the type of the object really isn't relevant, since you're basically relying on the convention that the same attribute will always have the same meaning. </p>\n\n<p>So, how do -you- return multiple values in Python?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"http://docs.python.org/library/collections.html#namedtuple-factory-function-for-tuples-with-named-fields\" rel=\"noreferrer\">Named tuples</a> were added in 2.6 for this purpose.  Also see <a href=\"http://docs.python.org/library/os.html#os.stat\" rel=\"noreferrer\">os.stat</a> for a similar builtin example.</p>\n\n<pre><code>&gt;&gt;&gt; import collections\n&gt;&gt;&gt; Point = collections.namedtuple('Point', ['x', 'y'])\n&gt;&gt;&gt; p = Point(1, y=2)\n&gt;&gt;&gt; p.x, p.y\n1 2\n&gt;&gt;&gt; p[0], p[1]\n1 2\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In the <code>os</code> module in Python, is there a way to find if a directory exists, something like:</p>\n\n<pre><code>&gt;&gt;&gt; os.direxists(os.path.join(os.getcwd()), 'new_folder')) # in pseudocode\nTrue/False\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You're looking for <a href=\"http://docs.python.org/dev/library/os.path.html#os.path.isdir\"><code>os.path.isdir</code></a>, or <a href=\"http://docs.python.org/dev/library/os.path.html#os.path.exists\"><code>os.path.exists</code></a> if you don't care whether it's a file or a directory.</p>\n\n<p>Example:</p>\n\n<pre><code>import os\nprint(os.path.isdir(\"/home/el\"))\nprint(os.path.exists(\"/home/el/myfile.txt\"))\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Python's <code>easy_install</code> makes installing new packages extremely convenient. However, as far as I can tell, it doesn't implement the other common features of a dependency manager - listing and removing installed packages.</p>\n\n<p>What is the best way of finding out what's installed, and what is the preferred way of removing installed packages? Are there any files that need to be updated if I remove packages manually (e.g. by <code>rm /usr/local/lib/python2.6/dist-packages/my_installed_pkg.egg</code> or similar)?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"http://pypi.python.org/pypi/pip/\" rel=\"noreferrer\">pip</a>, an alternative to setuptools/easy_install, provides an \"uninstall\" command. </p>\n\n<p>Install pip according to the <a href=\"http://pip.readthedocs.org/en/stable/installing/\" rel=\"noreferrer\">installation instructions</a>:</p>\n\n<pre><code>$ wget https://bootstrap.pypa.io/get-pip.py\n$ python get-pip.py\n</code></pre>\n\n<p>Then you can use <code>pip uninstall</code> to remove packages installed with <code>easy_install</code></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How do I refer to the null object in Python?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In Python, the 'null' object is the singleton <code>None</code>.</p>\n\n<p>The best way to check things for \"Noneness\" is to use the identity operator, <code>is</code>:</p>\n\n<pre><code>if foo is None:\n    ...\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm used to doing <code>print &gt;&gt;f, \"hi there\"</code></p>\n\n<p>However, it seems that <code>print &gt;&gt;</code> is getting deprecated. What is the recommended way to do the line above?</p>\n\n<p><b>Update</b>:\nRegarding all those answers with <code>\"\\n\"</code>...is this universal or Unix-specific? IE, should I be doing <code>\"\\r\\n\"</code> on Windows?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You should use the <code>print()</code> function which is available since Python 2.6+</p>\n\n<pre><code>from __future__ import print_function  # Only needed for Python 2\nprint(\"hi there\", file=f)\n</code></pre>\n\n<p>For Python 3 you don't need the <code>import</code>, since the  <code>print()</code> function is the default.</p>\n\n<p>The alternative would be to use:</p>\n\n<pre><code>f = open('myfile', 'w')\nf.write('hi there\\n')  # python will convert \\n to os.linesep\nf.close()  # you can omit in most cases as the destructor will call it\n</code></pre>\n\n<p>Quoting from <a href=\"https://docs.python.org/2/tutorial/inputoutput.html#reading-and-writing-files\">Python documentation</a> regarding newlines:</p>\n\n<blockquote>\n  <p>On output, if newline is None, any <code>'\\n'</code> characters written are translated to the system default line separator, <code>os.linesep</code>. If newline is <code>''</code>, no translation takes place. If newline is any of the other legal values, any <code>'\\n'</code> characters written are translated to the given string.</p>\n</blockquote>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I can't find a definitive answer for this. AFAIK, you can't have multiple <code>__init__</code> functions in a Python class. So what is a good way to solve this problem? </p>\n\n<p>Suppose I have an class called <code>Cheese</code> with the <code>number_of_holes</code> property. How can I have two ways of creating cheese-objects...</p>\n\n<ul>\n<li>one that takes a number of holes like this: <code>parmesan = Cheese(num_holes = 15)</code></li>\n<li>and one that takes no arguments and just randomizes the <code>number_of_holes</code> property: <code>gouda = Cheese()</code></li>\n</ul>\n\n<p>I can think of only one way to do this, but that seems kinda clunky:</p>\n\n<pre><code>class Cheese():\n    def __init__(self, num_holes = 0):\n        if (num_holes == 0):\n            # randomize number_of_holes\n        else:\n            number_of_holes = num_holes\n</code></pre>\n\n<p>What do you say? Is there a better way?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Actually <code>None</code> is much better for \"magic\" values:</p>\n\n<pre><code>class Cheese():\n    def __init__(self, num_holes = None):\n        if num_holes is None:\n            ...\n</code></pre>\n\n<p>Now if you want complete freedom of adding more parameters:</p>\n\n<pre><code>class Cheese():\n    def __init__(self, *args, **kwargs):\n        #args -- tuple of anonymous arguments\n        #kwargs -- dictionary of named arguments\n        self.num_holes = kwargs.get('num_holes',random_holes())\n</code></pre>\n\n<p>To better explain the concept of <code>*args</code> and <code>**kwargs</code> (you can actually change these names):</p>\n\n<pre><code>def f(*args, **kwargs):\n   print 'args: ', args, ' kwargs: ', kwargs\n\n&gt;&gt;&gt; f('a')\nargs:  ('a',)  kwargs:  {}\n&gt;&gt;&gt; f(ar='a')\nargs:  ()  kwargs:  {'ar': 'a'}\n&gt;&gt;&gt; f(1,2,param=3)\nargs:  (1, 2)  kwargs:  {'param': 3}\n</code></pre>\n\n<p><a href=\"http://docs.python.org/reference/expressions.html#calls\" rel=\"noreferrer\">http://docs.python.org/reference/expressions.html#calls</a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have many rows in a database that contains xml and I'm trying to write a Python script that will go through those rows and count how many instances of a particular node attribute show up. For instance, my tree looks like:</p>\n\n<pre><code>&lt;foo&gt;\n   &lt;bar&gt;\n      &lt;type foobar=\"1\"/&gt;\n      &lt;type foobar=\"2\"/&gt;\n   &lt;/bar&gt;\n&lt;/foo&gt;\n</code></pre>\n\n<p>How can I access the attributes 1 and 2 in the XML using Python?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I suggest <a href=\"http://docs.python.org/library/xml.etree.elementtree.html\" rel=\"noreferrer\"><code>ElementTree</code></a>.  There are other compatible implementations of the same API, such as <a href=\"http://lxml.de/\" rel=\"noreferrer\"><code>lxml</code></a>, and <code>cElementTree</code> in the Python standard library itself; but, in this context, what they chiefly add is even more speed -- the ease of programming part depends on the API, which <code>ElementTree</code> defines.</p>\n\n<p>After building an Element instance <code>e</code> from the XML, e.g. with the <a href=\"http://docs.python.org/library/xml.etree.elementtree.html#xml.etree.ElementTree.XML\" rel=\"noreferrer\">XML</a> function, or by parsing a file with something like</p>\n\n<pre><code>import xml.etree.ElementTree\ne = xml.etree.ElementTree.parse('thefile.xml').getroot()\n</code></pre>\n\n<p>or any of the many other ways shown at <a href=\"http://docs.python.org/library/xml.etree.elementtree.html\" rel=\"noreferrer\"><code>ElementTree</code></a>, you just do something like:</p>\n\n<pre><code>for atype in e.findall('type'):\n    print(atype.get('foobar'))\n</code></pre>\n\n<p>and similar, usually pretty simple, code patterns.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I want to write a function that will execute a shell command and return its output <strong>as a string</strong>, no matter, is it an error or success message. I just want to get the same result that I would have gotten with the command line.</p>\n\n<p>What would be a code example that would do such a thing?</p>\n\n<p>For example:</p>\n\n<pre><code>def run_command(cmd):\n    # ??????\n\nprint run_command('mysqladmin create test -uroot -pmysqladmin12')\n# Should output something like:\n# mysqladmin: CREATE DATABASE failed; error: 'Can't create database 'test'; database exists'\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The answer to this question depends on the version of Python you're using. The simplest approach is to use the <a href=\"https://docs.python.org/3/library/subprocess.html#subprocess.check_output\" rel=\"noreferrer\"><code>subprocess.check_output</code></a> function:</p>\n\n<pre><code>&gt;&gt;&gt; subprocess.check_output(['ls', '-l'])\nb'total 0\\n-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\\n'\n</code></pre>\n\n<p><code>check_output</code> runs a single program that takes only arguments as input.<sup>1</sup> It returns the result exactly as printed to <code>stdout</code>. If you need to write input to <code>stdin</code>, skip ahead to the <code>run</code> or <code>Popen</code> sections. If you want to execute complex shell commands, see the note on <code>shell=True</code> at the end of this answer.</p>\n\n<p>The <code>check_output</code> function works on almost all versions of Python still in wide use (2.7+).<sup>2</sup> But for more recent versions, it is no longer the recommended approach.</p>\n\n<h3>Modern versions of Python (3.5 or higher): <code>run</code></h3>\n\n<p>If you're using <strong>Python 3.5</strong> or higher, and <strong>do not need backwards compatibility</strong>, the <a href=\"https://docs.python.org/3/library/subprocess.html#using-the-subprocess-module\" rel=\"noreferrer\">new <code>run</code> function</a> is recommended. It provides a very general, high-level API for the <code>subprocess</code> module. To capture the output of a program, pass the <code>subprocess.PIPE</code> flag to the <code>stdout</code> keyword argument. Then access the <code>stdout</code> attribute of the returned <a href=\"https://docs.python.org/3/library/subprocess.html#subprocess.CompletedProcess\" rel=\"noreferrer\"><code>CompletedProcess</code></a> object:</p>\n\n<pre><code>&gt;&gt;&gt; import subprocess\n&gt;&gt;&gt; result = subprocess.run(['ls', '-l'], stdout=subprocess.PIPE)\n&gt;&gt;&gt; result.stdout\nb'total 0\\n-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\\n'\n</code></pre>\n\n<p>The return value is a <code>bytes</code> object, so if you want a proper string, you'll need to <code>decode</code> it. Assuming the called process returns a UTF-8-encoded string:</p>\n\n<pre><code>&gt;&gt;&gt; result.stdout.decode('utf-8')\n'total 0\\n-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\\n'\n</code></pre>\n\n<p>This can all be compressed to a one-liner:</p>\n\n<pre><code>&gt;&gt;&gt; subprocess.run(['ls', '-l'], stdout=subprocess.PIPE).stdout.decode('utf-8')\n'total 0\\n-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\\n'\n</code></pre>\n\n<p>If you want to pass input to the process's <code>stdin</code>, pass a <code>bytes</code> object to the <code>input</code> keyword argument:</p>\n\n<pre><code>&gt;&gt;&gt; cmd = ['awk', 'length($0) &gt; 5']\n&gt;&gt;&gt; input = 'foo\\nfoofoo\\n'.encode('utf-8')\n&gt;&gt;&gt; result = subprocess.run(cmd, stdout=subprocess.PIPE, input=input)\n&gt;&gt;&gt; result.stdout.decode('utf-8')\n'foofoo\\n'\n</code></pre>\n\n<p>You can capture errors by passing <code>stderr=subprocess.PIPE</code> (capture to <code>result.stderr</code>) or <code>stderr=subprocess.STDOUT</code> (capture to <code>result.stdout</code> along with regular output). When security is not a concern, you can also run more complex shell commands by passing <code>shell=True</code> as described in the notes below.</p>\n\n<p>This adds just a bit of complexity, compared to the old way of doing things. But I think it's worth the payoff: now you can do almost anything you need to do with the <code>run</code> function alone.</p>\n\n<h3>Older versions of Python (2.7-3.4): <code>check_output</code></h3>\n\n<p>If you are using an older version of Python, or need modest backwards compatibility, you can probably use the <code>check_output</code> function as briefly described above. It has been available since Python 2.7.</p>\n\n<pre><code>subprocess.check_output(*popenargs, **kwargs)  \n</code></pre>\n\n<p>It takes takes the same arguments as <code>Popen</code> (see below), and returns a string containing the program's output. The beginning of this answer has a more detailed usage example. </p>\n\n<p>You can pass <code>stderr=subprocess.STDOUT</code> to ensure that error messages are included in the returned output -- but don't pass <code>stderr=subprocess.PIPE</code> to <code>check_output</code>. It can cause <a href=\"http://docs.python.org/library/subprocess.html#subprocess.check_output\" rel=\"noreferrer\">deadlocks</a>. When security is not a concern, you can also run more complex shell commands by passing <code>shell=True</code> as described in the notes below.</p>\n\n<p>If you need to pipe from <code>stderr</code> or pass input to the process, <code>check_output</code> won't be up to the task. See the <code>Popen</code> examples below in that case. </p>\n\n<h3>Complex applications &amp; legacy versions of Python (2.6 and below): <code>Popen</code></h3>\n\n<p>If you need deep backwards compatibility, or if you need more sophisticated functionality than <code>check_output</code> provides, you'll have to work directly with <code>Popen</code> objects, which encapsulate the low-level API for subprocesses. </p>\n\n<p>The <code>Popen</code> constructor accepts either <strong>a single command</strong> without arguments, or <strong>a list</strong> containing a command as its first item, followed by any number of arguments, each as a separate item in the list. <a href=\"https://docs.python.org/3/library/shlex.html\" rel=\"noreferrer\"><code>shlex.split</code></a> can help parse strings into appropriately formatted lists. <code>Popen</code> objects also accept a <a href=\"https://docs.python.org/3/library/subprocess.html#subprocess.Popen\" rel=\"noreferrer\">host of different arguments</a> for process IO management and low-level configuration. </p>\n\n<p>To send input and capture output, <code>communicate</code> is almost always the preferred method. As in:</p>\n\n<pre><code>output = subprocess.Popen([\"mycmd\", \"myarg\"], \n                          stdout=subprocess.PIPE).communicate()[0]\n</code></pre>\n\n<p>Or </p>\n\n<pre><code>&gt;&gt;&gt; import subprocess\n&gt;&gt;&gt; p = subprocess.Popen(['ls', '-a'], stdout=subprocess.PIPE, \n...                                    stderr=subprocess.PIPE)\n&gt;&gt;&gt; out, err = p.communicate()\n&gt;&gt;&gt; print out\n.\n..\nfoo\n</code></pre>\n\n<p>If you set <code>stdin=PIPE</code>, <code>communicate</code> also allows you to pass data to the process via <code>stdin</code>:</p>\n\n<pre><code>&gt;&gt;&gt; cmd = ['awk', 'length($0) &gt; 5']\n&gt;&gt;&gt; p = subprocess.Popen(cmd, stdout=subprocess.PIPE,\n...                           stderr=subprocess.PIPE,\n...                           stdin=subprocess.PIPE)\n&gt;&gt;&gt; out, err = p.communicate('foo\\nfoofoo\\n')\n&gt;&gt;&gt; print out\nfoofoo\n</code></pre>\n\n<p>Note <a href=\"https://stackoverflow.com/a/21867841/577088\">Aaron Hall's answer</a>, which indicates that on some systems, you may need to set <code>stdout</code>, <code>stderr</code>, and <code>stdin</code> all to <code>PIPE</code> (or <code>DEVNULL</code>) to get <code>communicate</code> to work at all.</p>\n\n<p>In some rare cases, you may need complex, real-time output capturing. <a href=\"https://stackoverflow.com/a/4760274/577088\">Vartec</a>'s answer suggests a way forward, but methods other than <code>communicate</code> are prone to deadlocks if not used carefully.</p>\n\n<p>As with all the above functions, when security is not a concern, you can run more complex shell commands by passing <code>shell=True</code>.</p>\n\n<h3>Notes</h3>\n\n<p><strong>1. Running shell commands: the <code>shell=True</code> argument</strong></p>\n\n<p>Normally, each call to <code>run</code>, <code>check_output</code>, or the <code>Popen</code> constructor executes a <em>single program</em>. That means no fancy bash-style pipes. If you want to run complex shell commands, you can pass <code>shell=True</code>, which all three functions support.</p>\n\n<p>However, doing so raises <a href=\"https://docs.python.org/3/library/subprocess.html#security-considerations\" rel=\"noreferrer\">security concerns</a>. If you're doing anything more than light scripting, you might be better off calling each process separately, and passing the output from each as an input to the next, via</p>\n\n<pre><code>run(cmd, [stdout=etc...], input=other_output)\n</code></pre>\n\n<p>Or</p>\n\n<pre><code>Popen(cmd, [stdout=etc...]).communicate(other_output)\n</code></pre>\n\n<p>The temptation to directly connect pipes is strong; resist it. Otherwise, you'll likely see deadlocks or have to do hacky things like <a href=\"https://stackoverflow.com/questions/6341451/piping-together-several-subprocesses\">this</a>.</p>\n\n<p><strong>2. Unicode considerations</strong></p>\n\n<p><code>check_output</code> returns a string in Python 2, but a <code>bytes</code> object in Python 3. It's worth taking a moment to <a href=\"https://docs.python.org/3/howto/unicode.html\" rel=\"noreferrer\">learn about unicode</a> if you haven't already.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In Python, what are the differences between the <code>urllib</code>, <code>urllib2</code>, and <a href=\"http://docs.python-requests.org/en/latest/index.html\" rel=\"noreferrer\"><code>requests</code></a> module? Why are there three? They seem to do the same thing...</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I know its been said already, but I'd highly recommend the Requests python package:\n<a href=\"http://docs.python-requests.org/en/latest/index.html\" rel=\"noreferrer\">http://docs.python-requests.org/en/latest/index.html</a></p>\n\n<p>If you've used languages other than python, you're probably thinking urllib and urllib2 are easy to use, not much code, and highly capable, that's how I used to think.  But the Requests package is so unbelievably useful and short that everyone should be using it.</p>\n\n<p>First, it supports a fully restful API, and is as easy as:</p>\n\n<pre><code>import requests\n...\n\nresp = requests.get('http://www.mywebsite.com/user')\nresp = requests.post('http://www.mywebsite.com/user')\nresp = requests.put('http://www.mywebsite.com/user/put')\nresp = requests.delete('http://www.mywebsite.com/user/delete')\n</code></pre>\n\n<p>Regardless of whether GET/POST you never have to encode parameters again, it simply takes a dictionary as an argument and is good to go.</p>\n\n<pre><code>userdata = {\"firstname\": \"John\", \"lastname\": \"Doe\", \"password\": \"jdoe123\"}\nresp = requests.post('http://www.mywebsite.com/user', data=userdata)\n</code></pre>\n\n<p>Plus it even has a built in json decoder (again, i know json.loads() isn't a lot more to write, but this sure is convenient):</p>\n\n<pre><code>resp.json()\n</code></pre>\n\n<p>Or if your response data is just text, use:</p>\n\n<pre><code>resp.text\n</code></pre>\n\n<p>This is just the tip of the iceberg. This is the list of features from the requests site:</p>\n\n<ul>\n<li>International Domains and URLs</li>\n<li>Keep-Alive &amp; Connection Pooling</li>\n<li>Sessions with Cookie Persistence</li>\n<li>Browser-style SSL Verification</li>\n<li>Basic/Digest Authentication</li>\n<li>Elegant Key/Value Cookies</li>\n<li>Automatic Decompression</li>\n<li>Unicode Response Bodies</li>\n<li>Multipart File Uploads</li>\n<li>Connection Timeouts</li>\n<li>.netrc support</li>\n<li>List item</li>\n<li>Python 2.6\u20143.4</li>\n<li>Thread-safe.</li>\n</ul>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have JSON data stored in the variable <code>data</code>.</p>\n\n<p>I want to write this to a text file for testing so I don't have to grab the data from the server each time.</p>\n\n<p>Currently, I am trying this:</p>\n\n<pre><code>obj = open('data.txt', 'wb')\nobj.write(data)\nobj.close\n</code></pre>\n\n<p>And am receiving the error: </p>\n\n<p><code>TypeError: must be string or buffer, not dict</code></p>\n\n<p>How to fix this?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You forgot the actual JSON part - <code>data</code> is a dictionary and not yet JSON-encoded. Write it like this:</p>\n\n<pre><code>import json\nwith open('data.txt', 'w') as outfile:\n    json.dump(data, outfile)\n</code></pre>\n\n<p>Note: Works on both 3.x and 2.x .</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is there a reason to prefer using <code>map()</code> over list comprehension or vice versa?  Is either of them generally more efficient or considered generally more pythonic than the other?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>map</code> may be microscopically faster in some cases (when you're NOT making a lambda for the purpose, but using the same function in map and a listcomp). List comprehensions may be faster in other cases and most (not all) pythonistas consider them more direct and clearer.</p>\n\n<p>An example of the tiny speed advantage of map when using exactly the same function:</p>\n\n<pre><code>$ python -mtimeit -s'xs=range(10)' 'map(hex, xs)'\n100000 loops, best of 3: 4.86 usec per loop\n$ python -mtimeit -s'xs=range(10)' '[hex(x) for x in xs]'\n100000 loops, best of 3: 5.58 usec per loop\n</code></pre>\n\n<p>An example of how performance comparison gets completely reversed when map needs a lambda:</p>\n\n<pre><code>$ python -mtimeit -s'xs=range(10)' 'map(lambda x: x+2, xs)'\n100000 loops, best of 3: 4.24 usec per loop\n$ python -mtimeit -s'xs=range(10)' '[x+2 for x in xs]'\n100000 loops, best of 3: 2.32 usec per loop\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm trying to follow <a href=\"http://www.python.org/dev/peps/pep-0328/\" rel=\"noreferrer\">PEP 328</a>, with the following directory structure:</p>\n\n<pre><code>pkg/\n  __init__.py\n  components/\n    core.py\n    __init__.py\n  tests/\n    core_test.py\n    __init__.py\n</code></pre>\n\n<p>In <code>core_test.py</code> I have the following import statement</p>\n\n<pre><code>from ..components.core import GameLoopEvents\n</code></pre>\n\n<p>However, when I run, I get the following error:</p>\n\n<pre><code>tests$ python core_test.py \nTraceback (most recent call last):\n  File \"core_test.py\", line 3, in &lt;module&gt;\n    from ..components.core import GameLoopEvents\nValueError: Attempted relative import in non-package\n</code></pre>\n\n<p>Searching around I found \"<a href=\"https://stackoverflow.com/questions/9427037/relative-path-not-working-even-with-init-py\">relative path not working even with __init__.py</a>\" and \"<a href=\"https://stackoverflow.com/questions/279237/python-import-a-module-from-a-folder/6098238#6098238\">Import a module from a relative path</a>\" but they didn't help.</p>\n\n<p>Is there anything I'm missing here?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Yes. You're not using it as a package.</p>\n\n<pre><code>python -m pkg.tests.core_test\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am developing a piece of software in Python that will be distributed to my employer's customers. My employer wants to limit the usage of the software with a time restricted license file.</p>\n\n<p>If we distribute the .py files or even .pyc files it will be easy to (decompile and) remove the code that checks the license file.</p>\n\n<p>Another aspect is that my employer does not want the code to be read by our customers, fearing that the code may be stolen or at least the \"novel ideas\".</p>\n\n<p>Is there a good way to handle this problem? Preferably with an off-the-shelf solution.</p>\n\n<p>The software will run on Linux systems (so I don't think py2exe will do the trick).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Python, being a byte-code-compiled interpreted language, is very difficult to lock down.  Even if you use a exe-packager like <a href=\"http://py2exe.org\" rel=\"noreferrer\">py2exe</a>, the layout of the executable is well-known, and the Python byte-codes are well understood.</p>\n\n<p>Usually in cases like this, you have to make a tradeoff.  How important is it really to protect the code?  Are there real secrets in there (such as a key for symmetric encryption of bank transfers), or are you just being paranoid?  Choose the language that lets you develop the best product quickest, and be realistic about how valuable your novel ideas are.</p>\n\n<p>If you decide you really need to enforce the license check securely, write it as a small C extension so that the license check code can be extra-hard (but not impossible!) to reverse engineer, and leave the bulk of your code in Python.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I happened to find myself having a basic filtering need: I have a list and I have to filter it by an attribute of the items.</p>\n\n<p>My code looked like this:</p>\n\n<pre><code>my_list = [x for x in my_list if x.attribute == value]\n</code></pre>\n\n<p>But then I thought, wouldn't it be better to write it like this?</p>\n\n<pre><code>my_list = filter(lambda x: x.attribute == value, my_list)\n</code></pre>\n\n<p>It's more readable, and if needed for performance the lambda could be taken out to gain something.  </p>\n\n<p>Question is: are there any caveats in using the second way? Any performance difference? Am I missing the Pythonic Way\u2122 entirely and should do it in yet another way (such as using itemgetter instead of the lambda)?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It is strange how much beauty varies for different people. I find the list comprehension much clearer than <code>filter</code>+<code>lambda</code>, but use whichever you find easier. However, do stop giving your variables names already used for built-ins, that's confusing.</p>\n\n<p>There are two things that may slow down your use of <code>filter</code>.</p>\n\n<p>The first is the function call overhead: as soon as you use a Python function (whether created by <code>def</code> or <code>lambda</code>) it is likely that filter will be slower than the list comprehension. It almost certainly is not enough to matter, and you shouldn't think much about performance until you've timed your code and found it to be a bottleneck, but the difference will be there.</p>\n\n<p>The other overhead that might apply is that the lambda is being forced to access a scoped variable (<code>value</code>). That is slower than accessing a local variable and in Python 2.x the list comprehension only accesses local variables. If you are using Python 3.x the list comprehension runs in a separate function so it will also be accessing <code>value</code> through a closure and this difference won't apply.</p>\n\n<p>The other option to consider is to use a generator instead of a list comprehension:</p>\n\n<pre><code>def filterbyvalue(seq, value):\n   for el in seq:\n       if el.attribute==value: yield el\n</code></pre>\n\n<p>Then in your main code (which is where readability really matters) you've replaced both list comprehension and filter with a hopefully meaningful function name.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Given:</p>\n\n<pre><code>a = 1\nb = 10\nc = 100\n</code></pre>\n\n<p>I want to display a leading zero for all numbers with less than 2 digits, i.e.:</p>\n\n<pre><code>01\n10\n100\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here you are:</p>\n\n<pre><code>print \"%02d\" % (1,)\n</code></pre>\n\n<p>Basically <strong>%</strong> is like <code>printf</code> or <code>sprint</code>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/2668909/how-to-find-the-real-user-home-directory-using-python\" dir=\"ltr\">How to find the real user home directory using python?</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    8 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>I need to get the location of the home directory of the current logged-on user. Currently, I've been using the following on Linux:</p>\n\n<pre><code>os.getenv(\"HOME\")\n</code></pre>\n\n<p>However, this does not work on Windows. What is the correct cross-platform way to do this?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You want to use <a href=\"http://docs.python.org/library/os.path.html?highlight=os.path#os.path.expanduser\" rel=\"noreferrer\">os.path.expanduser</a>. This will ensure it works on all platforms</p>\n\n<pre><code>from os.path import expanduser\nhome = expanduser(\"~\")\n</code></pre>\n\n<p>Python 3.4+ use <a href=\"https://docs.python.org/3/library/pathlib.html#pathlib.Path.home\" rel=\"noreferrer\">pathlib.Path.home()</a>:</p>\n\n<pre><code>from pathlib import Path\nhome = str(Path.home())\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Imagine that you want to develop a non-trivial end-user desktop (not web) application in Python. What is the best way to structure the project's folder hierarchy?</p>\n\n<p>Desirable features are ease of maintenance, IDE-friendliness, suitability for source control branching/merging, and easy generation of install packages.</p>\n\n<p>In particular:</p>\n\n<ol>\n<li>Where do you put the source?</li>\n<li>Where do you put application startup scripts?</li>\n<li>Where do you put the IDE project cruft?</li>\n<li>Where do you put the unit/acceptance tests?</li>\n<li>Where do you put non-Python data such as config files?</li>\n<li>Where do you put non-Python sources such as C++ for pyd/so binary extension modules?</li>\n</ol>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Doesn't too much matter.  Whatever makes you happy will work.  There aren't a lot of silly rules because Python projects can be simple.</p>\n\n<ul>\n<li><code>/scripts</code> or <code>/bin</code> for that kind of command-line interface stuff</li>\n<li><code>/tests</code> for your tests</li>\n<li><code>/lib</code> for your C-language libraries</li>\n<li><code>/doc</code> for most documentation</li>\n<li><code>/apidoc</code> for the Epydoc-generated API docs.</li>\n</ul>\n\n<p>And the top-level directory can contain README's, Config's and whatnot.</p>\n\n<p>The hard choice is whether or not to use a <code>/src</code> tree.  Python doesn't have a distinction between <code>/src</code>, <code>/lib</code>, and <code>/bin</code> like Java or C has.</p>\n\n<p>Since a top-level <code>/src</code> directory is seen by some as meaningless, your top-level directory can be the top-level architecture of your application.</p>\n\n<ul>\n<li><code>/foo</code></li>\n<li><code>/bar</code></li>\n<li><code>/baz</code></li>\n</ul>\n\n<p>I recommend putting all of this under the \"name-of-my-product\" directory.  So, if you're writing an application named <code>quux</code>, the directory that contains all this stuff is named  <code>/quux</code>.</p>\n\n<p>Another project's <code>PYTHONPATH</code>, then, can include <code>/path/to/quux/foo</code> to reuse the <code>QUUX.foo</code> module.  </p>\n\n<p>In my case, since I use Komodo Edit, my IDE cuft is a single .KPF file.  I actually put that in the top-level <code>/quux</code> directory, and omit adding it to SVN.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I notice that a pre-increment/decrement operator can be applied on a variable (like <code>++count</code>). It compiles, but it does not actually change the value of the variable!</p>\n\n<p>What is the behavior of the pre-increment/decrement operators (++/--) in Python? </p>\n\n<p>Why does Python deviate from the behavior of these operators seen in C/C++?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>++</code> is not an operator. It is two <code>+</code> operators. The <code>+</code> operator is the <strong>identity</strong> operator, which does nothing. (Clarification: the <code>+</code> and <code>-</code> unary operators only work on numbers, but I presume that you wouldn't expect a hypothetical <code>++</code> operator to work on strings.)</p>\n\n<pre><code>++count\n</code></pre>\n\n<p>Parses as</p>\n\n<pre><code>+(+count)\n</code></pre>\n\n<p>Which translates to</p>\n\n<pre><code>count\n</code></pre>\n\n<p>You have to use the slightly longer <code>+=</code> operator to do what you want to do:</p>\n\n<pre><code>count += 1\n</code></pre>\n\n<p>I suspect the <code>++</code> and <code>--</code> operators were left out for consistency and simplicity. I don't know the exact argument Guido van Rossum gave for the decision, but I can imagine a few arguments:</p>\n\n<ul>\n<li>Simpler parsing. Technically, parsing <code>++count</code> is ambiguous, as it could be <code>+</code>, <code>+</code>, <code>count</code> (two unary <code>+</code> operators) just as easily as it could be <code>++</code>, <code>count</code> (one unary <code>++</code> operator). It's not a significant syntactic ambiguity, but it does exist.</li>\n<li>Simpler language. <code>++</code> is nothing more than a synonym for <code>+= 1</code>. It was a shorthand invented because C compilers were stupid and didn't know how to optimize <code>a += 1</code> into the <code>inc</code> instruction most computers have. In this day of optimizing compilers and bytecode interpreted languages, adding operators to a language to allow programmers to optimize their code is usually frowned upon, especially in a language like Python that is designed to be consistent and readable.</li>\n<li>Confusing side-effects. One common newbie error in languages with <code>++</code> operators is mixing up the differences (both in precedence and in return value) between the pre- and post-incremend/decrement operators, and Python likes to eliminate language \"gotcha\"-s. The precedence issues of pre-/post-increment in C are pretty hairy, and incredibly easy to mess up.</li>\n</ul>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm having trouble installing a Python package (specifically, JPype1 0.5.7) on my Windows machine, and would like to install it with Christoph Gohlke's Window binaries. (Which, to my experience, alleviated much of the fuss for many other package installations.)</p>\n\n<p>However, while Christoph used to provide .exe files in the past, recently it seems he's uploading .whl files instead.</p>\n\n<p><a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/#jpype\" rel=\"noreferrer\">http://www.lfd.uci.edu/~gohlke/pythonlibs/#jpype</a></p>\n\n<p>But how do I install .whl files?</p>\n\n<blockquote>\n  <p>Notes:</p>\n  \n  <ul>\n  <li>I've found <a href=\"https://wheel.readthedocs.org/en/latest/\" rel=\"noreferrer\">documents on wheel</a>, but they don't seem so staightforward in explaining how to install .whl files.</li>\n  <li>This question is a duplicate with <a href=\"https://stackoverflow.com/questions/27041264/how-to-install-whl-file-in-python-windows\">this question</a>, which wasn't directly answered.</li>\n  </ul>\n</blockquote>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I just used the following which was quite simple. First open a console then cd to where you've downloaded your file like some-package.whl and use</p>\n\n<pre><code>pip install some-package.whl\n</code></pre>\n\n<p>Note: if pip.exe is not recognized, you may find it in the \"Scripts\" directory from where python has been installed. If pip is not installed, this page can help:\n<a href=\"https://stackoverflow.com/questions/4750806/how-to-install-pip-on-windows\">How do I install pip on Windows?</a></p>\n\n<p><em>Note: for clarification</em><br>\nIf you copy the <code>*.whl</code> file to your local drive (ex. <strong>C:\\some-dir\\some-file.whl</strong>) use the following command line parameters --  </p>\n\n<pre><code>pip install C:/some-dir/some-file.whl\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How do I convert a hex string to an int in Python? </p>\n\n<p>I may have it as \"<code>0xffff</code>\" or just \"<code>ffff</code>\".</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>Without</strong> the 0x prefix, you need to specify the base explicitly, otherwise there's no way to tell:</p>\n\n<pre><code>x = int(\"deadbeef\", 16)\n</code></pre>\n\n<p><strong>With</strong> the 0x prefix, Python can distinguish hex and decimal automatically.</p>\n\n<pre><code>&gt;&gt;&gt; print int(\"0xdeadbeef\", 0)\n3735928559\n&gt;&gt;&gt; print int(\"10\", 0)\n10\n</code></pre>\n\n<p>(You <em>must</em> specify <code>0</code> as the base in order to invoke this prefix-guessing behavior; omitting the second parameter means to assume base-10.)</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>When we add a database field in django we generally write <code>models.CharField(max_length=100, null=True, blank=True)</code>. The same is done with <code>ForeignKey</code>, <code>DecimalField</code> etc. What is the basic difference in having </p>\n\n<ol>\n<li><code>null=True</code> only</li>\n<li><code>blank=True</code> only</li>\n<li><code>null=True</code>, <code>blank=True</code></li>\n</ol>\n\n<p>in respect to different (<code>CharField</code>, <code>ForeignKey</code>, <code>ManyToManyField</code>, <code>DateTimeField</code>) fields. What are the advantages/disadvantages of using 1/2/3?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>null=True</code> sets <code>NULL</code> (versus <code>NOT NULL</code>) on the column in your DB. Blank values for Django field types such as <code>DateTimeField</code> or <code>ForeignKey</code> will be stored as <code>NULL</code> in the DB.</p>\n\n<p><code>blank=True</code> determines whether the field will be required in forms. This includes the admin and your own custom forms. If <code>blank=True</code> then the field will not be required, whereas if it's <code>False</code> the field cannot be blank.</p>\n\n<p>The combo of the two is so frequent because typically if you're going to allow a field to be blank in your form, you're going to also need your database to allow <code>NULL</code> values for that field. The exception is <code>CharField</code>s and <code>TextField</code>s, which in Django are <em>never</em> saved as <code>NULL</code>. Blank values are stored in the DB as an empty string (<code>''</code>).</p>\n\n<p>A few examples:</p>\n\n<pre><code>models.DateTimeField(blank=True) # raises IntegrityError if blank\n\nmodels.DateTimeField(null=True) # NULL allowed, but must be filled out in a form\n</code></pre>\n\n<p>Obviously those two options don't make logical sense to use (though, there might be a use case for <code>null=True, blank=False</code> if you want a field to always be required in forms, but optional when dealing with an object through something like the shell.)</p>\n\n<pre><code>models.CharField(blank=True) # No problem, blank is stored as ''\n\nmodels.CharField(null=True) # NULL allowed, but will never be set as NULL\n</code></pre>\n\n<p><code>CHAR</code> and <code>TEXT</code> types are never saved as <code>NULL</code> by Django, so <code>null=True</code> is unnecessary. However, you can manually set one of these fields to <code>None</code> to force set it as <code>NULL</code>. If you have a scenario where that might be necessary, you should still include <code>null=True</code>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is it possible to terminate a running thread without setting/checking any flags/semaphores/etc.?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It is generally a bad pattern to kill a thread abruptly, in Python and in any language. Think of the following cases:</p>\n\n<ul>\n<li>the thread is holding a critical resource that must be closed properly</li>\n<li>the thread has created several other threads that must be killed as well.</li>\n</ul>\n\n<p>The nice way of handling this if you can afford it (if you are managing your own threads) is to have an exit_request flag that each threads checks on regular interval to see if it is time for it to exit.</p>\n\n<p><strong>For example:</strong></p>\n\n<pre><code>import threading\n\nclass StoppableThread(threading.Thread):\n    \"\"\"Thread class with a stop() method. The thread itself has to check\n    regularly for the stopped() condition.\"\"\"\n\n    def __init__(self):\n        super(StoppableThread, self).__init__()\n        self._stop_event = threading.Event()\n\n    def stop(self):\n        self._stop_event.set()\n\n    def stopped(self):\n        return self._stop_event.is_set()\n</code></pre>\n\n<p>In this code, you should call stop() on the thread when you want it to exit, and wait for the thread to exit properly using join(). The thread should check the stop flag at regular intervals.</p>\n\n<p>There are cases however when you really need to kill a thread. An example is when you are wrapping an external library that is busy for long calls and you want to interrupt it.</p>\n\n<p>The following code allows (with some restrictions) to raise an Exception in a Python thread:</p>\n\n<pre><code>def _async_raise(tid, exctype):\n    '''Raises an exception in the threads with id tid'''\n    if not inspect.isclass(exctype):\n        raise TypeError(\"Only types can be raised (not instances)\")\n    res = ctypes.pythonapi.PyThreadState_SetAsyncExc(tid,\n                                                  ctypes.py_object(exctype))\n    if res == 0:\n        raise ValueError(\"invalid thread id\")\n    elif res != 1:\n        # \"if it returns a number greater than one, you're in trouble,\n        # and you should call it again with exc=NULL to revert the effect\"\n        ctypes.pythonapi.PyThreadState_SetAsyncExc(tid, 0)\n        raise SystemError(\"PyThreadState_SetAsyncExc failed\")\n\nclass ThreadWithExc(threading.Thread):\n    '''A thread class that supports raising exception in the thread from\n       another thread.\n    '''\n    def _get_my_tid(self):\n        \"\"\"determines this (self's) thread id\n\n        CAREFUL : this function is executed in the context of the caller\n        thread, to get the identity of the thread represented by this\n        instance.\n        \"\"\"\n        if not self.isAlive():\n            raise threading.ThreadError(\"the thread is not active\")\n\n        # do we have it cached?\n        if hasattr(self, \"_thread_id\"):\n            return self._thread_id\n\n        # no, look for it in the _active dict\n        for tid, tobj in threading._active.items():\n            if tobj is self:\n                self._thread_id = tid\n                return tid\n\n        # TODO: in python 2.6, there's a simpler way to do : self.ident\n\n        raise AssertionError(\"could not determine the thread's id\")\n\n    def raiseExc(self, exctype):\n        \"\"\"Raises the given exception type in the context of this thread.\n\n        If the thread is busy in a system call (time.sleep(),\n        socket.accept(), ...), the exception is simply ignored.\n\n        If you are sure that your exception should terminate the thread,\n        one way to ensure that it works is:\n\n            t = ThreadWithExc( ... )\n            ...\n            t.raiseExc( SomeException )\n            while t.isAlive():\n                time.sleep( 0.1 )\n                t.raiseExc( SomeException )\n\n        If the exception is to be caught by the thread, you need a way to\n        check that your thread has caught it.\n\n        CAREFUL : this function is executed in the context of the\n        caller thread, to raise an excpetion in the context of the\n        thread represented by this instance.\n        \"\"\"\n        _async_raise( self._get_my_tid(), exctype )\n</code></pre>\n\n<p>As noted in the documentation, this is not a magic bullet because if the thread is busy outside the Python interpreter, it will not catch the interruption.</p>\n\n<p>A good usage pattern of this code is to have the thread catch a specific exception and perform the cleanup. That way, you can interrupt a task and still have proper cleanup.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Can anyone please explain, what is <code>setup.py</code> and how can it be configured or used?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>setup.py is a python file, which usually tells you that the module/package you are about to install has been packaged and distributed with Distutils, which is the standard for distributing Python Modules.</p>\n\n<p>This allows you to easily install Python packages. Often it's enough to write:</p>\n\n<pre><code>python setup.py install\n</code></pre>\n\n<p>and the module will install itself.</p>\n\n<p><a href=\"http://docs.python.org/install/index.html\" rel=\"noreferrer\">http://docs.python.org/install/index.html</a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I use the following code segment to read a file in python</p>\n\n<pre><code>with open (\"data.txt\", \"r\") as myfile:\n    data=myfile.readlines()\n</code></pre>\n\n<p>input file is</p>\n\n<pre><code>LLKKKKKKKKMMMMMMMMNNNNNNNNNNNNN\nGGGGGGGGGHHHHHHHHHHHHHHHHHHHHEEEEEEEE\n</code></pre>\n\n<p>and when I print data I get</p>\n\n<pre><code>['LLKKKKKKKKMMMMMMMMNNNNNNNNNNNNN\\n', 'GGGGGGGGGHHHHHHHHHHHHHHHHHHHHEEEEEEEE']\n</code></pre>\n\n<p>As I see data is in list form. How do I make it string. And also how do I remove \"\\n\", \"[\", and \"]\" characters from it ?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You could use:</p>\n\n<pre><code>with open('data.txt', 'r') as myfile:\n    data=myfile.read().replace('\\n', '')\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/1720421/how-to-concatenate-two-lists-in-python\" dir=\"ltr\">How to concatenate two lists in Python?</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    20 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>In Python, the only way I can find to concatenate two lists is <code>list.extend</code>, which modifies the first list. Is there any concatenation function that returns its result without modifying its arguments?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Yes: <code>list1+list2</code>. This gives a new list that is the concatenation of <code>list1</code> and <code>list2</code>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>This is what I have:</p>\n\n<pre><code>glob(os.path.join('src','*.c'))\n</code></pre>\n\n<p>but I want to search the subfolders of src. Something like this would work:</p>\n\n<pre><code>glob(os.path.join('src','*.c'))\nglob(os.path.join('src','*','*.c'))\nglob(os.path.join('src','*','*','*.c'))\nglob(os.path.join('src','*','*','*','*.c'))\n</code></pre>\n\n<p>But this is obviously limited and clunky.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>Python 3.5+</strong></p>\n\n<p>Starting with Python version 3.5, the <a href=\"https://docs.python.org/3/library/glob.html\" rel=\"noreferrer\"><code>glob</code></a> module supports the <code>\"**\"</code> directive (which is parsed only if you pass <code>recursive</code> flag):</p>\n\n<pre><code>import glob\n\nfor filename in glob.iglob('src/**/*.c', recursive=True):\n    print(filename)\n</code></pre>\n\n<p>If you need a list, just use <a href=\"https://docs.python.org/3/library/glob.html#glob.glob\" rel=\"noreferrer\"><code>glob.glob</code></a> instead of <a href=\"https://docs.python.org/3/library/glob.html#glob.iglob\" rel=\"noreferrer\"><code>glob.iglob</code></a>.</p>\n\n<p><strong>Python 2.2 to 3.4</strong></p>\n\n<p>For older Python versions, starting with Python 2.2, use <a href=\"https://docs.python.org/2/library/os.html#os.walk\" rel=\"noreferrer\"><code>os.walk</code></a> to recursively walk a directory and <a href=\"https://docs.python.org/2/library/fnmatch.html#fnmatch.filter\" rel=\"noreferrer\"><code>fnmatch.filter</code></a> to match against a simple expression:</p>\n\n<pre><code>import fnmatch\nimport os\n\nmatches = []\nfor root, dirnames, filenames in os.walk('src'):\n    for filename in fnmatch.filter(filenames, '*.c'):\n        matches.append(os.path.join(root, filename))\n</code></pre>\n\n<p><strong>Python 2.1 and earlier</strong></p>\n\n<p>For even older Python versions, use <a href=\"https://docs.python.org/2/library/glob.html#glob.glob\" rel=\"noreferrer\"><code>glob.glob</code></a> against each filename instead of <a href=\"https://docs.python.org/2/library/fnmatch.html#fnmatch.filter\" rel=\"noreferrer\"><code>fnmatch.filter</code></a>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How can I do the following in Python?</p>\n\n<pre><code>row = [unicode(x.strip()) for x in row if x is not None else '']\n</code></pre>\n\n<p>Essentially:</p>\n\n<ol>\n<li>replace all the Nones with empty strings, and then</li>\n<li>carry out a function.</li>\n</ol>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can totally do that, it's just an ordering issue:</p>\n\n<pre><code>[ unicode(x.strip()) if x is not None else '' for x in row ]\n</code></pre>\n\n<p>Note that this actually uses a different language construct, a <a href=\"https://docs.python.org/3/reference/expressions.html#conditional-expressions\" rel=\"noreferrer\">conditional expression</a>, which itself is not part of the <a href=\"https://docs.python.org/3/reference/expressions.html#displays-for-lists-sets-and-dictionaries\" rel=\"noreferrer\">comprehension syntax</a>, while the <code>if</code> after the <code>for\u2026in</code> is part of list comprehensions and used to <em>filter</em> elements from the source iterable.</p>\n\n<p>Conditional expressions can be used in all kinds of situations where you want to choose between two expression values based on some condition. This does the same as the <a href=\"https://docs.python.org/3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator\" rel=\"noreferrer\">ternary operator <code>?:</code> that exists in other languages</a>. For example:</p>\n\n<pre><code>value = 123\nprint(value, 'is', 'even' if value % 2 == 0 else 'odd')\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>This is my code:</p>\n\n<pre><code>import datetime\ntoday = datetime.date.today()\nprint today\n</code></pre>\n\n<p>This prints: 2008-11-22 which is exactly what I want BUT....I have a list I'm appending this to and then suddenly everything goes \"wonky\". Here is the code:</p>\n\n<pre><code>import datetime\nmylist = []\ntoday = datetime.date.today()\nmylist.append(today)\nprint mylist\n</code></pre>\n\n<p>This prints the following: </p>\n\n<pre><code>[datetime.date(2008, 11, 22)]\n</code></pre>\n\n<p>How on earth can I get just a simple date like \"2008-11-22\"?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<h2>The WHY: dates are objects</h2>\n\n<p>In Python, dates are objects. Therefore, when you manipulate them, you manipulate objects, not strings, not timestamps nor anything.</p>\n\n<p>Any object in Python have TWO string representations:</p>\n\n<ul>\n<li><p>The regular representation that is used by \"print\", can be get using the <code>str()</code> function. It is most of the time the most common human readable format and is used to ease display. So <code>str(datetime.datetime(2008, 11, 22, 19, 53, 42))</code> gives you <code>'2008-11-22 19:53:42'</code>. </p></li>\n<li><p>The alternative representation that is used to represent the object nature (as a data). It can be get using the <code>repr()</code> function and is handy to know what kind of data your manipulating while you are developing or debugging. <code>repr(datetime.datetime(2008, 11, 22, 19, 53, 42))</code> gives you <code>'datetime.datetime(2008, 11, 22, 19, 53, 42)'</code>.</p></li>\n</ul>\n\n<p>What happened is that when you have printed the date using \"print\", it used <code>str()</code> so you could see a nice date string. But when you have printed <code>mylist</code>, you have printed a list of objects and Python tried to represent the set of data, using <code>repr()</code>.</p>\n\n<h2>The How: what do you want to do with that?</h2>\n\n<p>Well, when you manipulate dates, keep using the date objects all long the way. They got thousand of useful methods and most of the Python API expect dates to be objects.</p>\n\n<p>When you want to display them, just use <code>str()</code>. In Python, the good practice is to explicitly cast everything. So just when it's time to print, get a string representation of your date using <code>str(date)</code>.</p>\n\n<p>One last thing. When you tried to print the dates, you printed <code>mylist</code>. If you want to print a date, you must print the date objects, not their container (the list).</p>\n\n<p>E.G, you want to print all the date in a list :</p>\n\n<pre><code>for date in mylist :\n    print str(date)\n</code></pre>\n\n<p>Note that <strong><em>in that specific case</em></strong>, you can even omit <code>str()</code> because print will use it for you. But it should not become a habit :-)</p>\n\n<h2>Practical case, using your code</h2>\n\n<pre><code>import datetime\nmylist = []\ntoday = datetime.date.today()\nmylist.append(today)\nprint mylist[0] # print the date object, not the container ;-)\n2008-11-22\n\n# It's better to always use str() because :\n\nprint \"This is a new day : \", mylist[0] # will work\nThis is a new day : 2008-11-22\n\nprint \"This is a new day : \" + mylist[0] # will crash\ncannot concatenate 'str' and 'datetime.date' objects\n\nprint \"This is a new day : \" + str(mylist[0]) \nThis is a new day : 2008-11-22\n</code></pre>\n\n<h2>Advanced date formatting</h2>\n\n<p>Dates have a default representation, but you may want to print them in a specific format. In that case, you can get a custom string representation using the <code>strftime()</code> method.</p>\n\n<p><code>strftime()</code> expects a string pattern explaining how you want to format your date.</p>\n\n<p>E.G : </p>\n\n<pre><code>print today.strftime('We are the %d, %b %Y')\n'We are the 22, Nov 2008'\n</code></pre>\n\n<p>All the letter after a <code>\"%\"</code> represent a format for something :</p>\n\n<ul>\n<li><code>%d</code> is the day number</li>\n<li><code>%m</code> is the month number</li>\n<li><code>%b</code> is the month abbreviation</li>\n<li><code>%y</code> is the year last two digits</li>\n<li><code>%Y</code> is the all year</li>\n</ul>\n\n<p>etc</p>\n\n<p><a href=\"http://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior\" rel=\"noreferrer\">Have a look at the official documentation</a>, or <a href=\"http://strftime.org\" rel=\"noreferrer\">McCutchen's quick reference</a> you can't know them all.</p>\n\n<p>Since <a href=\"http://www.python.org/dev/peps/pep-3101/\" rel=\"noreferrer\">PEP3101</a>, every object can have its own format used automatically by the method format of any string. In the case of the datetime, the format is the same used in\nstrftime. So you can do the same as above like this:</p>\n\n<pre><code>print \"We are the {:%d, %b %Y}\".format(today)\n'We are the 22, Nov 2008'\n</code></pre>\n\n<p>The advantage of this form is that you can also convert other objects at the same time.<br>\nWith the introduction of <a href=\"https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals\" rel=\"noreferrer\">Formatted string literals</a> (since Python 3.6, 2016-12-23) this can be written as</p>\n\n<pre><code>import datetime\nf\"{datetime.datetime.now():%Y-%m-%d}\"\n'2017-06-15'\n</code></pre>\n\n<h2>Localization</h2>\n\n<p>Dates can automatically adapt to the local language and culture if you use them the right way, but it's a bit complicated. Maybe for another question on SO(Stack Overflow) ;-)</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I want to remove all empty strings from a list of strings in python.</p>\n\n<p>My idea looks like this:</p>\n\n<pre><code>while '' in str_list:\n    str_list.remove('')\n</code></pre>\n\n<p>Is there any more pythonic way to do this?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I would use <a href=\"http://docs.python.org/library/functions.html#filter\" rel=\"noreferrer\"><code>filter</code></a>:</p>\n\n<pre><code>str_list = filter(None, str_list) # fastest\nstr_list = filter(bool, str_list) # fastest\nstr_list = filter(len, str_list)  # a bit of slower\nstr_list = filter(lambda item: item, str_list) # slower than list comprehension\n</code></pre>\n\n<p>Python 3 returns an iterator from <code>filter</code>, so should be wrapped in a call to <code>list()</code></p>\n\n<pre><code>str_list = list(filter(None, str_list)) # fastest\n</code></pre>\n\n<p>(<em>etc.</em>)</p>\n\n<p>Tests:</p>\n\n<pre><code>&gt;&gt;&gt; timeit('filter(None, str_list)', 'str_list=[\"a\"]*1000', number=100000)\n2.4797441959381104\n&gt;&gt;&gt; timeit('filter(bool, str_list)', 'str_list=[\"a\"]*1000', number=100000)\n2.4788150787353516\n&gt;&gt;&gt; timeit('filter(len, str_list)', 'str_list=[\"a\"]*1000', number=100000)\n5.2126238346099854\n&gt;&gt;&gt; timeit('[x for x in str_list if x]', 'str_list=[\"a\"]*1000', number=100000)\n13.354584932327271\n&gt;&gt;&gt; timeit('filter(lambda item: item, str_list)', 'str_list=[\"a\"]*1000', number=100000)\n17.427681922912598\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a DataFrames from pandas:</p>\n\n<pre><code>import pandas as pd\ninp = [{'c1':10, 'c2':100}, {'c1':11,'c2':110}, {'c1':12,'c2':120}]\ndf = pd.DataFrame(inp)\nprint df\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>   c1   c2\n0  10  100\n1  11  110\n2  12  120\n</code></pre>\n\n<p>Now I want to iterate over the rows of the above frame. For every row I want to be able to access its elements (values in cells) by the name of the columns. So, for example, I would like to have something like that:</p>\n\n<pre><code>for row in df.rows:\n   print row['c1'], row['c2']\n</code></pre>\n\n<p>Is it possible to do that in pandas?</p>\n\n<p>I found <a href=\"https://stackoverflow.com/questions/7837722/what-is-the-most-efficient-way-to-loop-through-dataframes-with-pandas\">similar question</a>. But it does not give me the answer I need. For example, it is suggested there to use:</p>\n\n<pre><code>for date, row in df.T.iteritems():\n</code></pre>\n\n<p>or</p>\n\n<pre><code>for row in df.iterrows():\n</code></pre>\n\n<p>But I do not understand what the <code>row</code> object is and how I can work with it.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows\">iterrows</a> is a generator which yield both index and row</p>\n\n<pre><code>In [18]: for index, row in df.iterrows():\n   ....:     print row['c1'], row['c2']\n   ....:     \n10 100\n11 110\n12 120\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How to select rows from a DataFrame based on values in some column in pandas?<br>\nIn SQL I would use: </p>\n\n<pre><code>select * from table where colume_name = some_value. \n</code></pre>\n\n<p><em>I tried to look at pandas documentation but did not immediately find the answer.</em></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>To select rows whose column value equals a scalar, <code>some_value</code>, use <code>==</code>:</p>\n\n<pre><code>df.loc[df['column_name'] == some_value]\n</code></pre>\n\n<p>To select rows whose column value is in an iterable, <code>some_values</code>, use <code>isin</code>:</p>\n\n<pre><code>df.loc[df['column_name'].isin(some_values)]\n</code></pre>\n\n<p>Combine multiple conditions with <code>&amp;</code>: </p>\n\n<pre><code>df.loc[(df['column_name'] == some_value) &amp; df['other_column'].isin(some_values)]\n</code></pre>\n\n<hr>\n\n<p>To select rows whose column value <em>does not equal</em> <code>some_value</code>, use <code>!=</code>:</p>\n\n<pre><code>df.loc[df['column_name'] != some_value]\n</code></pre>\n\n<p><code>isin</code> returns a boolean Series, so to select rows whose value is <em>not</em> in <code>some_values</code>, negate the boolean Series using <code>~</code>:</p>\n\n<pre><code>df.loc[~df['column_name'].isin(some_values)]\n</code></pre>\n\n<hr>\n\n<p>For example,</p>\n\n<pre><code>import pandas as pd\nimport numpy as np\ndf = pd.DataFrame({'A': 'foo bar foo bar foo bar foo foo'.split(),\n                   'B': 'one one two three two two one three'.split(),\n                   'C': np.arange(8), 'D': np.arange(8) * 2})\nprint(df)\n#      A      B  C   D\n# 0  foo    one  0   0\n# 1  bar    one  1   2\n# 2  foo    two  2   4\n# 3  bar  three  3   6\n# 4  foo    two  4   8\n# 5  bar    two  5  10\n# 6  foo    one  6  12\n# 7  foo  three  7  14\n\nprint(df.loc[df['A'] == 'foo'])\n</code></pre>\n\n<p>yields</p>\n\n<pre><code>     A      B  C   D\n0  foo    one  0   0\n2  foo    two  2   4\n4  foo    two  4   8\n6  foo    one  6  12\n7  foo  three  7  14\n</code></pre>\n\n<hr>\n\n<p>If you have multiple values you want to include, put them in a\nlist (or more generally, any iterable) and use <code>isin</code>:</p>\n\n<pre><code>print(df.loc[df['B'].isin(['one','three'])])\n</code></pre>\n\n<p>yields</p>\n\n<pre><code>     A      B  C   D\n0  foo    one  0   0\n1  bar    one  1   2\n3  bar  three  3   6\n6  foo    one  6  12\n7  foo  three  7  14\n</code></pre>\n\n<hr>\n\n<p>Note, however, that if you wish to do this many times, it is more efficient to\nmake an index first, and then use <code>df.loc</code>:</p>\n\n<pre><code>df = df.set_index(['B'])\nprint(df.loc['one'])\n</code></pre>\n\n<p>yields</p>\n\n<pre><code>       A  C   D\nB              \none  foo  0   0\none  bar  1   2\none  foo  6  12\n</code></pre>\n\n<p>or, to include multiple values from the index use <code>df.index.isin</code>:</p>\n\n<pre><code>df.loc[df.index.isin(['one','two'])]\n</code></pre>\n\n<p>yields</p>\n\n<pre><code>       A  C   D\nB              \none  foo  0   0\none  bar  1   2\ntwo  foo  2   4\ntwo  foo  4   8\ntwo  bar  5  10\none  foo  6  12\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What is the purpose of <a href=\"https://docs.python.org/3/reference/datamodel.html#slots\" rel=\"noreferrer\"><code>__slots__</code></a> in Python \u2014 especially with respect to when would I want to use it and when not?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<blockquote>\n  <h1>In Python, what is the purpose of <code>__slots__</code> and what are the cases one should avoid this?</h1>\n</blockquote>\n\n<h2>TLDR:</h2>\n\n<p>The special attribute <code>__slots__</code> allows you to explicitly state which instance attributes you expect your object instances to have, with the expected results:</p>\n\n<ol>\n<li><strong>faster</strong> attribute access.</li>\n<li><strong>space savings</strong> in memory. </li>\n</ol>\n\n<p>The space savings is from </p>\n\n<ol>\n<li>Storing value references in slots instead of <code>__dict__</code>.</li>\n<li>Denying <code>__dict__</code> and <code>__weakref__</code> creation if parent classes deny them and you declare <code>__slots__</code>.</li>\n</ol>\n\n<p>The biggest caveat is for multiple inheritance - multiple \"parent classes with nonempty slots\" cannot be combined. To accomodate this restriction, follow best practices: Factor out all but one or all parents' abstraction which their concrete class respectively and your new concrete class collectively will inherit from - giving the abstraction(s) empty slots (just like abstract base classes in the standard library).</p>\n\n<h3>Requirements:</h3>\n\n<ul>\n<li><p>To have attributes named in <code>__slots__</code> to actually be stored in slots instead of a <code>__dict__</code>, a class must inherit from <code>object</code>.</p></li>\n<li><p>To prevent the creation of a <code>__dict__</code>, you must inherit from <code>object</code> and all classes in the inheritance must declare <code>__slots__</code> and none of them can have a <code>'__dict__'</code> entry. </p></li>\n</ul>\n\n<p>There are a lot of details if you wish to keep reading.</p>\n\n<h2>Why use <code>__slots__</code>: Faster attribute access.</h2>\n\n<p>The creator of Python, Guido van Rossum, <a href=\"http://python-history.blogspot.com/2010/06/inside-story-on-new-style-classes.html\" rel=\"noreferrer\">states</a> that he actually created <code>__slots__</code> for faster attribute access.  </p>\n\n<p>It is trivial to demonstrate measurably significant faster access:</p>\n\n<pre><code>import timeit\n\nclass Foo(object): __slots__ = 'foo',\n\nclass Bar(object): pass\n\nslotted = Foo()\nnot_slotted = Bar()\n\ndef get_set_delete_fn(obj):\n    def get_set_delete():\n        obj.foo = 'foo'\n        obj.foo\n        del obj.foo\n    return get_set_delete\n</code></pre>\n\n<p>and</p>\n\n<pre><code>&gt;&gt;&gt; min(timeit.repeat(get_set_delete_fn(slotted)))\n0.2846834529991611\n&gt;&gt;&gt; min(timeit.repeat(get_set_delete_fn(not_slotted)))\n0.3664822799983085\n</code></pre>\n\n<p>The slotted access is almost 30% faster in Python 3.5 on Ubuntu.</p>\n\n<pre><code>&gt;&gt;&gt; 0.3664822799983085 / 0.2846834529991611\n1.2873325658284342\n</code></pre>\n\n<p>In Python 2 on Windows I have measured it about 15% faster.</p>\n\n<h2>Why use <code>__slots__</code>:  Memory Savings</h2>\n\n<p>Another purpose of <code>__slots__</code> is to reduce the space in memory that each object instance takes up.  </p>\n\n<p><a href=\"https://docs.python.org/2/reference/datamodel.html#slots\" rel=\"noreferrer\">My own contribution to the documentation clearly states the reasons behind this</a>: </p>\n\n<blockquote>\n  <p>The space saved over using <code>__dict__</code> can be significant.</p>\n</blockquote>\n\n<p><a href=\"http://docs.sqlalchemy.org/en/rel_1_0/changelog/migration_10.html#significant-improvements-in-structural-memory-use\" rel=\"noreferrer\">SQLAlchemy attributes</a> a lot of memory savings to <code>__slots__</code>.</p>\n\n<p>To verify this, using the Anaconda distribution of Python 2.7 on Ubuntu Linux, with <code>guppy.hpy</code> (aka heapy) and <code>sys.getsizeof</code>, the size of a class instance without <code>__slots__</code> declared, and nothing else, is 64 bytes. That does <em>not</em> include the <code>__dict__</code>. Thank you Python for lazy evaluation again, the <code>__dict__</code> is apparently not called into existence until it is referenced, but classes without data are usually useless. When called into existence, the <code>__dict__</code> attribute is a minimum of 280 bytes additionally. </p>\n\n<p>In contrast, a class instance with <code>__slots__</code> declared to be <code>()</code> (no data) is only 16 bytes, and 56 total bytes with one item in slots, 64 with two.</p>\n\n<p>I tested when my particular implementation of dicts size up by enumerating alphabet characters into a dict, and on the sixth item it climbs to 1048, 22 to 3352, then 85 to 12568 (rather impractical to put that many attributes on a single class, probably violating the single responsibility principle there.)</p>\n\n<pre><code>attrs  __slots__    no slots declared + __dict__\nnone       16        64 (+ 280 if __dict__ referenced)\none        56        64 + 280\ntwo        64        64 + 280\nsix        96        64 + 1048\n22        224        64 + 3352\n</code></pre>\n\n<p>So we see how nicely <code>__slots__</code> scale for instances to save us memory, and that is the reason you would want to use <code>__slots__</code>. </p>\n\n<h2>Demonstration of <code>__slots__</code>:</h2>\n\n<p>To deny the creation of a <code>__dict__</code>, you must subclass <code>object</code>:</p>\n\n<pre><code>class Base(object): \n    __slots__ = ()\n</code></pre>\n\n<p>now:</p>\n\n<pre><code>&gt;&gt;&gt; b = Base()\n&gt;&gt;&gt; b.a = 'a'\nTraceback (most recent call last):\n  File \"&lt;pyshell#38&gt;\", line 1, in &lt;module&gt;\n    b.a = 'a'\nAttributeError: 'Base' object has no attribute 'a'\n</code></pre>\n\n<p>Or subclass another class that defines <code>__slots__</code></p>\n\n<pre><code>class Child(Base):\n    __slots__ = ('a',)\n</code></pre>\n\n<p>and now:</p>\n\n<pre><code>&gt;&gt;&gt; c = Child()\n&gt;&gt;&gt; c.a = 'a'\n&gt;&gt;&gt; c.b = 'b'\nTraceback (most recent call last):\n  File \"&lt;pyshell#42&gt;\", line 1, in &lt;module&gt;\n    c.b = 'b'\nAttributeError: 'Child' object has no attribute 'b'\n</code></pre>\n\n<p>To allow <code>__dict__</code> creation while subclassing slotted objects, just add <code>'__dict__'</code> to the <code>__slots__</code> (note that slots are ordered, and you shouldn't repeat slots that are already in parent classes):</p>\n\n<pre><code>class SlottedWithDict(Child): \n    __slots__ = ('__dict__', 'b')\n\n&gt;&gt;&gt; swd = SlottedWithDict()\n&gt;&gt;&gt; swd.a = 'a'\n&gt;&gt;&gt; swd.b = 'b'\n&gt;&gt;&gt; swd.c = 'c'\n&gt;&gt;&gt; swd.__dict__\n{'c': 'c'}\n</code></pre>\n\n<p>Or you don't even need to declare <code>__slots__</code> in your subclass, and you will still use slots from the parents, but not restrict the creation of a <code>__dict__</code>:</p>\n\n<pre><code>&gt;&gt;&gt; class NoSlots(Child): pass\n&gt;&gt;&gt; ns = NoSlots()\n&gt;&gt;&gt; ns.a = 'a'\n&gt;&gt;&gt; ns.b = 'b'\n&gt;&gt;&gt; ns.__dict__\n{'b': 'b'}\n</code></pre>\n\n<p>However, <code>__slots__</code> may cause problems for multiple inheritance:</p>\n\n<pre><code>&gt;&gt;&gt; class BaseA(object): __slots__ = ('a',)\n&gt;&gt;&gt; class BaseB(object): __slots__ = ('b',)\n&gt;&gt;&gt; class Child(BaseA, BaseB): __slots__ = ()\nTraceback (most recent call last):\n  File \"&lt;pyshell#68&gt;\", line 1, in &lt;module&gt;\n    class Child(BaseA, BaseB): __slots__ = ()\nTypeError: Error when calling the metaclass bases\n    multiple bases have instance lay-out conflict\n</code></pre>\n\n<p>If you run into this problem, just remove <code>__slots__</code>, and put it back in where you have a lot of instances.</p>\n\n<pre><code>&gt;&gt;&gt; class BaseA(object): __slots__ = ()\n&gt;&gt;&gt; class BaseB(object): __slots__ = ()\n&gt;&gt;&gt; class Child(BaseA, BaseB): __slots__ = ('a', 'b')\n&gt;&gt;&gt; c = Child\n&gt;&gt;&gt; c.a = 'a'\n&gt;&gt;&gt; c.b = 'b'\n&gt;&gt;&gt; c.c = 'c'\n&gt;&gt;&gt; c.__dict__\n&lt;dictproxy object at 0x10C944B0&gt;\n&gt;&gt;&gt; c.__dict__['c']\n'c'\n</code></pre>\n\n<h3>Add <code>'__dict__'</code> to <code>__slots__</code> to get dynamic assignment:</h3>\n\n<pre><code>class Foo(object):\n    __slots__ = 'bar', 'baz', '__dict__'\n</code></pre>\n\n<p>and now:</p>\n\n<pre><code>&gt;&gt;&gt; foo = Foo()\n&gt;&gt;&gt; foo.boink = 'boink'\n</code></pre>\n\n<p>So with <code>'__dict__'</code> in slots we lose some of the size benefits with the upside of having dynamic assignment and still having slots for the names we do expect.</p>\n\n<p>When you inherit from an object that isn't slotted, you get the same sort of semantics when you use <code>__slots__</code> - names that are in <code>__slots__</code> point to  slotted values, while any other values are put in the instance's <code>__dict__</code>.</p>\n\n<p>Avoiding <code>__slots__</code> because you want to be able to add attributes on the fly is actually not a good reason - just add <code>\"__dict__\"</code> to your <code>__slots__</code> if this is required.</p>\n\n<p>You can similarly add <code>__weakref__</code> to <code>__slots__</code> explicitly if you need that feature.</p>\n\n<h3>Set to empty tuple when subclassing a namedtuple:</h3>\n\n<p>The namedtuple builtin make immutable instances that are very lightweight (essentially, the size of tuples) but to get the benefits, you need to do it yourself if you subclass them:</p>\n\n<pre><code>from collections import namedtuple\nclass MyNT(namedtuple('MyNT', 'bar baz')):\n    \"\"\"MyNT is an immutable and lightweight object\"\"\"\n    __slots__ = ()\n</code></pre>\n\n<p>usage:</p>\n\n<pre><code>&gt;&gt;&gt; nt = MyNT('bar', 'baz')\n&gt;&gt;&gt; nt.bar\n'bar'\n&gt;&gt;&gt; nt.baz\n'baz'\n</code></pre>\n\n<p>And trying to assign an unexpected attribute raises an <code>AttributeError</code> because we have prevented the creation of <code>__dict__</code>:</p>\n\n<pre><code>&gt;&gt;&gt; nt.quux = 'quux'\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: 'MyNT' object has no attribute 'quux'\n</code></pre>\n\n<p>You <em>can</em> allow <code>__dict__</code> creation by leaving off <code>__slots__ = ()</code>, but you can't use non-empty <code>__slots__</code> with subtypes of tuple.</p>\n\n<h2>Biggest Caveat: Multiple inheritance</h2>\n\n<p>Even when non-empty slots are the same for multiple parents, they cannot be used together:</p>\n\n<pre><code>&gt;&gt;&gt; class Foo(object): __slots__ = 'foo', 'bar'\n&gt;&gt;&gt; class Bar(object): __slots__ = 'foo', 'bar' # alas, would work if empty, i.e. ()\n&gt;&gt;&gt; class Baz(Foo, Bar): pass\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: Error when calling the metaclass bases\n    multiple bases have instance lay-out conflict\n</code></pre>\n\n<p>Using an empty <code>__slots__</code> in the parent seems to provide the most flexibility, <strong>allowing the child to choose to prevent or allow</strong> (by adding <code>'__dict__'</code> to get dynamic assignment, see section above) <strong>the creation of a <code>__dict__</code></strong>:</p>\n\n<pre><code>&gt;&gt;&gt; class Foo(object): __slots__ = ()\n&gt;&gt;&gt; class Bar(object): __slots__ = ()\n&gt;&gt;&gt; class Baz(Foo, Bar): __slots__ = ('foo', 'bar')\n&gt;&gt;&gt; b = Baz()\n&gt;&gt;&gt; b.foo, b.bar = 'foo', 'bar'\n</code></pre>\n\n<p>You don't <em>have</em> to have slots - so if you add them, and remove them later, it shouldn't cause any problems.</p>\n\n<p><strong>Going out on a limb here</strong>: If you're composing <a href=\"https://stackoverflow.com/questions/860245/mixin-vs-inheritance/27907511#27907511\">mixins</a> or using <a href=\"https://stackoverflow.com/questions/372042/difference-between-abstract-class-and-interface-in-python/31439126#31439126\">abstract base classes</a>, which aren't intended to be instantiated, an empty <code>__slots__</code> in those parents seems to be the best way to go in terms of flexibility for subclassers.</p>\n\n<h2>Other cases to avoid slots:</h2>\n\n<ul>\n<li>Avoid them when you want to perform <code>__class__</code> assignment with another class that doesn't have them (and you can't add them) unless the slot layouts are identical. (I am very interested in learning who is doing this and why.)</li>\n<li>Avoid them if you want to subclass variable length builtins like long, tuple, or str, and you want to add attributes to them.</li>\n<li>Avoid them if you insist on providing default values via class attributes for instance variables. </li>\n<li>Avoid them for parent classes in the case of multiple inheritance - you can reinsert them for a child where you have a lot of instances (see previous section for recommendation).</li>\n</ul>\n\n<p>You may be able to tease out further caveats from the rest of the <code>__slots__</code> <a href=\"https://docs.python.org/3.7/reference/datamodel.html#slots\" rel=\"noreferrer\">documentation (the 3.7 dev docs are the most current)</a>, which I have made significant recent contributions to.</p>\n\n<h2>Critiques of other answers</h2>\n\n<p>The current top answers cite outdated information and are quite hand-wavy and miss the mark in some important ways.</p>\n\n<h3>Do not \"only use <code>__slots__</code> when instantiating lots of objects\"</h3>\n\n<p>I quote:</p>\n\n<blockquote>\n  <p>\"You would want to use <code>__slots__</code> if you are going to instantiate a lot (hundreds, thousands) of objects of the same class.\" </p>\n</blockquote>\n\n<p>Abstract Base Classes, for example, from the <code>collections</code> module, are not instantiated, yet <code>__slots__</code> are declared for them. </p>\n\n<p>Why?</p>\n\n<p>If a user wishes to deny <code>__dict__</code> or <code>__weakref__</code> creation, those things must not be available in the parent classes.</p>\n\n<p><code>__slots__</code> contributes to reusability when creating interfaces or mixins.</p>\n\n<p>It is true that many Python users aren't writing for reusability, but when you are, having the option to deny unnecessary space usage is valuable.</p>\n\n<h3><code>__slots__</code> doesn't break pickling</h3>\n\n<p>When pickling a slotted object, you may find it complains with a misleading <code>TypeError</code>: </p>\n\n<pre><code>&gt;&gt;&gt; pickle.loads(pickle.dumps(f))\nTypeError: a class that defines __slots__ without defining __getstate__ cannot be pickled\n</code></pre>\n\n<p>This is actually incorrect. This message comes from the oldest protocol, which is the default. You can select the latest protocol with the <code>-1</code> argument. In Python 2.7 this would be <code>2</code> (which was introduced in 2.3), and in 3.6 it is <code>4</code>.</p>\n\n<pre><code>&gt;&gt;&gt; pickle.loads(pickle.dumps(f, -1))\n&lt;__main__.Foo object at 0x1129C770&gt;\n</code></pre>\n\n<p>in Python 2.7:</p>\n\n<pre><code>&gt;&gt;&gt; pickle.loads(pickle.dumps(f, 2))\n&lt;__main__.Foo object at 0x1129C770&gt;\n</code></pre>\n\n<p>in Python 3.6</p>\n\n<pre><code>&gt;&gt;&gt; pickle.loads(pickle.dumps(f, 4))\n&lt;__main__.Foo object at 0x1129C770&gt;\n</code></pre>\n\n<p>So I would keep this in mind, as it is a solved problem.</p>\n\n<h2>Critique of the (until Oct 2, 2016) accepted answer</h2>\n\n<p>The first paragraph is half short explanation, half predictive. Here's the only part that actually answers the question</p>\n\n<blockquote>\n  <p>The proper use of <code>__slots__</code> is to save space in objects. Instead of having a dynamic dict that allows adding attributes to objects at anytime, there is a static structure which does not allow additions after creation. This saves the overhead of one dict for every object that uses slots</p>\n</blockquote>\n\n<p>The second half is wishful thinking, and off the mark:</p>\n\n<blockquote>\n  <p>While this is sometimes a useful optimization, it would be completely unnecessary if the Python interpreter was dynamic enough so that it would only require the dict when there actually were additions to the object.</p>\n</blockquote>\n\n<p>Python actually does something similar to this, only creating the <code>__dict__</code> when it is accessed, but creating lots of objects with no data is fairly ridiculous.</p>\n\n<p>The second paragraph oversimplifies and misses actual reasons to avoid <code>__slots__</code>. The below is <em>not</em> a real reason to avoid slots (for <em>actual</em> reasons, see the rest of my answer above.):</p>\n\n<blockquote>\n  <p>They change the behavior of the objects that have slots in a way that can be abused by control freaks and static typing weenies.</p>\n</blockquote>\n\n<p>It then goes on to discuss other ways of accomplishing that perverse goal with Python, not discussing anything to do with <code>__slots__</code>.</p>\n\n<p>The third paragraph is more wishful thinking. Together it is mostly off-the-mark content that the answerer didn't even author and contributes to ammunition for critics of the site.</p>\n\n<h1>Memory usage evidence</h1>\n\n<p>Create some normal objects and slotted objects:</p>\n\n<pre><code>&gt;&gt;&gt; class Foo(object): pass\n&gt;&gt;&gt; class Bar(object): __slots__ = ()\n</code></pre>\n\n<p>Instantiate a million of them:</p>\n\n<pre><code>&gt;&gt;&gt; foos = [Foo() for f in xrange(1000000)]\n&gt;&gt;&gt; bars = [Bar() for b in xrange(1000000)]\n</code></pre>\n\n<p>Inspect with <code>guppy.hpy().heap()</code>:</p>\n\n<pre><code>&gt;&gt;&gt; guppy.hpy().heap()\nPartition of a set of 2028259 objects. Total size = 99763360 bytes.\n Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)\n     0 1000000  49 64000000  64  64000000  64 __main__.Foo\n     1     169   0 16281480  16  80281480  80 list\n     2 1000000  49 16000000  16  96281480  97 __main__.Bar\n     3   12284   1   987472   1  97268952  97 str\n...\n</code></pre>\n\n<p>Access the regular objects and their <code>__dict__</code> and inspect again:</p>\n\n<pre><code>&gt;&gt;&gt; for f in foos:\n...     f.__dict__\n&gt;&gt;&gt; guppy.hpy().heap()\nPartition of a set of 3028258 objects. Total size = 379763480 bytes.\n Index  Count   %      Size    % Cumulative  % Kind (class / dict of class)\n     0 1000000  33 280000000  74 280000000  74 dict of __main__.Foo\n     1 1000000  33  64000000  17 344000000  91 __main__.Foo\n     2     169   0  16281480   4 360281480  95 list\n     3 1000000  33  16000000   4 376281480  99 __main__.Bar\n     4   12284   0    987472   0 377268952  99 str\n...\n</code></pre>\n\n<p>This is consistent with the history of Python, from <a href=\"https://www.python.org/download/releases/2.2.2/descrintro/\" rel=\"noreferrer\">Unifying types and classes in Python 2.2</a></p>\n\n<blockquote>\n  <p>If you subclass a built-in type, extra space is automatically added to the instances to accomodate <code>__dict__</code> and <code>__weakrefs__</code>. (The <code>__dict__</code> is not initialized until you use it though, so you shouldn't worry about the space occupied by an empty dictionary for each instance you create.) If you don't need this extra space, you can add the phrase \"<code>__slots__ = []</code>\" to your class.</p>\n</blockquote>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>My <a href=\"http://en.wiktionary.org/wiki/Google-fu\" rel=\"noreferrer\">Google-fu</a> has failed me.</p>\n\n<p>In Python, are the following two tests for equality equivalent (ha!)?</p>\n\n<pre><code>n = 5\n# Test one.\nif n == 5:\n    print 'Yay!'\n\n# Test two.\nif n is 5:\n    print 'Yay!'\n</code></pre>\n\n<p>Does this hold true for objects where you would be comparing instances (a <code>list</code> say)?</p>\n\n<p>Okay, so this kind of answers my question:</p>\n\n<pre><code>L = []\nL.append(1)\nif L == [1]:\n    print 'Yay!'\n# Holds true, but...\n\nif L is [1]:\n    print 'Yay!'\n# Doesn't.\n</code></pre>\n\n<p>So <code>==</code> tests value where <code>is</code> tests to see if they are the same object?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>is</code> will return <code>True</code> if two variables point to the same object, <code>==</code> if the objects referred to by the variables are equal.</p>\n\n<pre><code>&gt;&gt;&gt; a = [1, 2, 3]\n&gt;&gt;&gt; b = a\n&gt;&gt;&gt; b is a \nTrue\n&gt;&gt;&gt; b == a\nTrue\n&gt;&gt;&gt; b = a[:]\n&gt;&gt;&gt; b is a\nFalse\n&gt;&gt;&gt; b == a\nTrue\n</code></pre>\n\n<p>In your case, the second test only works because Python caches small integer objects, which is an implementation detail. For larger integers, this does not work:</p>\n\n<pre><code>&gt;&gt;&gt; 1000 is 10**3\nFalse\n&gt;&gt;&gt; 1000 == 10**3\nTrue\n</code></pre>\n\n<p>The same holds true for string literals:</p>\n\n<pre><code>&gt;&gt;&gt; \"a\" is \"a\"\nTrue\n&gt;&gt;&gt; \"aa\" is \"a\" * 2\nTrue\n&gt;&gt;&gt; x = \"a\"\n&gt;&gt;&gt; \"aa\" is x * 2\nFalse\n&gt;&gt;&gt; \"aa\" is intern(x*2)\nTrue\n</code></pre>\n\n<p>Please see <a href=\"https://stackoverflow.com/questions/26595/is-there-any-difference-between-foo-is-none-and-foo-none\">this question</a> as well.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I think what I want to do is a fairly common task but I've found no reference on the web. I have text, with punctuation, and I want list of the words. </p>\n\n<pre><code>\"Hey, you - what are you doing here!?\"\n</code></pre>\n\n<p>should be</p>\n\n<pre><code>['hey', 'you', 'what', 'are', 'you', 'doing', 'here']\n</code></pre>\n\n<p>But Python's <code>str.split()</code> only works with one argument... So I have all words with the punctuation after I split with whitespace. Any ideas?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>A case where regular expressions are justified:</p>\n\n<pre><code>import re\nDATA = \"Hey, you - what are you doing here!?\"\nprint re.findall(r\"[\\w']+\", DATA)\n# Prints ['Hey', 'you', 'what', 'are', 'you', 'doing', 'here']\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a Python <a href=\"https://docs.python.org/library/datetime.html#datetime-objects\" rel=\"noreferrer\"><code>datetime.datetime</code></a> object. What is the best way to subtract one day?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use a <a href=\"http://docs.python.org/3.3/library/datetime.html?highlight=datetime#timedelta-objects\" rel=\"noreferrer\">timedelta</a> object:</p>\n\n<pre><code>from datetime import datetime, timedelta\n\nd = datetime.today() - timedelta(days=days_to_subtract)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I completed my first proper project in Python and now my task is to write tests for it.</p>\n\n<p>Since this is the first time I did a project, this is the first time I would be writing tests for it.</p>\n\n<p>The question is, <em>how</em> do I start? I have absolutely no idea. Can anyone point me to some documentation/ tutorial/ link/ book that I can use to start with writing tests (and I guess unit testing in particular)</p>\n\n<p>Any advice will be welcomed on this topic. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"http://www.onlamp.com/pub/a/python/2004/12/02/tdd_pyunit.html\" rel=\"noreferrer\">This is a tutorial for test-driven development in Python</a>. Now, like Justin said, it's better to write your tests before or during coding, and that's how this tutorial assumes you're working, but I still think you'll find it helpful.</p>\n\n<p><a href=\"http://onlamp.com/pub/a/python/2005/02/03/tdd_pyunit2.html\" rel=\"noreferrer\">And here's part 2</a>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I've got a list of Python objects that I'd like to sort by an attribute of the objects themselves.  The list looks like:</p>\n\n<pre><code>&gt;&gt;&gt; ut\n[&lt;Tag: 128&gt;, &lt;Tag: 2008&gt;, &lt;Tag: &lt;&gt;, &lt;Tag: actionscript&gt;, &lt;Tag: addresses&gt;,\n &lt;Tag: aes&gt;, &lt;Tag: ajax&gt; ...]\n</code></pre>\n\n<p>Each object has a count:</p>\n\n<pre><code>&gt;&gt;&gt; ut[1].count\n1L\n</code></pre>\n\n<p>I need to sort the list by number of counts descending.</p>\n\n<p>I've seen several methods for this, but I'm looking for best practice in Python.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code># To sort the list in place...\nut.sort(key=lambda x: x.count, reverse=True)\n\n# To return a new list, use the sorted() built-in function...\nnewlist = sorted(ut, key=lambda x: x.count, reverse=True)\n</code></pre>\n\n<p>More on <a href=\"http://wiki.python.org/moin/HowTo/Sorting#Sortingbykeys\" rel=\"noreferrer\">sorting by keys \u00bb</a> </p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is there a portable way to get the current user's username in Python (i.e., one that works under both Linux and Windows, at least).  It would work like <code>os.getuid</code>:</p>\n\n<pre><code>&gt;&gt;&gt; os.getuid()\n42\n&gt;&gt;&gt; os.getusername()\n'slartibartfast'\n</code></pre>\n\n<p>I googled around and was surprised not to find a definitive answer (although perhaps I was just googling poorly).  The <a href=\"http://www.python.org/doc/2.5.2/lib/module-pwd.html\" rel=\"noreferrer\">pwd</a> module provides a relatively easy way to achieve this under, say, Linux, but it is not present on Windows.  Some of the search results suggested that getting the username under Windows can be complicated in certain circumstances (e.g., running as a Windows service), although I haven't verified that.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Look at <a href=\"http://docs.python.org/library/getpass.html\" rel=\"noreferrer\">getpass</a> module</p>\n\n<pre><code>import getpass\ngetpass.getuser()\n'kostya'\n</code></pre>\n\n<p>Availability: Unix, Windows</p>\n\n<hr>\n\n<p>p.s. Per comment below \"<em>this function looks at the values of various environment variables to determine the user name. Therefore, this function should not be relied on for access control purposes (or possibly any other purpose, since it allows any user to impersonate any other).</em>\"</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I want to define a two-dimensional array without an initialized length like this :</p>\n\n<pre><code>Matrix = [][]\n</code></pre>\n\n<p>but it does not work...</p>\n\n<p>I've tried the code below, but it is wrong too:</p>\n\n<pre><code>Matrix = [5][5]\n</code></pre>\n\n<p><strong><em>Error:</em></strong></p>\n\n<pre><code>Traceback ...\n\nIndexError: list index out of range\n</code></pre>\n\n<p>What is my mistake?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You're technically trying to index an uninitialized array. You have to first initialize the outer list with lists before adding items; Python calls this\n\"list comprehension\".</p>\n\n<pre><code># Creates a list containing 5 lists, each of 8 items, all set to 0\nw, h = 8, 5;\nMatrix = [[0 for x in range(w)] for y in range(h)] \n</code></pre>\n\n<h1>You can now add items to the list:</h1>\n\n<pre><code>Matrix[0][0] = 1\nMatrix[6][0] = 3 # error! range... \nMatrix[0][6] = 3 # valid\n\nprint Matrix[0][0] # prints 1\nx, y = 0, 6 \nprint Matrix[x][y] # prints 3; be careful with indexing! \n</code></pre>\n\n<p>Although you can name them as you wish, I look at it this way to avoid some confusion that could arise with the indexing, if you use \"x\" for both the inner and outer lists, and want a non-square Matrix.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a <code>dictionary</code>: keys are strings, values are integers.</p>\n\n<p>Example: </p>\n\n<pre><code>stats = {'a':1000, 'b':3000, 'c': 100}\n</code></pre>\n\n<p>I'd like to get <code>'b'</code> as an answer, since it's the key with a higher value.</p>\n\n<p>I did the following, using an intermediate list with reversed key-value tuples:</p>\n\n<pre><code>inverse = [(value, key) for key, value in stats.items()]\nprint max(inverse)[1]\n</code></pre>\n\n<p>Is that one the better (or even more elegant) approach?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use <code>operator.itemgetter</code> for that:</p>\n\n<pre><code>import operator\nstats = {'a':1000, 'b':3000, 'c': 100}\nmax(stats.iteritems(), key=operator.itemgetter(1))[0]\n</code></pre>\n\n<p>And instead of building a new list in memory use <code>stats.iteritems()</code>. The <code>key</code> parameter to the <code>max()</code> function is a function that computes a key that is used to determine how to rank items.</p>\n\n<p>Please note that if you were to have another key-value pair 'd': 3000 that this method will only return <strong>one</strong> of the <strong>two</strong> even though they both have the maximum value. </p>\n\n<pre><code>&gt;&gt;&gt; import operator\n&gt;&gt;&gt; stats = {'a':1000, 'b':3000, 'c': 100, 'd':3000}\n&gt;&gt;&gt; max(stats.iteritems(), key=operator.itemgetter(1))[0]\n'b' \n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p><em>This question is not for the discussion of whether or not the <a href=\"http://en.wikipedia.org/wiki/Singleton_pattern\" rel=\"noreferrer\">singleton design pattern</a> is desirable, is an anti-pattern, or for any religious wars, but to discuss how this pattern is best implemented in Python in such a way that is most pythonic. In this instance I define 'most pythonic' to mean that it follows the 'principle of least astonishment'</em>.</p>\n\n<p>I have multiple classes which would become singletons (my use-case is for a logger, but this is not important). I do not wish to clutter several classes with added gumph when I can simply inherit or decorate.</p>\n\n<p>Best methods:</p>\n\n<hr>\n\n<h2>Method 1: A decorator</h2>\n\n<pre><code>def singleton(class_):\n    instances = {}\n    def getinstance(*args, **kwargs):\n        if class_ not in instances:\n            instances[class_] = class_(*args, **kwargs)\n        return instances[class_]\n    return getinstance\n\n@singleton\nclass MyClass(BaseClass):\n    pass\n</code></pre>\n\n<p>Pros</p>\n\n<ul>\n<li>Decorators are additive in a way that is often more intuitive than multiple inheritance.</li>\n</ul>\n\n<p>Cons</p>\n\n<ul>\n<li>While objects created using MyClass() would be true singleton objects, MyClass itself is a a function, not a class, so you cannot call class methods from it. Also for <code>m = MyClass(); n = MyClass(); o = type(n)();</code> then <code>m == n &amp;&amp; m != o &amp;&amp; n != o</code></li>\n</ul>\n\n<hr>\n\n<h2>Method 2: A base class</h2>\n\n<pre><code>class Singleton(object):\n    _instance = None\n    def __new__(class_, *args, **kwargs):\n        if not isinstance(class_._instance, class_):\n            class_._instance = object.__new__(class_, *args, **kwargs)\n        return class_._instance\n\nclass MyClass(Singleton, BaseClass):\n    pass\n</code></pre>\n\n<p>Pros</p>\n\n<ul>\n<li>It's a true class</li>\n</ul>\n\n<p>Cons</p>\n\n<ul>\n<li>Multiple inheritance - eugh! <code>__new__</code> could be overwritten during inheritance from a second base class? One has to think more than is necessary.</li>\n</ul>\n\n<hr>\n\n<h2>Method 3: A <a href=\"https://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python\">metaclass</a></h2>\n\n<pre><code>class Singleton(type):\n    _instances = {}\n    def __call__(cls, *args, **kwargs):\n        if cls not in cls._instances:\n            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)\n        return cls._instances[cls]\n\n#Python2\nclass MyClass(BaseClass):\n    __metaclass__ = Singleton\n\n#Python3\nclass MyClass(BaseClass, metaclass=Singleton):\n    pass\n</code></pre>\n\n<p>Pros</p>\n\n<ul>\n<li>It's a true class</li>\n<li>Auto-magically covers inheritance</li>\n<li>Uses <code>__metaclass__</code> for its proper purpose (and made me aware of it)</li>\n</ul>\n\n<p>Cons</p>\n\n<ul>\n<li>Are there any?</li>\n</ul>\n\n<hr>\n\n<h2>Method 4: decorator returning a class with the same name</h2>\n\n<pre><code>def singleton(class_):\n    class class_w(class_):\n        _instance = None\n        def __new__(class_, *args, **kwargs):\n            if class_w._instance is None:\n                class_w._instance = super(class_w,\n                                    class_).__new__(class_,\n                                                    *args,\n                                                    **kwargs)\n                class_w._instance._sealed = False\n            return class_w._instance\n        def __init__(self, *args, **kwargs):\n            if self._sealed:\n                return\n            super(class_w, self).__init__(*args, **kwargs)\n            self._sealed = True\n    class_w.__name__ = class_.__name__\n    return class_w\n\n@singleton\nclass MyClass(BaseClass):\n    pass\n</code></pre>\n\n<p>Pros</p>\n\n<ul>\n<li>It's a true class</li>\n<li>Auto-magically covers inheritance</li>\n</ul>\n\n<p>Cons</p>\n\n<ul>\n<li>Is there not an overhead for creating each new class? Here we are creating two classes for each class we wish to make a singleton. While this is fine in my case, I worry that this might not scale. Of course there is a matter of debate as to whether it aught to be too easy to scale this pattern...</li>\n<li>What is the point of the <code>_sealed</code> attribute</li>\n<li>Can't call methods of the same name on base classes using <code>super()</code> because they will recurse. This means you can't customize <code>__new__</code> and can't subclass a class that needs you to call up to <code>__init__</code>.</li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<h2>Use a Metaclass</h2>\n\n<p>I would recommend <strong>Method #2</strong>, but you're better off using a <strong>metaclass</strong> than a base class. Here is a sample implementation:</p>\n\n<pre><code>class Singleton(type):\n    _instances = {}\n    def __call__(cls, *args, **kwargs):\n        if cls not in cls._instances:\n            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)\n        return cls._instances[cls]\n\nclass Logger(object):\n    __metaclass__ = Singleton\n</code></pre>\n\n<p>Or in Python3</p>\n\n<pre><code>class Logger(metaclass=Singleton):\n    pass\n</code></pre>\n\n<p>If you want to run <code>__init__</code> every time the class is called, add</p>\n\n<pre><code>        else:\n            cls._instances[cls].__init__(*args, **kwargs)\n</code></pre>\n\n<p>to the <code>if</code> statement in <code>Singleton.__call__</code>.</p>\n\n<p>A few words about metaclasses. A metaclass is the <strong>class of a class</strong>; that is, a class is an <strong>instance of its metaclass</strong>. You find the metaclass of an object in Python with <code>type(obj)</code>. Normal new-style classes are of type <code>type</code>. <code>Logger</code> in the code above will be of type <code>class 'your_module.Singleton'</code>, just as the (only) instance of <code>Logger</code> will be of type <code>class 'your_module.Logger'</code>. When you call logger with <code>Logger()</code>, Python first asks the metaclass of <code>Logger</code>, <code>Singleton</code>, what to do, allowing instance creation to be pre-empted. This process is the same as Python asking a class what to do by calling <code>__getattr__</code> when you reference one of it's attributes by doing <code>myclass.attribute</code>.</p>\n\n<p>A metaclass essentially decides <strong>what the definition of a class means</strong> and how to implement that definition. See for example <a href=\"http://code.activestate.com/recipes/498149/\" rel=\"noreferrer\">http://code.activestate.com/recipes/498149/</a>, which essentially recreates C-style <code>struct</code>s in Python using metaclasses. The thread <a href=\"https://stackoverflow.com/questions/392160/what-are-your-concrete-use-cases-for-metaclasses-in-python\">What are your (concrete) use-cases for metaclasses in Python?</a> also provides some examples, they generally seem to be related to declarative programming, especially as used in ORMs.</p>\n\n<p>In this situation, if you use your <strong>Method #2</strong>, and a subclass defines a <code>__new__</code> method, it will be <strong>executed every time</strong> you call <code>SubClassOfSingleton()</code> -- because it is responsible for calling the method that returns the stored instance. With a metaclass, it will <strong>only be called once</strong>, when the only instance is created. You want to <strong>customize what it means to call the class</strong>, which is decided by it's type.</p>\n\n<p>In general, it <strong>makes sense</strong> to use a metaclass to implement a singleton. A singleton is special because is <strong>created only once</strong>, and a metaclass is the way you customize the <strong>creation of a class</strong>. Using a metaclass gives you <strong>more control</strong> in case you need to customize the singleton class definitions in other ways.</p>\n\n<p>Your singletons <strong>won't need multiple inheritance</strong> (because the metaclass is not a base class), but for <strong>subclasses of the created class</strong> that use multiple inheritance, you need to make sure the singleton class is the <strong>first / leftmost</strong> one with a metaclass that redefines <code>__call__</code> This is very unlikely to be an issue. The instance dict is <strong>not in the instance's namespace</strong> so it won't accidentally overwrite it.</p>\n\n<p>You will also hear that the singleton pattern violates the \"Single Responsibility Principle\" -- each class should do <strong>only one thing</strong>. That way you don't have to worry about messing up one thing the code does if you need to change another, because they are separate and encapsulated. The metaclass implementation <strong>passes this test</strong>. The metaclass is responsible for <strong>enforcing the pattern</strong> and the created class and subclasses need not be <strong>aware that they are singletons</strong>. <strong>Method #1</strong> fails this test, as you noted with \"MyClass itself is a a function, not a class, so you cannot call class methods from it.\"</p>\n\n<h1>Python 2 and 3 Compatible Version</h1>\n\n<p>Writing something that works in both Python2 and 3 requires using a slightly more complicated scheme. Since metaclasses are usually subclasses of type <code>type</code>, it's possible to use one to dynamically create an intermediary base class at run time with it as its metaclass and then use <em>that</em> as the baseclass of the public <code>Singleton</code> base class. It's harder to explain than to do, as illustrated next:</p>\n\n<pre><code># works in Python 2 &amp; 3\nclass _Singleton(type):\n    \"\"\" A metaclass that creates a Singleton base class when called. \"\"\"\n    _instances = {}\n    def __call__(cls, *args, **kwargs):\n        if cls not in cls._instances:\n            cls._instances[cls] = super(_Singleton, cls).__call__(*args, **kwargs)\n        return cls._instances[cls]\n\nclass Singleton(_Singleton('SingletonMeta', (object,), {})): pass\n\nclass Logger(Singleton):\n    pass\n</code></pre>\n\n<p>An ironic aspect of this approach is that it's using subclassing to implement a metaclass. One possible advantage is that, unlike with a pure metaclass, <code>isinstance(inst, Singleton)</code> will return <code>True</code>.</p>\n\n<h2>Corrections</h2>\n\n<p>On another topic, you've probably already noticed this, but the base class implementation in your original post is wrong. <code>_instances</code> needs to be <strong>referenced on the class</strong>, you need to use <code>super()</code> or you're <strong>recursing</strong>, and <code>__new__</code> is actually a static method that you have to <strong>pass the class to</strong>, not a class method, as the actual class <strong>hasn't been created</strong> yet when it is called. All of these things will be true for a metaclass implementation as well.</p>\n\n<pre><code>class Singleton(object):\n  _instances = {}\n  def __new__(class_, *args, **kwargs):\n    if class_ not in class_._instances:\n        class_._instances[class_] = super(Singleton, class_).__new__(class_, *args, **kwargs)\n    return class_._instances[class_]\n\nclass MyClass(Singleton):\n  pass\n\nc = MyClass()\n</code></pre>\n\n<h2>Decorator Returning A Class</h2>\n\n<p>I originally was writing a comment but it was too long, so I'll add this here. <strong>Method #4</strong> is better than the other decorator version, but it's more code than needed for a singleton, and it's not as clear what it does. </p>\n\n<p>The main problems stem from the class being it's own base class. First, isn't it weird to have a class be a subclass of a nearly identical class with the same name that exists only in its <code>__class__</code> attribute? This also means that you can't define <strong>any methods that call the method of the same name on their base class</strong> with <code>super()</code> because they will recurse. This means your class can't customize <code>__new__</code>, and can't derive from any classes that need <code>__init__</code> called on them.</p>\n\n<h2>When to use the singleton pattern</h2>\n\n<p>Your use case is <strong>one of the better examples</strong> of wanting to use a singleton. You say in one of the comments \"To me logging has always seemed a natural candidate for Singletons.\" You're <strong>absolutely right</strong>.</p>\n\n<p>When people say singletons are bad, the most common reason is they are <strong>implicit shared state</strong>. While with global variables and top-level module imports are <strong>explicit</strong> shared state, other objects that are passed around are generally instantiated. This is a good point, <strong>with two exceptions</strong>.</p>\n\n<p>The first, and one that gets mentioned in various places, is when the singletons are <strong>constant</strong>. Use of global constants, especially enums, is widely accepted, and considered sane because no matter what, <strong>none of the users can mess them up for any other user</strong>. This is equally true for a constant singleton.</p>\n\n<p>The second exception, which get mentioned less, is the opposite -- when the singleton is <strong>only a data sink</strong>, not a data source (directly or indirectly). This is why loggers feel like a \"natural\" use for singletons. As the various users are <strong>not changing the loggers</strong> in ways other users will care about, there is <strong>not really shared state</strong>. This negates the primary argument against the singleton pattern, and makes them a reasonable choice because of their <strong>ease of use</strong> for the task.</p>\n\n<p>Here is a quote from <a href=\"http://googletesting.blogspot.com/2008/08/root-cause-of-singletons.html\" rel=\"noreferrer\">http://googletesting.blogspot.com/2008/08/root-cause-of-singletons.html</a>:</p>\n\n<blockquote>\n  <p>Now, there is one kind of Singleton which is OK. That is a singleton where all of the reachable objects are immutable. If all objects are immutable than Singleton has no global state, as everything is constant. But it is so easy to turn this kind of singleton into mutable one, it is very slippery slope. Therefore, I am against these Singletons too, not because they are bad, but because it is very easy for them to go bad. (As a side note Java enumeration are just these kind of singletons. As long as you don't put state into your enumeration you are OK, so please don't.)</p>\n  \n  <p>The other kind of Singletons, which are semi-acceptable are those which don't effect the execution of your code, They have no \"side effects\". Logging is perfect example. It is loaded with Singletons and global state. It is acceptable (as in it will not hurt you) because your application does not behave any different whether or not a given logger is enabled. The information here flows one way: From your application into the logger. Even thought loggers are global state since no information flows from loggers into your application, loggers are acceptable. You should still inject your logger if you want your test to assert that something is getting logged, but in general Loggers are not harmful despite being full of state.</p>\n</blockquote>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Why or why not?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>For performance, especially when you're iterating over a large range, <code>xrange()</code> is usually better.  However, there are still a few cases why you might prefer <code>range()</code>:</p>\n\n<ul>\n<li><p>In python 3, <code>range()</code> does what <code>xrange()</code> used to do and <code>xrange()</code> does not exist.  If you want to write code that will run on both Python 2 and Python 3, you can't use <code>xrange()</code>.</p></li>\n<li><p><code>range()</code> can actually be faster in some cases - eg. if iterating over the same sequence multiple times.  <code>xrange()</code> has to reconstruct the integer object every time, but <code>range()</code> will have real integer objects.  (It will always perform worse in terms of memory however)</p></li>\n<li><p><code>xrange()</code> isn't usable in all cases where a real list is needed.  For instance, it doesn't support slices, or any list methods.</p></li>\n</ul>\n\n<p>[Edit] There are a couple of posts mentioning how <code>range()</code> will be upgraded by the 2to3 tool.  For the record, here's the output of running the tool on some sample usages of <code>range()</code> and <code>xrange()</code></p>\n\n<pre><code>RefactoringTool: Skipping implicit fixer: buffer\nRefactoringTool: Skipping implicit fixer: idioms\nRefactoringTool: Skipping implicit fixer: ws_comma\n--- range_test.py (original)\n+++ range_test.py (refactored)\n@@ -1,7 +1,7 @@\n\n for x in range(20):\n-    a=range(20)\n+    a=list(range(20))\n     b=list(range(20))\n     c=[x for x in range(20)]\n     d=(x for x in range(20))\n-    e=xrange(20)\n+    e=range(20)\n</code></pre>\n\n<p>As you can see, when used in a for loop or comprehension, or where already wrapped with list(), range is left unchanged.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I've been working on a web app using Django, and I'm curious if there is a way to schedule a job to run periodically. </p>\n\n<p>Basically I just want to run through the database and make some calculations/updates on an automatic, regular basis, but I can't seem to find any documentation on doing this.</p>\n\n<p>Does anyone know how to set this up?</p>\n\n<p>To clarify:  I know I can set up a <code>cron</code> job to do this, but I'm curious if there is some feature in Django that provides this functionality.   I'd like people to be able to deploy this app themselves without having to do much config (preferably zero).</p>\n\n<p>I've considered triggering these actions \"retroactively\" by simply checking if a job should have been run since the last time a request was sent to the site, but I'm hoping for something a bit cleaner.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>One solution that I have employed is to do this:</p>\n\n<p>1) Create a <a href=\"http://docs.djangoproject.com/en/dev/howto/custom-management-commands/#howto-custom-management-commands\" rel=\"noreferrer\">custom management command</a>, e.g. </p>\n\n<pre><code>python manage.py my_cool_command\n</code></pre>\n\n<p>2) Use <code>cron</code> (on Linux) or <code>at</code> (on Windows) to run my command at the required times.</p>\n\n<p>This is a simple solution that doesn't require installing a heavy AMQP stack. However there are nice advantages to using something like Celery, mentioned in the other answers. In particular, with Celery it is nice to not have to spread your application logic out into crontab files. However the cron solution works quite nicely for a small to medium sized application and where you don't want a lot of external dependencies.</p>\n\n<p>EDIT:</p>\n\n<p>In later version of windows the <code>at</code> command is deprecated for Windows 8, Server 2012 and above. You can use <code>schtasks.exe</code> for same use.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Sometimes I break long conditions in <code>if</code>s onto several lines. The most obvious way to do this is:</p>\n\n<pre><code>  if (cond1 == 'val1' and cond2 == 'val2' and\n      cond3 == 'val3' and cond4 == 'val4'):\n      do_something\n</code></pre>\n\n<p>Isn't very very appealing visually, because the action blends with the conditions. However, it is the natural way using correct Python indentation of 4 spaces.</p>\n\n<p>For the moment I'm using:</p>\n\n<pre><code>  if (    cond1 == 'val1' and cond2 == 'val2' and\n          cond3 == 'val3' and cond4 == 'val4'):\n      do_something\n</code></pre>\n\n<p>But this isn't very pretty. :-)</p>\n\n<p>Can you recommend an alternative way?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You don't need to use 4 spaces on your second conditional line.  Maybe use:</p>\n\n<pre><code>if (cond1 == 'val1' and cond2 == 'val2' and \n       cond3 == 'val3' and cond4 == 'val4'):\n    do_something\n</code></pre>\n\n<p>Also, don't forget the whitespace is more flexible than you might think:</p>\n\n<pre><code>if (   \n       cond1 == 'val1' and cond2 == 'val2' and \n       cond3 == 'val3' and cond4 == 'val4'\n   ):\n    do_something\nif    (cond1 == 'val1' and cond2 == 'val2' and \n       cond3 == 'val3' and cond4 == 'val4'):\n    do_something\n</code></pre>\n\n<p>Both of those are fairly ugly though.</p>\n\n<p>Maybe lose the brackets (the <a href=\"https://www.python.org/dev/peps/pep-0008/#multiline-if-statements\" rel=\"noreferrer\">Style Guide</a> discourages this though)?</p>\n\n<pre><code>if cond1 == 'val1' and cond2 == 'val2' and \\\n   cond3 == 'val3' and cond4 == 'val4':\n    do_something\n</code></pre>\n\n<p>This at least gives you some differentiation.</p>\n\n<p>Or even:</p>\n\n<pre><code>if cond1 == 'val1' and cond2 == 'val2' and \\\n                       cond3 == 'val3' and \\\n                       cond4 == 'val4':\n    do_something\n</code></pre>\n\n<p>I think I prefer:</p>\n\n<pre><code>if cond1 == 'val1' and \\\n   cond2 == 'val2' and \\\n   cond3 == 'val3' and \\\n   cond4 == 'val4':\n    do_something\n</code></pre>\n\n<p>Here's the <a href=\"https://www.python.org/dev/peps/pep-0008/#multiline-if-statements\" rel=\"noreferrer\">Style Guide</a>, which (since 2010) recommends using brackets.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What is the intended use of the optional <code>else</code> clause of the <code>try</code> statement?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The statements in the <code>else</code> block are executed if execution falls off the bottom of the <code>try</code> - if there was no exception. Honestly, I've never found a need.</p>\n\n<p>However, <a href=\"http://docs.python.org/tutorial/errors.html#handling-exceptions\" rel=\"noreferrer\">Handling Exceptions</a> notes:</p>\n\n<blockquote>\n  <p>The use of the else clause is better\n  than adding additional code to the try\n  clause because it avoids accidentally\n  catching an exception that wasn\u2019t\n  raised by the code being protected by\n  the try ... except statement.</p>\n</blockquote>\n\n<p>So, if you have a method that could, for example, throw an <code>IOError</code>, and you want to catch exceptions it raises, but there's something else you want to do if the first operation succeeds, and you <em>don't</em> want to catch an IOError from that operation, you might write something like this:</p>\n\n<pre><code>    try:\n        operation_that_can_throw_ioerror()\n    except IOError:\n        handle_the_exception_somehow()\n    else:\n         # we don't want to catch the IOError if it's raised\n        another_operation_that_can_throw_ioerror()\n    finally:\n        something_we_always_need_to_do()\n</code></pre>\n\n<p>If you just put <code>another_operation_that_can_throw_ioerror()</code> after <code>operation_that_can_throw_ioerror</code>, the <code>except</code> would catch the second call's errors. And if you put it after the whole <code>try</code> block, it'll always be run, and not until after the <code>finally</code>. The <code>else</code> lets you make sure</p>\n\n<ol>\n<li>the second operation's only run if there's no exception,</li>\n<li>it's run before the <code>finally</code> block, and</li>\n<li>any <code>IOError</code>s it raises aren't caught here</li>\n</ol>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Does anyone know how to do convert from a string to a boolean in Python? I found <a href=\"http://codecomments.wordpress.com/2008/04/08/converting-a-string-to-a-boolean-value-in-python/\" rel=\"noreferrer\">this link</a>. But it doesn't look like a proper way to do it.  I.e. using a built in functionality, etc.</p>\n\n<h3>EDIT:</h3>\n\n<p>The reason I asked this is because I learned <code>int(\"string\")</code>, from here. I tried <code>bool(\"string\")</code> but always got <code>True</code>.</p>\n\n<pre><code>&gt;&gt;&gt; bool(\"False\")\nTrue\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Really, you just compare the string to whatever you expect to accept as representing true, so you can do this:</p>\n\n<pre><code>s == 'True'\n</code></pre>\n\n<p>Or to checks against a whole bunch of values:</p>\n\n<pre><code>s in ['true', '1', 't', 'y', 'yes', 'yeah', 'yup', 'certainly', 'uh-huh']\n</code></pre>\n\n<p>Be cautious when using the following:</p>\n\n<pre><code>&gt;&gt;&gt; bool(\"foo\")\nTrue\n&gt;&gt;&gt; bool(\"\")\nFalse\n</code></pre>\n\n<p>Empty strings evaluate to <code>False</code>, but everything else evaluates to <code>True</code>. So this should not be used for any kind of parsing purposes.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>It seems like there should be a simpler way than:</p>\n\n<pre><code>import string\ns = \"string. With. Punctuation?\" # Sample string \nout = s.translate(string.maketrans(\"\",\"\"), string.punctuation)\n</code></pre>\n\n<p>Is there?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>From an efficiency perspective, you're not going to beat </p>\n\n<pre><code>s.translate(None, string.punctuation)\n</code></pre>\n\n<p>It's performing raw string operations in C with a lookup table - there's not much that will beat that but writing your own C code.</p>\n\n<p>If speed isn't a worry, another option though is:</p>\n\n<pre><code>exclude = set(string.punctuation)\ns = ''.join(ch for ch in s if ch not in exclude)\n</code></pre>\n\n<p>This is faster than s.replace with each char, but won't perform as well as non-pure python approaches such as regexes or string.translate, as you can see from the below timings.  For this type of problem, doing it at as low a level as possible pays off.</p>\n\n<p>Timing code:</p>\n\n<pre><code>import re, string, timeit\n\ns = \"string. With. Punctuation\"\nexclude = set(string.punctuation)\ntable = string.maketrans(\"\",\"\")\nregex = re.compile('[%s]' % re.escape(string.punctuation))\n\ndef test_set(s):\n    return ''.join(ch for ch in s if ch not in exclude)\n\ndef test_re(s):  # From Vinko's solution, with fix.\n    return regex.sub('', s)\n\ndef test_trans(s):\n    return s.translate(table, string.punctuation)\n\ndef test_repl(s):  # From S.Lott's solution\n    for c in string.punctuation:\n        s=s.replace(c,\"\")\n    return s\n\nprint \"sets      :\",timeit.Timer('f(s)', 'from __main__ import s,test_set as f').timeit(1000000)\nprint \"regex     :\",timeit.Timer('f(s)', 'from __main__ import s,test_re as f').timeit(1000000)\nprint \"translate :\",timeit.Timer('f(s)', 'from __main__ import s,test_trans as f').timeit(1000000)\nprint \"replace   :\",timeit.Timer('f(s)', 'from __main__ import s,test_repl as f').timeit(1000000)\n</code></pre>\n\n<p>This gives the following results:</p>\n\n<pre><code>sets      : 19.8566138744\nregex     : 6.86155414581\ntranslate : 2.12455511093\nreplace   : 28.4436721802\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm using the <a href=\"http://docs.python.org/library/subprocess.html\" rel=\"noreferrer\">subprocess module</a> to start a subprocess and connect to it's output stream (stdout). I want to be able to execute non-blocking reads on its stdout. Is there a way to make .readline non-blocking or to check if there is data on the stream before I invoke <code>.readline</code>? I'd like this to be portable or at least work under Windows and Linux.</p>\n\n<p>here is how I do it for now (It's blocking on the <code>.readline</code> if no data is avaible):</p>\n\n<pre><code>p = subprocess.Popen('myprogram.exe', stdout = subprocess.PIPE)\noutput_str = p.stdout.readline()\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"https://stackoverflow.com/questions/375427/non-blocking-read-on-a-stream-in-python/4025909#4025909\"><code>fcntl</code></a>, <a href=\"https://stackoverflow.com/questions/375427/non-blocking-read-on-a-stream-in-python/375511#375511\"><code>select</code></a>, <a href=\"https://stackoverflow.com/questions/375427/non-blocking-read-on-a-stream-in-python/437888#437888\"><code>asyncproc</code></a> won't help in this case.</p>\n\n<p>A reliable way to read a stream without blocking regardless of operating system is to use <a href=\"https://docs.python.org/3/library/queue.html#queue.Queue.get_nowait\" rel=\"noreferrer\"><code>Queue.get_nowait()</code></a>:</p>\n\n<pre><code>import sys\nfrom subprocess import PIPE, Popen\nfrom threading  import Thread\n\ntry:\n    from Queue import Queue, Empty\nexcept ImportError:\n    from queue import Queue, Empty  # python 3.x\n\nON_POSIX = 'posix' in sys.builtin_module_names\n\ndef enqueue_output(out, queue):\n    for line in iter(out.readline, b''):\n        queue.put(line)\n    out.close()\n\np = Popen(['myprogram.exe'], stdout=PIPE, bufsize=1, close_fds=ON_POSIX)\nq = Queue()\nt = Thread(target=enqueue_output, args=(p.stdout, q))\nt.daemon = True # thread dies with the program\nt.start()\n\n# ... do other things here\n\n# read line without blocking\ntry:  line = q.get_nowait() # or q.get(timeout=.1)\nexcept Empty:\n    print('no output yet')\nelse: # got line\n    # ... do something with line\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have the following indexed DataFrame with named columns and rows not- continuous numbers:</p>\n\n<pre><code>          a         b         c         d\n2  0.671399  0.101208 -0.181532  0.241273\n3  0.446172 -0.243316  0.051767  1.577318\n5  0.614758  0.075793 -0.451460 -0.012493\n</code></pre>\n\n<p>I would like to add a new column, <code>'e'</code>, to the existing data frame and do not want to change anything in the data frame (i.e., the new column always has the same length as the DataFrame). </p>\n\n<pre><code>0   -0.335485\n1   -1.166658\n2   -0.385571\ndtype: float64\n</code></pre>\n\n<p>I tried different versions of <code>join</code>, <code>append</code>, <code>merge</code>, but I did not get the result I wanted, only errors at most. How can I add column <code>e</code> to the above example? </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use the original df1 indexes to create the series:</p>\n\n<pre><code>df1['e'] = Series(np.random.randn(sLength), index=df1.index)\n</code></pre>\n\n<hr>\n\n<hr>\n\n<p><strong>Edit 2015</strong><br>\nSome reported to get the <code>SettingWithCopyWarning</code> with this code.<br>\nHowever, the code still runs perfect with the current pandas version 0.16.1.</p>\n\n<pre><code>&gt;&gt;&gt; sLength = len(df1['a'])\n&gt;&gt;&gt; df1\n          a         b         c         d\n6 -0.269221 -0.026476  0.997517  1.294385\n8  0.917438  0.847941  0.034235 -0.448948\n\n&gt;&gt;&gt; df1['e'] = p.Series(np.random.randn(sLength), index=df1.index)\n&gt;&gt;&gt; df1\n          a         b         c         d         e\n6 -0.269221 -0.026476  0.997517  1.294385  1.757167\n8  0.917438  0.847941  0.034235 -0.448948  2.228131\n\n&gt;&gt;&gt; p.version.short_version\n'0.16.1'\n</code></pre>\n\n<p>The <code>SettingWithCopyWarning</code> aims to inform of a possibly invalid assignment on a copy of the Dataframe. It doesn't necessarily say you did it wrong (it can trigger false positives) but from 0.13.0 it let you know there are more adequate methods for the same purpose. Then, if you get the warning, just follow its advise: <em>Try using .loc[row_index,col_indexer] = value instead</em></p>\n\n<pre><code>&gt;&gt;&gt; df1.loc[:,'f'] = p.Series(np.random.randn(sLength), index=df1.index)\n&gt;&gt;&gt; df1\n          a         b         c         d         e         f\n6 -0.269221 -0.026476  0.997517  1.294385  1.757167 -0.050927\n8  0.917438  0.847941  0.034235 -0.448948  2.228131  0.006109\n&gt;&gt;&gt; \n</code></pre>\n\n<p>In fact, this is currently the more efficient method as <a href=\"http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\">described in pandas docs</a></p>\n\n<hr>\n\n<hr>\n\n<p><strong>Edit 2017</strong></p>\n\n<p>As indicated in the comments and by @Alexander, currently the best method to add the values of a Series as a new column of a DataFrame could be using <code>assign</code>:</p>\n\n<pre><code>df1 = df1.assign(e=p.Series(np.random.randn(sLength)).values)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I want to get the current file's directory path.<br>\nI tried: </p>\n\n<pre><code>&gt;&gt;&gt; os.path.abspath(__file__)\n'C:\\\\python27\\\\test.py'\n</code></pre>\n\n<p>But how can I retrieve the directory's path?\nFor example:</p>\n\n<pre><code>'C:\\\\python27\\\\'\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you mean the directory of the script being run:</p>\n\n<pre><code>import os\nos.path.dirname(os.path.abspath(__file__))\n</code></pre>\n\n<p>If you mean the current working directory:</p>\n\n<pre><code>import os\nos.getcwd()\n</code></pre>\n\n<p>Note that before and after <code>file</code> is two underscores, not just one. </p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is there a way to check if the type of a variable in python is string.. like</p>\n\n<pre><code>isinstance(x,int);\n</code></pre>\n\n<p>for integer values?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In Python 2.x, you would do</p>\n\n<pre><code>isinstance(s, basestring)\n</code></pre>\n\n<p><code>basestring</code> is the <a href=\"https://docs.python.org/2/library/functions.html#basestring\">abstract superclass</a> of <code>str</code> and <code>unicode</code>. It can be used to test whether an object is an instance of <code>str</code> or <code>unicode</code>.</p>\n\n<p>Equivalent code:</p>\n\n<pre><code>isinstance(s, (str, unicode))\n</code></pre>\n\n<hr>\n\n<p>In Python 3.x, it would be</p>\n\n<pre><code>isinstance(s, str)\n</code></pre>\n\n<p>(basestring is not defined in Python 3.)</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>For example I have two dicts:</p>\n\n<pre><code>Dict A: {'a':1, 'b':2, 'c':3}\nDict B: {'b':3, 'c':4, 'd':5}\n</code></pre>\n\n<p>I need a pythonic way of 'combining' two dicts such that the result is :</p>\n\n<pre><code>{'a':1, 'b':5, 'c':7, 'd':5}\n</code></pre>\n\n<p>That is to say: if a key appears in both dicts, add their values, if it appears in only one dict, keep its value.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use <a href=\"http://docs.python.org/library/collections.html#collections.Counter\" rel=\"noreferrer\"><code>collections.Counter</code></a>:</p>\n\n<pre><code>&gt;&gt;&gt; from collections import Counter\n&gt;&gt;&gt; A = Counter({'a':1, 'b':2, 'c':3})\n&gt;&gt;&gt; B = Counter({'b':3, 'c':4, 'd':5})\n&gt;&gt;&gt; A + B\nCounter({'c': 7, 'b': 5, 'd': 5, 'a': 1})\n</code></pre>\n\n<p>Counters are basically a subclass of <code>dict</code>, so you can still do everything else with them you'd normally do with that type, such as iterate over their keys and values.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What is the difference between abstract class and interface in Python?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>What you'll see sometimes is the following:</p>\n\n<pre><code>class Abstract1( object ):\n    \"\"\"Some description that tells you it's abstract,\n    often listing the methods you're expected to supply.\"\"\"\n    def aMethod( self ):\n        raise NotImplementedError( \"Should have implemented this\" )\n</code></pre>\n\n<p>Because Python doesn't have (and doesn't need) a formal Interface contract, the Java-style distinction between abstraction and interface doesn't exist.  If someone goes through the effort to define a formal interface, it will also be an abstract class.  The only differences would be in the stated intent in the docstring.  </p>\n\n<p>And the difference between abstract and interface is a hairsplitting thing when you have duck typing.</p>\n\n<p>Java uses interfaces because it doesn't have multiple inheritance.</p>\n\n<p>Because Python has multiple inheritance, you may also see something like this</p>\n\n<pre><code>class SomeAbstraction( object ):\n    pass # lots of stuff - but missing something\n\nclass Mixin1( object ):\n    def something( self ):\n        pass # one implementation\n\nclass Mixin2( object ):\n    def something( self ):\n        pass # another\n\nclass Concrete1( SomeAbstraction, Mixin1 ):\n    pass\n\nclass Concrete2( SomeAbstraction, Mixin2 ):\n    pass\n</code></pre>\n\n<p>This uses a kind of abstract superclass with mixins to create concrete subclasses that are disjoint.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I know how to get an intersection of two flat lists:</p>\n\n<pre><code>b1 = [1,2,3,4,5,9,11,15]\nb2 = [4,5,6,7,8]\nb3 = [val for val in b1 if val in b2]\n</code></pre>\n\n<p>or </p>\n\n<pre><code>def intersect(a, b):\n    return list(set(a) &amp; set(b))\n\nprint intersect(b1, b2)\n</code></pre>\n\n<p>But when I have to find intersection for nested lists then my problems starts:</p>\n\n<pre><code>c1 = [1, 6, 7, 10, 13, 28, 32, 41, 58, 63]\nc2 = [[13, 17, 18, 21, 32], [7, 11, 13, 14, 28], [1, 5, 6, 8, 15, 16]]\n</code></pre>\n\n<p>In the end I would like to receive:</p>\n\n<pre><code>c3 = [[13,32],[7,13,28],[1,6]]\n</code></pre>\n\n<p>Can you guys give me a hand with this?</p>\n\n<h3>Related</h3>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/406121/flattening-a-shallow-list-in-python\">Flattening a shallow list in python</a></li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>If you want:</strong></p>\n\n<pre><code>c1 = [1, 6, 7, 10, 13, 28, 32, 41, 58, 63]\nc2 = [[13, 17, 18, 21, 32], [7, 11, 13, 14, 28], [1, 5, 6, 8, 15, 16]]\nc3 = [[13, 32], [7, 13, 28], [1,6]]\n</code></pre>\n\n<p><strong>Then here is your solution for Python 2:</strong></p>\n\n<pre><code>c3 = [filter(lambda x: x in c1, sublist) for sublist in c2]\n</code></pre>\n\n<p><strong>In Python 3 <code>filter</code> returns an iterable instead of <code>list</code>, so you need to wrap <code>filter</code> calls with <code>list()</code>:</strong></p>\n\n<pre><code>c3 = [list(filter(lambda x: x in c1, sublist)) for sublist in c2]\n</code></pre>\n\n<p><strong>Explanation:</strong> </p>\n\n<p>The filter part takes each sublist's item and checks to see if it is in the source list c1. \nThe list comprehension is executed for each sublist in c2. </p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Imagine this directory structure:</p>\n\n<pre><code>app/\n   __init__.py\n   sub1/\n      __init__.py\n      mod1.py\n   sub2/\n      __init__.py\n      mod2.py\n</code></pre>\n\n<p>I'm coding <code>mod1</code>, and I need to import something from <code>mod2</code>. How should I do it?  </p>\n\n<p>I tried <code>from ..sub2 import mod2</code> but I'm getting an \"Attempted relative import in non-package\".</p>\n\n<p>I googled around but found only \"<code>sys.path</code> manipulation\" hacks. Isn't there a clean way?  </p>\n\n<hr>\n\n<p>Edit: all my <code>__init__.py</code>'s are currently empty  </p>\n\n<p>Edit2: I'm trying to do this because sub2 contains classes that are shared across sub packages (<code>sub1</code>, <code>subX</code>, etc.).</p>\n\n<p>Edit3: The behaviour I'm looking for is the same as described in <a href=\"http://www.python.org/dev/peps/pep-0366/\" rel=\"noreferrer\">PEP 366</a> (thanks John B)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Everyone seems to want to tell you what you should be doing rather than just answering the question.</p>\n\n<p>The problem is that you're running the module as '__main__' by passing the mod1.py as an argument to the interpreter.</p>\n\n<p>From <a href=\"http://www.python.org/dev/peps/pep-0328/\" rel=\"noreferrer\">PEP 328</a>:</p>\n\n<blockquote>\n  <p>Relative imports use a module's __name__ attribute to determine that module's position in the package hierarchy. If the module's name does not contain any package information (e.g. it is set to '__main__') then relative imports are resolved as if the module were a top level module, regardless of where the module is actually located on the file system.</p>\n</blockquote>\n\n<p>In Python 2.6, they're adding the ability to reference modules relative to the main module.  <a href=\"http://python.org/dev/peps/pep-0366/\" rel=\"noreferrer\">PEP 366</a> describes the change.</p>\n\n<p><strong>Update</strong>: According to Nick Coghlan, the recommended alternative is to run the module inside the package using the -m switch.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am trying to print an integer in <em>Python 2.6.1</em> with commas as thousands separators. For example, I want to show the number <code>1234567</code> as <code>1,234,567</code>. How would I go about doing this? I have seen many examples on Google, but I am looking for the simplest practical way.</p>\n\n<p>It does not need to be locale-specific to decide between periods and commas. I would prefer something as simple as reasonably possible.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>For Python \u2265 2.7:</p>\n\n<pre><code>\"{:,}\".format(value)\n</code></pre>\n\n<p>Per <a href=\"https://docs.python.org/library/string.html#format-specification-mini-language\">Format Specification Mini-Language</a>,</p>\n\n<blockquote>\n  <p>The <code>','</code> option signals the use of a comma for a thousands separator. For a locale aware separator, use the <code>'n'</code> integer presentation type instead.</p>\n</blockquote>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In Python, how do I get a function name as a string without calling the function?</p>\n\n<pre><code>def my_function():\n    pass\n\nprint get_function_name_as_string(my_function) # my_function is not in quotes\n</code></pre>\n\n<p>should output <code>\"my_function\"</code>.</p>\n\n<p>Is this available in python? If not, any idea how to write <code>get_function_name_as_string</code> in Python?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>my_function.__name__\n</code></pre>\n\n<p>Using <code>__name__</code> is the preferred method as it applies uniformly. Unlike <code>func_name</code>, it works on built-in functions as well:</p>\n\n<pre><code>&gt;&gt;&gt; import time\n&gt;&gt;&gt; time.time.func_name\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in ?\nAttributeError: 'builtin_function_or_method' object has no attribute 'func_name'\n&gt;&gt;&gt; time.time.__name__ \n'time'\n</code></pre>\n\n<p>Also the double underscores indicate to the reader this is a special attribute. As a bonus, classes and modules have a <code>__name__</code> attribute too, so you only have remember one special name.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am originally a C programmer. I have seen numerous tricks and \"hacks\" to read many different arguments. </p>\n\n<p>What are some of the ways Python programmers can do this?</p>\n\n<h3>Related</h3>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/20063/whats-the-best-way-to-grab-parse-command-line-arguments-passed-to-a-python-scrip\">What\u2019s the best way to grab/parse command line arguments passed to a Python script?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/362426/implementing-a-command-action-parameter-style-command-line-interfaces\">Implementing a \u201c[command] [action] [parameter]\u201d style command-line interfaces?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/567879/how-can-i-process-command-line-arguments-in-python\">How can I process command line arguments in Python?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/642648/how-do-i-format-positional-argument-help-using-pythons-optparse\">How do I format positional argument help using Python\u2019s optparse?</a></li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<h2><em>Please</em> note that optparse was deprecated in version 2.7 of Python:</h2>\n\n<p><a href=\"http://docs.python.org/2/library/optparse.html\" rel=\"noreferrer\">http://docs.python.org/2/library/optparse.html</a>.  <strong>argparse</strong> is the replacement: <a href=\"http://docs.python.org/2/library/argparse.html#module-argparse\" rel=\"noreferrer\">http://docs.python.org/2/library/argparse.html#module-argparse</a></p>\n\n<hr>\n\n<p>There are the following modules in the standard library:</p>\n\n<ul>\n<li>The <a href=\"http://docs.python.org/library/getopt.html\" rel=\"noreferrer\">getopt</a> module is similar to GNU getopt.</li>\n<li>The <a href=\"http://docs.python.org/library/optparse.html#module-optparse\" rel=\"noreferrer\">optparse</a> module offers object-oriented command line option parsing. </li>\n</ul>\n\n<p>Here is an example that uses the latter from the docs:</p>\n\n<pre><code>from optparse import OptionParser\n\nparser = OptionParser()\nparser.add_option(\"-f\", \"--file\", dest=\"filename\",\n                  help=\"write report to FILE\", metavar=\"FILE\")\nparser.add_option(\"-q\", \"--quiet\",\n                  action=\"store_false\", dest=\"verbose\", default=True,\n                  help=\"don't print status messages to stdout\")\n\n(options, args) = parser.parse_args()\n</code></pre>\n\n<p>optparse supports (among other things):</p>\n\n<ul>\n<li>Multiple options in any order.</li>\n<li>Short and long options.</li>\n<li>Default values.</li>\n<li>Generation of a usage help message.</li>\n</ul>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Should I put the shebang in my Python scripts? In what form?</p>\n\n<pre><code>#!/usr/bin/env python \n</code></pre>\n\n<p>or</p>\n\n<pre><code>#!/usr/local/bin/python\n</code></pre>\n\n<p>Are these equally portable? Which form is used most?</p>\n\n<p><strong><em>Note:</em></strong> the <a href=\"https://github.com/facebook/tornado\" rel=\"noreferrer\">tornado</a> project uses the shebang. On the other hand the <a href=\"https://www.djangoproject.com/\" rel=\"noreferrer\">Django</a> project doesn't.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The shebang line in any script determines the script's ability to be executed like an standalone executable without typing <code>python</code> beforehand in the terminal or when double clicking it in a file manager(when configured properly). It isn't necessary but generally put there so when someone sees the file opened in an editor, they immediately know what they're looking at. However, which shebang line you use <strong>IS</strong> important;\n<strong>Correct</strong> usage is:</p>\n\n<pre><code>#!/usr/bin/env python\n</code></pre>\n\n<p><code>#!/usr/bin/env python</code> Usually defaults to python 2.7.latest, and the following defaults to 3.latest</p>\n\n<pre><code>#!/usr/bin/env python3\n</code></pre>\n\n<h3><strong>DO NOT Use:</strong></h3>\n\n<pre><code>#!/usr/local/bin/python\n</code></pre>\n\n<blockquote>\n  <p>\"python may be installed at /usr/bin/python or /bin/python in those\n  cases, the above #! will fail.\"</p>\n</blockquote>\n\n<p>--<a href=\"https://mail.python.org/pipermail/tutor/2007-June/054816.html\" rel=\"noreferrer\">\"#!/usr/bin/env python\" vs \"#!/usr/local/bin/python\"</a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is there a way using Python's standard library to easily determine (i.e. one function call) the last day of a given month?</p>\n\n<p>If the standard library doesn't support that, does the dateutil package support this?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I didn't notice this earlier when I was looking at the <a href=\"https://docs.python.org/2/library/calendar.html\" rel=\"noreferrer\">documentation for the calendar module</a>, but a method called <a href=\"http://docs.python.org/library/calendar.html#calendar.monthrange\" rel=\"noreferrer\">monthrange</a> provides this information:</p>\n\n<blockquote>\n  <p><b>monthrange(year, month)</b><br>\n  \u00a0\u00a0\u00a0\u00a0Returns weekday of first day of the month and number of days in month, for the specified year and month. </p>\n</blockquote>\n\n<pre><code>&gt;&gt;&gt; import calendar\n&gt;&gt;&gt; calendar.monthrange(2002,1)\n(1, 31)\n&gt;&gt;&gt; calendar.monthrange(2008,2)\n(4, 29)\n&gt;&gt;&gt; calendar.monthrange(2100,2)\n(0, 28)\n</code></pre>\n\n<p>so:</p>\n\n<pre><code>calendar.monthrange(year, month)[1]\n</code></pre>\n\n<p>seems like the simplest way to go.</p>\n\n<p>Just to be clear, <code>monthrange</code> supports leap years as well:</p>\n\n<pre><code>&gt;&gt;&gt; from calendar import monthrange\n&gt;&gt;&gt; monthrange(2012, 2)\n(2, 29)\n</code></pre>\n\n<p><a href=\"https://stackoverflow.com/questions/42950/get-last-day-of-the-month-in-python#43088\">My previous answer</a> still works, but is clearly suboptimal.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Why does the following behave unexpectedly in Python?</p>\n\n<pre><code>&gt;&gt;&gt; a = 256\n&gt;&gt;&gt; b = 256\n&gt;&gt;&gt; a is b\nTrue           # This is an expected result\n&gt;&gt;&gt; a = 257\n&gt;&gt;&gt; b = 257\n&gt;&gt;&gt; a is b\nFalse          # What happened here? Why is this False?\n&gt;&gt;&gt; 257 is 257\nTrue           # Yet the literal numbers compare properly\n</code></pre>\n\n<p>I am using Python 2.5.2. Trying some different versions of Python, it appears that Python 2.3.3 shows the above behaviour between 99 and 100.</p>\n\n<p>Based on the above, I can hypothesize that Python is internally implemented such that \"small\" integers are stored in a different way than larger integers and the <code>is</code> operator can tell the difference. Why the leaky abstraction? What is a better way of comparing two arbitrary objects to see whether they are the same when I don't know in advance whether they are numbers or not?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Take a look at this:</p>\n\n<pre><code>&gt;&gt;&gt; a = 256\n&gt;&gt;&gt; b = 256\n&gt;&gt;&gt; id(a)\n9987148\n&gt;&gt;&gt; id(b)\n9987148\n&gt;&gt;&gt; a = 257\n&gt;&gt;&gt; b = 257\n&gt;&gt;&gt; id(a)\n11662816\n&gt;&gt;&gt; id(b)\n11662828\n</code></pre>\n\n<p>EDIT: Here's what I found in the Python 2 documentation, <a href=\"https://docs.python.org/2/c-api/int.html\" rel=\"noreferrer\">\"Plain Integer Objects\"</a> (It's the same for <a href=\"https://docs.python.org/3/c-api/long.html\" rel=\"noreferrer\">Python 3</a>):</p>\n\n<blockquote>\n  <p>The current implementation keeps an\n  array of integer objects for all\n  integers between -5 and 256, when you\n  create an int in that range you\n  actually just get back a reference to\n  the existing object. So it should be\n  possible to change the value of 1. I\n  suspect the behaviour of Python in\n  this case is undefined. :-)</p>\n</blockquote>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/1024847/add-new-keys-to-a-dictionary\" dir=\"ltr\">Add new keys to a dictionary?</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    15 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>I want to add an item to an existing dictionary in python. For example, this is my dictionary:</p>\n\n<pre><code>default_data = {\n            'item1': 1,\n            'item2': 2,\n}\n</code></pre>\n\n<p>I want to add new item such that:</p>\n\n<pre><code>default_data = default_data + {'item3':3}\n</code></pre>\n\n<p>How to achieve this?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>default_data['item3'] = 3\n</code></pre>\n\n<p>Easy as py.</p>\n\n<p>Another possible solution:</p>\n\n<pre><code>default_data.update({'item3': 3})\n</code></pre>\n\n<p>which is nice if you want to insert multiple items at once.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p><strong>Original Question</strong></p>\n\n<p>I am currently engaged in teaching my brother to program.  He is a total beginner, but very smart. (And he actually wants to learn).  I've noticed that some of our sessions have gotten bogged down in minor details, and I don't feel I've been very organized. (<em>But the answers to this post have helped a lot.</em>)</p>\n\n<p>What can I do better to teach him effectively?  Is there a logical order that I can use to run through concept by concept?  Are there complexities I should avoid till later?</p>\n\n<p>The language we are working with is <a href=\"http://www.python.org\" rel=\"noreferrer\">Python</a>, but advice in any language is welcome.</p>\n\n<hr>\n\n<p><strong>How to Help</strong></p>\n\n<p>If you have good ones please add the following in your answer:</p>\n\n<ul>\n<li>Beginner Exercises and Project Ideas</li>\n<li>Resources for teaching beginners</li>\n<li>Screencasts / blog posts / free e-books</li>\n<li>Print books that are good for beginners</li>\n</ul>\n\n<p>Please describe the resource <em>with a link to it</em> so I can take a look.  I want everyone to know that I have definitely been using some of these ideas.  Your submissions will be aggregated in this post.</p>\n\n<hr>\n\n<p><strong>Online Resources</strong> for teaching beginners:</p>\n\n<ul>\n<li><a href=\"http://ocw.mit.edu/OcwWeb/Electrical-Engineering-and-Computer-Science/6-189January--IAP--2008/CourseHome/\" rel=\"noreferrer\">A Gentle Introduction to Programming Using Python</a></li>\n<li><a href=\"http://openbookproject.net/thinkcs/python/english2e/index.html\" rel=\"noreferrer\">How to Think Like a Computer Scientist</a></li>\n<li><a href=\"http://www.alice.org/\" rel=\"noreferrer\">Alice: a 3d program for beginners</a></li>\n<li><a href=\"http://scratch.mit.edu/\" rel=\"noreferrer\">Scratch (A system to develop programming skills)</a></li>\n<li><a href=\"http://www.htdp.org/\" rel=\"noreferrer\">How To Design Programs</a></li>\n<li><a href=\"http://mitpress.mit.edu/sicp/full-text/book/book.html\" rel=\"noreferrer\">Structure and Interpretation of Computer Programs</a></li>\n<li><a href=\"http://pine.fm/LearnToProgram/\" rel=\"noreferrer\">Learn To Program</a></li>\n<li><a href=\"http://samizdat.mines.edu/howto/HowToBeAProgrammer.html\" rel=\"noreferrer\">Robert Read's How To Be a Programmer</a></li>\n<li><a href=\"http://creators.xna.com/\" rel=\"noreferrer\">Microsoft XNA</a></li>\n<li><a href=\"http://vodpod.com/watch/914464-inspirational-oscon-keynote\" rel=\"noreferrer\">Spawning the Next Generation of Hackers</a></li>\n<li><a href=\"http://deimos3.apple.com/WebObjects/Core.woa/Browse/unsw.edu.au.1504975442.01504975444\" rel=\"noreferrer\"><em>COMP1917 Higher Computing</em> lectures by Richard Buckland</a> (requires iTunes)</li>\n<li><a href=\"http://diveintopython.net/\" rel=\"noreferrer\">Dive into Python</a></li>\n<li><a href=\"http://en.wikibooks.org/wiki/Programming:Python\" rel=\"noreferrer\">Python Wikibook</a></li>\n<li><a href=\"http://projecteuler.net/\" rel=\"noreferrer\">Project Euler</a> - sample problems (mostly mathematical)</li>\n<li><a href=\"http://www.pygame.org/\" rel=\"noreferrer\">pygame</a> - an easy python library for creating games</li>\n<li><a href=\"http://inventwithpython.com/IYOCGwP_book1.pdf\" rel=\"noreferrer\">Invent Your Own Computer Games With Python</a></li>\n<li><a href=\"http://codebetter.com/blogs/karlseguin/archive/2008/06/24/foundations-of-programming-ebook.aspx\" rel=\"noreferrer\">Foundations of Programming</a> for a next step beyond basics.</li>\n<li><a href=\"http://www.iam.unibe.ch/~scg/SBE/\" rel=\"noreferrer\">Squeak by Example</a> </li>\n<li><a href=\"http://www.briggs.net.nz/log/writing/snake-wrangling-for-kids/\" rel=\"noreferrer\">Snake Wrangling For Kids</a> (It's not just for kids!)</li>\n</ul>\n\n<hr>\n\n<p><strong>Recommended Print Books</strong> for teaching beginners</p>\n\n<ul>\n<li><a href=\"http://www.acceleratedcpp.com/\" rel=\"noreferrer\">Accelerated C++</a></li>\n<li><a href=\"http://rads.stackoverflow.com/amzn/click/1598631128\" rel=\"noreferrer\">Python Programming for the Absolute Beginner</a></li>\n<li><a href=\"http://rads.stackoverflow.com/amzn/click/0735611319\" rel=\"noreferrer\">Code by Charles Petzold</a></li>\n<li><a href=\"http://rads.stackoverflow.com/amzn/click/1590282418\" rel=\"noreferrer\">Python Programming: An Introduction to Computer Science 2nd Edition</a></li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I've had to work with several beginner (never wrote a line of code) programmers, and I'll be doing an after school workshop with high school students this fall. This is the closest thing I've got to documentation. It's still a work in progress, but I hope it helps.</p>\n\n<p>1) <b>FizzBuzz.</b> Start with command line programs. You can write some fun games, or tools, very quickly, and you learn all of the language features very quickly without having to learn the GUI tools first. These early apps should be simple enough that you won't need to use any real debugging tools to make them work.</p>\n\n<p>If nothing else things like FizzBuzz are good projects. Your first few apps should not have to deal with DBs, file system, configuration, ect. These are concepts which just confuse most people, and when you're just learning the syntax and basic framework features you really don't need more complexity.</p>\n\n<p>Some projects:</p>\n\n<ul>\n<li>Hello World!</li>\n<li>Take the year of my birth, and calculate my age (just (now - then) no month corrections). <i>(simple math, input, output)</i></li>\n<li>Ask for a direction(Up, down, left, right), then tell the user their fate (fall in a hole, find a cake, ect). <i>(Boolean logic)</i></li>\n<li>FizzBuzz, but count once every second. <i>(Loops, timers, and more logic)</i></li>\n<li>Depending on their age some really like an app which calls the users a random insult at some interval. <i>(Loops, arrays, timers, and random if you make the interval random)</i></li>\n</ul>\n\n<p>2) <b>Simple Project</b> Once they have a good grasp of language features, you can start a project(simple, fun games work good.). You should try to have the first project be able to be completed within 6-12 hours. Don't spend time to architect it early. Let them design it even if it sucks. If it falls apart, talk about what happened and why it failed, then pick another topic and start again.</p>\n\n<p>This is where you start introducing the debugging capabilities of your tools. Even if you can see the problem by reading the code you should teach them how to use the tools, and then show them how you could see it. That serves the dual purpose of teaching the debugging tools and teaching how to ID errors without tools.</p>\n\n<p>Once, or if, the project gets functional you can use it to introduce refactoring tools. Its good if you can then expand the project with some simple features which you never planned for. This usually means refactoring and significant debugging, since very few people write even half decent code their first time.</p>\n\n<p>Some projects:</p>\n\n<ul>\n<li>Hangman game</li>\n<li>Experimenting with robotics(<a href=\"http://www.vexlabs.com\" rel=\"nofollow noreferrer\">Vex</a> and <a href=\"http://mindstorms.lego.com\" rel=\"nofollow noreferrer\">Mindstorms</a> are options) </li>\n</ul>\n\n<p>3) <b>Real Project </b> Start a real project which may take some time. Use proper source control, and make a point to have a schedule. Run this project like a real project, if nothing else its good experience having to deal with the tools.</p>\n\n<p>Obviously you need to adjust this for each person. The most important thing I've found is to make even the first simple apps apply to what the person is interested in. </p>\n\n<p>Some projects:</p>\n\n<ul>\n<li>Tetris</li>\n<li>Text file based blog engine</li>\n<li>More advanced robotics work</li>\n</ul>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I want my python function to split a sentence (input) and store each word in a list. The code that I've written so far splits the sentence, but does not store the words as a list. How do I do that?</p>\n\n<pre><code>def split_line(text):\n\n    # split the text\n    words = text.split()\n\n    # for each word in the line:\n    for word in words:\n\n        # print the word\n        print(word)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>text.split()\n</code></pre>\n\n<p>This should be enough to store each word in a list.  <code>words</code> is already a list of the words from the sentence, so there is no need for the loop.</p>\n\n<p>Second, it might be a typo, but you have your loop a little messed up. If you really did want to use append, it would be:</p>\n\n<pre><code>words.append(word)\n</code></pre>\n\n<p>not </p>\n\n<pre><code>word.append(words)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>This is what I normally do in order to ascertain that the input is a <code>list</code>/<code>tuple</code> - but not a <code>str</code>. Because many times I stumbled upon bugs where a function passes a <code>str</code> object by mistake, and the target function does <code>for x in lst</code> assuming that <code>lst</code> is actually a <code>list</code> or <code>tuple</code>.</p>\n\n<pre><code>assert isinstance(lst, (list, tuple))\n</code></pre>\n\n<p>My question is: is there a better way of achieving this?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I think</p>\n\n<pre><code>assert not isinstance(lst, basestring)\n</code></pre>\n\n<p>Is actually what you want, otherwise you'll miss out on a lot of things which act like lists, but aren't subclasses of <code>list</code> or <code>tuple</code>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What would be the quickest way to construct a Python binding to a C or C++ library?</p>\n\n<p>(I am using Windows if this matters.)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You should have a look at <a href=\"http://www.boost.org/doc/libs/1_49_0/libs/python/doc/\" rel=\"nofollow noreferrer\">Boost.Python</a>. Here is the short introduction taken from their website:</p>\n\n<blockquote>\n  <p>The Boost Python Library is a framework for interfacing Python and\n  C++. It allows you to quickly and seamlessly expose C++ classes\n  functions and objects to Python, and vice-versa, using no special\n  tools -- just your C++ compiler. It is designed to wrap C++ interfaces\n  non-intrusively, so that you should not have to change the C++ code at\n  all in order to wrap it, making Boost.Python ideal for exposing\n  3rd-party libraries to Python. The library's use of advanced\n  metaprogramming techniques simplifies its syntax for users, so that\n  wrapping code takes on the look of a kind of declarative interface\n  definition language (IDL).</p>\n</blockquote>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What's the best way to do case insensitive string comparison in Python?</p>\n\n<p>I would like to encapsulate comparison of a regular strings to a repository string using in a very simple and pythonic way.  I also would like to have ability to look up values in a dict hashed by strings using regular python strings.  Much obliged for advice.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Assuming ASCII strings:</p>\n\n<pre><code>string1 = 'Hello'\nstring2 = 'hello'\n\nif string1.lower() == string2.lower():\n    print \"The strings are the same (case insensitive)\"\nelse:\n    print \"The strings are not the same (case insensitive)\"\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/952914/making-a-flat-list-out-of-list-of-lists-in-python\" dir=\"ltr\">Making a flat list out of list of lists in Python</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    24 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>Is there a simple way to flatten a list of iterables with a list comprehension, or failing that, what would you all consider to be the best way to flatten a shallow list like this, balancing performance and readability?</p>\n\n<p>I tried to flatten such a list with a nested list comprehension, like this:</p>\n\n<pre><code>[image for image in menuitem for menuitem in list_of_menuitems]\n</code></pre>\n\n<p>But I get in trouble of the <code>NameError</code> variety there, because the <code>name 'menuitem' is not defined</code>.  After googling and looking around on Stack Overflow, I got the desired results with a <code>reduce</code> statement:</p>\n\n<pre><code>reduce(list.__add__, map(lambda x: list(x), list_of_menuitems))\n</code></pre>\n\n<p>But this method is fairly unreadable because I need that <code>list(x)</code> call there because x is a Django <code>QuerySet</code> object.</p>\n\n<p><strong>Conclusion</strong>: </p>\n\n<p>Thanks to everyone who contributed to this question.  Here is a summary of what I learned.  I'm also making this a community wiki in case others want to add to or correct these observations.</p>\n\n<p>My original reduce statement is redundant and is better written this way:</p>\n\n<pre><code>&gt;&gt;&gt; reduce(list.__add__, (list(mi) for mi in list_of_menuitems))\n</code></pre>\n\n<p>This is the correct syntax for a nested list comprehension (Brilliant summary <a href=\"https://stackoverflow.com/users/3002/df\">dF</a>!):</p>\n\n<pre><code>&gt;&gt;&gt; [image for mi in list_of_menuitems for image in mi]\n</code></pre>\n\n<p>But neither of these methods are as efficient as using <code>itertools.chain</code>:</p>\n\n<pre><code>&gt;&gt;&gt; from itertools import chain\n&gt;&gt;&gt; list(chain(*list_of_menuitems))\n</code></pre>\n\n<p>And as @cdleary notes, it's probably better style to avoid * operator magic by using <code>chain.from_iterable</code> like so:</p>\n\n<pre><code>&gt;&gt;&gt; chain = itertools.chain.from_iterable([[1,2],[3],[5,89],[],[6]])\n&gt;&gt;&gt; print(list(chain))\n&gt;&gt;&gt; [1, 2, 3, 5, 89, 6]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you're just looking to iterate over a flattened version of the data structure and don't need an indexable sequence, consider <a href=\"http://docs.python.org/library/itertools.html#itertools.chain\" rel=\"noreferrer\">itertools.chain and company</a>.</p>\n\n<pre><code>&gt;&gt;&gt; list_of_menuitems = [['image00', 'image01'], ['image10'], []]\n&gt;&gt;&gt; import itertools\n&gt;&gt;&gt; chain = itertools.chain(*list_of_menuitems)\n&gt;&gt;&gt; print(list(chain))\n['image00', 'image01', 'image10']\n</code></pre>\n\n<p>It will work on anything that's iterable, which should include Django's iterable <code>QuerySet</code>s, which it appears that you're using in the question.</p>\n\n<p><strong>Edit:</strong> This is probably as good as a reduce anyway, because reduce will have the same overhead copying the items into the list that's being extended. <code>chain</code> will only incur this (same) overhead if you run <code>list(chain)</code> at the end.</p>\n\n<p><strong>Meta-Edit:</strong> Actually, it's less overhead than the question's proposed solution, because you throw away the temporary lists you create when you extend the original with the temporary.</p>\n\n<p><strong>Edit:</strong> As <a href=\"https://stackoverflow.com/questions/406121/flattening-a-shallow-list-in-python#411548\">J.F. Sebastian says</a> <code>itertools.chain.from_iterable</code> avoids the unpacking and you should use that to avoid <code>*</code> magic, but <a href=\"https://stackoverflow.com/questions/406121/flattening-a-shallow-list-in-python#408281\">the timeit app</a> shows negligible performance difference.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I want to get a list of the column headers from a pandas DataFrame.  The DataFrame will come from user input so I won't know how many columns there will be or what they will be called.</p>\n\n<p>For example, if I'm given a DataFrame like this:</p>\n\n<pre><code>&gt;&gt;&gt; my_dataframe\n    y  gdp  cap\n0   1    2    5\n1   2    3    9\n2   8    7    2\n3   3    4    7\n4   6    7    7\n5   4    8    3\n6   8    2    8\n7   9    9   10\n8   6    6    4\n9  10   10    7\n</code></pre>\n\n<p>I would want to get a list like this:</p>\n\n<pre><code>&gt;&gt;&gt; header_list\n[y, gdp, cap]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can get the values as a list by doing:</p>\n\n<pre><code>list(my_dataframe.columns.values)\n</code></pre>\n\n<p>Also you can simply use:</p>\n\n<pre><code>list(my_dataframe)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I would like to get some feedback on these tools on :</p>\n\n<ul>\n<li>features;</li>\n<li>adaptability;</li>\n<li>ease of use and learning curve.</li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Well, I am a bit curious, so I just tested the 3 myself right after asking the question ;-)</p>\n\n<p>Ok, this is not a very serious review but here is what I can say :</p>\n\n<p>I tried the tools <strong>with the default settings</strong> (it's important because you can pretty much choose your check rules) on the following script :</p>\n\n<pre><code>#!/usr/local/bin/python\n# by Daniel Rosengren modified by e-satis\n\nimport sys, time\nstdout = sys.stdout\n\nBAILOUT = 16\nMAX_ITERATIONS = 1000\n\nclass Iterator(object) :\n\n    def __init__(self):\n\n        print 'Rendering...'\n        for y in xrange(-39, 39): \n            stdout.write('\\n')\n            for x in xrange(-39, 39):\n                if self.mandelbrot(x/40.0, y/40.0) :\n                    stdout.write(' ')\n                else:\n                    stdout.write('*')\n\n\n    def mandelbrot(self, x, y):\n        cr = y - 0.5\n        ci = x\n        zi = 0.0\n        zr = 0.0\n\n        for i in xrange(MAX_ITERATIONS) :\n            temp = zr * zi\n            zr2 = zr * zr\n            zi2 = zi * zi\n            zr = zr2 - zi2 + cr\n            zi = temp + temp + ci\n\n            if zi2 + zr2 &gt; BAILOUT:\n                return i\n\n        return 0\n\nt = time.time()\nIterator() \nprint '\\nPython Elapsed %.02f' % (time.time() - t)\n</code></pre>\n\n<p><strong>As a result :</strong></p>\n\n<ul>\n<li>PyChecker is troublesome because it compiles the module to analyze it. If you don't want your code to run (e.g, it performs a SQL query), that's bad.</li>\n<li>PyFlakes is supposed to be lite. Indeed, it decided that the code was perfect. I am looking for something quite severe so I don't think I'll go for it.</li>\n<li>PyLint has been very talkative and rated the code 3/10 (OMG, I'm a dirty coder !).</li>\n</ul>\n\n<p><strong>Strongs points :</strong></p>\n\n<ul>\n<li>Very descriptive and accurate report.</li>\n<li>Detect some code smells. Here it told me to drop my class to write something with functions because the OO approach was useless in this specific case. Something I knew, but never expected a computer to tell me :-p</li>\n<li>The fully corrected code run faster (no class, no reference binding...).</li>\n<li>Made by a French team. Ok it's not a plus for everybody, but I like it ;-)</li>\n</ul>\n\n<p><strong>Cons :</strong></p>\n\n<ul>\n<li>Some rules are really strict. I know that you can change it and that the default is to match PEP 8, but is it such a crime to write 'for x in seq'? Apparently yes because you can't write a variable name with less than 3 letters. I will change that.</li>\n<li>Very very talkative. Be ready to use your eyes.</li>\n</ul>\n\n<p>Corrected script (with lazy doc strings and variable names) :</p>\n\n<pre><code>#!/usr/local/bin/python\n# by Daniel Rosengren, modified by e-satis\n\"\"\"\nModule doctring\n\"\"\"\n\n\nimport time\nfrom sys import stdout\n\nBAILOUT = 16\nMAX_ITERATIONS = 1000\n\ndef mandelbrot(dim_1, dim_2):\n    \"\"\"\n    function doc string\n    \"\"\"\n    cr1 = dim_1 - 0.5\n    ci1 = dim_2\n    zi1 = 0.0\n    zr1 = 0.0\n\n    for i in xrange(MAX_ITERATIONS) :\n        temp = zr1 * zi1\n        zr2 = zr1 * zr1\n        zi2 = zi1 * zi1\n        zr1 = zr2 - zi2 + cr1\n        zi1 = temp + temp + ci1\n\n        if zi2 + zr2 &gt; BAILOUT:\n            return i\n\n    return 0\n\ndef execute() :\n    \"\"\"\n    func doc string\n    \"\"\"\n    print 'Rendering...'\n    for dim_1 in xrange(-39, 39): \n        stdout.write('\\n')\n        for dim_2 in xrange(-39, 39):\n            if mandelbrot(dim_1/40.0, dim_2/40.0) :\n                stdout.write(' ')\n            else:\n                stdout.write('*')\n\n\nSTART_TIME = time.time()\nexecute()\nprint '\\nPython Elapsed %.02f' % (time.time() - START_TIME)\n</code></pre>\n\n<p><strong>EDIT :</strong></p>\n\n<p>Thanks to Rudiger Wolf, I discovered pep8 that does exactly what its name suggests: matching PEP8. It has found several syntax no-nos that PyLint did not. But PyLint found stuff that was not specifically linked to PEP8 but interesting. Both tools are interesting and complementary.</p>\n\n<p>Eventually I will use both since there are really easy to install (via packages or setuptools) and the output text is so easy to chain.</p>\n\n<p>To give you a little idea of their output:</p>\n\n<p><em>pep8</em>:</p>\n\n<pre><code>./python_mandelbrot.py:4:11: E401 multiple imports on one line\n./python_mandelbrot.py:10:1: E302 expected 2 blank lines, found 1\n./python_mandelbrot.py:10:23: E203 whitespace before ':'\n./python_mandelbrot.py:15:80: E501 line too long (108 characters)\n./python_mandelbrot.py:23:1: W291 trailing whitespace\n./python_mandelbrot.py:41:5: E301 expected 1 blank line, found 3\n</code></pre>\n\n<p>PyLint :</p>\n\n<pre><code>************* Module python_mandelbrot\nC: 15: Line too long (108/80)\nC: 61: Line too long (85/80)\nC:  1: Missing docstring\nC:  5: Invalid name \"stdout\" (should match (([A-Z_][A-Z0-9_]*)|(__.*__))$)\nC: 10:Iterator: Missing docstring\nC: 15:Iterator.__init__: Invalid name \"y\" (should match [a-z_][a-z0-9_]{2,30}$)\nC: 17:Iterator.__init__: Invalid name \"x\" (should match [a-z_][a-z0-9_]{2,30}$)\n\n[...] and a very long report with useful stats like :\n\nDuplication\n-----------\n\n+-------------------------+------+---------+-----------+\n|                         |now   |previous |difference |\n+=========================+======+=========+===========+\n|nb duplicated lines      |0     |0        |=          |\n+-------------------------+------+---------+-----------+\n|percent duplicated lines |0.000 |0.000    |=          |\n+-------------------------+------+---------+-----------+\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm looking for a way to test whether or not a given string repeats itself for the entire string or not.</p>\n\n<p>Examples:</p>\n\n<pre><code>[\n    '0045662100456621004566210045662100456621',             # '00456621'\n    '0072992700729927007299270072992700729927',             # '00729927'\n    '001443001443001443001443001443001443001443',           # '001443'\n    '037037037037037037037037037037037037037037037',        # '037'\n    '047619047619047619047619047619047619047619',           # '047619'\n    '002457002457002457002457002457002457002457',           # '002457'\n    '001221001221001221001221001221001221001221',           # '001221'\n    '001230012300123001230012300123001230012300123',        # '00123'\n    '0013947001394700139470013947001394700139470013947',    # '0013947'\n    '001001001001001001001001001001001001001001001001001',  # '001'\n    '001406469760900140646976090014064697609',              # '0014064697609'\n]\n</code></pre>\n\n<p>are strings which repeat themselves, and</p>\n\n<pre><code>[\n    '004608294930875576036866359447',\n    '00469483568075117370892018779342723',\n    '004739336492890995260663507109',\n    '001508295625942684766214177978883861236802413273',\n    '007518796992481203',\n    '0071942446043165467625899280575539568345323741',\n    '0434782608695652173913',\n    '0344827586206896551724137931',\n    '002481389578163771712158808933',\n    '002932551319648093841642228739',\n    '0035587188612099644128113879',\n    '003484320557491289198606271777',\n    '00115074798619102416570771',\n]\n</code></pre>\n\n<p>are examples of ones that do not.</p>\n\n<p>The repeating sections of the strings I'm given can be quite long, and the strings themselves can be 500 or more characters, so looping through each character trying to build a pattern then checking the pattern vs the rest of the string seems awful slow. Multiply that by potentially hundreds of strings and I can't see any intuitive solution.</p>\n\n<p>I've looked into regexes a bit and they seem good for when you know what you're looking for, or at least the length of the pattern you're looking for. Unfortunately, I know neither.</p>\n\n<p>How can I tell if a string is repeating itself and if it is, what the shortest repeating subsequence is?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here's a concise solution which avoids regular expressions and slow in-Python loops:</p>\n\n<pre><code>def principal_period(s):\n    i = (s+s).find(s, 1, -1)\n    return None if i == -1 else s[:i]\n</code></pre>\n\n<p>See the <a href=\"https://stackoverflow.com/a/29482936/2447250\">Community Wiki answer</a> started by @davidism for benchmark results. In summary,</p>\n\n<blockquote>\n  <p>David Zhang's solution is the clear winner, outperforming all others by at least 5x for the large example set.</p>\n</blockquote>\n\n<p>(That answer's words, not mine.)</p>\n\n<p>This is based on the observation that a string is periodic if and only if it is equal to a nontrivial rotation of itself. Kudos to @AleksiTorhamo for realizing that we can then recover the principal period from the index of the first occurrence of <code>s</code> in <code>(s+s)[1:-1]</code>, and for informing me of the optional <code>start</code> and <code>end</code> arguments of Python's <code>string.find</code>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In a comment on the <a href=\"https://stackoverflow.com/questions/306130/python-decorator-makes-function-forget-that-it-belongs-to-a-class#306277\">answer to another question</a>, someone said they weren't sure what functools.wraps was doing.  So I'm asking this question so that there will be a record of it on StackOverflow for future reference: what does functools.wraps do, exactly?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>When you use a decorator, you're replacing one function with another.  In other words, if you have a decorator</p>\n\n<pre><code>def logged(func):\n    def with_logging(*args, **kwargs):\n        print func.__name__ + \" was called\"\n        return func(*args, **kwargs)\n    return with_logging\n</code></pre>\n\n<p>then when you say</p>\n\n<pre><code>@logged\ndef f(x):\n   \"\"\"does some math\"\"\"\n   return x + x * x\n</code></pre>\n\n<p>it's exactly the same as saying</p>\n\n<pre><code>def f(x):\n    \"\"\"does some math\"\"\"\n    return x + x * x\nf = logged(f)\n</code></pre>\n\n<p>and your function f is replaced with the function with_logging.  Unfortunately, this means that if you then say</p>\n\n<pre><code>print f.__name__\n</code></pre>\n\n<p>it will print <code>with_logging</code> because that's the name of your new function.  In fact, if you look at the docstring for f, it will be blank because with_logging has no docstring, and so the docstring you wrote won't be there anymore.  Also, if you look at the pydoc result for that function, it won't be listed as taking one argument <code>x</code>; instead it'll be listed as taking <code>*args</code> and <code>**kwargs</code> because that's what with_logging takes.</p>\n\n<p>If using a decorator always meant losing this information about a function, it would be a serious problem.  That's why we have <code>functools.wraps</code>.  This takes a function used in a decorator and adds the functionality of copying over the function name, docstring, arguments list, etc.  And since <code>wraps</code> is itself a decorator, the following code does the correct thing:</p>\n\n<pre><code>from functools import wraps\ndef logged(func):\n    @wraps(func)\n    def with_logging(*args, **kwargs):\n        print func.__name__ + \" was called\"\n        return func(*args, **kwargs)\n    return with_logging\n\n@logged\ndef f(x):\n   \"\"\"does some math\"\"\"\n   return x + x * x\n\nprint f.__name__  # prints 'f'\nprint f.__doc__   # prints 'does some math'\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm building a Python application and don't want to force my clients to install Python and modules. I also want to make my application closed-source.</p>\n\n<p>So, is there a way to compile Python scripts to standalone executables?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use <a href=\"http://www.py2exe.org/\">py2exe</a> as already answered and use <a href=\"http://cython.org/\">cython</a> to convert your key <code>.py</code> files in <code>.pyc</code>, C compiled files, like <code>.dll</code> in Windows and <code>.so</code> in linux, much harder to revert than common <code>.pyo</code> and <code>.pyc</code> files (and also gain in performance!)</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What's the difference between:</p>\n\n<pre><code>class Child(SomeBaseClass):\n    def __init__(self):\n        super(Child, self).__init__()\n</code></pre>\n\n<p>and:</p>\n\n<pre><code>class Child(SomeBaseClass):\n    def __init__(self):\n        SomeBaseClass.__init__(self)\n</code></pre>\n\n<p>I've seen <code>super</code> being used quite a lot in classes with only single inheritance. I can see why you'd use it in multiple inheritance but am unclear as to what the advantages are of using it in this kind of situation.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The benefits of <code>super()</code> in single-inheritance are minimal -- mostly, you don't have to hard-code the name of the base class into every method that uses its parent methods.</p>\n\n<p>However, it's almost impossible to use multiple-inheritance without <code>super()</code>. This includes common idioms like mixins, interfaces, abstract classes, etc. This extends to code that later extends yours. If somebody later wanted to write a class that extended <code>Child</code> and a mixin, their code would not work properly.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Which image processing techniques could be used to implement an application that detects the christmas trees displayed in the following images?</p>\n\n<p><img src=\"https://i.stack.imgur.com/nmzwj.png\" width=\"210\" height=\"150\"> \n<img src=\"https://i.stack.imgur.com/aVZhC.png\" width=\"210\" height=\"150\"> \n<img src=\"https://i.stack.imgur.com/2K9Ef.png\" width=\"210\" height=\"150\"></p>\n\n<p><img src=\"https://i.stack.imgur.com/YowlH.png\" width=\"210\" height=\"150\">\n<img src=\"https://i.stack.imgur.com/2y4o5.png\" width=\"210\" height=\"150\">\n<img src=\"https://i.stack.imgur.com/FWhSP.png\" width=\"210\" height=\"150\"></p>\n\n<p>I'm searching for solutions that are going to work on all these images. Therefore, approaches that require training <em>haar cascade classifiers</em> or <em>template matching</em> are not very interesting.</p>\n\n<p>I'm looking for something that can be written in <em>any</em> programming language, <em>as long as</em> it uses only <em>Open Source</em> technologies. The solution must be tested with the images that are shared on this question. There are <em>6 input images</em> and the answer should display the results of processing each of them. Finally, for each <em>output image</em> there must be <em>red lines</em> draw to surround the detected tree.</p>\n\n<p>How would you go about programmatically detecting the trees in these images?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I have an approach which I think is interesting and a bit different from the rest.  The main difference in my approach, compared to some of the others, is in how the image segmentation step is performed--I used the <a href=\"http://scikit-learn.org/stable/modules/generated/sklearn.cluster.DBSCAN.html#sklearn.cluster.DBSCAN\">DBSCAN</a> clustering algorithm from Python's scikit-learn; it's optimized for finding somewhat amorphous shapes that may not necessarily have a single clear centroid.</p>\n\n<p>At the top level, my approach is fairly simple and can be broken down into about 3 steps.  First I apply a threshold (or actually, the logical \"or\" of two separate and distinct thresholds).  As with many of the other answers, I assumed that the Christmas tree would be one of the brighter objects in the scene, so the first threshold is just a simple monochrome brightness test; any pixels with values above 220 on a 0-255 scale (where black is 0 and white is 255) are saved to a binary black-and-white image.  The second threshold tries to look for red and yellow lights, which are particularly prominent in the trees in the upper left and lower right of the six images, and stand out well against the blue-green background which is prevalent in most of the photos.  I convert the rgb image to hsv space, and require that the hue is either less than 0.2 on a 0.0-1.0 scale (corresponding roughly to the border between yellow and green) or greater than 0.95 (corresponding to the border between purple and red) and additionally I require bright, saturated colors: saturation and value must both be above 0.7.  The results of the two threshold procedures are logically \"or\"-ed together, and the resulting matrix of black-and-white binary images is shown below:</p>\n\n<p><img src=\"https://i.stack.imgur.com/iIkWV.png\" alt=\"Christmas trees, after thresholding on HSV as well as monochrome brightness\"></p>\n\n<p>You can clearly see that each image has one large cluster of pixels roughly corresponding to the location of each tree, plus a few of the images also have some other small clusters corresponding either to lights in the windows of some of the buildings, or to a background scene on the horizon.  The next step is to get the computer to recognize that these are separate clusters, and label each pixel correctly with a cluster membership ID number.</p>\n\n<p>For this task I chose <a href=\"http://en.wikipedia.org/wiki/DBSCAN\">DBSCAN</a>.  There is a pretty good visual comparison of how DBSCAN typically behaves, relative to other clustering algorithms, available <a href=\"http://scikit-learn.org/stable/auto_examples/cluster/plot_cluster_comparison.html\">here</a>.  As I said earlier, it does well with amorphous shapes.  The output of DBSCAN, with each cluster plotted in a different color, is shown here:</p>\n\n<p><img src=\"https://i.stack.imgur.com/rWSqn.png\" alt=\"DBSCAN clustering output\"></p>\n\n<p>There are a few things to be aware of when looking at this result.  First is that DBSCAN requires the user to set a \"proximity\" parameter in order to regulate its behavior, which effectively controls how separated a pair of points must be in order for the algorithm to declare a new separate cluster rather than agglomerating a test point onto an already pre-existing cluster.  I set this value to be 0.04 times the size along the diagonal of each image.  Since the images vary in size from roughly VGA up to about HD 1080, this type of scale-relative definition is critical.</p>\n\n<p>Another point worth noting is that the DBSCAN algorithm as it is implemented in scikit-learn has memory limits which are fairly challenging for some of the larger images in this sample.  Therefore, for a few of the larger images, I actually had to \"decimate\" (i.e., retain only every 3rd or 4th pixel and drop the others) each cluster in order to stay within this limit.  As a result of this culling process, the remaining individual sparse pixels are difficult to see on some of the larger images.  Therefore, for display purposes only, the color-coded pixels in the above images have been effectively \"dilated\" just slightly so that they stand out better.  It's purely a cosmetic operation for the sake of the narrative; although there are comments mentioning this dilation in my code, rest assured that it has nothing to do with any calculations that actually matter.</p>\n\n<p>Once the clusters are identified and labeled, the third and final step is easy: I simply take the largest cluster in each image (in this case, I chose to measure \"size\" in terms of the total number of member pixels, although one could have just as easily instead used some type of metric that gauges physical extent) and compute the convex hull for that cluster.  The convex hull then becomes the tree border.  The six convex hulls computed via this method are shown below in red:</p>\n\n<p><img src=\"https://i.stack.imgur.com/sl6Ar.jpg\" alt=\"Christmas trees with their calculated borders\"></p>\n\n<p>The source code is written for Python 2.7.6 and it depends on <a href=\"http://www.numpy.org/\">numpy</a>, <a href=\"http://www.scipy.org/\">scipy</a>, <a href=\"http://matplotlib.org/\">matplotlib</a> and <a href=\"http://scikit-learn.org/stable/\">scikit-learn</a>.  I've divided it into two parts.  The first part is responsible for the actual image processing:</p>\n\n<pre><code>from PIL import Image\nimport numpy as np\nimport scipy as sp\nimport matplotlib.colors as colors\nfrom sklearn.cluster import DBSCAN\nfrom math import ceil, sqrt\n\n\"\"\"\nInputs:\n\n    rgbimg:         [M,N,3] numpy array containing (uint, 0-255) color image\n\n    hueleftthr:     Scalar constant to select maximum allowed hue in the\n                    yellow-green region\n\n    huerightthr:    Scalar constant to select minimum allowed hue in the\n                    blue-purple region\n\n    satthr:         Scalar constant to select minimum allowed saturation\n\n    valthr:         Scalar constant to select minimum allowed value\n\n    monothr:        Scalar constant to select minimum allowed monochrome\n                    brightness\n\n    maxpoints:      Scalar constant maximum number of pixels to forward to\n                    the DBSCAN clustering algorithm\n\n    proxthresh:     Proximity threshold to use for DBSCAN, as a fraction of\n                    the diagonal size of the image\n\nOutputs:\n\n    borderseg:      [K,2,2] Nested list containing K pairs of x- and y- pixel\n                    values for drawing the tree border\n\n    X:              [P,2] List of pixels that passed the threshold step\n\n    labels:         [Q,2] List of cluster labels for points in Xslice (see\n                    below)\n\n    Xslice:         [Q,2] Reduced list of pixels to be passed to DBSCAN\n\n\"\"\"\n\ndef findtree(rgbimg, hueleftthr=0.2, huerightthr=0.95, satthr=0.7, \n             valthr=0.7, monothr=220, maxpoints=5000, proxthresh=0.04):\n\n    # Convert rgb image to monochrome for\n    gryimg = np.asarray(Image.fromarray(rgbimg).convert('L'))\n    # Convert rgb image (uint, 0-255) to hsv (float, 0.0-1.0)\n    hsvimg = colors.rgb_to_hsv(rgbimg.astype(float)/255)\n\n    # Initialize binary thresholded image\n    binimg = np.zeros((rgbimg.shape[0], rgbimg.shape[1]))\n    # Find pixels with hue&lt;0.2 or hue&gt;0.95 (red or yellow) and saturation/value\n    # both greater than 0.7 (saturated and bright)--tends to coincide with\n    # ornamental lights on trees in some of the images\n    boolidx = np.logical_and(\n                np.logical_and(\n                  np.logical_or((hsvimg[:,:,0] &lt; hueleftthr),\n                                (hsvimg[:,:,0] &gt; huerightthr)),\n                                (hsvimg[:,:,1] &gt; satthr)),\n                                (hsvimg[:,:,2] &gt; valthr))\n    # Find pixels that meet hsv criterion\n    binimg[np.where(boolidx)] = 255\n    # Add pixels that meet grayscale brightness criterion\n    binimg[np.where(gryimg &gt; monothr)] = 255\n\n    # Prepare thresholded points for DBSCAN clustering algorithm\n    X = np.transpose(np.where(binimg == 255))\n    Xslice = X\n    nsample = len(Xslice)\n    if nsample &gt; maxpoints:\n        # Make sure number of points does not exceed DBSCAN maximum capacity\n        Xslice = X[range(0,nsample,int(ceil(float(nsample)/maxpoints)))]\n\n    # Translate DBSCAN proximity threshold to units of pixels and run DBSCAN\n    pixproxthr = proxthresh * sqrt(binimg.shape[0]**2 + binimg.shape[1]**2)\n    db = DBSCAN(eps=pixproxthr, min_samples=10).fit(Xslice)\n    labels = db.labels_.astype(int)\n\n    # Find the largest cluster (i.e., with most points) and obtain convex hull   \n    unique_labels = set(labels)\n    maxclustpt = 0\n    for k in unique_labels:\n        class_members = [index[0] for index in np.argwhere(labels == k)]\n        if len(class_members) &gt; maxclustpt:\n            points = Xslice[class_members]\n            hull = sp.spatial.ConvexHull(points)\n            maxclustpt = len(class_members)\n            borderseg = [[points[simplex,0], points[simplex,1]] for simplex\n                          in hull.simplices]\n\n    return borderseg, X, labels, Xslice\n</code></pre>\n\n<p>and the second part is a user-level script which calls the first file and generates all of the plots above:</p>\n\n<pre><code>#!/usr/bin/env python\n\nfrom PIL import Image\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nfrom findtree import findtree\n\n# Image files to process\nfname = ['nmzwj.png', 'aVZhC.png', '2K9EF.png',\n         'YowlH.png', '2y4o5.png', 'FWhSP.png']\n\n# Initialize figures\nfgsz = (16,7)        \nfigthresh = plt.figure(figsize=fgsz, facecolor='w')\nfigclust  = plt.figure(figsize=fgsz, facecolor='w')\nfigcltwo  = plt.figure(figsize=fgsz, facecolor='w')\nfigborder = plt.figure(figsize=fgsz, facecolor='w')\nfigthresh.canvas.set_window_title('Thresholded HSV and Monochrome Brightness')\nfigclust.canvas.set_window_title('DBSCAN Clusters (Raw Pixel Output)')\nfigcltwo.canvas.set_window_title('DBSCAN Clusters (Slightly Dilated for Display)')\nfigborder.canvas.set_window_title('Trees with Borders')\n\nfor ii, name in zip(range(len(fname)), fname):\n    # Open the file and convert to rgb image\n    rgbimg = np.asarray(Image.open(name))\n\n    # Get the tree borders as well as a bunch of other intermediate values\n    # that will be used to illustrate how the algorithm works\n    borderseg, X, labels, Xslice = findtree(rgbimg)\n\n    # Display thresholded images\n    axthresh = figthresh.add_subplot(2,3,ii+1)\n    axthresh.set_xticks([])\n    axthresh.set_yticks([])\n    binimg = np.zeros((rgbimg.shape[0], rgbimg.shape[1]))\n    for v, h in X:\n        binimg[v,h] = 255\n    axthresh.imshow(binimg, interpolation='nearest', cmap='Greys')\n\n    # Display color-coded clusters\n    axclust = figclust.add_subplot(2,3,ii+1) # Raw version\n    axclust.set_xticks([])\n    axclust.set_yticks([])\n    axcltwo = figcltwo.add_subplot(2,3,ii+1) # Dilated slightly for display only\n    axcltwo.set_xticks([])\n    axcltwo.set_yticks([])\n    axcltwo.imshow(binimg, interpolation='nearest', cmap='Greys')\n    clustimg = np.ones(rgbimg.shape)    \n    unique_labels = set(labels)\n    # Generate a unique color for each cluster \n    plcol = cm.rainbow_r(np.linspace(0, 1, len(unique_labels)))\n    for lbl, pix in zip(labels, Xslice):\n        for col, unqlbl in zip(plcol, unique_labels):\n            if lbl == unqlbl:\n                # Cluster label of -1 indicates no cluster membership;\n                # override default color with black\n                if lbl == -1:\n                    col = [0.0, 0.0, 0.0, 1.0]\n                # Raw version\n                for ij in range(3):\n                    clustimg[pix[0],pix[1],ij] = col[ij]\n                # Dilated just for display\n                axcltwo.plot(pix[1], pix[0], 'o', markerfacecolor=col, \n                    markersize=1, markeredgecolor=col)\n    axclust.imshow(clustimg)\n    axcltwo.set_xlim(0, binimg.shape[1]-1)\n    axcltwo.set_ylim(binimg.shape[0], -1)\n\n    # Plot original images with read borders around the trees\n    axborder = figborder.add_subplot(2,3,ii+1)\n    axborder.set_axis_off()\n    axborder.imshow(rgbimg, interpolation='nearest')\n    for vseg, hseg in borderseg:\n        axborder.plot(hseg, vseg, 'r-', lw=3)\n    axborder.set_xlim(0, binimg.shape[1]-1)\n    axborder.set_ylim(binimg.shape[0], -1)\n\nplt.show()\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>While asking <a href=\"https://stackoverflow.com/questions/2081622/python-raw-strings-and-unicode-how-to-use-web-for-input-as-regexp-patterns\">this question</a>, I realized I didn't know much about raw strings. For somebody claiming to be a Django trainer, this sucks.</p>\n\n<p>I know what an encoding is, and I know what <code>u</code> alone does since I get what is Unicode.</p>\n\n<p>But what does <code>r</code> do exactly? What kind of string does it result in?</p>\n\n<p>And above all, what the heck does <code>ur</code> do?</p>\n\n<p>Finally, is there any reliable way to go back from a Unicode string to a simple raw string?</p>\n\n<p>Ah, and by the way, if your system and your text editor charset are set to UTF-8, does <code>u</code> actually do anything?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There's not really any \"raw <em>string</em>\"; there are raw <em>string literals</em>, which are exactly the string literals marked by an <code>'r'</code> before the opening quote.</p>\n\n<p>A \"raw string literal\" is a slightly different syntax for a string literal, in which a backslash, <code>\\</code>, is taken as meaning \"just a backslash\" (except when it comes right before a quote that would otherwise terminate the literal) -- no \"escape sequences\" to represent newlines, tabs, backspaces, form-feeds, and so on.  In normal string literals, each backslash must be doubled up to avoid being taken as the start of an escape sequence.</p>\n\n<p>This syntax variant exists mostly because the syntax of regular expression patterns is heavy with backslashes (but never at the end, so the \"except\" clause above doesn't matter) and it looks a bit better when you avoid doubling up each of them -- that's all.  It also gained some popularity to express native Windows file paths (with backslashes instead of regular slashes like on other platforms), but that's very rarely needed (since normal slashes mostly work fine on Windows too) and imperfect (due to the \"except\" clause above).</p>\n\n<p><code>r'...'</code> is a byte string (in Python 2.*), <code>ur'...'</code> is a Unicode string (again, in Python 2.*), and any of the other three kinds of quoting also produces exactly the same types of strings (so for example <code>r'...'</code>, <code>r'''...'''</code>, <code>r\"...\"</code>, <code>r\"\"\"...\"\"\"</code> are all byte strings, and so on).</p>\n\n<p>Not sure what you mean by \"going <em>back</em>\" - there is no intrinsically back and forward directions, because there's no raw string <strong>type</strong>, it's just an alternative syntax to express perfectly normal string objects, byte or unicode as they may be.</p>\n\n<p>And yes, in Python 2.*, <code>u'...'</code> <strong>is</strong> of course always distinct from just <code>'...'</code> -- the former is a unicode string, the latter is a byte string. What encoding the literal might be expressed in is a completely orthogonal issue.</p>\n\n<p>E.g., consider (Python 2.6):</p>\n\n<pre><code>&gt;&gt;&gt; sys.getsizeof('ciao')\n28\n&gt;&gt;&gt; sys.getsizeof(u'ciao')\n34\n</code></pre>\n\n<p>The Unicode object of course takes more memory space (very small difference for a very short string, obviously ;-).</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How do you convert a Unicode string (containing extra characters like \u00a3 $, etc.) into a Python string?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>title = u\"Kl\u00fcft skr\u00e4ms inf\u00f6r p\u00e5 f\u00e9d\u00e9ral \u00e9lectoral gro\u00dfe\"\nimport unicodedata\nunicodedata.normalize('NFKD', title).encode('ascii','ignore')\n'Kluft skrams infor pa federal electoral groe'\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<pre><code>s = 'the brown fox'\n</code></pre>\n\n<p>...do something here...</p>\n\n<p><code>s</code> should be :</p>\n\n<pre><code>'The Brown Fox'\n</code></pre>\n\n<p>What's the easiest way to do this?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The <a href=\"http://docs.python.org/library/stdtypes.html#str.title\" rel=\"noreferrer\"><code>.title()</code></a> method of a string (either ASCII or Unicode is fine) does this:</p>\n\n<pre><code>&gt;&gt;&gt; \"hello world\".title()\n'Hello World'\n&gt;&gt;&gt; u\"hello world\".title()\nu'Hello World'\n</code></pre>\n\n<p>However, look out for strings with embedded apostrophes, as noted in the docs.</p>\n\n<blockquote>\n  <p>The algorithm uses a simple language-independent definition of a word as groups of consecutive letters. The definition works in many contexts but it means that apostrophes in contractions and possessives form word boundaries, which may not be the desired result:</p>\n\n<pre><code>&gt;&gt;&gt; \"they're bill's friends from the UK\".title()\n\"They'Re Bill'S Friends From The Uk\"\n</code></pre>\n</blockquote>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have some data either in list contains lists, or list contains tuples.</p>\n\n<pre><code>data = [[1,2,3], [4,5,6], [7,8,9]]\ndata = [(1,2,3), (4,5,6), (7,8,9)]\n</code></pre>\n\n<p>And I want to sort by the 2nd element in the subset. Meaning, sorting by 2,5,8 where 2 is from (1,2,3), 5 is from (4,5,6). What is the common way to do this? Should I store tuples or lists in my list? Since tuples are more inflexible.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>sorted_by_second = sorted(data, key=lambda tup: tup[1])\n</code></pre>\n\n<p>or:</p>\n\n<pre><code>data.sort(key=lambda tup: tup[1])  # sorts in place\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Which are the best Python modules to convert PDF files into text? </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Try PDFMiner.  It can extract text from PDF files as HTML, SGML or \"Tagged PDF\" format.</p>\n\n<p><a href=\"http://www.unixuser.org/~euske/python/pdfminer/index.html\" rel=\"nofollow noreferrer\">http://www.unixuser.org/~euske/python/pdfminer/index.html</a></p>\n\n<p>The Tagged PDF format seems to be the cleanest, and stripping out the XML tags leaves just the bare text.</p>\n\n<p>A Python 3 version is available under:</p>\n\n<ul>\n<li><a href=\"https://github.com/pdfminer/pdfminer.six\" rel=\"nofollow noreferrer\">https://github.com/pdfminer/pdfminer.six</a></li>\n</ul>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm writing a Python application that takes as a command as an argument, for example:</p>\n\n<pre><code>$ python myapp.py command1\n</code></pre>\n\n<p>I want the application to be extensible, that is, to be able to add new modules that implement new commands without having to change the main application source. The tree looks something like:</p>\n\n<pre><code>myapp/\n    __init__.py\n    commands/\n        __init__.py\n        command1.py\n        command2.py\n    foo.py\n    bar.py\n</code></pre>\n\n<p>So I want the application to find the available command modules at runtime and execute the appropriate one.</p>\n\n<p>Currently this is implemented something like:</p>\n\n<pre><code>command = sys.argv[1]\ntry:\n    command_module = __import__(\"myapp.commands.%s\" % command, fromlist=[\"myapp.commands\"])\nexcept ImportError:\n    # Display error message\n\ncommand_module.run()\n</code></pre>\n\n<p>This works just fine, I'm just wondering if there is possibly a more idiomatic way to accomplish what we are doing with this code.</p>\n\n<p>Note that I specifically don't want to get in to using eggs or extension points. This is not an open-source project and I don't expect there to be \"plugins\". The point is to simplify the main application code and remove the need to modify it each time a new command module is added.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>With Python older than 2.7/3.1, that's pretty much how you do it. For newer versions, see <code>importlib.import_module</code> <a href=\"https://docs.python.org/2/library/importlib.html#importlib.import_module\" rel=\"noreferrer\">for 2.7+</a> and <a href=\"https://docs.python.org/3.1/library/importlib.html#importlib.import_module\" rel=\"noreferrer\">for 3.1+</a>.</p>\n\n<p>You can use <code>exec</code> if you want to as well.</p>\n\n<p>Note you can import a list of modules by doing this:</p>\n\n<pre><code>&gt;&gt;&gt; moduleNames = ['sys', 'os', 're', 'unittest'] \n&gt;&gt;&gt; moduleNames\n['sys', 'os', 're', 'unittest']\n&gt;&gt;&gt; modules = map(__import__, moduleNames)\n</code></pre>\n\n<p>Ripped straight from <a href=\"http://www.diveintopython.net/functional_programming/dynamic_import.html\" rel=\"noreferrer\">Dive Into Python</a>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I want to import a function from another file in the same directory.</p>\n\n<p>Sometimes it works for me with <code>from .mymodule import myfunction</code> but sometimes I get a:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>SystemError: Parent module '' not loaded, cannot perform relative import\n</code></pre>\n\n<p>Sometimes it works with <code>from mymodule import myfunction</code>, but sometimes I also get a:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>SystemError: Parent module '' not loaded, cannot perform relative import\n</code></pre>\n\n<p>I don't understand the logic here, and I couldn't find any explanation. This looks completely random.</p>\n\n<p>Could someone explain to me what's the logic behind all this?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<blockquote>\n  <p>unfortunately, this module needs to be inside the package, and it also\n  needs to be runnable as a script, sometimes. Any idea how I could\n  achieve that?</p>\n</blockquote>\n\n<p>It's quite common to have a layout like this...</p>\n\n<pre><code>main.py\nmypackage/\n    __init__.py\n    mymodule.py\n    myothermodule.py\n</code></pre>\n\n<p>...with a <code>mymodule.py</code> like this...</p>\n\n<pre><code>#!/usr/bin/env python3\n\n# Exported function\ndef as_int(a):\n    return int(a)\n\n# Test function for module  \ndef _test():\n    assert as_int('1') == 1\n\nif __name__ == '__main__':\n    _test()\n</code></pre>\n\n<p>...a <code>myothermodule.py</code> like this...</p>\n\n<pre><code>#!/usr/bin/env python3\n\nfrom .mymodule import as_int\n\n# Exported function\ndef add(a, b):\n    return as_int(a) + as_int(b)\n\n# Test function for module  \ndef _test():\n    assert add('1', '1') == 2\n\nif __name__ == '__main__':\n    _test()\n</code></pre>\n\n<p>...and a <code>main.py</code> like this...</p>\n\n<pre><code>#!/usr/bin/env python3\n\nfrom mypackage.myothermodule import add\n\ndef main():\n    print(add('1', '1'))\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n\n<p>...which works fine when you run <code>main.py</code> or <code>mypackage/mymodule.py</code>, but fails with <code>mypackage/myothermodule.py</code>, due to the relative import...</p>\n\n<pre><code>from .mymodule import as_int\n</code></pre>\n\n<p>The way you're supposed to run it is...</p>\n\n<pre><code>python3 -m mypackage.myothermodule\n</code></pre>\n\n<p>...but it's somewhat verbose, and doesn't mix well with a shebang line like <code>#!/usr/bin/env python3</code>.</p>\n\n<p>The simplest fix for this case, assuming the name <code>mymodule</code> is globally unique, would be to avoid using relative imports, and just use...</p>\n\n<pre><code>from mymodule import as_int\n</code></pre>\n\n<p>...although, if it's not unique, or your package structure is more complex, you'll need to include the directory containing your package directory in <code>PYTHONPATH</code>, and do it like this...</p>\n\n<pre><code>from mypackage.mymodule import as_int\n</code></pre>\n\n<p>...or if you want it to work \"out of the box\", you can frob the <code>PYTHONPATH</code> in code first with this...</p>\n\n<pre><code>import sys\nimport os\n\nPACKAGE_PARENT = '..'\nSCRIPT_DIR = os.path.dirname(os.path.realpath(os.path.join(os.getcwd(), os.path.expanduser(__file__))))\nsys.path.append(os.path.normpath(os.path.join(SCRIPT_DIR, PACKAGE_PARENT)))\n\nfrom mypackage.mymodule import as_int\n</code></pre>\n\n<p>It's kind of a pain, but there's a clue as to why in <a href=\"http://mail.python.org/pipermail/python-3000/2007-April/006793.html\" rel=\"noreferrer\">an email</a> written by a certain Guido van Rossum...</p>\n\n<blockquote>\n  <p>I'm -1 on this and on any other proposed twiddlings of the <code>__main__</code>\n  machinery. The only use case seems to be running scripts that happen\n  to be living inside a module's directory, which I've always seen as an\n  antipattern. To make me change my mind you'd have to convince me that\n  it isn't.</p>\n</blockquote>\n\n<p>Whether running scripts inside a package is an antipattern or not is subjective, but personally I find it really useful in a package I have which contains some custom wxPython widgets, so I can run the script for any of the source files to display a <code>wx.Frame</code> containing only that widget for testing purposes.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<ol>\n<li><p>Is there a performance or code maintenance issue with using <code>assert</code> as part of the standard code instead of using it just for debugging purposes?</p>\n\n<p>Is</p>\n\n<pre><code>assert x &gt;= 0, 'x is less than zero'\n</code></pre>\n\n<p>better or worse than </p>\n\n<pre><code>if x &lt; 0:\n    raise Exception, 'x is less than zero'\n</code></pre></li>\n<li><p>Also, is there any way to set a business rule like <code>if x &lt; 0 raise error</code> that is always checked without the <code>try/except/finally</code> so, if at anytime throughout the code <code>x</code> is less than 0 an error is raised, like if you set <code>assert x &lt; 0</code> at the start of a function, anywhere within the function where <code>x</code> becomes less then 0 an exception is raised?</p></li>\n</ol>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>To be able to automatically throw an error when x become less than zero throughout the function. You can use <a href=\"http://docs.python.org/reference/datamodel.html#implementing-descriptors\" rel=\"noreferrer\">class descriptors</a>. Here is an example:</p>\n\n<pre><code>class LessThanZeroException(Exception):\n    pass\n\nclass variable(object):\n    def __init__(self, value=0):\n        self.__x = value\n\n    def __set__(self, obj, value):\n        if value &lt; 0:\n            raise LessThanZeroException('x is less than zero')\n\n        self.__x  = value\n\n    def __get__(self, obj, objType):\n        return self.__x\n\nclass MyClass(object):\n    x = variable()\n\n&gt;&gt;&gt; m = MyClass()\n&gt;&gt;&gt; m.x = 10\n&gt;&gt;&gt; m.x -= 20\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"my.py\", line 7, in __set__\n    raise LessThanZeroException('x is less than zero')\nLessThanZeroException: x is less than zero\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How do I get my Python program to sleep for 50 milliseconds?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>from time import sleep\nsleep(0.05)\n</code></pre>\n\n<p><a href=\"http://docs.python.org/library/time.html\" rel=\"noreferrer\">Reference</a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have the following <code>DataFrame</code> (<code>df</code>):</p>\n\n<pre><code>import numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame(np.random.rand(10, 5))\n</code></pre>\n\n<p>I add more column(s) by assignment:</p>\n\n<pre><code>df['mean'] = df.mean(1)\n</code></pre>\n\n<p>How can I move the column <code>mean</code> to the front, i.e. set it as first column leaving the order of the other columns untouched?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>One easy way would be to reassign the dataframe with a list of the columns, rearranged as needed. </p>\n\n<p>This is what you have now: </p>\n\n<pre><code>In [6]: df\nOut[6]:\n          0         1         2         3         4      mean\n0  0.445598  0.173835  0.343415  0.682252  0.582616  0.445543\n1  0.881592  0.696942  0.702232  0.696724  0.373551  0.670208\n2  0.662527  0.955193  0.131016  0.609548  0.804694  0.632596\n3  0.260919  0.783467  0.593433  0.033426  0.512019  0.436653\n4  0.131842  0.799367  0.182828  0.683330  0.019485  0.363371\n5  0.498784  0.873495  0.383811  0.699289  0.480447  0.587165\n6  0.388771  0.395757  0.745237  0.628406  0.784473  0.588529\n7  0.147986  0.459451  0.310961  0.706435  0.100914  0.345149\n8  0.394947  0.863494  0.585030  0.565944  0.356561  0.553195\n9  0.689260  0.865243  0.136481  0.386582  0.730399  0.561593\n\nIn [7]: cols = df.columns.tolist()\n\nIn [8]: cols\nOut[8]: [0L, 1L, 2L, 3L, 4L, 'mean']\n</code></pre>\n\n<p>Rearrange <code>cols</code> in any way you want. This is how I moved the last element to the first position: </p>\n\n<pre><code>In [12]: cols = cols[-1:] + cols[:-1]\n\nIn [13]: cols\nOut[13]: ['mean', 0L, 1L, 2L, 3L, 4L]\n</code></pre>\n\n<p>Then reorder the dataframe like this: </p>\n\n<pre><code>In [16]: df = df[cols]  #    OR    df = df.ix[:, cols]\n\nIn [17]: df\nOut[17]:\n       mean         0         1         2         3         4\n0  0.445543  0.445598  0.173835  0.343415  0.682252  0.582616\n1  0.670208  0.881592  0.696942  0.702232  0.696724  0.373551\n2  0.632596  0.662527  0.955193  0.131016  0.609548  0.804694\n3  0.436653  0.260919  0.783467  0.593433  0.033426  0.512019\n4  0.363371  0.131842  0.799367  0.182828  0.683330  0.019485\n5  0.587165  0.498784  0.873495  0.383811  0.699289  0.480447\n6  0.588529  0.388771  0.395757  0.745237  0.628406  0.784473\n7  0.345149  0.147986  0.459451  0.310961  0.706435  0.100914\n8  0.553195  0.394947  0.863494  0.585030  0.565944  0.356561\n9  0.561593  0.689260  0.865243  0.136481  0.386582  0.730399\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm deploying a Django app to a dev server and am hitting this error when i run pip install requirements.txt:</p>\n\n<pre><code>Traceback (most recent call last):\n  File \"/var/www/mydir/virtualenvs/dev/bin/pip\", line 5, in &lt;module&gt;\n    from pkg_resources import load_entry_point\nImportError: No module named pkg_resources\n</code></pre>\n\n<p>pkg_resources appears to be distributed with setuptools.  Initially I thought this might not be installed to the python in the virtualenv so I installed setuptools (2.6, same version as Python) to the Python site-packages in the virtualenv with the following command</p>\n\n<pre><code>sh setuptools-0.6c11-py2.6.egg --install-dir /var/www/mydir/virtualenvs/dev/lib/python2.6/site-packages\n</code></pre>\n\n<p>EDIT\nThis only happens inside the virtualenv.  If I open a console outside the virtualenv then pkg_resources is present</p>\n\n<p>but I am still getting the same error.  Any ideas as to why pkg_resources is not on the path?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I encountered the same <code>ImportError</code> today while trying to use pip. Somehow the <code>setuptools</code> package had been deleted in my Python environment.</p>\n\n<p>To fix the issue, run the setup script for <code>setuptools</code>:</p>\n\n<pre><code>wget https://bootstrap.pypa.io/ez_setup.py -O - | python\n</code></pre>\n\n<p>(or if you don't have <code>wget</code> installed (e.g. OS X), try</p>\n\n<pre><code>curl https://bootstrap.pypa.io/ez_setup.py | python\n</code></pre>\n\n<p>possibly with <code>sudo</code> prepended.)</p>\n\n<p>If you have any version of <a href=\"http://pythonhosted.org/setuptools/merge-faq.html\"><code>distribute</code></a>, or any <code>setuptools</code> below 0.6, you will have to uninstall it first.*</p>\n\n<p>See <a href=\"https://pypi.python.org/pypi/setuptools/0.9.8#installation-instructions\">Installation Instructions</a> for further details.</p>\n\n<hr>\n\n<p>* If you already have a working <code>distribute</code>, upgrading it to the \"compatibility wrapper\" that switches you over to <code>setuptools</code> is easier. But if things are already broken, don't try that.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<blockquote>\n  <h1><strong>Possible Duplicate:</strong></h1>\n  \n  <p><a href=\"https://stackoverflow.com/questions/2906092/how-to-convert-list-into-a-string\">How to convert list into a string?</a>  </p>\n</blockquote>\n\n\n\n<p>How can I convert a list to a string using Python?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>By using <code>''.join</code></p>\n\n<pre><code>list1 = ['1', '2', '3']\nstr1 = ''.join(list1)\n</code></pre>\n\n<p>Or if the list is of integers, convert the elements before joining them.</p>\n\n<pre><code>list1 = [1, 2, 3]\nstr1 = ''.join(str(e) for e in list1)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Does <code>time.time()</code> in the Python time module return the system's time or the time in UTC?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The <a href=\"https://docs.python.org/2/library/time.html#time.time\" rel=\"noreferrer\"><code>time.time()</code></a> function returns the number of seconds since the epoch as seconds in UTC.</p>\n\n<p>Here is some sample output I ran on my computer, converting it to a string as well.</p>\n\n<pre><code>Python 2.7.3 (default, Apr 24 2012, 00:00:54) \n[GCC 4.7.0 20120414 (prerelease)] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import time\n&gt;&gt;&gt; ts = time.time()\n&gt;&gt;&gt; print ts\n1355563265.81\n&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')\n&gt;&gt;&gt; print st\n2012-12-15 01:21:05\n&gt;&gt;&gt;\n</code></pre>\n\n<p>The <code>ts</code> variable is the time returned in seconds.  I then converted it to a string using the <code>datetime</code> library making it a string that is human readable. </p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Sometimes I come across code such as this:</p>\n\n<pre><code>import matplotlib.pyplot as plt\nx = [1, 2, 3, 4, 5]\ny = [1, 4, 9, 16, 25]\nfig = plt.figure()\nfig.add_subplot(111)\nplt.scatter(x, y)\nplt.show()\n</code></pre>\n\n<p>Which produces:</p>\n\n<p><img src=\"https://i.stack.imgur.com/yCOG3.png\" alt=\"Example plot produced by the included code\"></p>\n\n<p>I've been reading the documentation like crazy but I can't find an explanation for the <code>111</code>. sometimes I see a <code>212</code>.</p>\n\n<p>What does the argument of <code>fig.add_subplot()</code> mean?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>These are subplot grid parameters encoded as a single integer. For example, \"111\" means \"1x1 grid, first subplot\" and \"234\" means \"2x3 grid, 4th subplot\".</p>\n\n<p>Alternative form for <code>add_subplot(111)</code> is <code>add_subplot(1, 1, 1)</code>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What is the best way (or even the various ways) to pretty print xml in Python?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>import xml.dom.minidom\n\nxml = xml.dom.minidom.parse(xml_fname) # or xml.dom.minidom.parseString(xml_string)\npretty_xml_as_string = xml.toprettyxml()\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am learning the ropes in Python. When I try to print an object of class <strong><code>Foobar</code></strong> using the <strong><code>print()</code></strong> function, I get an output like this:</p>\n\n<pre><code>&lt;__main__.Foobar instance at 0x7ff2a18c&gt;\n</code></pre>\n\n<p>Is there a way I can set the <em>printing behaviour</em> (or the <em>string representation</em>) of a <em>class</em> and its <em>objects</em>? For instance, when I call <code>print()</code> on a class object, I would like to print its data members in a certain format. How to achieve this in Python?</p>\n\n<p>If you are familiar with C++ classes, the above can be achieved for the standard <strong><code>ostream</code></strong> by adding a <strong><code>friend ostream&amp; operator &lt;&lt; (ostream&amp;, const Foobar&amp;)</code></strong> method for the class.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>&gt;&gt;&gt; class Test:\n...     def __repr__(self):\n...         return \"Test()\"\n...     def __str__(self):\n...         return \"member of Test\"\n... \n&gt;&gt;&gt; t = Test()\n&gt;&gt;&gt; t\nTest()\n&gt;&gt;&gt; print t\nmember of Test\n</code></pre>\n\n<p>The <code>__str__</code> method is what happens when you print it, and the <code>__repr__</code> method is what happens when you use the <code>repr()</code> function (or when you look at it with the interactive prompt). If this isn't the most <em>Pythonic</em> method, I apologize, because I'm still learning too - but it works.</p>\n\n<p>If no <code>__str__</code> method is given, Python will print the result of <code>__repr__</code> instead. If you define <code>__str__</code> but not <code>__repr__</code>, Python will use what you see above as the <code>__repr__</code>, but still use <code>__str__</code> for printing.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/437589/how-do-i-unload-reload-a-python-module\" dir=\"ltr\">How do I unload (reload) a Python module?</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    12 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>I often test my module in the Python Interpreter, and when I see an error, I quickly update the .py file. But how do I make it reflect on the Interpreter ? So, far I have been exiting and reentering the Interpreter because re importing the file again is not working for me.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>\"Reload is no longer a function in Python 3. Use imp.reload() instead\" copied from comments</p>\n\n<p>Use the <code>reload</code> builtin function:</p>\n\n<p><a href=\"https://docs.python.org/2/library/functions.html#reload\" rel=\"noreferrer\">https://docs.python.org/2/library/functions.html#reload</a></p>\n\n<blockquote>\n  <p>When <code>reload(module)</code> is executed:</p>\n  \n  <ul>\n  <li>Python modules\u2019 code is recompiled and the module-level code reexecuted, defining a new set of objects which are bound to names in the module\u2019s dictionary. The init function of extension modules is not called a second time.</li>\n  <li>As with all other objects in Python the old objects are only reclaimed after their reference counts drop to zero.</li>\n  <li>The names in the module namespace are updated to point to any new or changed objects.</li>\n  <li>Other references to the old objects (such as names external to the module) are not rebound to refer to the new objects and must be updated in each namespace where they occur if that is desired.</li>\n  </ul>\n</blockquote>\n\n<p>Example:</p>\n\n<pre><code># Make a simple function that prints \"version 1\"\nshell1$ echo 'def x(): print \"version 1\"' &gt; mymodule.py\n\n# Run the module\nshell2$ python\n&gt;&gt;&gt; import mymodule\n&gt;&gt;&gt; mymodule.x()\nversion 1\n\n# Change mymodule to print \"version 2\" (without exiting the python REPL)\nshell2$ echo 'def x(): print \"version 2\"' &gt; mymodule.py\n\n# Back in that same python session\n&gt;&gt;&gt; reload(mymodule)\n&lt;module 'mymodule' from 'mymodule.pyc'&gt;\n&gt;&gt;&gt; mymodule.x()\nversion 2\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How do I have a Python script that can accept user input (assuming this is possible) and how do I make it read in arguments if run from the command line?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>To read user input you can try <a href=\"http://docs.python.org/2/library/cmd.html\" rel=\"noreferrer\">the cmd module</a> for easily creating a mini-command line interpreter (with help texts and autocompletion) and <a href=\"http://docs.python.org/2/library/functions.html#raw_input\" rel=\"noreferrer\">raw_input</a> for less fancy stuff (just reading a line of text from the user).</p>\n\n<p>Command line inputs are in sys.argv. Try this in your script:</p>\n\n<pre><code>import sys\nprint (sys.argv)\n</code></pre>\n\n<p>There are two modules for parsing command line options: <a href=\"http://docs.python.org/2/library/optparse.html\" rel=\"noreferrer\">optparse</a> and <a href=\"http://docs.python.org/2/library/getopt.html\" rel=\"noreferrer\">getopt</a>. If you just want to input files to your script, behold the power of <a href=\"http://docs.python.org/2/library/fileinput.html\" rel=\"noreferrer\">fileinput</a>.</p>\n\n<p>The <a href=\"http://docs.python.org/2/library/\" rel=\"noreferrer\">Python library reference is your friend</a>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Yes, I know this subject has been covered before (<a href=\"https://stackoverflow.com/questions/120886\">here</a>, <a href=\"https://stackoverflow.com/questions/406121\">here</a>, <a href=\"https://stackoverflow.com/questions/457215\">here</a>, <a href=\"https://stackoverflow.com/questions/952914\">here</a>), but as far as I know, all solutions, except for one, fail on a list like this:</p>\n\n<pre><code>L = [[[1, 2, 3], [4, 5]], 6]\n</code></pre>\n\n<p>Where the desired output is</p>\n\n<pre><code>[1, 2, 3, 4, 5, 6]\n</code></pre>\n\n<p>Or perhaps even better, an iterator. The only solution I saw that works for an arbitrary nesting is found <a href=\"https://stackoverflow.com/questions/406121\">in this question</a>:</p>\n\n<pre><code>def flatten(x):\n    result = []\n    for el in x:\n        if hasattr(el, \"__iter__\") and not isinstance(el, basestring):\n            result.extend(flatten(el))\n        else:\n            result.append(el)\n    return result\n\nflatten(L)\n</code></pre>\n\n<p>Is this the best model? Did I overlook something? Any problems?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Using generator functions can make your example a little easier to read and probably boost the performance.</p>\n\n<h2>Python 2</h2>\n\n<pre><code>def flatten(l):\n    for el in l:\n        if isinstance(el, collections.Iterable) and not isinstance(el, basestring):\n            for sub in flatten(el):\n                yield sub\n        else:\n            yield el\n</code></pre>\n\n<p>I used the <a href=\"http://docs.python.org/library/collections.html#abcs-abstract-base-classes\" rel=\"noreferrer\">Iterable ABC</a> added in 2.6.</p>\n\n<h2>Python 3</h2>\n\n<p>In Python 3, the <code>basestring</code> is no more, but you can use a tuple of <code>str</code> and <code>bytes</code> to get the same effect there.</p>\n\n<p>The <code>yield from</code> operator returns an item from a generator one at a time. This <a href=\"https://docs.python.org/3/whatsnew/3.3.html#pep-380\" rel=\"noreferrer\">syntax for delegating to a subgenerator</a> was added in 3.3</p>\n\n<pre><code>def flatten(l):\n    for el in l:\n        if isinstance(el, collections.Iterable) and not isinstance(el, (str, bytes)):\n            yield from flatten(el)\n        else:\n            yield el\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm using Python to open a text document:</p>\n\n<pre><code>text_file = open(\"Output.txt\", \"w\")\n\ntext_file.write(\"Purchase Amount: \" 'TotalAmount')\n\ntext_file.close()\n</code></pre>\n\n<p>I want to enter the string called \"TotalAmount\" into the text document. Can someone please let me know how to do this?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>text_file = open(\"Output.txt\", \"w\")\ntext_file.write(\"Purchase Amount: %s\" % TotalAmount)\ntext_file.close()\n</code></pre>\n\n<p>If you use a context manager, the file is closed automatically for you</p>\n\n<pre><code>with open(\"Output.txt\", \"w\") as text_file:\n    text_file.write(\"Purchase Amount: %s\" % TotalAmount)\n</code></pre>\n\n<p>If you're using Python2.6 or higher, it's preferred to use <code>str.format()</code></p>\n\n<pre><code>with open(\"Output.txt\", \"w\") as text_file:\n    text_file.write(\"Purchase Amount: {0}\".format(TotalAmount))\n</code></pre>\n\n<p>For python2.7 and higher you can use <code>{}</code> instead of <code>{0}</code></p>\n\n<p>In Python3, there is an optional <code>file</code> parameter to the <code>print</code> function</p>\n\n<pre><code>with open(\"Output.txt\", \"w\") as text_file:\n    print(\"Purchase Amount: {}\".format(TotalAmount), file=text_file)\n</code></pre>\n\n<p>Python3.6 introduced <a href=\"https://docs.python.org/3/whatsnew/3.6.html#pep-498-formatted-string-literals\" rel=\"noreferrer\">f-strings</a> for another alternative</p>\n\n<pre><code>with open(\"Output.txt\", \"w\") as text_file:\n    print(f\"Purchase Amount: {TotalAmount}\", file=text_file)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm trying to convert a server side Ajax response script into a Django HttpResponse, but apparently it's not working.</p>\n\n<p>This is the server-side script:</p>\n\n<pre><code>/* RECEIVE VALUE */\n$validateValue=$_POST['validateValue'];\n$validateId=$_POST['validateId'];\n$validateError=$_POST['validateError'];\n\n/* RETURN VALUE */\n$arrayToJs = array();\n$arrayToJs[0] = $validateId;\n$arrayToJs[1] = $validateError;\n\nif($validateValue ==\"Testuser\"){  // Validate??\n    $arrayToJs[2] = \"true\";       // RETURN TRUE\n    echo '{\"jsonValidateReturn\":'.json_encode($arrayToJs).'}';  // RETURN ARRAY WITH success\n}\nelse{\n    for($x=0;$x&lt;1000000;$x++){\n        if($x == 990000){\n            $arrayToJs[2] = \"false\";\n            echo '{\"jsonValidateReturn\":'.json_encode($arrayToJs).'}';   // RETURNS ARRAY WITH ERROR.\n        }\n    }\n}\n</code></pre>\n\n<p>And this is the converted code</p>\n\n<pre><code>def validate_user(request):\n    if request.method == 'POST':\n        vld_value = request.POST.get('validateValue')\n        vld_id = request.POST.get('validateId')\n        vld_error = request.POST.get('validateError')\n\n        array_to_js = [vld_id, vld_error, False]\n\n        if vld_value == \"TestUser\":\n            array_to_js[2] = True\n            x = simplejson.dumps(array_to_js)\n            return HttpResponse(x)\n        else:\n            array_to_js[2] = False\n            x = simplejson.dumps(array_to_js)\n            error = 'Error'\n            return render_to_response('index.html',{'error':error},context_instance=RequestContext(request))\n    return render_to_response('index.html',context_instance=RequestContext(request))\n</code></pre>\n\n<p>I'm using simplejson to encode the Python list (so it will return a JSON array). I couldn't figure out the problem yet. But I think that I did something wrong about the 'echo'.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I usually use a dictionary, not a list to return JSON content. </p>\n\n<pre><code>import json\n\nfrom django.http import HttpResponse\n\nresponse_data = {}\nresponse_data['result'] = 'error'\nresponse_data['message'] = 'Some error message'\n</code></pre>\n\n<p>Pre-Django 1.7 you'd return it like this:</p>\n\n<pre><code>return HttpResponse(json.dumps(response_data), content_type=\"application/json\")\n</code></pre>\n\n<p>For Django 1.7+, use <a href=\"https://docs.djangoproject.com/en/dev/ref/request-response/#jsonresponse-objects\" rel=\"noreferrer\"><code>JsonResponse</code></a> as shown in <a href=\"https://stackoverflow.com/a/24411716/7376\">this SO answer</a> like so : </p>\n\n<pre><code>from django.http import JsonResponse\nreturn JsonResponse({'foo':'bar'})\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have data in different columns but I don't know how to extract it to save it in another variable.</p>\n\n<pre><code>index  a   b   c\n1      2   3   4\n2      3   4   5\n</code></pre>\n\n<p>How do I select <code>'b'</code>, <code>'c'</code> and save it in to df1?</p>\n\n<p>I tried </p>\n\n<pre><code>df1 = df['a':'b']\ndf1 = df.ix[:, 'a':'b']\n</code></pre>\n\n<p>None seem to work. Any ideas would help thanks.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The column names (which are strings) cannot be sliced in the manner you tried.</p>\n\n<p>Here you have a couple of options. If you know from context which variables you want to slice out, you can just return a view of only those columns by passing a list into the <code>__getitem__</code> syntax (the []'s).</p>\n\n<pre><code>df1 = df[['a','b']]\n</code></pre>\n\n<p>Alternatively, if it matters to index them numerically and not by their name (say your code should automatically do this without knowing the names of the first two columns) then you can do this instead:</p>\n\n<pre><code>df1 = df.ix[:,0:2] # Remember that Python does not slice inclusive of the ending index.\n</code></pre>\n\n<p>Additionally, you should familiarize yourself with the idea of a view into a Pandas object vs. a copy of that object. The first of the above methods will return a new copy in memory of the desired sub-object (the desired slices). </p>\n\n<p>Sometimes, however, there are indexing conventions in Pandas that don't do this and instead give you a new variable that just refers to the same chunk of memory as the sub-object or slice in the original object. This will happen with the second way of indexing, so you can modify it with the <code>copy()</code> function to get a regular copy. When this happens, changing what you think is the sliced object can sometimes alter the original object. Always good to be on the look out for this.</p>\n\n<pre><code>df1 = df.ix[0,0:2].copy() # To avoid the case where changing df1 also changes df\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a Python script which takes as input a list of integers, which I need to work with four integers at a time.  Unfortunately, I don't have control of the input, or I'd have it passed in as a list of four-element tuples.  Currently, I'm iterating over it this way:</p>\n\n<pre><code>for i in xrange(0, len(ints), 4):\n    # dummy op for example code\n    foo += ints[i] * ints[i + 1] + ints[i + 2] * ints[i + 3]\n</code></pre>\n\n<p>It looks a lot like \"C-think\", though, which makes me suspect there's a more pythonic way of dealing with this situation.  The list is discarded after iterating, so it needn't be preserved.  Perhaps something like this would be better?</p>\n\n<pre><code>while ints:\n    foo += ints[0] * ints[1] + ints[2] * ints[3]\n    ints[0:4] = []\n</code></pre>\n\n<p>Still doesn't quite \"feel\" right, though.  :-/</p>\n\n<p>Related question: <a href=\"https://stackoverflow.com/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks-in-python\">How do you split a list into evenly sized chunks in Python?</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Modified from the <a href=\"https://docs.python.org/3/library/itertools.html#itertools-recipes\" rel=\"noreferrer\">recipes</a> section of Python's <a href=\"http://docs.python.org/library/itertools.html\" rel=\"noreferrer\">itertools</a> docs:</p>\n\n<pre><code>from itertools import izip_longest\n\ndef grouper(iterable, n, fillvalue=None):\n    args = [iter(iterable)] * n\n    return izip_longest(*args, fillvalue=fillvalue)\n</code></pre>\n\n<p><strong>Example</strong><br>\nIn pseudocode to keep the example terse.</p>\n\n<pre><code>grouper('ABCDEFG', 3, 'x') --&gt; 'ABC' 'DEF' 'Gxx'\n</code></pre>\n\n<p><strong>Note:</strong> <code>izip_longest</code> is new to Python 2.6. In Python 3 use <code>zip_longest</code>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<pre><code>import sys\nprint (sys.platform)\nprint (2 ** 100)\nraw_input( )\n</code></pre>\n\n<p>I am using Python 3.1 and can't get the raw_input to \"freeze\" the dos pop-up. The book I'm reading is for 2.5 and I'm using 3.1</p>\n\n<p>What should I do to fix this?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>raw_input()</code> was renamed to <code>input()</code></p>\n\n<p>From <a href=\"http://docs.python.org/dev/py3k/whatsnew/3.0.html\" rel=\"noreferrer\">http://docs.python.org/dev/py3k/whatsnew/3.0.html</a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm trying to convert a list to a tuple. </p>\n\n<p>When I google it, I find a lot of answers similar to:</p>\n\n<pre><code>l = [4,5,6]\ntuple(l)\n</code></pre>\n\n<p>But if I do that I get this error message:</p>\n\n<blockquote>\n  <p>TypeError: 'tuple' object is not callable</p>\n</blockquote>\n\n<p>How can I fix this problem?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It should work fine. Don't use <code>tuple</code>, <code>list</code> or other special names as a variable name. It's probably what's causing your problem.</p>\n\n<pre><code>&gt;&gt;&gt; l = [4,5,6]\n&gt;&gt;&gt; tuple(l)\n(4, 5, 6)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Inspired by the question series 'Hidden features of ...', I am curious to hear about your favorite Django tips or lesser known but useful features you know of.</p>\n\n<ul>\n<li>Please, include only one tip per answer.</li>\n<li>Add Django version requirements if there are any.</li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I'm just going to start with a tip from myself :)</p>\n\n<p><strong>Use os.path.dirname() in settings.py to avoid hardcoded dirnames.</strong></p>\n\n<p>Don't hardcode path's in your settings.py if you want to run your project in different locations. Use the following code in settings.py if your templates and static files are located within the Django project directory:</p>\n\n<pre><code># settings.py\nimport os\nPROJECT_DIR = os.path.dirname(__file__)\n...\nSTATIC_DOC_ROOT = os.path.join(PROJECT_DIR, \"static\")\n...\nTEMPLATE_DIRS = (\n    os.path.join(PROJECT_DIR, \"templates\"),\n)\n</code></pre>\n\n<p>Credits: I got this tip from the screencast '<a href=\"http://thisweekindjango.com/screencasts/episode/10/django-ground-episodes-1-and-2/\" rel=\"nofollow noreferrer\">Django From the Ground Up</a>'.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What <strong>exactly</strong> are the Python scoping rules?</p>\n\n<p>If I have some code:</p>\n\n<pre><code>code1\nclass Foo:\n   code2\n   def spam.....\n      code3\n      for code4..:\n       code5\n       x()\n</code></pre>\n\n<p>Where is <em>x</em> found?  Some possible choices include the list above:</p>\n\n<ol>\n<li>In the enclosing source file</li>\n<li>In the class namespace</li>\n<li>In the function definition</li>\n<li>In the for loop index variable</li>\n<li>Inside the for loop</li>\n</ol>\n\n<p>Also there is the context during execution, when the function spam is passed somewhere else.  And maybe lambda functions pass a bit differently?</p>\n\n<p>There must be a simple reference or algorithm somewhere.  It's a confusing world for intermediate Python programmers.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Actually, a concise rule for Python Scope resolution, from <a href=\"http://rads.stackoverflow.com/amzn/click/0596513984\" rel=\"noreferrer\">Learning Python, 3rd. Ed.</a>. (These rules are specific to variable names, not attributes. If you reference it without a period, these rules apply)</p>\n\n<p>LEGB Rule.</p>\n\n<p><strong>L</strong>, Local \u2014 Names assigned in any way within a function (<code>def</code> or <code>lambda</code>)), and not declared global in that function.</p>\n\n<p><strong>E</strong>, Enclosing-function locals \u2014 Name in the local scope of any and all statically enclosing functions (<code>def</code> or <code>lambda</code>), from inner to outer.</p>\n\n<p><strong>G</strong>, Global (module) \u2014 Names assigned at the top-level of a module file, or by executing a <code>global</code> statement in a <code>def</code> within the file.</p>\n\n<p><strong>B</strong>, Built-in (Python) \u2014 Names preassigned in the built-in names module : <code>open</code>,<code>range</code>,<code>SyntaxError</code>,...</p>\n\n<p>So, in the case of</p>\n\n<pre><code>code1\nclass Foo:\n   code2\n   def spam.....\n      code3\n      for code4..:\n       code5\n       x()\n</code></pre>\n\n<p>The for loop does not have its own namespace. In LEGB order, the scopes would be </p>\n\n<p>L : local, in <code>def spam</code> (in <code>code3</code>, <code>code 4</code>, <code>code5</code>).</p>\n\n<p>E : Enclosed function, any enclosing functions (if the whole example were in another <code>def</code>)</p>\n\n<p>G : Global. Were there any <code>x</code> declared globally in the module (<code>code1</code>)?</p>\n\n<p>B : Any builtin <code>x</code> in Python.</p>\n\n<p><code>x</code> will never be found in <code>code2</code> (even in cases where you might expect it would, see <a href=\"https://stackoverflow.com/a/23471004/2810305\">Antti's answer</a> or <a href=\"https://stackoverflow.com/q/13905741/2810305\">here</a>).</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm trying to get the number of rows of dataframe df with Pandas, and here is my code.</p>\n\n<h3>Method 1:</h3>\n\n<pre><code>total_rows = df.count\nprint total_rows +1\n</code></pre>\n\n<h3>Method 2:</h3>\n\n<pre><code>total_rows = df['First_columnn_label'].count\nprint total_rows +1\n</code></pre>\n\n<p>Both the code snippets give me this error:</p>\n\n<blockquote>\n  <p>TypeError: unsupported operand type(s) for +: 'instancemethod' and 'int'</p>\n</blockquote>\n\n<p>What am I doing wrong?</p>\n\n<p>According to <a href=\"https://stackoverflow.com/a/15943975/4230591\">the answer</a> given by <a href=\"https://stackoverflow.com/users/1199589/root\">@root</a> the best (the fastest) way to check df length is to call:</p>\n\n<pre><code>len(df.index)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use the <code>.shape</code> property or just <code>len(DataFrame.index)</code>. However, there are notable performance differences ( the <code>.shape</code> property is faster):</p>\n\n<pre><code>In [1]: import numpy as np\n\nIn [2]: import pandas as pd\n\nIn [3]: df = pd.DataFrame(np.arange(9).reshape(3,3))\n\nIn [4]: df\nOut[4]: \n   0  1  2\n0  0  1  2\n1  3  4  5\n2  6  7  8\n\nIn [5]: df.shape\nOut[5]: (3, 3)\n\nIn [6]: timeit df.shape\n1000000 loops, best of 3: 1.17 us per loop\n\nIn [7]: timeit df[0].count()\n10000 loops, best of 3: 56 us per loop\n\nIn [8]: len(df.index)\nOut[8]: 3\n\nIn [9]: timeit len(df.index)\n1000000 loops, best of 3: 381 ns per loop\n</code></pre>\n\n<hr>\n\n<p>EDIT: As @Dan Allen noted in the comments <code>len(df.index)</code> and <code>df[0].count()</code> are not interchangeable as <code>count</code> excludes <code>NaN</code>s,</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p><strong>What I need to do</strong></p>\n\n<p>I have a timezone-unaware datetime object, to which I need to add a time zone in order to be able to compare it with other timezone-aware datetime objects.  I do not want to convert my entire application to timezone unaware for this one legacy case.</p>\n\n<p><strong>What I've Tried</strong></p>\n\n<p>First, to demonstrate the problem:</p>\n\n<pre><code>Python 2.6.1 (r261:67515, Jun 24 2010, 21:47:49) \n[GCC 4.2.1 (Apple Inc. build 5646)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; import pytz\n&gt;&gt;&gt; unaware = datetime.datetime(2011,8,15,8,15,12,0)\n&gt;&gt;&gt; unaware\ndatetime.datetime(2011, 8, 15, 8, 15, 12)\n&gt;&gt;&gt; aware = datetime.datetime(2011,8,15,8,15,12,0,pytz.UTC)\n&gt;&gt;&gt; aware\ndatetime.datetime(2011, 8, 15, 8, 15, 12, tzinfo=&lt;UTC&gt;)\n&gt;&gt;&gt; aware == unaware\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: can't compare offset-naive and offset-aware datetimes\n</code></pre>\n\n<p>First, I tried astimezone:</p>\n\n<pre><code>&gt;&gt;&gt; unaware.astimezone(pytz.UTC)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nValueError: astimezone() cannot be applied to a naive datetime\n&gt;&gt;&gt;\n</code></pre>\n\n<p>It's not terribly surprising this failed, since it's actually trying to do a conversion.  Replace seemed like a better choice (as per <a href=\"https://stackoverflow.com/questions/4530069/python-how-to-get-a-value-of-datetime-today-that-is-timezone-aware\">Python: How to get a value of datetime.today() that is \"timezone aware\"?</a>):</p>\n\n<pre><code>&gt;&gt;&gt; unaware.replace(tzinfo=pytz.UTC)\ndatetime.datetime(2011, 8, 15, 8, 15, 12, tzinfo=&lt;UTC&gt;)\n&gt;&gt;&gt; unaware == aware\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: can't compare offset-naive and offset-aware datetimes\n&gt;&gt;&gt; \n</code></pre>\n\n<p>But as you can see, replace seems to set the tzinfo, but not make the object aware.  I'm getting ready to fall back to doctoring the input string to have a timezone before parsing it (I'm using dateutil for parsing, if that matters), but that seems incredibly kludgy.</p>\n\n<p>Also, I've tried this in both python 2.6 and python 2.7, with the same results.</p>\n\n<p><strong>Context</strong></p>\n\n<p>I am writing a parser for some data files.  There is an old format I need to support where the date string does not have a timezone indicator.  I've already fixed the data source, but I still need to support the legacy data format.  A one time conversion of the legacy data is not an option for various business BS reasons.  While in general, I do not like the idea of hard-coding a default timezone, in this case it seems like the best option.  I know with reasonable confidence that all the legacy data in question is in UTC, so I'm prepared to accept the risk of defaulting to that in this case.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In general, to make a naive datetime timezone-aware, use the <a href=\"http://pytz.sourceforge.net/#localized-times-and-date-arithmetic\" rel=\"noreferrer\">localize method</a>:</p>\n\n<pre><code>import datetime\nimport pytz\n\nunaware = datetime.datetime(2011, 8, 15, 8, 15, 12, 0)\naware = datetime.datetime(2011, 8, 15, 8, 15, 12, 0, pytz.UTC)\n\nnow_aware = pytz.utc.localize(unaware)\nassert aware == now_aware\n</code></pre>\n\n<p>For the UTC timezone, it is not really necessary to use <code>localize</code> since there is no daylight savings time calculation to handle:</p>\n\n<pre><code>now_aware = unaware.replace(tzinfo=pytz.UTC)\n</code></pre>\n\n<p>works. (<code>.replace</code> returns a new datetime; it does not modify <code>unaware</code>.)</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What is the best way of creating an alphabetically sorted list in Python?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Basic answer:</p>\n\n<pre><code>mylist = [\"b\", \"C\", \"A\"]\nmylist.sort()\n</code></pre>\n\n<p>This modifies your original list (i.e. sorts in-place). To get a sorted copy of the list, without changing the original, use the <a href=\"http://docs.python.org/library/functions.html#sorted\" rel=\"noreferrer\"><code>sorted()</code></a> function:</p>\n\n<pre><code>for x in sorted(mylist):\n    print x\n</code></pre>\n\n<p>However, the examples above are a bit naive, because they don't take locale into account, and perform a case-sensitive sorting. You can take advantage of the optional parameter <code>key</code> to specify custom sorting order (the alternative, using <code>cmp</code>, is a deprecated solution, as it has to be evaluated multiple times - <code>key</code> is only computed once per element).</p>\n\n<p>So, to sort according to the current locale, taking language-specific rules into account (<a href=\"http://docs.python.org/library/functools.html#functools.cmp_to_key\" rel=\"noreferrer\"><code>cmp_to_key</code></a> is a helper function from functools):</p>\n\n<pre><code>sorted(mylist, key=cmp_to_key(locale.strcoll))\n</code></pre>\n\n<p>And finally, if you need, you can specify a <a href=\"http://docs.python.org/library/locale.html\" rel=\"noreferrer\">custom locale</a> for sorting:</p>\n\n<pre><code>import locale\nlocale.setlocale(locale.LC_ALL, 'en_US.UTF-8') # vary depending on your lang/locale\nassert sorted((u'Ab', u'ad', u'aa'),\n  key=cmp_to_key(locale.strcoll)) == [u'aa', u'Ab', u'ad']\n</code></pre>\n\n<p>Last note: you will see examples of case-insensitive sorting which use the <code>lower()</code> method - those are incorrect, because they work only for the ASCII subset of characters. Those two are wrong for any non-English data:</p>\n\n<pre><code># this is incorrect!\nmylist.sort(key=lambda x: x.lower())\n# alternative notation, a bit faster, but still wrong\nmylist.sort(key=str.lower)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>This is the best algorithm I could come up.</p>\n\n<pre><code>def get_primes(n):\n    numbers = set(range(n, 1, -1))\n    primes = []\n    while numbers:\n        p = numbers.pop()\n        primes.append(p)\n        numbers.difference_update(set(range(p*2, n+1, p)))\n    return primes\n\n&gt;&gt;&gt; timeit.Timer(stmt='get_primes.get_primes(1000000)', setup='import   get_primes').timeit(1)\n1.1499958793645562\n</code></pre>\n\n<p>Can it be made even faster?</p>\n\n<p>This code has a flaw: Since <code>numbers</code> is an unordered set, there is no guarantee that <code>numbers.pop()</code> will remove the lowest number from the set. Nevertheless, it works (at least for me) for some input numbers:</p>\n\n<pre><code>&gt;&gt;&gt; sum(get_primes(2000000))\n142913828922L\n#That's the correct sum of all numbers below 2 million\n&gt;&gt;&gt; 529 in get_primes(1000)\nFalse\n&gt;&gt;&gt; 529 in get_primes(530)\nTrue\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>Warning:</strong> <code>timeit</code> results may vary due to differences in hardware or\nversion of Python.  </p>\n\n<p>Below is a script which compares a number of implementations: \n</p><ul>\n<li>ambi_sieve_plain,\n</li><li><a href=\"https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\">rwh_primes</a>, \n</li><li><a href=\"https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\">rwh_primes1</a>, \n</li><li><a href=\"https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\">rwh_primes2</a>, \n</li><li><a href=\"https://web.archive.org/web/20080324064651/http://krenzel.info/?p=83\" rel=\"noreferrer\">sieveOfAtkin</a>, \n</li><li><a href=\"http://groups.google.com/group/comp.lang.python/msg/f1f10ced88c68c2d\" rel=\"noreferrer\">sieveOfEratosthenes</a>, \n</li><li><a href=\"https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/2073279#2073279\">sundaram3</a>,\n</li><li><a href=\"http://zerovolt.com/?p=88\" rel=\"noreferrer\">sieve_wheel_30</a>,\n</li><li><a href=\"http://tommih.blogspot.com/2009/04/fast-prime-number-generator.html\" rel=\"noreferrer\">ambi_sieve</a> (requires numpy)\n</li><li><a href=\"https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\">primesfrom3to</a> (requires numpy)\n</li><li><a href=\"https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\">primesfrom2to</a> (requires numpy)\n</li></ul>\n\n<p>Many thanks to <a href=\"https://stackoverflow.com/users/92092/stephan\">stephan</a> for bringing sieve_wheel_30 to my attention.\nCredit goes to <a href=\"https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\">Robert William Hanks</a> for primesfrom2to, primesfrom3to, rwh_primes, rwh_primes1, and rwh_primes2.</p>\n\n<p>Of the plain Python methods tested, <strong>with psyco</strong>, for n=1000000,\n<strong>rwh_primes1</strong> was the fastest tested.</p>\n\n<pre><code>+---------------------+-------+\n| Method              | ms    |\n+---------------------+-------+\n| rwh_primes1         | 43.0  |\n| sieveOfAtkin        | 46.4  |\n| rwh_primes          | 57.4  |\n| sieve_wheel_30      | 63.0  |\n| rwh_primes2         | 67.8  |    \n| sieveOfEratosthenes | 147.0 |\n| ambi_sieve_plain    | 152.0 |\n| sundaram3           | 194.0 |\n+---------------------+-------+\n</code></pre>\n\n<p>Of the plain Python methods tested, <strong>without psyco</strong>, for n=1000000,\n<strong>rwh_primes2</strong> was the fastest.</p>\n\n<pre><code>+---------------------+-------+\n| Method              | ms    |\n+---------------------+-------+\n| rwh_primes2         | 68.1  |\n| rwh_primes1         | 93.7  |\n| rwh_primes          | 94.6  |\n| sieve_wheel_30      | 97.4  |\n| sieveOfEratosthenes | 178.0 |\n| ambi_sieve_plain    | 286.0 |\n| sieveOfAtkin        | 314.0 |\n| sundaram3           | 416.0 |\n+---------------------+-------+\n</code></pre>\n\n<p>Of all the methods tested, <em>allowing numpy</em>, for n=1000000,\n<strong>primesfrom2to</strong> was the fastest tested.</p>\n\n<pre><code>+---------------------+-------+\n| Method              | ms    |\n+---------------------+-------+\n| primesfrom2to       | 15.9  |\n| primesfrom3to       | 18.4  |\n| ambi_sieve          | 29.3  |\n+---------------------+-------+\n</code></pre>\n\n<p>Timings were measured using the command:</p>\n\n<pre><code>python -mtimeit -s\"import primes\" \"primes.{method}(1000000)\"\n</code></pre>\n\n<p>with <code>{method}</code> replaced by each of the method names.</p>\n\n<p>primes.py:</p>\n\n<pre><code>#!/usr/bin/env python\nimport psyco; psyco.full()\nfrom math import sqrt, ceil\nimport numpy as np\n\ndef rwh_primes(n):\n    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\n    \"\"\" Returns  a list of primes &lt; n \"\"\"\n    sieve = [True] * n\n    for i in xrange(3,int(n**0.5)+1,2):\n        if sieve[i]:\n            sieve[i*i::2*i]=[False]*((n-i*i-1)/(2*i)+1)\n    return [2] + [i for i in xrange(3,n,2) if sieve[i]]\n\ndef rwh_primes1(n):\n    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\n    \"\"\" Returns  a list of primes &lt; n \"\"\"\n    sieve = [True] * (n/2)\n    for i in xrange(3,int(n**0.5)+1,2):\n        if sieve[i/2]:\n            sieve[i*i/2::i] = [False] * ((n-i*i-1)/(2*i)+1)\n    return [2] + [2*i+1 for i in xrange(1,n/2) if sieve[i]]\n\ndef rwh_primes2(n):\n    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\n    \"\"\" Input n&gt;=6, Returns a list of primes, 2 &lt;= p &lt; n \"\"\"\n    correction = (n%6&gt;1)\n    n = {0:n,1:n-1,2:n+4,3:n+3,4:n+2,5:n+1}[n%6]\n    sieve = [True] * (n/3)\n    sieve[0] = False\n    for i in xrange(int(n**0.5)/3+1):\n      if sieve[i]:\n        k=3*i+1|1\n        sieve[      ((k*k)/3)      ::2*k]=[False]*((n/6-(k*k)/6-1)/k+1)\n        sieve[(k*k+4*k-2*k*(i&amp;1))/3::2*k]=[False]*((n/6-(k*k+4*k-2*k*(i&amp;1))/6-1)/k+1)\n    return [2,3] + [3*i+1|1 for i in xrange(1,n/3-correction) if sieve[i]]\n\ndef sieve_wheel_30(N):\n    # http://zerovolt.com/?p=88\n    ''' Returns a list of primes &lt;= N using wheel criterion 2*3*5 = 30\n\nCopyright 2009 by zerovolt.com\nThis code is free for non-commercial purposes, in which case you can just leave this comment as a credit for my work.\nIf you need this code for commercial purposes, please contact me by sending an email to: info [at] zerovolt [dot] com.'''\n    __smallp = ( 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\n    61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139,\n    149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227,\n    229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311,\n    313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401,\n    409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491,\n    499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599,\n    601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683,\n    691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797,\n    809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887,\n    907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997)\n\n    wheel = (2, 3, 5)\n    const = 30\n    if N &lt; 2:\n        return []\n    if N &lt;= const:\n        pos = 0\n        while __smallp[pos] &lt;= N:\n            pos += 1\n        return list(__smallp[:pos])\n    # make the offsets list\n    offsets = (7, 11, 13, 17, 19, 23, 29, 1)\n    # prepare the list\n    p = [2, 3, 5]\n    dim = 2 + N // const\n    tk1  = [True] * dim\n    tk7  = [True] * dim\n    tk11 = [True] * dim\n    tk13 = [True] * dim\n    tk17 = [True] * dim\n    tk19 = [True] * dim\n    tk23 = [True] * dim\n    tk29 = [True] * dim\n    tk1[0] = False\n    # help dictionary d\n    # d[a , b] = c  ==&gt; if I want to find the smallest useful multiple of (30*pos)+a\n    # on tkc, then I need the index given by the product of [(30*pos)+a][(30*pos)+b]\n    # in general. If b &lt; a, I need [(30*pos)+a][(30*(pos+1))+b]\n    d = {}\n    for x in offsets:\n        for y in offsets:\n            res = (x*y) % const\n            if res in offsets:\n                d[(x, res)] = y\n    # another help dictionary: gives tkx calling tmptk[x]\n    tmptk = {1:tk1, 7:tk7, 11:tk11, 13:tk13, 17:tk17, 19:tk19, 23:tk23, 29:tk29}\n    pos, prime, lastadded, stop = 0, 0, 0, int(ceil(sqrt(N)))\n    # inner functions definition\n    def del_mult(tk, start, step):\n        for k in xrange(start, len(tk), step):\n            tk[k] = False\n    # end of inner functions definition\n    cpos = const * pos\n    while prime &lt; stop:\n        # 30k + 7\n        if tk7[pos]:\n            prime = cpos + 7\n            p.append(prime)\n            lastadded = 7\n            for off in offsets:\n                tmp = d[(7, off)]\n                start = (pos + prime) if off == 7 else (prime * (const * (pos + 1 if tmp &lt; 7 else 0) + tmp) )//const\n                del_mult(tmptk[off], start, prime)\n        # 30k + 11\n        if tk11[pos]:\n            prime = cpos + 11\n            p.append(prime)\n            lastadded = 11\n            for off in offsets:\n                tmp = d[(11, off)]\n                start = (pos + prime) if off == 11 else (prime * (const * (pos + 1 if tmp &lt; 11 else 0) + tmp) )//const\n                del_mult(tmptk[off], start, prime)\n        # 30k + 13\n        if tk13[pos]:\n            prime = cpos + 13\n            p.append(prime)\n            lastadded = 13\n            for off in offsets:\n                tmp = d[(13, off)]\n                start = (pos + prime) if off == 13 else (prime * (const * (pos + 1 if tmp &lt; 13 else 0) + tmp) )//const\n                del_mult(tmptk[off], start, prime)\n        # 30k + 17\n        if tk17[pos]:\n            prime = cpos + 17\n            p.append(prime)\n            lastadded = 17\n            for off in offsets:\n                tmp = d[(17, off)]\n                start = (pos + prime) if off == 17 else (prime * (const * (pos + 1 if tmp &lt; 17 else 0) + tmp) )//const\n                del_mult(tmptk[off], start, prime)\n        # 30k + 19\n        if tk19[pos]:\n            prime = cpos + 19\n            p.append(prime)\n            lastadded = 19\n            for off in offsets:\n                tmp = d[(19, off)]\n                start = (pos + prime) if off == 19 else (prime * (const * (pos + 1 if tmp &lt; 19 else 0) + tmp) )//const\n                del_mult(tmptk[off], start, prime)\n        # 30k + 23\n        if tk23[pos]:\n            prime = cpos + 23\n            p.append(prime)\n            lastadded = 23\n            for off in offsets:\n                tmp = d[(23, off)]\n                start = (pos + prime) if off == 23 else (prime * (const * (pos + 1 if tmp &lt; 23 else 0) + tmp) )//const\n                del_mult(tmptk[off], start, prime)\n        # 30k + 29\n        if tk29[pos]:\n            prime = cpos + 29\n            p.append(prime)\n            lastadded = 29\n            for off in offsets:\n                tmp = d[(29, off)]\n                start = (pos + prime) if off == 29 else (prime * (const * (pos + 1 if tmp &lt; 29 else 0) + tmp) )//const\n                del_mult(tmptk[off], start, prime)\n        # now we go back to top tk1, so we need to increase pos by 1\n        pos += 1\n        cpos = const * pos\n        # 30k + 1\n        if tk1[pos]:\n            prime = cpos + 1\n            p.append(prime)\n            lastadded = 1\n            for off in offsets:\n                tmp = d[(1, off)]\n                start = (pos + prime) if off == 1 else (prime * (const * pos + tmp) )//const\n                del_mult(tmptk[off], start, prime)\n    # time to add remaining primes\n    # if lastadded == 1, remove last element and start adding them from tk1\n    # this way we don't need an \"if\" within the last while\n    if lastadded == 1:\n        p.pop()\n    # now complete for every other possible prime\n    while pos &lt; len(tk1):\n        cpos = const * pos\n        if tk1[pos]: p.append(cpos + 1)\n        if tk7[pos]: p.append(cpos + 7)\n        if tk11[pos]: p.append(cpos + 11)\n        if tk13[pos]: p.append(cpos + 13)\n        if tk17[pos]: p.append(cpos + 17)\n        if tk19[pos]: p.append(cpos + 19)\n        if tk23[pos]: p.append(cpos + 23)\n        if tk29[pos]: p.append(cpos + 29)\n        pos += 1\n    # remove exceeding if present\n    pos = len(p) - 1\n    while p[pos] &gt; N:\n        pos -= 1\n    if pos &lt; len(p) - 1:\n        del p[pos+1:]\n    # return p list\n    return p\n\ndef sieveOfEratosthenes(n):\n    \"\"\"sieveOfEratosthenes(n): return the list of the primes &lt; n.\"\"\"\n    # Code from: &lt;dickinsm@gmail.com&gt;, Nov 30 2006\n    # http://groups.google.com/group/comp.lang.python/msg/f1f10ced88c68c2d\n    if n &lt;= 2:\n        return []\n    sieve = range(3, n, 2)\n    top = len(sieve)\n    for si in sieve:\n        if si:\n            bottom = (si*si - 3) // 2\n            if bottom &gt;= top:\n                break\n            sieve[bottom::si] = [0] * -((bottom - top) // si)\n    return [2] + [el for el in sieve if el]\n\ndef sieveOfAtkin(end):\n    \"\"\"sieveOfAtkin(end): return a list of all the prime numbers &lt;end\n    using the Sieve of Atkin.\"\"\"\n    # Code by Steve Krenzel, &lt;Sgk284@gmail.com&gt;, improved\n    # Code: https://web.archive.org/web/20080324064651/http://krenzel.info/?p=83\n    # Info: http://en.wikipedia.org/wiki/Sieve_of_Atkin\n    assert end &gt; 0\n    lng = ((end-1) // 2)\n    sieve = [False] * (lng + 1)\n\n    x_max, x2, xd = int(sqrt((end-1)/4.0)), 0, 4\n    for xd in xrange(4, 8*x_max + 2, 8):\n        x2 += xd\n        y_max = int(sqrt(end-x2))\n        n, n_diff = x2 + y_max*y_max, (y_max &lt;&lt; 1) - 1\n        if not (n &amp; 1):\n            n -= n_diff\n            n_diff -= 2\n        for d in xrange((n_diff - 1) &lt;&lt; 1, -1, -8):\n            m = n % 12\n            if m == 1 or m == 5:\n                m = n &gt;&gt; 1\n                sieve[m] = not sieve[m]\n            n -= d\n\n    x_max, x2, xd = int(sqrt((end-1) / 3.0)), 0, 3\n    for xd in xrange(3, 6 * x_max + 2, 6):\n        x2 += xd\n        y_max = int(sqrt(end-x2))\n        n, n_diff = x2 + y_max*y_max, (y_max &lt;&lt; 1) - 1\n        if not(n &amp; 1):\n            n -= n_diff\n            n_diff -= 2\n        for d in xrange((n_diff - 1) &lt;&lt; 1, -1, -8):\n            if n % 12 == 7:\n                m = n &gt;&gt; 1\n                sieve[m] = not sieve[m]\n            n -= d\n\n    x_max, y_min, x2, xd = int((2 + sqrt(4-8*(1-end)))/4), -1, 0, 3\n    for x in xrange(1, x_max + 1):\n        x2 += xd\n        xd += 6\n        if x2 &gt;= end: y_min = (((int(ceil(sqrt(x2 - end))) - 1) &lt;&lt; 1) - 2) &lt;&lt; 1\n        n, n_diff = ((x*x + x) &lt;&lt; 1) - 1, (((x-1) &lt;&lt; 1) - 2) &lt;&lt; 1\n        for d in xrange(n_diff, y_min, -8):\n            if n % 12 == 11:\n                m = n &gt;&gt; 1\n                sieve[m] = not sieve[m]\n            n += d\n\n    primes = [2, 3]\n    if end &lt;= 3:\n        return primes[:max(0,end-2)]\n\n    for n in xrange(5 &gt;&gt; 1, (int(sqrt(end))+1) &gt;&gt; 1):\n        if sieve[n]:\n            primes.append((n &lt;&lt; 1) + 1)\n            aux = (n &lt;&lt; 1) + 1\n            aux *= aux\n            for k in xrange(aux, end, 2 * aux):\n                sieve[k &gt;&gt; 1] = False\n\n    s  = int(sqrt(end)) + 1\n    if s  % 2 == 0:\n        s += 1\n    primes.extend([i for i in xrange(s, end, 2) if sieve[i &gt;&gt; 1]])\n\n    return primes\n\ndef ambi_sieve_plain(n):\n    s = range(3, n, 2)\n    for m in xrange(3, int(n**0.5)+1, 2): \n        if s[(m-3)/2]: \n            for t in xrange((m*m-3)/2,(n&gt;&gt;1)-1,m):\n                s[t]=0\n    return [2]+[t for t in s if t&gt;0]\n\ndef sundaram3(max_n):\n    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/2073279#2073279\n    numbers = range(3, max_n+1, 2)\n    half = (max_n)//2\n    initial = 4\n\n    for step in xrange(3, max_n+1, 2):\n        for i in xrange(initial, half, step):\n            numbers[i-1] = 0\n        initial += 2*(step+1)\n\n        if initial &gt; half:\n            return [2] + filter(None, numbers)\n\n################################################################################\n# Using Numpy:\ndef ambi_sieve(n):\n    # http://tommih.blogspot.com/2009/04/fast-prime-number-generator.html\n    s = np.arange(3, n, 2)\n    for m in xrange(3, int(n ** 0.5)+1, 2): \n        if s[(m-3)/2]: \n            s[(m*m-3)/2::m]=0\n    return np.r_[2, s[s&gt;0]]\n\ndef primesfrom3to(n):\n    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\n    \"\"\" Returns a array of primes, p &lt; n \"\"\"\n    assert n&gt;=2\n    sieve = np.ones(n/2, dtype=np.bool)\n    for i in xrange(3,int(n**0.5)+1,2):\n        if sieve[i/2]:\n            sieve[i*i/2::i] = False\n    return np.r_[2, 2*np.nonzero(sieve)[0][1::]+1]    \n\ndef primesfrom2to(n):\n    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\n    \"\"\" Input n&gt;=6, Returns a array of primes, 2 &lt;= p &lt; n \"\"\"\n    sieve = np.ones(n/3 + (n%6==2), dtype=np.bool)\n    sieve[0] = False\n    for i in xrange(int(n**0.5)/3+1):\n        if sieve[i]:\n            k=3*i+1|1\n            sieve[      ((k*k)/3)      ::2*k] = False\n            sieve[(k*k+4*k-2*k*(i&amp;1))/3::2*k] = False\n    return np.r_[2,3,((3*np.nonzero(sieve)[0]+1)|1)]\n\nif __name__=='__main__':\n    import itertools\n    import sys\n\n    def test(f1,f2,num):\n        print('Testing {f1} and {f2} return same results'.format(\n            f1=f1.func_name,\n            f2=f2.func_name))\n        if not all([a==b for a,b in itertools.izip_longest(f1(num),f2(num))]):\n            sys.exit(\"Error: %s(%s) != %s(%s)\"%(f1.func_name,num,f2.func_name,num))\n\n    n=1000000\n    test(sieveOfAtkin,sieveOfEratosthenes,n)\n    test(sieveOfAtkin,ambi_sieve,n)\n    test(sieveOfAtkin,ambi_sieve_plain,n) \n    test(sieveOfAtkin,sundaram3,n)\n    test(sieveOfAtkin,sieve_wheel_30,n)\n    test(sieveOfAtkin,primesfrom3to,n)\n    test(sieveOfAtkin,primesfrom2to,n)\n    test(sieveOfAtkin,rwh_primes,n)\n    test(sieveOfAtkin,rwh_primes1,n)         \n    test(sieveOfAtkin,rwh_primes2,n)\n</code></pre>\n\n<p>Running the script tests that all implementations give the same result.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How can I parse a YAML file in Python?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The easiest and pureist method without relying on C headers is PyYaml:</p>\n\n<pre><code>#!/usr/bin/env python\n\nimport yaml\n\nwith open(\"example.yaml\", 'r') as stream:\n    try:\n        print(yaml.load(stream))\n    except yaml.YAMLError as exc:\n        print(exc)\n</code></pre>\n\n<p>Err.. that's it... how many lines of code would that take me in Java... any ideas? : ) more info here:</p>\n\n<p><a href=\"http://pyyaml.org/wiki/PyYAMLDocumentation\" rel=\"noreferrer\">http://pyyaml.org/wiki/PyYAMLDocumentation</a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I just installed the python modules: <code>construct</code> and <code>statlib</code> with <code>setuptools</code> like this:</p>\n\n<pre><code># Install setuptools to be able to download the following\nsudo apt-get install python-setuptools\n\n# Install statlib for lightweight statistical tools\nsudo easy_install statlib\n\n# Install construct for packing/unpacking binary data\nsudo easy_install construct\n</code></pre>\n\n<p>I want to be able to (programmatically) check their versions.  Is there an equivalent to <code>python --version</code> I can run from the command line?</p>\n\n<p>My python version is <code>2.7.3</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I suggest using <a href=\"https://stackoverflow.com/a/3220572/1265154\">pip in place of easy_install</a>. With pip, you can list all installed packages and their versions with </p>\n\n<pre><code>pip freeze\n</code></pre>\n\n<p>For an individual module, you can try <a href=\"http://www.python.org/dev/peps/pep-0396/\" rel=\"noreferrer\"><code>__version__</code> attribute</a>, however there are modules without it:</p>\n\n<pre><code>$ pip freeze | grep lxml\nlxml==2.3\n$ python -c \"import lxml; print lxml.__version__\"\nTraceback (most recent call last):\n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\nAttributeError: 'module' object has no attribute '__version__'\n</code></pre>\n\n<p>Last, as you run your command with <code>sudo</code> prefix, I guess you're installing to global python environment. Strongly advise to take look into python <a href=\"https://pypi.python.org/pypi/virtualenv\" rel=\"noreferrer\">virtual environment</a> managers, for example <a href=\"http://virtualenvwrapper.readthedocs.org/en/latest/\" rel=\"noreferrer\">virtualenvwrapper</a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Just like C, you can break a long line into multiple short lines. But in <a href=\"http://en.wikipedia.org/wiki/Python_%28programming_language%29\">Python</a>, if I do this, there will be an indent error... Is it possible?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>From <a href=\"http://www.python.org/dev/peps/pep-0008/\" rel=\"noreferrer\">PEP 8 - Style Guide for Python Code</a>:</p>\n\n<blockquote>\n  <p>The preferred way of wrapping long lines is by using Python's implied line\n  continuation inside parentheses, brackets and braces.  If necessary, you\n  can add an extra pair of parentheses around an expression, but sometimes\n  using a backslash looks better.  Make sure to indent the continued line\n  appropriately.  </p>\n</blockquote>\n\n<p>Example of implicit line continuation:</p>\n\n<pre><code>a = some_function(\n    '1' + '2' + '3' - '4')\n</code></pre>\n\n<p>On the topic of line-breaks around a binary operator, it goes on to say:-</p>\n\n<blockquote>\n  <p>For decades the recommended style was to break after binary operators.\n  But this can hurt readability in two ways: the operators tend to get scattered across different columns on the screen, and each operator is moved away from its operand and onto the previous line.</p>\n  \n  <p>In Python code, it is permissible to break before or after a binary operator, as long as the convention is consistent locally. For new code Knuth's style (line breaks <em>before</em> the operator) is suggested.</p>\n</blockquote>\n\n<p>Example of explicit line continuation:</p>\n\n<pre><code>a = '1'   \\\n    + '2' \\\n    + '3' \\\n    - '4'\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>When should you use generator expressions and when should you use list comprehensions in Python?</p>\n\n<pre><code># Generator expression\n(x*2 for x in range(256))\n\n# List comprehension\n[x*2 for x in range(256)]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>John's answer is good (that list comprehensions are better when you want to iterate over something multiple times).  However, it's also worth noting that you should use a list if you want to use any of the list methods.  For example, the following code won't work:</p>\n\n<pre><code>def gen():\n    return (something for something in get_some_stuff())\n\nprint gen()[:2]     # generators don't support indexing or slicing\nprint [5,6] + gen() # generators can't be added to lists\n</code></pre>\n\n<p>Basically, use a generator expression if all you're doing is iterating once.  If you want to store and use the generated results, then you're probably better off with a list comprehension.</p>\n\n<p>Since performance is the most common reason to choose one over the other, my advice is to not worry about it and just pick one; if you find that your program is running too slowly, then and only then should you go back and worry about tuning your code.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a tuple of tuples from a MySQL query like this:</p>\n\n<pre><code>T1 = (('13', '17', '18', '21', '32'),\n      ('07', '11', '13', '14', '28'),\n      ('01', '05', '06', '08', '15', '16'))\n</code></pre>\n\n<p>I'd like to convert all the string elements into integers and put them back into a list of lists:</p>\n\n<pre><code>T2 = [[13, 17, 18, 21, 32], [7, 11, 13, 14, 28], [1, 5, 6, 8, 15, 16]]\n</code></pre>\n\n<p>I tried to achieve it with <code>eval</code> but didn't get any decent result yet.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"https://docs.python.org/2/library/functions.html#int\" rel=\"noreferrer\"><code>int()</code></a> is the Python standard built-in function to convert a string into an integer value. You call it with a string containing a number as the argument, and it returns the number converted to an actual integer:</p>\n\n<pre><code>print int(\"1\") + 1\n</code></pre>\n\n<p>The above prints <code>2</code>.</p>\n\n<p>If you know the structure of your list (that it simply contains lists, only one level), you could do this in python 2:</p>\n\n<pre><code>T2 = [map(int, x) for x in T1]\n</code></pre>\n\n<p>In python 3:</p>\n\n<pre><code>T2 = [list(map(int, x)) for x in T1]\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I made a function which will look up ages in dictionary and show the matching name:</p>\n\n<pre><code>list = {'george':16,'amber':19}\nsearch_age = raw_input(\"Provide age\")\nfor age in list.values():\n    if age == search_age:\n        name = list[age]\n        print name\n</code></pre>\n\n<p>I know how to compare and find the age I just don't know how to show the name of the person. Additionally, I am getting a <code>KeyError</code> because of line 5. I know it's not correct but I can't figure out to make it search backwards.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There is none. <code>dict</code> is not intended to be used this way.</p>\n\n<pre><code>for name, age in list.iteritems():\n    if age == search_age:\n        print name\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What do these python file extensions mean?</p>\n\n<ul>\n<li>.pyc</li>\n<li>.pyd</li>\n<li>.pyo</li>\n</ul>\n\n<p>What are the differences between them and how are they generated from a *.py file?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<ol>\n<li><code>.py</code>: This is normally the input source code that you've written.</li>\n<li><code>.pyc</code>: This is the compiled bytecode. If you import a module, python will build a <code>*.pyc</code> file that contains the bytecode to make importing it again later easier (and faster).</li>\n<li><code>.pyo</code>: This is a <code>*.pyc</code> file that was created while optimizations (<code>-O</code>) was on.</li>\n<li><code>.pyd</code>: This is basically a windows dll file. <a href=\"http://docs.python.org/faq/windows.html#is-a-pyd-file-the-same-as-a-dll\">http://docs.python.org/faq/windows.html#is-a-pyd-file-the-same-as-a-dll</a></li>\n</ol>\n\n<p>Also for some further discussion on <code>.pyc</code> vs <code>.pyo</code>, take a look at: <a href=\"http://www.network-theory.co.uk/docs/pytut/CompiledPythonfiles.html\">http://www.network-theory.co.uk/docs/pytut/CompiledPythonfiles.html</a> (I've copied the important part below)</p>\n\n<blockquote>\n  <ul>\n  <li>When the Python interpreter is invoked with the -O flag, optimized code is generated and stored in \u2018.pyo\u2019 files. The optimizer currently doesn't help much; it only removes assert statements. When -O is used, all bytecode is optimized; .pyc files are ignored and .py files are compiled to optimized bytecode.</li>\n  <li>Passing two -O flags to the Python interpreter (-OO) will cause the bytecode compiler to perform optimizations that could in some rare cases result in malfunctioning programs. Currently only <code>__doc__</code> strings are removed from the bytecode, resulting in more compact \u2018.pyo\u2019 files. Since some programs may rely on having these available, you should only use this option if you know what you're doing.</li>\n  <li>A program doesn't run any faster when it is read from a \u2018.pyc\u2019 or \u2018.pyo\u2019 file than when it is read from a \u2018.py\u2019 file; the only thing that's faster about \u2018.pyc\u2019 or \u2018.pyo\u2019 files is the speed with which they are loaded.</li>\n  <li>When a script is run by giving its name on the command line, the bytecode for the script is never written to a \u2018.pyc\u2019 or \u2018.pyo\u2019 file. Thus, the startup time of a script may be reduced by moving most of its code to a module and having a small bootstrap script that imports that module. It is also possible to name a \u2018.pyc\u2019 or \u2018.pyo\u2019 file directly on the command line.</li>\n  </ul>\n</blockquote>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm trying to make a function that will compare multiple variables to an integer and output a string of three letters. I was wondering if there was a way to translate this into Python. So say:</p>\n\n<pre><code>x = 0\ny = 1\nz = 3\nmylist = []\n\nif x or y or z == 0 :\n    mylist.append(\"c\")\nelif x or y or z == 1 :\n    mylist.append(\"d\")\nelif x or y or z == 2 :\n    mylist.append(\"e\")\nelif x or y or z == 3 : \n    mylist.append(\"f\")\n</code></pre>\n\n<p>which would return a list of </p>\n\n<pre><code>[\"c\", \"d\", \"f\"]\n</code></pre>\n\n<p>Is something like this possible?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You misunderstand how boolean expressions work; they don't work like an English sentence and guess that you are talking about the same comparison for all names here. You are looking for:</p>\n\n<pre><code>if x == 1 or y == 1 or z == 1:\n</code></pre>\n\n<p><code>x</code> and <code>y</code> are otherwise evaluated on their own (<code>False</code> if <code>0</code>, <code>True</code> otherwise).</p>\n\n<p>You can shorten that to:</p>\n\n<pre><code>if 1 in (x, y, z):\n</code></pre>\n\n<p>or better still:</p>\n\n<pre><code>if 1 in {x, y, z}:\n</code></pre>\n\n<p>using a <code>set</code> to take advantage of the constant-cost membership test (<code>in</code> takes a fixed amount of time whatever the left-hand operand is).</p>\n\n<p>When you use <code>or</code>, python sees each side of the operator as <em>separate</em> expressions. The expression <code>x or y == 1</code> is treated as first a boolean test for <code>x</code>, then if that is False, the expression <code>y == 1</code> is tested.</p>\n\n<p>This is due to <a href=\"http://docs.python.org/2/reference/expressions.html#operator-precedence\" rel=\"noreferrer\">operator precedence</a>. The <code>or</code> operator has a lower precedence than the <code>==</code> test, so the latter is evaluated <em>first</em>.</p>\n\n<p>However, even if this were <em>not</em> the case, and the expression <code>x or y or z == 1</code> was actually interpreted as <code>(x or y or z) == 1</code> instead, this would still not do what you expect it to do. </p>\n\n<p><code>x or y or z</code> would evaluate to the first argument that is 'truthy', e.g. not <code>False</code>, numeric 0 or empty (see <a href=\"http://docs.python.org/2/reference/expressions.html#boolean-operations\" rel=\"noreferrer\">boolean expressions</a> for details on what Python considers false in a boolean context).</p>\n\n<p>So for the values <code>x = 2; y = 1; z = 0</code>, <code>x or y or z</code> would resolve to <code>2</code>, because that is the first true-like value in the arguments. Then <code>2 == 1</code> would be <code>False</code>, even though <code>y == 1</code> would be <code>True</code>.</p>\n\n<p>The same would apply to the inverse; testing multiple values against a single variable; <code>x == 1 or 2 or 3</code> would fail for the same reasons. Use <code>x == 1 or x == 2 or x == 3</code> or <code>x in {1, 2, 3}</code>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>PIL does support JPEG in my system.</p>\n\n<p>Whenever I do an upload, my code is failing with:</p>\n\n<pre><code>File \"PIL/Image.py\", line 375, in _getdecoder\n    raise IOError(\"decoder %s not available\" % decoder_name)\nIOError: decoder jpeg not available\n</code></pre>\n\n<p>How can I resolve this?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>libjpeg-dev is required to be able to process jpegs with pillow (or PIL), so you need to install it and then recompile pillow. It also seems that libjpeg8-dev is needed on Ubuntu 14.04</p>\n\n<p>If you're still using PIL then you should really be using pillow these days though, so first <code>pip uninstall PIL</code> before following these instructions to switch, or if you have a good reason for sticking with PIL then replace \"pillow\" with \"PIL\" in the below).</p>\n\n<p>On Ubuntu:</p>\n\n<pre><code># install libjpeg-dev with apt\nsudo apt-get install libjpeg-dev\n# if you're on Ubuntu 14.04, also install this\nsudo apt-get install libjpeg8-dev\n\n# reinstall pillow\npip install --no-cache-dir -I pillow\n</code></pre>\n\n<p>If that doesn't work, try one of the below, depending on whether you are on 64bit or 32bit Ubuntu.</p>\n\n<p>For Ubuntu x64:</p>\n\n<pre><code>sudo ln -s /usr/lib/x86_64-linux-gnu/libjpeg.so /usr/lib\nsudo ln -s /usr/lib/x86_64-linux-gnu/libfreetype.so /usr/lib\nsudo ln -s /usr/lib/x86_64-linux-gnu/libz.so /usr/lib\n</code></pre>\n\n<p>Or for Ubuntu 32bit:</p>\n\n<pre><code>sudo ln -s /usr/lib/i386-linux-gnu/libjpeg.so /usr/lib/\nsudo ln -s /usr/lib/i386-linux-gnu/libfreetype.so.6 /usr/lib/\nsudo ln -s /usr/lib/i386-linux-gnu/libz.so /usr/lib/\n</code></pre>\n\n<p>Then reinstall pillow:</p>\n\n<pre><code>pip install --no-cache-dir -I pillow\n</code></pre>\n\n<p>(Edits to include feedback from comments. Thanks Charles Offenbacher for pointing out this differs for 32bit, and t-mart for suggesting use of <code>--no-cache-dir</code>).</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>If I have a list of chars:</p>\n\n<pre><code>a = ['a','b','c','d']\n</code></pre>\n\n<p>How do I convert it into a single string?</p>\n\n<pre><code>a = 'abcd'\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use the <code>join</code> method of the empty string to join all of the strings together with the empty string in between, like so:</p>\n\n<pre><code>&gt;&gt;&gt; a = ['a', 'b', 'c', 'd']\n&gt;&gt;&gt; ''.join(a)\n'abcd'\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have this Python application that gets stuck from time to time and I can't find out where.</p>\n\n<p>Is there any way to signal Python interpreter to show you the exact code that's running? </p>\n\n<p>Some kind of on-the-fly stacktrace?</p>\n\n<p><strong><em>Related questions:</em></strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1156023/print-current-call-stack-from-a-method-in-python-code\">Print current call stack from a method in Python code</a></li>\n<li><a href=\"https://stackoverflow.com/questions/6849138/check-what-a-running-process-is-doing-print-stack-trace-of-an-uninstrumented-py\">Check what a running process is doing: print stack trace of an uninstrumented Python program</a></li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I have module I use for situations like this - where a process will be running for a long time but gets stuck sometimes for unknown and irreproducible reasons.  Its a bit hacky, and only works on unix (requires signals):</p>\n\n<pre><code>import code, traceback, signal\n\ndef debug(sig, frame):\n    \"\"\"Interrupt running process, and provide a python prompt for\n    interactive debugging.\"\"\"\n    d={'_frame':frame}         # Allow access to frame object.\n    d.update(frame.f_globals)  # Unless shadowed by global\n    d.update(frame.f_locals)\n\n    i = code.InteractiveConsole(d)\n    message  = \"Signal received : entering python shell.\\nTraceback:\\n\"\n    message += ''.join(traceback.format_stack(frame))\n    i.interact(message)\n\ndef listen():\n    signal.signal(signal.SIGUSR1, debug)  # Register handler\n</code></pre>\n\n<p>To use, just call the listen() function at some point when your program starts up (You could even stick it in site.py to have all python programs use it), and let it run.  At any point, send the process a SIGUSR1 signal, using kill, or in python:</p>\n\n<pre><code>    os.kill(pid, signal.SIGUSR1)\n</code></pre>\n\n<p>This will cause the program to break to a python console at the point it is currently at, showing you the stack trace, and letting you manipulate the variables.  Use control-d (EOF) to continue running (though note that you will probably interrupt any I/O etc at the point you signal, so it isn't fully non-intrusive.</p>\n\n<p>I've another script that does the same thing, except it communicates with the running process through a pipe (to allow for debugging backgrounded processes etc).  Its a bit large to post here, but I've added it as a <a href=\"http://code.activestate.com/recipes/576515/\" rel=\"noreferrer\">python cookbook recipe</a>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I need a way to tell what mode the shell is in from within the shell.  </p>\n\n<p>I've tried looking at the <a href=\"http://docs.python.org/library/platform.html\" rel=\"noreferrer\">platform</a> module but it seems only to tell you about \"about the bit architecture and the linkage format used for the executable\": the binary is compiled as 64bit though (I'm running on OS X 10.6) so it seems to always report 64bit even though I'm using the methods <a href=\"https://developer.apple.com/mac/library/documentation/Darwin/Reference/ManPages/man1/python.1.html\" rel=\"noreferrer\">described here</a> to force 32bit mode).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>UPDATED:\nOne way is to look at <code>sys.maxsize</code> as documented <a href=\"http://docs.python.org/library/platform.html#cross-platform\" rel=\"noreferrer\">here</a>:</p>\n\n<pre><code>$ python-32 -c 'import sys;print(\"%x\" % sys.maxsize, sys.maxsize &gt; 2**32)'\n('7fffffff', False)\n$ python-64 -c 'import sys;print(\"%x\" % sys.maxsize, sys.maxsize &gt; 2**32)'\n('7fffffffffffffff', True)\n</code></pre>\n\n<p><code>sys.maxsize</code> was introduced in Python 2.6.  If you need a test for older systems, this slightly more complicated test should work on all Python 2 and 3 releases:</p>\n\n<pre><code>$ python-32 -c 'import struct;print( 8 * struct.calcsize(\"P\"))'\n32\n$ python-64 -c 'import struct;print( 8 * struct.calcsize(\"P\"))'\n64\n</code></pre>\n\n<p>BTW, you might be tempted to use <code>platform.architecture()</code> for this.  Unfortunately, its results are not always reliable, <a href=\"http://docs.python.org/library/platform.html#platform.architecture\" rel=\"noreferrer\">particularly in the case of OS X universal binaries</a>.</p>\n\n<pre><code>$ arch -x86_64 /usr/bin/python2.6 -c 'import sys,platform; print platform.architecture()[0], sys.maxsize &gt; 2**32'\n64bit True\n$ arch -i386 /usr/bin/python2.6 -c 'import sys,platform; print platform.architecture()[0], sys.maxsize &gt; 2**32'\n64bit False\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How to set the current working directory in Python?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Try <a href=\"http://docs.python.org/library/os.html#os.chdir\" rel=\"noreferrer\"><code>os.chdir</code></a></p>\n\n<blockquote>\n<pre><code>os.chdir(path)\n</code></pre>\n  \n  <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Change the current working directory to path. Availability: Unix, Windows.</p>\n</blockquote>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a directory that stores all the <strong>.py</strong> files.</p>\n\n<pre><code>bin/\n   main.py\n   user.py # where class User resides\n   dir.py # where class Dir resides\n</code></pre>\n\n<p>I want to use classes from <strong>user.py</strong> and <strong>dir.py</strong> in <strong>main.py</strong>.<br>\nHow can I import these Python classes into <strong>main.py</strong>?<br>\nFurthermore, how can I import class <code>User</code> if <strong>user.py</strong> is in a sub directory?</p>\n\n<pre><code>bin/\n    dir.py\n    main.py\n    usr/\n        user.py\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<h1>Python 2</h1>\n\n<p>Make an empty file called <code>__init__.py</code> in the same directory as the files. That will signify to Python that it's \"ok to import from this directory\".</p>\n\n<p>Then just do...</p>\n\n<pre><code>from user import User\nfrom dir import Dir\n</code></pre>\n\n<p>The same holds true if the files are in a subdirectory - put an <code>__init__.py</code> in the subdirectory as well, and then use regular import statements, with dot notation. For each level of directory, you need to add to the import path. </p>\n\n<pre><code>bin/\n    main.py\n    classes/\n        user.py\n        dir.py\n</code></pre>\n\n<p>So if the directory was named \"classes\", then you'd do this:</p>\n\n<pre><code>from classes.user import User\nfrom classes.dir import Dir\n</code></pre>\n\n<h1>Python 3</h1>\n\n<p>Same as previous, but prefix the module name with a <code>.</code> if not using a subdirectory:</p>\n\n<pre><code>from .user import User\nfrom .dir import Dir\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/626759/whats-the-difference-between-lists-and-tuples\" dir=\"ltr\">What's the difference between lists and tuples?</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    15 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>In Python, when should you use lists and when tuples?</p>\n\n<p>Sometimes you don't have a choice, for example if you have</p>\n\n<pre><code>\"hello %s you are %s years old\" % x\n</code></pre>\n\n<p>then x must be a tuple.</p>\n\n<p>But if I am the one who designs the API and gets to choose the data types, then what are the guidelines?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There's a strong culture of tuples being for heterogeneous collections, similar to what you'd use <code>struct</code>s for in C, and lists being for homogeneous collections, similar to what you'd use arrays for.  But I've never quite squared this with the mutability issue mentioned in the other answers.  Mutability has teeth to it (you actually can't change a tuple), while homogeneity is not enforced, and so seems to be a much less interesting distinction.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I came across the Python <code>with</code> statement for the first time today.  I've been using Python lightly for several months and didn't even know of its existence!  Given its somewhat obscure status, I thought it would be worth asking:</p>\n\n<ol>\n<li>What is the Python <code>with</code> statement\ndesigned to be used for?   </li>\n<li>What do\nyou use it for? </li>\n<li>Are there any\ngotchas I need to be aware of, or\ncommon anti-patterns associated with\nits use?  Any cases where it is better use <code>try..finally</code> than <code>with</code>?</li>\n<li>Why isn't it used more widely?</li>\n<li>Which standard library classes are compatible with it?</li>\n</ol>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<ol>\n<li><p>I believe this has already been answered by other users before me, so I only add it for the sake of completeness: the <code>with</code> statement simplifies exception handling by encapsulating common preparation and cleanup tasks in so-called <a href=\"http://docs.python.org/release/2.5.2/lib/typecontextmanager.html\" rel=\"noreferrer\">context managers</a>. More details can be found in <a href=\"http://www.python.org/dev/peps/pep-0343/\" rel=\"noreferrer\">PEP 343</a>. For instance, the <code>open</code> statement is a context manager in itself, which lets you open a file, keep it open as long as the execution is in the context of the <code>with</code> statement where you used it, and close it as soon as you leave the context, no matter whether you have left it because of an exception or during regular control flow. The <code>with</code> statement can thus be used in ways similar to the <a href=\"http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization\" rel=\"noreferrer\">RAII pattern</a> in C++: some resource is acquired by the <code>with</code> statement and released when you leave the <code>with</code> context.</p></li>\n<li><p>Some examples are: opening files using <code>with open(filename) as fp:</code>, acquiring locks using <code>with lock:</code> (where <code>lock</code> is an instance of <code>threading.Lock</code>). You can also construct your own context managers using the <code>contextmanager</code> decorator from <code>contextlib</code>. For instance, I often use this when I have to change the current directory temporarily and then return to where I was:</p>\n\n<pre><code>from contextlib import contextmanager\nimport os\n\n@contextmanager\ndef working_directory(path):\n    current_dir = os.getcwd()\n    os.chdir(path)\n    try:\n        yield\n    finally:\n        os.chdir(current_dir)\n\nwith working_directory(\"data/stuff\"):\n    # do something within data/stuff\n# here I am back again in the original working directory\n</code></pre>\n\n<p>Here's another example that temporarily redirects <code>sys.stdin</code>, <code>sys.stdout</code> and <code>sys.stderr</code> to some other file handle and restores them later:</p>\n\n<pre><code>from contextlib import contextmanager\nimport sys\n\n@contextmanager\ndef redirected(**kwds):\n    stream_names = [\"stdin\", \"stdout\", \"stderr\"]\n    old_streams = {}\n    try:\n        for sname in stream_names:\n            stream = kwds.get(sname, None)\n            if stream is not None and stream != getattr(sys, sname):\n                old_streams[sname] = getattr(sys, sname)\n                setattr(sys, sname, stream)\n        yield\n    finally:\n        for sname, stream in old_streams.iteritems():\n            setattr(sys, sname, stream)\n\nwith redirected(stdout=open(\"/tmp/log.txt\", \"w\")):\n     # these print statements will go to /tmp/log.txt\n     print \"Test entry 1\"\n     print \"Test entry 2\"\n# back to the normal stdout\nprint \"Back to normal stdout again\"\n</code></pre>\n\n<p>And finally, another example that creates a temporary folder and cleans it up when leaving the context:</p>\n\n<pre><code>from tempfile import mkdtemp\nfrom shutil import rmtree\n\n@contextmanager\ndef temporary_dir(*args, **kwds):\n    name = mkdtemp(*args, **kwds)\n    try:\n        yield name\n    finally:\n        shutil.rmtree(name)\n\nwith temporary_dir() as dirname:\n    # do whatever you want\n</code></pre></li>\n</ol>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p><a href=\"http://www.python.org/dev/peps/pep-0008/\" rel=\"noreferrer\">PEP 08</a> states:</p>\n\n<blockquote>\n  <p>Imports are always put at the top of the file, just after any module comments and docstrings, and before module globals and constants.</p>\n</blockquote>\n\n<p>However if the class/method/function that I am importing is only used in rare cases, surely it is more efficient to do the import when it is needed?</p>\n\n<p>Isn't this:</p>\n\n<pre><code>class SomeClass(object):\n\n    def not_often_called(self)\n        from datetime import datetime\n        self.datetime = datetime.now()\n</code></pre>\n\n<p>more efficient than this?</p>\n\n<pre><code>from datetime import datetime\n\nclass SomeClass(object):\n\n    def not_often_called(self)\n        self.datetime = datetime.now()\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Module importing is quite fast, but not instant. This means that:</p>\n\n<ul>\n<li>Putting the imports at the top of the module is fine, because it's a trivial cost that's only paid once.</li>\n<li>Putting the imports within a function will cause calls to that function to take longer.</li>\n</ul>\n\n<p>So if you care about efficiency, put the imports at the top. Only move them into a function if your profiling shows that would help (you <strong>did</strong> profile to see where best to improve performance, right??)</p>\n\n<hr>\n\n<p>The best reasons I've seen to perform lazy imports are:</p>\n\n<ul>\n<li>Optional library support. If your code has multiple paths that use different libraries, don't break if an optional library is not installed.</li>\n<li>In the <code>__init__.py</code> of a plugin, which might be imported but not actually used. Examples are Bazaar plugins, which use <code>bzrlib</code>'s lazy-loading framework.</li>\n</ul>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm trying to map a list into hex, and then use the list elsewhere. In python 2.6, this was easy:</p>\n\n<p><strong>A:</strong> Python 2.6:</p>\n\n<pre><code>&gt;&gt;&gt; map(chr, [66, 53, 0, 94])\n['B', '5', '\\x00', '^']\n</code></pre>\n\n<p>However, on Python 3.1, the above returns a map object.</p>\n\n<p><strong>B:</strong> Python 3.1:</p>\n\n<pre><code>&gt;&gt;&gt; map(chr, [66, 53, 0, 94])\n&lt;map object at 0x00AF5570&gt;\n</code></pre>\n\n<p>How do I retrieve the mapped list (as in <strong>A</strong> above) on Python 3.x? </p>\n\n<p>Alternatively, is there a better way of doing this? My initial list object has around 45 items and id like to convert them to hex.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Do this:</p>\n\n<pre><code>list(map(chr,[66,53,0,94]))\n</code></pre>\n\n<p>In Python 3+, many processes that iterate over iterables return iterators themselves.  In most cases, this ends up saving memory, and should make things go faster.   </p>\n\n<p>If all you're going to do is iterate over this list eventually, there's no need to even convert it to a list, because you can still iterate over the <code>map</code> object like so:</p>\n\n<pre><code># Prints \"ABCD\"\nfor ch in map(chr,[65,66,67,68]):\n    print(ch)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<pre><code>&gt;&gt;&gt; timeit.timeit(\"'x' in ('x',)\")\n0.04869917374131205\n&gt;&gt;&gt; timeit.timeit(\"'x' == 'x'\")\n0.06144205736110564\n</code></pre>\n\n<p>Also works for tuples with multiple elements, both versions seem to grow linearly:</p>\n\n<pre><code>&gt;&gt;&gt; timeit.timeit(\"'x' in ('x', 'y')\")\n0.04866674801541748\n&gt;&gt;&gt; timeit.timeit(\"'x' == 'x' or 'x' == 'y'\")\n0.06565782838087131\n&gt;&gt;&gt; timeit.timeit(\"'x' in ('y', 'x')\")\n0.08975995576448526\n&gt;&gt;&gt; timeit.timeit(\"'x' == 'y' or 'x' == 'y'\")\n0.12992391047427532\n</code></pre>\n\n<p>Based on this, I think I should <em>totally</em> start using <code>in</code> everywhere instead of <code>==</code>!</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>As I mentioned to David Wolever, there's more to this than meets the eye; both methods dispatch to <code>is</code>; you can prove this by doing</p>\n\n<pre><code>min(Timer(\"x == x\", setup=\"x = 'a' * 1000000\").repeat(10, 10000))\n#&gt;&gt;&gt; 0.00045456900261342525\n\nmin(Timer(\"x == y\", setup=\"x = 'a' * 1000000; y = 'a' * 1000000\").repeat(10, 10000))\n#&gt;&gt;&gt; 0.5256857610074803\n</code></pre>\n\n<p>The first can only be so fast because it checks by identity.</p>\n\n<p>To find out why one would take longer than the other, let's trace through execution.</p>\n\n<p>They both start in <code>ceval.c</code>, from <code>COMPARE_OP</code> since that is the bytecode involved</p>\n\n<pre><code>TARGET(COMPARE_OP) {\n    PyObject *right = POP();\n    PyObject *left = TOP();\n    PyObject *res = cmp_outcome(oparg, left, right);\n    Py_DECREF(left);\n    Py_DECREF(right);\n    SET_TOP(res);\n    if (res == NULL)\n        goto error;\n    PREDICT(POP_JUMP_IF_FALSE);\n    PREDICT(POP_JUMP_IF_TRUE);\n    DISPATCH();\n}\n</code></pre>\n\n<p>This pops the values from the stack (technically it only pops one)</p>\n\n<pre><code>PyObject *right = POP();\nPyObject *left = TOP();\n</code></pre>\n\n<p>and runs the compare:</p>\n\n<pre><code>PyObject *res = cmp_outcome(oparg, left, right);\n</code></pre>\n\n<p><code>cmp_outcome</code> is this:</p>\n\n<pre><code>static PyObject *\ncmp_outcome(int op, PyObject *v, PyObject *w)\n{\n    int res = 0;\n    switch (op) {\n    case PyCmp_IS: ...\n    case PyCmp_IS_NOT: ...\n    case PyCmp_IN:\n        res = PySequence_Contains(w, v);\n        if (res &lt; 0)\n            return NULL;\n        break;\n    case PyCmp_NOT_IN: ...\n    case PyCmp_EXC_MATCH: ...\n    default:\n        return PyObject_RichCompare(v, w, op);\n    }\n    v = res ? Py_True : Py_False;\n    Py_INCREF(v);\n    return v;\n}\n</code></pre>\n\n<p>This is where the paths split. The <code>PyCmp_IN</code> branch does</p>\n\n<pre><code>int\nPySequence_Contains(PyObject *seq, PyObject *ob)\n{\n    Py_ssize_t result;\n    PySequenceMethods *sqm = seq-&gt;ob_type-&gt;tp_as_sequence;\n    if (sqm != NULL &amp;&amp; sqm-&gt;sq_contains != NULL)\n        return (*sqm-&gt;sq_contains)(seq, ob);\n    result = _PySequence_IterSearch(seq, ob, PY_ITERSEARCH_CONTAINS);\n    return Py_SAFE_DOWNCAST(result, Py_ssize_t, int);\n}\n</code></pre>\n\n<p>Note that a tuple is defined as</p>\n\n<pre><code>static PySequenceMethods tuple_as_sequence = {\n    ...\n    (objobjproc)tuplecontains,                  /* sq_contains */\n};\n\nPyTypeObject PyTuple_Type = {\n    ...\n    &amp;tuple_as_sequence,                         /* tp_as_sequence */\n    ...\n};\n</code></pre>\n\n<p>So the branch</p>\n\n<pre><code>if (sqm != NULL &amp;&amp; sqm-&gt;sq_contains != NULL)\n</code></pre>\n\n<p>will be taken and <code>*sqm-&gt;sq_contains</code>, which is the function <code>(objobjproc)tuplecontains</code>, will be taken.</p>\n\n<p>This does</p>\n\n<pre><code>static int\ntuplecontains(PyTupleObject *a, PyObject *el)\n{\n    Py_ssize_t i;\n    int cmp;\n\n    for (i = 0, cmp = 0 ; cmp == 0 &amp;&amp; i &lt; Py_SIZE(a); ++i)\n        cmp = PyObject_RichCompareBool(el, PyTuple_GET_ITEM(a, i),\n                                           Py_EQ);\n    return cmp;\n}\n</code></pre>\n\n<p>...Wait, wasn't that <code>PyObject_RichCompareBool</code> what the other branch took? Nope, that was <code>PyObject_RichCompare</code>.</p>\n\n<p>That code path was short so it likely just comes down to the speed of these two. Let's compare.</p>\n\n<pre><code>int\nPyObject_RichCompareBool(PyObject *v, PyObject *w, int op)\n{\n    PyObject *res;\n    int ok;\n\n    /* Quick result when objects are the same.\n       Guarantees that identity implies equality. */\n    if (v == w) {\n        if (op == Py_EQ)\n            return 1;\n        else if (op == Py_NE)\n            return 0;\n    }\n\n    ...\n}\n</code></pre>\n\n<p>The code path in <code>PyObject_RichCompareBool</code> pretty much immediately terminates. For <code>PyObject_RichCompare</code>, it does</p>\n\n<pre><code>PyObject *\nPyObject_RichCompare(PyObject *v, PyObject *w, int op)\n{\n    PyObject *res;\n\n    assert(Py_LT &lt;= op &amp;&amp; op &lt;= Py_GE);\n    if (v == NULL || w == NULL) { ... }\n    if (Py_EnterRecursiveCall(\" in comparison\"))\n        return NULL;\n    res = do_richcompare(v, w, op);\n    Py_LeaveRecursiveCall();\n    return res;\n}\n</code></pre>\n\n<p>The <code>Py_EnterRecursiveCall</code>/<code>Py_LeaveRecursiveCall</code> combo are not taken in the previous path, but these are relatively quick macros that'll short-circuit after incrementing and decrementing some globals.</p>\n\n<p><code>do_richcompare</code> does:</p>\n\n<pre><code>static PyObject *\ndo_richcompare(PyObject *v, PyObject *w, int op)\n{\n    richcmpfunc f;\n    PyObject *res;\n    int checked_reverse_op = 0;\n\n    if (v-&gt;ob_type != w-&gt;ob_type &amp;&amp; ...) { ... }\n    if ((f = v-&gt;ob_type-&gt;tp_richcompare) != NULL) {\n        res = (*f)(v, w, op);\n        if (res != Py_NotImplemented)\n            return res;\n        ...\n    }\n    ...\n}\n</code></pre>\n\n<p>This does some quick checks to call <code>v-&gt;ob_type-&gt;tp_richcompare</code> which is</p>\n\n<pre><code>PyTypeObject PyUnicode_Type = {\n    ...\n    PyUnicode_RichCompare,      /* tp_richcompare */\n    ...\n};\n</code></pre>\n\n<p>which does</p>\n\n<pre><code>PyObject *\nPyUnicode_RichCompare(PyObject *left, PyObject *right, int op)\n{\n    int result;\n    PyObject *v;\n\n    if (!PyUnicode_Check(left) || !PyUnicode_Check(right))\n        Py_RETURN_NOTIMPLEMENTED;\n\n    if (PyUnicode_READY(left) == -1 ||\n        PyUnicode_READY(right) == -1)\n        return NULL;\n\n    if (left == right) {\n        switch (op) {\n        case Py_EQ:\n        case Py_LE:\n        case Py_GE:\n            /* a string is equal to itself */\n            v = Py_True;\n            break;\n        case Py_NE:\n        case Py_LT:\n        case Py_GT:\n            v = Py_False;\n            break;\n        default:\n            ...\n        }\n    }\n    else if (...) { ... }\n    else { ...}\n    Py_INCREF(v);\n    return v;\n}\n</code></pre>\n\n<p>Namely, this shortcuts on <code>left == right</code>... but only after doing </p>\n\n<pre><code>    if (!PyUnicode_Check(left) || !PyUnicode_Check(right))\n\n    if (PyUnicode_READY(left) == -1 ||\n        PyUnicode_READY(right) == -1)\n</code></pre>\n\n<p>All in all the paths then look something like this (manually recursively inlining, unrolling and pruning known branches)</p>\n\n<pre><code>POP()                           # Stack stuff\nTOP()                           #\n                                #\ncase PyCmp_IN:                  # Dispatch on operation\n                                #\nsqm != NULL                     # Dispatch to builtin op\nsqm-&gt;sq_contains != NULL        #\n*sqm-&gt;sq_contains               #\n                                #\ncmp == 0                        # Do comparison in loop\ni &lt; Py_SIZE(a)                  #\nv == w                          #\nop == Py_EQ                     #\n++i                             # \ncmp == 0                        #\n                                #\nres &lt; 0                         # Convert to Python-space\nres ? Py_True : Py_False        #\nPy_INCREF(v)                    #\n                                #\nPy_DECREF(left)                 # Stack stuff\nPy_DECREF(right)                #\nSET_TOP(res)                    #\nres == NULL                     #\nDISPATCH()                      #\n</code></pre>\n\n<p>vs</p>\n\n<pre><code>POP()                           # Stack stuff\nTOP()                           #\n                                #\ndefault:                        # Dispatch on operation\n                                #\nPy_LT &lt;= op                     # Checking operation\nop &lt;= Py_GE                     #\nv == NULL                       #\nw == NULL                       #\nPy_EnterRecursiveCall(...)      # Recursive check\n                                #\nv-&gt;ob_type != w-&gt;ob_type        # More operation checks\nf = v-&gt;ob_type-&gt;tp_richcompare  # Dispatch to builtin op\nf != NULL                       #\n                                #\n!PyUnicode_Check(left)          # ...More checks\n!PyUnicode_Check(right))        #\nPyUnicode_READY(left) == -1     #\nPyUnicode_READY(right) == -1    #\nleft == right                   # Finally, doing comparison\ncase Py_EQ:                     # Immediately short circuit\nPy_INCREF(v);                   #\n                                #\nres != Py_NotImplemented        #\n                                #\nPy_LeaveRecursiveCall()         # Recursive check\n                                #\nPy_DECREF(left)                 # Stack stuff\nPy_DECREF(right)                #\nSET_TOP(res)                    #\nres == NULL                     #\nDISPATCH()                      #\n</code></pre>\n\n<p>Now, <code>PyUnicode_Check</code> and <code>PyUnicode_READY</code> are pretty cheap since they only check a couple of fields, but it should be obvious that the top one is a smaller code path, it has fewer function calls, only one switch\nstatement and is just a bit thinner.</p>\n\n<h3>TL;DR:</h3>\n\n<p>Both dispatch to <code>if (left_pointer == right_pointer)</code>; the difference is just how much work they do to get there. <code>in</code> just does less.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I know there is a method for python list to return the first index of something</p>\n\n<pre><code>&gt;&gt;&gt; l = list(1, 2, 3)\n&gt;&gt;&gt; l.index(2)\n1\n</code></pre>\n\n<p>Is there something like that for numpy arrays?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Yes, here is the answer given a Numpy array, array, and a value, item, to search for.</p>\n\n<pre><code>itemindex = numpy.where(array==item)\n</code></pre>\n\n<p>The result is a tuple with first all the row indices, then all the column indices.</p>\n\n<p>For example if array is two dimensions and it contained your item at two locations then</p>\n\n<pre><code>array[itemindex[0][0]][itemindex[1][0]]\n</code></pre>\n\n<p>would be equal to your item and so would</p>\n\n<pre><code>array[itemindex[0][1]][itemindex[1][1]]\n</code></pre>\n\n<p><a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.where.html\" rel=\"noreferrer\">numpy.where</a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a function that returns information in seconds, but I need to store that information in hours:minutes:seconds.  Is there an easy way to convert the seconds to this format in python?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>By using the <a href=\"http://docs.python.org/library/functions.html#divmod\" rel=\"noreferrer\"><code>divmod()</code></a> function, which does only a single division to produce both the quotient and the remainder, you can have the result very quickly with only two mathematical operations:</p>\n\n<pre><code>m, s = divmod(seconds, 60)\nh, m = divmod(m, 60)\nprint \"%d:%02d:%02d\" % (h, m, s)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Are there any canned Python methods to convert an Integer (or Long) into a binary string in Python?</p>\n\n<p>There are a myriad of dec2bin() functions out on Google... But I was hoping I could use a built-in function / library.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Python's string format method can take a format spec. </p>\n\n<pre><code>&gt;&gt;&gt; \"{0:b}\".format(10)\n'1010'\n</code></pre>\n\n<p><a href=\"https://docs.python.org/2/library/string.html#formatspec\" rel=\"noreferrer\">Format spec docs for Python 2</a> </p>\n\n<p><a href=\"https://docs.python.org/3/library/string.html#formatspec\" rel=\"noreferrer\">Format spec docs for Python 3</a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>So far I've been using the built-in unittest module (pyUnit) for unit-testing Python code. However, for simple cases it seems like overkill. Being a derivative of xUnit, it appears a bit heavy for the dynamic nature of Python, where I would expect to write less to achieve the same effects. On the other hand, it is built-in, it makes you write your tests in an organized way, and it is tested by time.</p>\n\n<p>The major alternatives I've seen online are:</p>\n\n<ul>\n<li><a href=\"http://pytest.org/\" rel=\"noreferrer\">py.test</a> </li>\n<li><a href=\"http://nose.readthedocs.org/\" rel=\"noreferrer\">nose</a></li>\n</ul>\n\n<p>Which of the frameworks do you prefer, and why? </p>\n\n<hr>\n\n<p><em>Update 10.12.2011:</em> with the recent addition of test auto-discovery and many new features in <code>unittest</code> (in Python 2.7 and 3.2), IMHO it makes less sense to use an external library.</p>\n\n<hr>\n\n<p>Regarding doctest:\nI don't consider it a <em>unit-testing framework</em> per-se. I definitely wouldn't use it to write a large suite of tests for a sizable application. doctest is more suitable for making sure that the examples you provide in the documentation work. It has its place for this need, but it isn't a competitor for unittest, py.test and other frameworks.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>nose</code> isn't really a unit testing framework.  It's a test runner and a great one at that.  It can run tests created using <code>unittest</code>, <code>py.test</code> or <code>doctest</code>.</p>\n\n<p>My preference for unit testing framework is the standard <code>unittest</code> module (also known as <code>pyUnit</code>).  It's similar to other xUnit frameworks and is easy to relate to for people without python background.   There is also pretty good support for it in Eclipse/PyDev</p>\n\n<p>On <code>py.test</code>, I find multiple levels of setup/teardowns very confusing. I also find that it leads to highly unstructured and hard to read unit tests.</p>\n\n<p><code>doctest</code> is OK for simple things, but I find that it's very limiting and doesn't really scale for complex and highly interactive code.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I would like to know what are all the possible values for the timezone argument in the Python library Pytz.</p>\n\n<p><strong>SOLUTION</strong></p>\n\n<pre><code>for tz in pytz.all_timezones:\n    print tz\n\n\nAfrica/Abidjan\nAfrica/Accra\nAfrica/Addis_Ababa\nAfrica/Algiers\nAfrica/Asmara\nAfrica/Asmera\nAfrica/Bamako\nAfrica/Bangui\nAfrica/Banjul\nAfrica/Bissau\nAfrica/Blantyre\nAfrica/Brazzaville\nAfrica/Bujumbura\nAfrica/Cairo\nAfrica/Casablanca\nAfrica/Ceuta\nAfrica/Conakry\nAfrica/Dakar\nAfrica/Dar_es_Salaam\nAfrica/Djibouti\nAfrica/Douala\nAfrica/El_Aaiun\nAfrica/Freetown\nAfrica/Gaborone\nAfrica/Harare\nAfrica/Johannesburg\nAfrica/Juba\nAfrica/Kampala\nAfrica/Khartoum\nAfrica/Kigali\nAfrica/Kinshasa\nAfrica/Lagos\nAfrica/Libreville\nAfrica/Lome\nAfrica/Luanda\nAfrica/Lubumbashi\nAfrica/Lusaka\nAfrica/Malabo\nAfrica/Maputo\nAfrica/Maseru\nAfrica/Mbabane\nAfrica/Mogadishu\nAfrica/Monrovia\nAfrica/Nairobi\nAfrica/Ndjamena\nAfrica/Niamey\nAfrica/Nouakchott\nAfrica/Ouagadougou\nAfrica/Porto-Novo\nAfrica/Sao_Tome\nAfrica/Timbuktu\nAfrica/Tripoli\nAfrica/Tunis\nAfrica/Windhoek\nAmerica/Adak\nAmerica/Anchorage\nAmerica/Anguilla\nAmerica/Antigua\nAmerica/Araguaina\nAmerica/Argentina/Buenos_Aires\nAmerica/Argentina/Catamarca\nAmerica/Argentina/ComodRivadavia\nAmerica/Argentina/Cordoba\nAmerica/Argentina/Jujuy\nAmerica/Argentina/La_Rioja\nAmerica/Argentina/Mendoza\nAmerica/Argentina/Rio_Gallegos\nAmerica/Argentina/Salta\nAmerica/Argentina/San_Juan\nAmerica/Argentina/San_Luis\nAmerica/Argentina/Tucuman\nAmerica/Argentina/Ushuaia\nAmerica/Aruba\nAmerica/Asuncion\nAmerica/Atikokan\nAmerica/Atka\nAmerica/Bahia\nAmerica/Bahia_Banderas\nAmerica/Barbados\nAmerica/Belem\nAmerica/Belize\nAmerica/Blanc-Sablon\nAmerica/Boa_Vista\nAmerica/Bogota\nAmerica/Boise\nAmerica/Buenos_Aires\nAmerica/Cambridge_Bay\nAmerica/Campo_Grande\nAmerica/Cancun\nAmerica/Caracas\nAmerica/Catamarca\nAmerica/Cayenne\nAmerica/Cayman\nAmerica/Chicago\nAmerica/Chihuahua\nAmerica/Coral_Harbour\nAmerica/Cordoba\nAmerica/Costa_Rica\nAmerica/Creston\nAmerica/Cuiaba\nAmerica/Curacao\nAmerica/Danmarkshavn\nAmerica/Dawson\nAmerica/Dawson_Creek\nAmerica/Denver\nAmerica/Detroit\nAmerica/Dominica\nAmerica/Edmonton\nAmerica/Eirunepe\nAmerica/El_Salvador\nAmerica/Ensenada\nAmerica/Fort_Wayne\nAmerica/Fortaleza\nAmerica/Glace_Bay\nAmerica/Godthab\nAmerica/Goose_Bay\nAmerica/Grand_Turk\nAmerica/Grenada\nAmerica/Guadeloupe\nAmerica/Guatemala\nAmerica/Guayaquil\nAmerica/Guyana\nAmerica/Halifax\nAmerica/Havana\nAmerica/Hermosillo\nAmerica/Indiana/Indianapolis\nAmerica/Indiana/Knox\nAmerica/Indiana/Marengo\nAmerica/Indiana/Petersburg\nAmerica/Indiana/Tell_City\nAmerica/Indiana/Vevay\nAmerica/Indiana/Vincennes\nAmerica/Indiana/Winamac\nAmerica/Indianapolis\nAmerica/Inuvik\nAmerica/Iqaluit\nAmerica/Jamaica\nAmerica/Jujuy\nAmerica/Juneau\nAmerica/Kentucky/Louisville\nAmerica/Kentucky/Monticello\nAmerica/Knox_IN\nAmerica/Kralendijk\nAmerica/La_Paz\nAmerica/Lima\nAmerica/Los_Angeles\nAmerica/Louisville\nAmerica/Lower_Princes\nAmerica/Maceio\nAmerica/Managua\nAmerica/Manaus\nAmerica/Marigot\nAmerica/Martinique\nAmerica/Matamoros\nAmerica/Mazatlan\nAmerica/Mendoza\nAmerica/Menominee\nAmerica/Merida\nAmerica/Metlakatla\nAmerica/Mexico_City\nAmerica/Miquelon\nAmerica/Moncton\nAmerica/Monterrey\nAmerica/Montevideo\nAmerica/Montreal\nAmerica/Montserrat\nAmerica/Nassau\nAmerica/New_York\nAmerica/Nipigon\nAmerica/Nome\nAmerica/Noronha\nAmerica/North_Dakota/Beulah\nAmerica/North_Dakota/Center\nAmerica/North_Dakota/New_Salem\nAmerica/Ojinaga\nAmerica/Panama\nAmerica/Pangnirtung\nAmerica/Paramaribo\nAmerica/Phoenix\nAmerica/Port-au-Prince\nAmerica/Port_of_Spain\nAmerica/Porto_Acre\nAmerica/Porto_Velho\nAmerica/Puerto_Rico\nAmerica/Rainy_River\nAmerica/Rankin_Inlet\nAmerica/Recife\nAmerica/Regina\nAmerica/Resolute\nAmerica/Rio_Branco\nAmerica/Rosario\nAmerica/Santa_Isabel\nAmerica/Santarem\nAmerica/Santiago\nAmerica/Santo_Domingo\nAmerica/Sao_Paulo\nAmerica/Scoresbysund\nAmerica/Shiprock\nAmerica/Sitka\nAmerica/St_Barthelemy\nAmerica/St_Johns\nAmerica/St_Kitts\nAmerica/St_Lucia\nAmerica/St_Thomas\nAmerica/St_Vincent\nAmerica/Swift_Current\nAmerica/Tegucigalpa\nAmerica/Thule\nAmerica/Thunder_Bay\nAmerica/Tijuana\nAmerica/Toronto\nAmerica/Tortola\nAmerica/Vancouver\nAmerica/Virgin\nAmerica/Whitehorse\nAmerica/Winnipeg\nAmerica/Yakutat\nAmerica/Yellowknife\nAntarctica/Casey\nAntarctica/Davis\nAntarctica/DumontDUrville\nAntarctica/Macquarie\nAntarctica/Mawson\nAntarctica/McMurdo\nAntarctica/Palmer\nAntarctica/Rothera\nAntarctica/South_Pole\nAntarctica/Syowa\nAntarctica/Vostok\nArctic/Longyearbyen\nAsia/Aden\nAsia/Almaty\nAsia/Amman\nAsia/Anadyr\nAsia/Aqtau\nAsia/Aqtobe\nAsia/Ashgabat\nAsia/Ashkhabad\nAsia/Baghdad\nAsia/Bahrain\nAsia/Baku\nAsia/Bangkok\nAsia/Beirut\nAsia/Bishkek\nAsia/Brunei\nAsia/Calcutta\nAsia/Choibalsan\nAsia/Chongqing\nAsia/Chungking\nAsia/Colombo\nAsia/Dacca\nAsia/Damascus\nAsia/Dhaka\nAsia/Dili\nAsia/Dubai\nAsia/Dushanbe\nAsia/Gaza\nAsia/Harbin\nAsia/Hebron\nAsia/Ho_Chi_Minh\nAsia/Hong_Kong\nAsia/Hovd\nAsia/Irkutsk\nAsia/Istanbul\nAsia/Jakarta\nAsia/Jayapura\nAsia/Jerusalem\nAsia/Kabul\nAsia/Kamchatka\nAsia/Karachi\nAsia/Kashgar\nAsia/Kathmandu\nAsia/Katmandu\nAsia/Kolkata\nAsia/Krasnoyarsk\nAsia/Kuala_Lumpur\nAsia/Kuching\nAsia/Kuwait\nAsia/Macao\nAsia/Macau\nAsia/Magadan\nAsia/Makassar\nAsia/Manila\nAsia/Muscat\nAsia/Nicosia\nAsia/Novokuznetsk\nAsia/Novosibirsk\nAsia/Omsk\nAsia/Oral\nAsia/Phnom_Penh\nAsia/Pontianak\nAsia/Pyongyang\nAsia/Qatar\nAsia/Qyzylorda\nAsia/Rangoon\nAsia/Riyadh\nAsia/Saigon\nAsia/Sakhalin\nAsia/Samarkand\nAsia/Seoul\nAsia/Shanghai\nAsia/Singapore\nAsia/Taipei\nAsia/Tashkent\nAsia/Tbilisi\nAsia/Tehran\nAsia/Tel_Aviv\nAsia/Thimbu\nAsia/Thimphu\nAsia/Tokyo\nAsia/Ujung_Pandang\nAsia/Ulaanbaatar\nAsia/Ulan_Bator\nAsia/Urumqi\nAsia/Vientiane\nAsia/Vladivostok\nAsia/Yakutsk\nAsia/Yekaterinburg\nAsia/Yerevan\nAtlantic/Azores\nAtlantic/Bermuda\nAtlantic/Canary\nAtlantic/Cape_Verde\nAtlantic/Faeroe\nAtlantic/Faroe\nAtlantic/Jan_Mayen\nAtlantic/Madeira\nAtlantic/Reykjavik\nAtlantic/South_Georgia\nAtlantic/St_Helena\nAtlantic/Stanley\nAustralia/ACT\nAustralia/Adelaide\nAustralia/Brisbane\nAustralia/Broken_Hill\nAustralia/Canberra\nAustralia/Currie\nAustralia/Darwin\nAustralia/Eucla\nAustralia/Hobart\nAustralia/LHI\nAustralia/Lindeman\nAustralia/Lord_Howe\nAustralia/Melbourne\nAustralia/NSW\nAustralia/North\nAustralia/Perth\nAustralia/Queensland\nAustralia/South\nAustralia/Sydney\nAustralia/Tasmania\nAustralia/Victoria\nAustralia/West\nAustralia/Yancowinna\nBrazil/Acre\nBrazil/DeNoronha\nBrazil/East\nBrazil/West\nCET\nCST6CDT\nCanada/Atlantic\nCanada/Central\nCanada/East-Saskatchewan\nCanada/Eastern\nCanada/Mountain\nCanada/Newfoundland\nCanada/Pacific\nCanada/Saskatchewan\nCanada/Yukon\nChile/Continental\nChile/EasterIsland\nCuba\nEET\nEST\nEST5EDT\nEgypt\nEire\nEtc/GMT\nEtc/GMT+0\nEtc/GMT+1\nEtc/GMT+10\nEtc/GMT+11\nEtc/GMT+12\nEtc/GMT+2\nEtc/GMT+3\nEtc/GMT+4\nEtc/GMT+5\nEtc/GMT+6\nEtc/GMT+7\nEtc/GMT+8\nEtc/GMT+9\nEtc/GMT-0\nEtc/GMT-1\nEtc/GMT-10\nEtc/GMT-11\nEtc/GMT-12\nEtc/GMT-13\nEtc/GMT-14\nEtc/GMT-2\nEtc/GMT-3\nEtc/GMT-4\nEtc/GMT-5\nEtc/GMT-6\nEtc/GMT-7\nEtc/GMT-8\nEtc/GMT-9\nEtc/GMT0\nEtc/Greenwich\nEtc/UCT\nEtc/UTC\nEtc/Universal\nEtc/Zulu\nEurope/Amsterdam\nEurope/Andorra\nEurope/Athens\nEurope/Belfast\nEurope/Belgrade\nEurope/Berlin\nEurope/Bratislava\nEurope/Brussels\nEurope/Bucharest\nEurope/Budapest\nEurope/Chisinau\nEurope/Copenhagen\nEurope/Dublin\nEurope/Gibraltar\nEurope/Guernsey\nEurope/Helsinki\nEurope/Isle_of_Man\nEurope/Istanbul\nEurope/Jersey\nEurope/Kaliningrad\nEurope/Kiev\nEurope/Lisbon\nEurope/Ljubljana\nEurope/London\nEurope/Luxembourg\nEurope/Madrid\nEurope/Malta\nEurope/Mariehamn\nEurope/Minsk\nEurope/Monaco\nEurope/Moscow\nEurope/Nicosia\nEurope/Oslo\nEurope/Paris\nEurope/Podgorica\nEurope/Prague\nEurope/Riga\nEurope/Rome\nEurope/Samara\nEurope/San_Marino\nEurope/Sarajevo\nEurope/Simferopol\nEurope/Skopje\nEurope/Sofia\nEurope/Stockholm\nEurope/Tallinn\nEurope/Tirane\nEurope/Tiraspol\nEurope/Uzhgorod\nEurope/Vaduz\nEurope/Vatican\nEurope/Vienna\nEurope/Vilnius\nEurope/Volgograd\nEurope/Warsaw\nEurope/Zagreb\nEurope/Zaporozhye\nEurope/Zurich\nGB\nGB-Eire\nGMT\nGMT+0\nGMT-0\nGMT0\nGreenwich\nHST\nHongkong\nIceland\nIndian/Antananarivo\nIndian/Chagos\nIndian/Christmas\nIndian/Cocos\nIndian/Comoro\nIndian/Kerguelen\nIndian/Mahe\nIndian/Maldives\nIndian/Mauritius\nIndian/Mayotte\nIndian/Reunion\nIran\nIsrael\nJamaica\nJapan\nKwajalein\nLibya\nMET\nMST\nMST7MDT\nMexico/BajaNorte\nMexico/BajaSur\nMexico/General\nNZ\nNZ-CHAT\nNavajo\nPRC\nPST8PDT\nPacific/Apia\nPacific/Auckland\nPacific/Chatham\nPacific/Chuuk\nPacific/Easter\nPacific/Efate\nPacific/Enderbury\nPacific/Fakaofo\nPacific/Fiji\nPacific/Funafuti\nPacific/Galapagos\nPacific/Gambier\nPacific/Guadalcanal\nPacific/Guam\nPacific/Honolulu\nPacific/Johnston\nPacific/Kiritimati\nPacific/Kosrae\nPacific/Kwajalein\nPacific/Majuro\nPacific/Marquesas\nPacific/Midway\nPacific/Nauru\nPacific/Niue\nPacific/Norfolk\nPacific/Noumea\nPacific/Pago_Pago\nPacific/Palau\nPacific/Pitcairn\nPacific/Pohnpei\nPacific/Ponape\nPacific/Port_Moresby\nPacific/Rarotonga\nPacific/Saipan\nPacific/Samoa\nPacific/Tahiti\nPacific/Tarawa\nPacific/Tongatapu\nPacific/Truk\nPacific/Wake\nPacific/Wallis\nPacific/Yap\nPoland\nPortugal\nROC\nROK\nSingapore\nTurkey\nUCT\nUS/Alaska\nUS/Aleutian\nUS/Arizona\nUS/Central\nUS/East-Indiana\nUS/Eastern\nUS/Hawaii\nUS/Indiana-Starke\nUS/Michigan\nUS/Mountain\nUS/Pacific\nUS/Pacific-New\nUS/Samoa\nUTC\nUniversal\nW-SU\nWET\nZulu\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can list all the available timezones with <code>pytz.all_timezones</code>:</p>\n\n<pre><code>In [40]: import pytz\nIn [41]: pytz.all_timezones\nOut[42]: \n['Africa/Abidjan',\n 'Africa/Accra',\n 'Africa/Addis_Ababa',\n ...]\n</code></pre>\n\n<p>There is also <code>pytz.common_timezones</code>:</p>\n\n<pre><code>In [45]: len(pytz.common_timezones)\nOut[45]: 403\n\nIn [46]: len(pytz.all_timezones)\nOut[46]: 563\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I know a list comprehension will do this, but I was wondering if there is an even shorter (and more Pythonic?) approach.</p>\n\n<p>I want to create a series of lists, all of varying length. Each list will contain the same element e, repeated n times (where n = length of the list). How do I create the lists, without doing</p>\n\n<pre><code>[e for number in xrange(n)]\n</code></pre>\n\n<p>for each list?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can also write:</p>\n\n<pre><code>[e] * n\n</code></pre>\n\n<p>You should note that if e is for example an empty list you get a list with n references to the same list, not n independent empty lists. </p>\n\n<p><strong>Performance testing</strong></p>\n\n<p>At first glance it <em>seems</em> that repeat is the fastest way to create a list with n identical elements:</p>\n\n<pre><code>&gt;&gt;&gt; timeit.timeit('itertools.repeat(0, 10)', 'import itertools', number = 1000000)\n0.37095273281943264\n&gt;&gt;&gt; timeit.timeit('[0] * 10', 'import itertools', number = 1000000)\n0.5577236771712819\n</code></pre>\n\n<p>But wait - it's not a fair test...</p>\n\n<pre><code>&gt;&gt;&gt; itertools.repeat(0, 10)\nrepeat(0, 10)  # Not a list!!!\n</code></pre>\n\n<p>The function <code>itertools.repeat</code> doesn't actually create the list, it just creates an object that can be used to create a list if you wish! Let's try that again, but converting to a list:</p>\n\n<pre><code>&gt;&gt;&gt; timeit.timeit('list(itertools.repeat(0, 10))', 'import itertools', number = 1000000)\n1.7508119747063233\n</code></pre>\n\n<p>So if you want a list, use <code>[e] * n</code>. If you want to generate the elements lazily, use <code>repeat</code>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I want to set up a complete Python IDE in Sublime Text 2.</p>\n\n<p>I want to know how to run the Python code from within the editor. Is it done using build system? How do I do it ?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Tools -&gt; Build System -&gt; (choose) Python then:</p>\n\n<p><strong>To Run:</strong></p>\n\n<pre><code>      Tools -&gt; Build\n\n      -or-\n\n      Ctrl + B\n\n      CMD + B  (OSX)\n</code></pre>\n\n<p><em>This would start your file in the console which should be at the bottom of the editor.</em></p>\n\n<p><strong>To Stop:</strong></p>\n\n<pre><code>       Ctrl + Break or Tools -&gt; Cancel Build\n</code></pre>\n\n<p>You can find out where your <code>Break</code> key is here:  <a href=\"http://en.wikipedia.org/wiki/Break_key\" rel=\"noreferrer\">http://en.wikipedia.org/wiki/Break_key</a>.    </p>\n\n<p>Note: <code>CTRL + C</code> will <strong>NOT</strong> work.</p>\n\n<p><strong>What to do when <code>Ctrl + Break</code> does not work:</strong></p>\n\n<p>Go to: </p>\n\n<blockquote>\n  <p>Preferences -&gt; Key Bindings - User</p>\n</blockquote>\n\n<p>and paste the line below:  </p>\n\n<pre><code>{\"keys\": [\"ctrl+shift+c\"], \"command\": \"exec\", \"args\": {\"kill\": true} } \n</code></pre>\n\n<p>Now, you can use <code>ctrl+shift+c</code> instead of <code>CTRL+BREAK</code></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I get the following error when attempting to install <code>psycopg2</code> via pip on Mavericks 10.9:</p>\n\n<pre><code>clang: error: unknown argument: '-mno-fused-madd' [-Wunused-command-line-argument-hard-error-in-future]\n</code></pre>\n\n<p>Not sure how to proceed and have searched here and elsewhere for this particular error.  Any help is much appreciated!</p>\n\n<p>Here is the complete output from pip:</p>\n\n<pre><code>$ pip install psycopg2\nDownloading/unpacking psycopg2\n  Downloading psycopg2-2.5.2.tar.gz (685kB): 685kB downloaded\n  Running setup.py (path:/private/var/folders/0z/ljjwsjmn4v9_zwm81vhxj69m0000gn/T/pip_build_tino/psycopg2/setup.py) egg_info for package psycopg2\n\nInstalling collected packages: psycopg2\n  Running setup.py install for psycopg2\n    building 'psycopg2._psycopg' extension\n    cc -fno-strict-aliasing -fno-common -dynamic -arch x86_64 -arch i386 -g -Os -pipe -fno-common -fno-strict-aliasing -fwrapv -mno-fused-madd -DENABLE_DTRACE -DMACOSX -DNDEBUG -Wall -Wstrict-prototypes -Wshorten-64-to-32 -DNDEBUG -g -fwrapv -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch x86_64 -arch i386 -pipe -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=\"2.5.2 (dt dec pq3 ext)\" -DPG_VERSION_HEX=0x090303 -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -I. -I/usr/local/Cellar/postgresql/9.3.3/include -I/usr/local/Cellar/postgresql/9.3.3/include/server -c psycopg/psycopgmodule.c -o build/temp.macosx-10.9-intel-2.7/psycopg/psycopgmodule.o\n    clang: error: unknown argument: '-mno-fused-madd' [-Wunused-command-line-argument-hard-error-in-future]\n    clang: note: this will be a hard error (cannot be downgraded to a warning) in the future\n    error: command 'cc' failed with exit status 1\n    Complete output from command /usr/bin/python -c \"import setuptools, tokenize;__file__='/private/var/folders/0z/ljjwsjmn4v9_zwm81vhxj69m0000gn/T/pip_build_tino/psycopg2/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\\r\\n', '\\n'), __file__, 'exec'))\" install --record /var/folders/0z/ljjwsjmn4v9_zwm81vhxj69m0000gn/T/pip-bnWiwB-record/install-record.txt --single-version-externally-managed --compile:\n    running install\n\nrunning build\n\nrunning build_py\n\ncreating build\n\ncreating build/lib.macosx-10.9-intel-2.7\n\ncreating build/lib.macosx-10.9-intel-2.7/psycopg2\n\ncopying lib/__init__.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2\n\ncopying lib/_json.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2\n\ncopying lib/_range.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2\n\ncopying lib/errorcodes.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2\n\ncopying lib/extensions.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2\n\ncopying lib/extras.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2\n\ncopying lib/pool.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2\n\ncopying lib/psycopg1.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2\n\ncopying lib/tz.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2\n\ncreating build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/__init__.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/dbapi20.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/dbapi20_tpc.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_async.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_bug_gc.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_bugX000.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_cancel.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_connection.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_copy.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_cursor.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_dates.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_extras_dictcursor.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_green.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_lobject.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_module.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_notify.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_psycopg2_dbapi20.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_quote.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_transaction.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_types_basic.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_types_extras.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/test_with.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/testconfig.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\ncopying tests/testutils.py -&gt; build/lib.macosx-10.9-intel-2.7/psycopg2/tests\n\nrunning build_ext\n\nbuilding 'psycopg2._psycopg' extension\n\ncreating build/temp.macosx-10.9-intel-2.7\n\ncreating build/temp.macosx-10.9-intel-2.7/psycopg\n\ncc -fno-strict-aliasing -fno-common -dynamic -arch x86_64 -arch i386 -g -Os -pipe -fno-common -fno-strict-aliasing -fwrapv -mno-fused-madd -DENABLE_DTRACE -DMACOSX -DNDEBUG -Wall -Wstrict-prototypes -Wshorten-64-to-32 -DNDEBUG -g -fwrapv -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -arch x86_64 -arch i386 -pipe -DPSYCOPG_DEFAULT_PYDATETIME=1 -DPSYCOPG_VERSION=\"2.5.2 (dt dec pq3 ext)\" -DPG_VERSION_HEX=0x090303 -DPSYCOPG_EXTENSIONS=1 -DPSYCOPG_NEW_BOOLEAN=1 -DHAVE_PQFREEMEM=1 -I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -I. -I/usr/local/Cellar/postgresql/9.3.3/include -I/usr/local/Cellar/postgresql/9.3.3/include/server -c psycopg/psycopgmodule.c -o build/temp.macosx-10.9-intel-2.7/psycopg/psycopgmodule.o\n\nclang: error: unknown argument: '-mno-fused-madd' [-Wunused-command-line-argument-hard-error-in-future]\n\nclang: note: this will be a hard error (cannot be downgraded to a warning) in the future\n\nerror: command 'cc' failed with exit status 1\n\n----------------------------------------\nCleaning up...\nCommand /usr/bin/python -c \"import setuptools, tokenize;__file__='/private/var/folders/0z/ljjwsjmn4v9_zwm81vhxj69m0000gn/T/pip_build_tino/psycopg2/setup.py';exec(compile(getattr(tokenize, 'open', open)(__file__).read().replace('\\r\\n', '\\n'), __file__, 'exec'))\" install --record /var/folders/0z/ljjwsjmn4v9_zwm81vhxj69m0000gn/T/pip-bnWiwB-record/install-record.txt --single-version-externally-managed --compile failed with error code 1 in /private/var/folders/0z/ljjwsjmn4v9_zwm81vhxj69m0000gn/T/pip_build_tino/psycopg2\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can tell clang to not raise this as an error by setting the following environment variables prior compilation:</p>\n\n<pre><code>export CFLAGS=-Qunused-arguments\nexport CPPFLAGS=-Qunused-arguments\n</code></pre>\n\n<p>Then <code>pip install psycopg2</code>should work.</p>\n\n<p>I had the same when trying to <code>pip install lxml</code>.</p>\n\n<p>Edit: if you are installing as superuser (which will likely be the case if you are trying to append to <code>/Library/Python/2.7/site-packages</code>, the native Apple factory-installed Python distribution which ships with OS X, rather than to some other Python distribution which you have subsequently installed yourself), then you will need to do, as described by @Thijs Kuipers in comments below:</p>\n\n<pre><code>sudo -E pip install psycopg2\n</code></pre>\n\n<p>or the equivalent, for whatever other package name you may be substituting in place of <code>psycopg2</code>.</p>\n\n<p>UPDATE [2014-05-16]: Apple has fixed this problem with updated system Pythons (2.7, 2.6, and 2.5) in <code>OS X 10.9.3</code> so the workaround is no longer necessary when using the latest Mavericks and <code>Xcode 5.1+</code>.  However, as of now, the workaround is still required for <code>OS X 10.8.x</code> (Mountain Lion, currently 10.8.5) if you are using <code>Xcode 5.1+</code> there.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I know the obvious answer is to use virtualenv and virtualenvwrapper, but for various reasons I can't/don't want to do that.</p>\n\n<p>So how do I modify the command</p>\n\n<pre><code>pip install package_name\n</code></pre>\n\n<p>to make <code>pip</code> install the package somewhere other than the default <code>site-packages</code>?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use:</p>\n\n<pre><code>pip install --install-option=\"--prefix=$PREFIX_PATH\" package_name\n</code></pre>\n\n<p>You might also want to use <code>--ignore-installed</code> to force all dependencies to be reinstalled using this new prefix.  You can use <code>--install-option</code> to multiple times to add any of the options you can use with <code>python setup.py install</code> (<code>--prefix</code> is probably what you want, but there are a bunch more options you could use).</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Are there any Ruby / Python features that are blocking implementation of optimizations (e.g. <a href=\"http://en.wikipedia.org/wiki/Inline_caching\">inline caching</a>) V8 engine has?</p>\n\n<p>Python is co-developed by Google guys so it shouldn't be blocked by software patents. </p>\n\n<p>Or this is rather matter of resources put into the V8 project by Google. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<blockquote>\n  <p>What blocks Ruby, Python to get Javascript V8 speed?</p>\n</blockquote>\n\n<p>Nothing.</p>\n\n<p>Well, okay: money. (And time, people, resources, but if you have money, you can buy those.)</p>\n\n<p>V8 has a team of brilliant, highly-specialized, highly-experienced (and thus highly-paid) engineers working on it, that have decades of experience (I'm talking individually\u00a0\u2013 collectively it's more like centuries) in creating high-performance execution engines for dynamic OO languages. They are basically the same people who also created the Sun HotSpot JVM (among many others).</p>\n\n<p>Lars Bak, the lead developer, has been literally working on VMs for 25 years (and all of those VMs have lead up to V8), which is basically his entire (professional) life. Some of the people writing Ruby VMs aren't even 25 years old.</p>\n\n<blockquote>\n  <p>Are there any Ruby / Python features that are blocking implementation of optimizations (e.g. inline caching) V8 engine has?</p>\n</blockquote>\n\n<p>Given that at least IronRuby, JRuby, MagLev, MacRuby and Rubinius have either monomorphic (IronRuby) or polymorphic inline caching, the answer is obviously no.</p>\n\n<p>Modern Ruby implementations already do a great deal of optimizations. For example, for certain operations, Rubinius's <code>Hash</code> class is faster than YARV's. Now, this doesn't sound terribly exciting until you realize that Rubinius's <code>Hash</code> class is implemented in 100% pure Ruby, while YARV's is implemented in 100% hand-optimized C.</p>\n\n<p>So, at least in some cases, Rubinius can generate better code than GCC!</p>\n\n<blockquote>\n  <p>Or this is rather matter of resources put into the V8 project by Google.</p>\n</blockquote>\n\n<p>Yes. Not just Google. The lineage of V8's source code is 25 years old now. The people who are working on V8 also created the Self VM (to this day one of the fastest dynamic OO language execution engines ever created), the Animorphic Smalltalk VM (to this day one of the fastest Smalltalk execution engines ever created), the HotSpot JVM (the fastest JVM ever created, probably the fastest VM period) and OOVM (one of the most efficient Smalltalk VMs ever created).</p>\n\n<p>In fact, Lars Bak, the lead developer of V8, worked on <em>every single one</em> of those, plus a few others.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm writing a python application that will make heavy use of a graph data structure. Nothing horribly complex, but I'm thinking some sort of graph/graph-algorithms library would help me out. I've googled around, but I don't find anything that particularly leaps out at me.</p>\n\n<p>Anyone have any good recommendations?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There are two excellent choices:</p>\n\n<p><a href=\"http://networkx.github.io/\" rel=\"noreferrer\">NetworkX</a></p>\n\n<p>and </p>\n\n<p><a href=\"http://igraph.org/\" rel=\"noreferrer\">igraph</a></p>\n\n<p>I like NetworkX, but I read good things about igraph as well.  I routinely use NetworkX with graphs with 1 million nodes with no problem (it's about double the overhead of a dict of size V + E)</p>\n\n<p>If you want a feature comparison, see this from the Networkx-discuss list</p>\n\n<p><a href=\"http://groups.google.com/group/networkx-discuss/t/7597ca97abbb3f90?hl=en\" rel=\"noreferrer\">Feature comparison thread</a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>It seems so \"dirty\" emptying a list in this way:</p>\n\n<pre><code>while len(alist) &gt; 0 : alist.pop()\n</code></pre>\n\n<p>Does a clear way exist to do that?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This actually removes the contents from the list, not replaces the old label with a new empty list</p>\n\n<pre><code>del lst[:]\n</code></pre>\n\n<p>example:</p>\n\n<pre><code>lst1 = [1, 2, 3]\nlst2 = lst1\ndel lst1[:]\nprint(lst2)\n</code></pre>\n\n<p>For the sake of completeness, slice assignment achieves the same effect:</p>\n\n<pre><code>lst[:] = []\n</code></pre>\n\n<p>and can be used to shrink a part of the list while replacing a part at the same time (but is out of scope of the question).</p>\n\n<p>Note that doing <code>lst = []</code> does not empty the list, just creates a new object and binds it to the variable <code>lst</code>, but the old list will still have the same elements, and effect will be apparent if it had other variable bindings.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/127803/how-to-parse-an-iso-8601-formatted-date\" dir=\"ltr\">How to parse an ISO 8601-formatted date?</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    21 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>I'm getting a datetime string in a format like \"2009-05-28T16:15:00\" (this is ISO 8601, I believe) one hack-ish option seems to be to parse the string using <code>time.strptime</code> and passing the first 6 elements of the touple into the datetime constructor, like:</p>\n\n<pre><code>datetime.datetime(*time.strptime(\"2007-03-04T21:08:12\", \"%Y-%m-%dT%H:%M:%S\")[:6])\n</code></pre>\n\n<p>I haven't been able to find a \"cleaner\" way of doing this, is there one?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I prefer using the <a href=\"https://pypi.python.org/pypi/python-dateutil/2.6.0\" rel=\"noreferrer\">dateutil</a> library for timezone handling and generally solid date parsing. If you were to get an ISO 8601 string like: 2010-05-08T23:41:54.000Z you'd have a fun time parsing that with strptime, especially if you didn't know up front whether or not the timezone was included. pyiso8601 has a couple of issues (check their tracker) that I ran into during my usage and it hasn't been updated in a few years. dateutil, by contrast, has been active and worked for me: </p>\n\n<pre><code>import dateutil.parser\nyourdate = dateutil.parser.parse(datestring)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>When writing custom classes it is often important to allow equivalence by means of the <code>==</code> and <code>!=</code> operators. In Python, this is made possible by implementing the <code>__eq__</code> and <code>__ne__</code> special methods, respectively. The easiest way I've found to do this is the following method:</p>\n\n<pre><code>class Foo:\n    def __init__(self, item):\n        self.item = item\n\n    def __eq__(self, other):\n        if isinstance(other, self.__class__):\n            return self.__dict__ == other.__dict__\n        else:\n            return False\n\n    def __ne__(self, other):\n        return not self.__eq__(other)\n</code></pre>\n\n<p>Do you know of more elegant means of doing this? Do you know of any particular disadvantages to using the above method of comparing <code>__dict__</code>s?</p>\n\n<p><strong>Note</strong>: A bit of clarification--when <code>__eq__</code> and <code>__ne__</code> are undefined, you'll find this behavior:</p>\n\n<pre><code>&gt;&gt;&gt; a = Foo(1)\n&gt;&gt;&gt; b = Foo(1)\n&gt;&gt;&gt; a is b\nFalse\n&gt;&gt;&gt; a == b\nFalse\n</code></pre>\n\n<p>That is, <code>a == b</code> evaluates to <code>False</code> because it really runs <code>a is b</code>, a test of identity (i.e., \"Is <code>a</code> the same object as <code>b</code>?\").</p>\n\n<p>When <code>__eq__</code> and <code>__ne__</code> are defined, you'll find this behavior (which is the one we're after):</p>\n\n<pre><code>&gt;&gt;&gt; a = Foo(1)\n&gt;&gt;&gt; b = Foo(1)\n&gt;&gt;&gt; a is b\nFalse\n&gt;&gt;&gt; a == b\nTrue\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Sorry, but non of the answers fully \"work\".\nConsider the simple problem:</p>\n\n<pre><code>class Number:\n    \"\"\"Very basic\"\"\"\n    def __init__(self, some_number):\n        self.some_number = some_number\n\nn1 = Number(1)\nn2 = Number(1)\n\nprint n1 == n2 # False -- oops\n</code></pre>\n\n<p>So, Python by default uses the id of objects for comparison.</p>\n\n<pre><code>print id(n1) # 140400634555856\nprint id(n2) # 140400634555920\n</code></pre>\n\n<p>Overriding the <code>__eq__</code> function seems to solve the problem:</p>\n\n<pre><code>def __eq__(self, other):\n    \"\"\"Override the default Equals behavior\"\"\"\n    if isinstance(other, self.__class__):\n        return self.__dict__ == other.__dict__\n    return False\n\nprint n1 == n2 # True\nprint n1 != n2 # True -- oops\n</code></pre>\n\n<p>Always remember to add the <code>__ne__</code> function override:</p>\n\n<pre><code>def __ne__(self, other):\n    \"\"\"Define a non-equality test\"\"\"\n    return not self.__eq__(other)\n\nprint n1 == n2 # True\nprint n1 != n2 # False\n</code></pre>\n\n<p>But that doesn't solve all our problems.\nLet's add a subclass:</p>\n\n<pre><code>class NumberPlus(Number):\n    pass\n\nn3 = NumberPlus(1)\n\nprint n1 == n3 # True\nprint n3 == n1 # False -- oops\n</code></pre>\n\n<p>Note - new style classes behave <a href=\"https://stackoverflow.com/a/12984987/78234\">a bit differently</a> yet I will provide a generic solution.  </p>\n\n<p>To fix we need to return the singleton <code>NotImplemented</code> when the object types do not match, delegating the result to <code>superclass.__eq__(subclass)</code>.  </p>\n\n<p>The result looks like this:</p>\n\n<pre><code>    def __eq__(self, other):\n        \"\"\"Override the default Equals behavior\"\"\"\n        if isinstance(other, self.__class__):\n            return self.__dict__ == other.__dict__\n        return NotImplemented\n\n    def __ne__(self, other):\n        \"\"\"Define a non-equality test\"\"\"\n        if isinstance(other, self.__class__):\n            return not self.__eq__(other)\n        return NotImplemented\n</code></pre>\n\n<p>Are we there yet? Not quite.\nHow many unique numbers do we have?</p>\n\n<pre><code>print len(set([n1, n2, n3])) # 3 -- oops\n</code></pre>\n\n<p>Hmmm. Sets use the hashes of objects, and by default Python returns the id() of the object as a hash. Let's try to override:</p>\n\n<pre><code>def __hash__(self):\n    \"\"\"Override the default hash behavior (that returns the id or the object)\"\"\"\n    return hash(tuple(sorted(self.__dict__.items())))\n\nprint len(set([n1, n2, n3])) # 1\n</code></pre>\n\n<p>The end result looks like this (I added some assertions at the end for validation):</p>\n\n<pre><code>class Number(object):\n    \"\"\"Very basic\"\"\"\n    def __init__(self, some_number):\n        self.some_number = some_number\n\n    def __eq__(self, other):\n        \"\"\"Override the default Equals behavior\"\"\"\n        if isinstance(other, self.__class__):\n            return self.__dict__ == other.__dict__\n        return NotImplemented\n\n    def __ne__(self, other):\n        \"\"\"Define a non-equality test\"\"\"\n        if isinstance(other, self.__class__):\n            return not self.__eq__(other)\n        return NotImplemented\n\n    def __hash__(self):\n        \"\"\"Override the default hash behavior (that returns the id or the object)\"\"\"\n        return hash(tuple(sorted(self.__dict__.items())))\n\n\nn1 = Number(1)\nn2 = Number(1)\n\nclass NumberPlus(Number):\n    pass\n\nn3 = NumberPlus(1)\nn4 = NumberPlus(4)\n\nassert n1 == n2\nassert n2 == n1\nassert not n1 != n2\nassert not n2 != n1\n\nassert n1 == n3\nassert n3 == n1\nassert not n1 != n3\nassert not n3 != n1\n\nassert not n1 == n4\nassert not n4 == n1\nassert n1 != n4\nassert n4 != n1\n\nassert len(set([n1, n2, n3, ])) == 1\nassert len(set([n1, n2, n3, n4])) == 2\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In Python for the *nix, does <code>time.sleep()</code> block the thread or the process?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It blocks the thread.  If you look in Modules/timemodule.c in the Python source, you'll see that in the call to <code>floatsleep()</code>, the substantive part of the sleep operation is wrapped in a Py_BEGIN_ALLOW_THREADS and Py_END_ALLOW_THREADS block, allowing other threads to continue to execute while the current one sleeps.  You can also test this with a simple python program:</p>\n\n<pre><code>import time\nfrom threading import Thread\n\nclass worker(Thread):\n    def run(self):\n        for x in xrange(0,11):\n            print x\n            time.sleep(1)\n\nclass waiter(Thread):\n    def run(self):\n        for x in xrange(100,103):\n            print x\n            time.sleep(5)\n\ndef run():\n    worker().start()\n    waiter().start()\n</code></pre>\n\n<p>Which will print:</p>\n\n<pre><code>&gt;&gt;&gt; thread_test.run()\n0\n100\n&gt;&gt;&gt; 1\n2\n3\n4\n5\n101\n6\n7\n8\n9\n10\n102\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/3012488/what-is-the-python-with-statement-designed-for\" dir=\"ltr\">What is the python \u201cwith\u201d statement designed for?</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    9 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>What is the python keyword \"with\" used for?</p>\n\n<p>Example from: <a href=\"http://docs.python.org/tutorial/inputoutput.html\" rel=\"noreferrer\">http://docs.python.org/tutorial/inputoutput.html</a></p>\n\n<pre><code>&gt;&gt;&gt; with open('/tmp/workfile', 'r') as f:\n...     read_data = f.read()\n&gt;&gt;&gt; f.closed\nTrue\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In python the <code>with</code> keyword is used when working with unmanaged resources (like file streams). It is similar to the <code>using</code> statement in VB.NET and C#. It allows you to ensure that a resource is \"cleaned up\" when the code that uses it finishes running, even if exceptions are thrown. It provides 'syntactic sugar' for <code>try/finally</code> blocks. </p>\n\n<p>From <a href=\"http://docs.python.org/whatsnew/2.6.html#pep-343-the-with-statement\" rel=\"noreferrer\">Python Docs</a>: </p>\n\n<blockquote>\n  <p>The <code>with</code> statement clarifies code that previously would use <code>try...finally</code> blocks to ensure that clean-up code is executed. In this section, I\u2019ll discuss the statement as it will commonly be used. In the next section, I\u2019ll examine the implementation details and show how to write objects for use with this statement.</p>\n  \n  <p>The <code>with</code> statement is a control-flow structure whose basic structure is:</p>\n\n<pre><code>with expression [as variable]:\n    with-block\n</code></pre>\n  \n  <p>The expression is evaluated, and it should result in an object that supports the context management protocol (that is, has <code>__enter__()</code> and <code>__exit__()</code> methods).</p>\n</blockquote>\n\n<p><em>Update</em> fixed VB callout per Scott Wisniewski's comment. I was indeed confusing <code>with</code> with <code>using</code>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is there a way to conveniently define a C-like structure in Python? I'm tired of writing stuff like:</p>\n\n<pre><code>class MyStruct():\n    def __init__(self, field1, field2, field3):\n        self.field1 = field1\n        self.field2 = field2\n        self.field3 = field3\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use a <a href=\"https://docs.python.org/2/library/collections.html#collections.namedtuple\" rel=\"noreferrer\">named tuple</a>, which was added to the <a href=\"http://docs.python.org/library/collections.html\" rel=\"noreferrer\">collections module</a> in the standard library in Python 2.6. It's also possible to use Raymond Hettinger's <a href=\"http://code.activestate.com/recipes/500261/\" rel=\"noreferrer\">named tuple</a> recipe if you need to support Python 2.4.</p>\n\n<p>It's nice for your basic example, but also covers a bunch of edge cases you might run into later as well. Your fragment above would be written as:</p>\n\n<pre><code>from collections import namedtuple\nMyStruct = namedtuple(\"MyStruct\", \"field1 field2 field3\")\n</code></pre>\n\n<p>The newly created type can be used like this:</p>\n\n<pre><code>m = MyStruct(\"foo\", \"bar\", \"baz\")\n</code></pre>\n\n<p>You can also use named arguments:</p>\n\n<pre><code>m = MyStruct(field1=\"foo\", field2=\"bar\", field3=\"baz\")\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>There is a lot of discussions of Python vs Ruby, and I all find them completely unhelpful, because they all turn around why feature X sucks in language Y, or that claim language Y doesn't have X, although in fact it does. I also know exactly why I prefer Python, but that's also subjective, and wouldn't help anybody choosing, as they might not have the same tastes in development as I do.</p>\n\n<p>It would therefore be interesting to list the differences, objectively. So no \"Python's lambdas sucks\". Instead explain what Ruby's lambdas can do that Python's can't. No subjectivity. Example code is good!</p>\n\n<p>Don't have several differences in one answer, please. And vote up the ones you know are correct, and down those you know are incorrect (or are subjective). Also, differences in syntax is not interesting. We know Python does with indentation what Ruby does with brackets and ends, and that @ is called self in Python.</p>\n\n<p>UPDATE: This is now a community wiki, so we can add the big differences here.</p>\n\n<h2>Ruby has a class reference in the class body</h2>\n\n<p>In Ruby you have a reference to the class (self) already in the class body. In Python you don't have a reference to the class until after the class construction is finished.</p>\n\n<p>An example:</p>\n\n<pre><code>class Kaka\n  puts self\nend\n</code></pre>\n\n<p>self in this case is the class, and this code would print out \"Kaka\". There is no way to print out the class name or in other ways access the class from the class definition body in Python (outside method definitions).</p>\n\n<h2>All classes are mutable in Ruby</h2>\n\n<p>This lets you develop extensions to core classes.  Here's an example of a rails extension:</p>\n\n<pre><code>class String\n  def starts_with?(other)\n    head = self[0, other.length]\n    head == other\n  end\nend\n</code></pre>\n\n<p>Python (imagine there were no <code>''.startswith</code> method):</p>\n\n<pre><code>def starts_with(s, prefix):\n    return s[:len(prefix)] == prefix\n</code></pre>\n\n<p>You could use it on any sequence (not just strings). In order to use it you should import it <em>explicitly</em> e.g., <code>from some_module import starts_with</code>.</p>\n\n<h2>Ruby has Perl-like scripting features</h2>\n\n<p>Ruby has first class regexps, $-variables, the awk/perl line by line input loop and other features that make it more suited to writing small shell scripts that munge text files or act as glue code for other programs.</p>\n\n<h2>Ruby has first class continuations</h2>\n\n<p>Thanks to the callcc statement. In Python you can create continuations by various techniques, but there is no support built in to the language.</p>\n\n<h2>Ruby has blocks</h2>\n\n<p>With the \"do\" statement you can create a multi-line anonymous function in Ruby, which will be passed in as an argument into the method in front of do, and called from there. In Python you would instead do this either by passing a method or with generators.</p>\n\n<p>Ruby:</p>\n\n<pre><code>amethod { |here|\n    many=lines+of+code\n    goes(here)\n}\n</code></pre>\n\n<p>Python (Ruby blocks correspond to different constructs in Python):</p>\n\n<pre><code>with amethod() as here: # `amethod() is a context manager\n    many=lines+of+code\n    goes(here)\n</code></pre>\n\n<p>Or</p>\n\n<pre><code>for here in amethod(): # `amethod()` is an iterable\n    many=lines+of+code\n    goes(here)\n</code></pre>\n\n<p>Or</p>\n\n<pre><code>def function(here):\n    many=lines+of+code\n    goes(here)\n\namethod(function)     # `function` is a callback\n</code></pre>\n\n<p>Interestingly, the convenience statement in Ruby for calling a block is called \"yield\", which in Python will create a generator.</p>\n\n<p>Ruby:</p>\n\n<pre><code>def themethod\n    yield 5\nend\n\nthemethod do |foo|\n    puts foo\nend\n</code></pre>\n\n<p>Python:</p>\n\n<pre><code>def themethod():\n    yield 5\n\nfor foo in themethod():\n    print foo\n</code></pre>\n\n<p>Although the principles are different, the result is strikingly similar.</p>\n\n<h2>Ruby supports functional style (pipe-like) programming more easily</h2>\n\n<pre><code>myList.map(&amp;:description).reject(&amp;:empty?).join(\"\\n\")\n</code></pre>\n\n<p>Python:</p>\n\n<pre><code>descriptions = (f.description() for f in mylist)\n\"\\n\".join(filter(len, descriptions))\n</code></pre>\n\n<h2>Python has built-in generators (which are used like Ruby blocks, as noted above)</h2>\n\n<p>Python has support for generators in the language. In Ruby 1.8 you can use the generator module which uses continuations to create a generator from a block. Or, you could just use a block/proc/lambda! Moreover, in Ruby 1.9 Fibers are, and can be used as, generators, and the Enumerator class is a built-in generator <a href=\"http://wiki.github.com/rdp/ruby_tutorials_core/enumerator\" rel=\"nofollow noreferrer\">4</a></p>\n\n<p><a href=\"http://docs.python.org/tutorial/classes.html#generators\" rel=\"nofollow noreferrer\">docs.python.org</a> has this generator example:</p>\n\n<pre><code>def reverse(data):\n    for index in range(len(data)-1, -1, -1):\n        yield data[index]\n</code></pre>\n\n<p>Contrast this with the above block examples.</p>\n\n<h2>Python has flexible name space handling</h2>\n\n<p>In Ruby, when you import a file with <code>require</code>, all the things defined in that file will end up in your global namespace. This causes namespace pollution. The solution to that is Rubys modules. But if you create a namespace with a module, then you have to use that namespace to access the contained classes.</p>\n\n<p>In Python, the file is a module, and you can import its contained names with <code>from themodule import *</code>, thereby polluting the namespace if you want. But you can also import just selected names with <code>from themodule import aname, another</code> or you can simply <code>import themodule</code> and then access the names with <code>themodule.aname</code>. If you want more levels in your namespace you can have packages, which are directories with modules and an <code>__init__.py</code> file.</p>\n\n<h2>Python has docstrings</h2>\n\n<p>Docstrings are strings that are attached to modules, functions and methods and can be\nintrospected at runtime. This helps for creating such things as the help command and\nautomatic documentation.</p>\n\n<pre><code>def frobnicate(bar):\n    \"\"\"frobnicate takes a bar and frobnicates it\n\n       &gt;&gt;&gt; bar = Bar()\n       &gt;&gt;&gt; bar.is_frobnicated()\n       False\n       &gt;&gt;&gt; frobnicate(bar)\n       &gt;&gt;&gt; bar.is_frobnicated()\n       True\n    \"\"\"\n</code></pre>\n\n<p>Ruby's equivalent are similar to javadocs, and located above the method instead of within it.  They can be retrieved at runtime from the files by using 1.9's Method#source_location <a href=\"http://github.com/rdp/ri_for\" rel=\"nofollow noreferrer\" title=\"example use\">example use</a></p>\n\n<h2>Python has multiple inheritance</h2>\n\n<p>Ruby does not (\"on purpose\" -- see Ruby's website, <a href=\"http://codeidol.com/other/rubyckbk/Modules-and-Namespaces/Simulating-Multiple-Inheritance-with-Mixins/\" rel=\"nofollow noreferrer\">see here how it's done in Ruby</a>). It does reuse the module concept as a type of abstract classes.</p>\n\n<h2>Python has list/dict comprehensions</h2>\n\n<p>Python:</p>\n\n<pre><code>res = [x*x for x in range(1, 10)]\n</code></pre>\n\n<p>Ruby:</p>\n\n<pre><code>res = (0..9).map { |x| x * x }\n</code></pre>\n\n<p>Python:</p>\n\n<pre><code>&gt;&gt;&gt; (x*x for x in range(10))\n&lt;generator object &lt;genexpr&gt; at 0xb7c1ccd4&gt;\n&gt;&gt;&gt; list(_)\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n</code></pre>\n\n<p>Ruby:</p>\n\n<pre><code>p = proc { |x| x * x }\n(0..9).map(&amp;p)\n</code></pre>\n\n<p>Python <strong>2.7+</strong>:</p>\n\n<pre><code>&gt;&gt;&gt; {x:str(y*y) for x,y in {1:2, 3:4}.items()}\n{1: '4', 3: '16'}\n</code></pre>\n\n<p>Ruby:</p>\n\n<pre><code>&gt;&gt; Hash[{1=&gt;2, 3=&gt;4}.map{|x,y| [x,(y*y).to_s]}]\n=&gt; {1=&gt;\"4\", 3=&gt;\"16\"}\n</code></pre>\n\n<h2>Python has decorators</h2>\n\n<p>Things similar to decorators can also be created in Ruby, and it can also be argued that they aren't as necessary as in Python.</p>\n\n<h2>Syntax differences</h2>\n\n<p>Ruby requires \"end\" or \"}\" to close all of its scopes, while Python uses white-space only.  There have been recent attempts in Ruby to allow for whitespace only indentation <a href=\"http://github.com/michaeledgar/seamless\" rel=\"nofollow noreferrer\">http://github.com/michaeledgar/seamless</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Ruby has the concepts of <em>blocks</em>, which are essentially syntactic sugar around a section of code; they are a way to create closures and pass them to another method which may or may not use the block. A block can be invoked later on through a <code>yield</code> statement.</p>\n\n<p>For example, a simple definition of an <code>each</code> method on <code>Array</code> might be something like:</p>\n\n<pre><code>class Array\n  def each\n    for i in self  \n      yield(i)     # If a block has been passed, control will be passed here.\n    end  \n  end  \nend  \n</code></pre>\n\n<p>Then you can invoke this like so:</p>\n\n<pre><code># Add five to each element.\n[1, 2, 3, 4].each{ |e| puts e + 5 }\n&gt; [6, 7, 8, 9]\n</code></pre>\n\n<p>Python has anonymous functions/closures/lambdas, but it doesn't quite have blocks since it's missing some of the useful syntactic sugar. However, there's at least one way to get it in an ad-hoc fashion. See, for example, <a href=\"http://nicolas-lara.blogspot.com/2009/01/emulating-ruby-blocks-in-python.html\" rel=\"nofollow noreferrer\"><strong>here</strong></a>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a log file being written by another process which I want to watch for changes. Each time a change occurs I'd like to read the new data in to do some processing on it.</p>\n\n<p>What's the best way to do this? I was hoping there'd be some sort of hook from the PyWin32 library. I've found the <code>win32file.FindNextChangeNotification</code> function but have no idea how to ask it to watch a specific file.</p>\n\n<p>If anyone's done anything like this I'd be really grateful to hear how...</p>\n\n<p><strong>[Edit]</strong> I should have mentioned that I was after a solution that doesn't require polling.</p>\n\n<p><strong>[Edit]</strong> Curses! It seems this doesn't work over a mapped network drive. I'm guessing windows doesn't 'hear' any updates to the file the way it does on a local disk.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Have you already looked at the documentation available on <a href=\"http://timgolden.me.uk/python/win32_how_do_i/watch_directory_for_changes.html\" rel=\"noreferrer\">http://timgolden.me.uk/python/win32_how_do_i/watch_directory_for_changes.html</a>? If you only need it to work under Windows the 2nd example seems to be exactly what you want (if you exchange the path of the directory with the one of the file you want to watch). </p>\n\n<p>Otherwise, polling will probably be the only really platform-independent option.</p>\n\n<p><strong>Note:</strong> I haven't tried any of these solutions.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How do you convert a Python <code>time.struct_time</code> object into a <code>datetime.datetime</code> object?</p>\n\n<p>I have a library that provides the first one and a second library that wants the second one...</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use <a href=\"http://docs.python.org/library/time.html#time.mktime\" rel=\"noreferrer\">time.mktime()</a> to convert the time tuple (in localtime) into seconds since the Epoch, then use <a href=\"http://docs.python.org/library/datetime.html#datetime.datetime.fromtimestamp\" rel=\"noreferrer\">datetime.fromtimestamp()</a> to get the datetime object.</p>\n\n<pre><code>from time import mktime\nfrom datetime import datetime\n\ndt = datetime.fromtimestamp(mktime(struct))\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Here's the Python code to run an arbitrary command returning its <code>stdout</code> data, or raise an exception on non-zero exit codes:</p>\n\n<pre><code>proc = subprocess.Popen(\n    cmd,\n    stderr=subprocess.STDOUT,  # Merge stdout and stderr\n    stdout=subprocess.PIPE,\n    shell=True)\n</code></pre>\n\n<p><code>communicate</code> is used to wait for the process to exit:</p>\n\n<pre><code>stdoutdata, stderrdata = proc.communicate()\n</code></pre>\n\n<p>The <code>subprocess</code> module does not support timeout--ability to kill a process running for more than X number of seconds--therefore, <code>communicate</code> may take forever to run.</p>\n\n<p>What is the <strong>simplest</strong> way to implement timeouts in a Python program meant to run on Windows and Linux?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In Python 3.3+:</p>\n\n<pre><code>from subprocess import STDOUT, check_output\n\noutput = check_output(cmd, stderr=STDOUT, timeout=seconds)\n</code></pre>\n\n<p><code>output</code> is a byte string that contains command's merged stdout, stderr data. </p>\n\n<p>This code raises <code>CalledProcessError</code> on non-zero exit status as specified in the question's text unlike <code>proc.communicate()</code> method.</p>\n\n<p>I've removed <code>shell=True</code> because it is often used unnecessarily. You can  always add it back if <code>cmd</code> indeed requires it. If you add <code>shell=True</code> i.e., if the child process spawns its own descendants; <code>check_output()</code> can return much later than the timeout indicates, see <a href=\"https://stackoverflow.com/q/36952245/4279\">Subprocess timeout failure</a>.</p>\n\n<p>The timeout feature is available on Python 2.x via the <a href=\"http://pypi.python.org/pypi/subprocess32/\" rel=\"noreferrer\"><code>subprocess32</code></a> backport of the 3.2+ subprocess module.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Given a <code>datetime.time</code> value in Python, is there a standard way to add an integer number of seconds to it, so that <code>11:34:59</code> + 3 = <code>11:35:02</code>, for example?</p>\n\n<p>These obvious ideas don't work:</p>\n\n<pre><code>&gt;&gt;&gt; datetime.time(11, 34, 59) + 3\nTypeError: unsupported operand type(s) for +: 'datetime.time' and 'int'\n&gt;&gt;&gt; datetime.time(11, 34, 59) + datetime.timedelta(0, 3)\nTypeError: unsupported operand type(s) for +: 'datetime.time' and 'datetime.timedelta'\n&gt;&gt;&gt; datetime.time(11, 34, 59) + datetime.time(0, 0, 3)\nTypeError: unsupported operand type(s) for +: 'datetime.time' and 'datetime.time'\n</code></pre>\n\n<p>In the end I have written functions like this:</p>\n\n<pre><code>def add_secs_to_time(timeval, secs_to_add):\n    secs = timeval.hour * 3600 + timeval.minute * 60 + timeval.second\n    secs += secs_to_add\n    return datetime.time(secs // 3600, (secs % 3600) // 60, secs % 60)\n</code></pre>\n\n<p>I can't help thinking that I'm missing an easier way to do this though.</p>\n\n<h3>Related</h3>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/656297/python-time-timedelta-equivalent\">python time + timedelta equivalent</a></li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use full <code>datetime</code> variables with <code>timedelta</code>, and by providing a dummy date then using <code>time</code> to just get the time value.</p>\n\n<p>For example:</p>\n\n<pre><code>import datetime\na = datetime.datetime(100,1,1,11,34,59)\nb = a + datetime.timedelta(0,3) # days, seconds, then other fields.\nprint a.time()\nprint b.time()\n</code></pre>\n\n<p>results in the two values, three seconds apart:</p>\n\n<pre><code>11:34:59\n11:35:02\n</code></pre>\n\n<p>You could also opt for the more readable</p>\n\n<pre><code>b = a + datetime.timedelta(seconds=3)\n</code></pre>\n\n<p>if you're so inclined.</p>\n\n<hr>\n\n<p>If you're after a function that can do this, you can look into using <code>addSecs</code> below:</p>\n\n<pre><code>import datetime\n\ndef addSecs(tm, secs):\n    fulldate = datetime.datetime(100, 1, 1, tm.hour, tm.minute, tm.second)\n    fulldate = fulldate + datetime.timedelta(seconds=secs)\n    return fulldate.time()\n\na = datetime.datetime.now().time()\nb = addSecs(a, 300)\nprint a\nprint b\n</code></pre>\n\n<p>This outputs:</p>\n\n<pre><code> 09:11:55.775695\n 09:16:55\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a list of tuples that looks something like this:</p>\n\n<pre><code>[('abc', 121),('abc', 231),('abc', 148), ('abc',221)]\n</code></pre>\n\n<p>I want to sort this list in ascending order by the integer value inside the tuples. Is it possible?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Try using the <code>key</code> keyword with <code>sorted()</code>.</p>\n\n<pre><code>sorted([('abc', 121),('abc', 231),('abc', 148), ('abc',221)], key=lambda x: x[1])\n</code></pre>\n\n<p><code>key</code> should be a function that identifies how to retrieve the comparable element from your data structure.  In your case, it is the second element of the tuple, so we access <code>[1]</code>.</p>\n\n<p>For optimization, see jamylak's response using <code>itemgetter(1)</code>, which is essentially a faster version of <code>lambda x: x[1]</code>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am creating a figure in Matplotlib like this:</p>\n\n<pre><code>from matplotlib import pyplot as plt\n\nfig = plt.figure()\nplt.plot(data)\nfig.suptitle('test title')\nplt.xlabel('xlabel')\nplt.ylabel('ylabel')\nfig.savefig('test.jpg')\n</code></pre>\n\n<p>I want to specify font sizes for the figure title and the axis labels. I need all three to be different font sizes, so setting a global font size (<code>mpl.rcParams['font.size']=x</code>) is not what I want. How do I set font sizes for the figure title and the axis labels individually?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Functions dealing with text like <code>label</code>, <code>title</code>, etc. accept parameters same as <a href=\"http://matplotlib.org/users/text_props.html\" rel=\"noreferrer\">matplotlib.text.Text</a>. For the font size you can use <code>size/fontsize</code>:</p>\n\n<pre><code>from matplotlib import pyplot as plt    \n\nfig = plt.figure()\nplt.plot(data)\nfig.suptitle('test title', fontsize=20)\nplt.xlabel('xlabel', fontsize=18)\nplt.ylabel('ylabel', fontsize=16)\nfig.savefig('test.jpg')\n</code></pre>\n\n<p>For globally setting <code>title</code> and <code>label</code> sizes, <a href=\"http://matplotlib.org/users/customizing.html\" rel=\"noreferrer\"><code>mpl.rcParams</code></a> contains <code>axes.titlesize</code> and <code>axes.labelsize</code>. (From the page):</p>\n\n<pre><code>axes.titlesize      : large   # fontsize of the axes title\naxes.labelsize      : medium  # fontsize of the x any y labels\n</code></pre>\n\n<p>(As far as I can see, there is no way to set <code>x</code> and <code>y</code> label sizes separately.)</p>\n\n<p>And I see that <code>axes.titlesize</code> does not affect <code>suptitle</code>. I guess, you need to set that manually.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have done a little Django development, but it has all been in a text editor. I was curious what more advanced development tools others are using in their Django development.</p>\n\n<p>I am used to using Visual Studio for development and really like the <a href=\"https://en.wikipedia.org/wiki/Intelligent_code_completion#IntelliSense\" rel=\"nofollow noreferrer\">IntelliSense</a>, code completion, and file organization it provides and would like to find something (or a combination of tools) that would provide some of this in the Django/Python environment.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I use Eclipse and a plain vanilla <a href=\"https://en.wikipedia.org/wiki/PyDev\" rel=\"nofollow noreferrer\">PyDev</a>. There isn't any specific Django functionality. The best I came up with was setting up a run profile to run the development web server.</p>\n\n<p>If you add the web tools project (WTP), you'll get syntax highlighting in your templates, but nothing that relates to the specific template language. PyDev is a decent plugin, and if you are already familiar with Eclipse and use it for other projects it is a good way to go.</p>\n\n<p>I recall NetBeans starting to get Python support, but I have no idea where that is right now. Lots of people rave about NetBeans\u00a06, but in the Java world Eclipse still reigns as the king of the OSS IDEs.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/1059559/split-strings-with-multiple-delimiters\" dir=\"ltr\">Split Strings with Multiple Delimiters?</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    26 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>I found some answers online, but I have no experience with regular expressions, which I believe is what is needed here.</p>\n\n<p>I have a string that needs to be split by either a ';' or ', '\nThat is, it has to be either a semicolon or a comma followed by a space. Individual commas without trailing spaces should be left untouched</p>\n\n<p>Example string:</p>\n\n<pre><code>\"b-staged divinylsiloxane-bis-benzocyclobutene [124221-30-3], mesitylene [000108-67-8]; polymerized 1,2-dihydro-2,2,4- trimethyl quinoline [026780-96-1]\"\n</code></pre>\n\n<p>should be split into a list containing the following:</p>\n\n<pre><code>('b-staged divinylsiloxane-bis-benzocyclobutene [124221-30-3]' , 'mesitylene [000108-67-8]', 'polymerized 1,2-dihydro-2,2,4- trimethyl quinoline [026780-96-1]') \n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Luckily, Python has this built-in :)</p>\n\n<pre><code>import re\nre.split('; |, ',str)\n</code></pre>\n\n<p><strong>Update:</strong><br>Following your comment:</p>\n\n<pre><code>&gt;&gt;&gt; a='Beautiful, is; better*than\\nugly'\n&gt;&gt;&gt; import re\n&gt;&gt;&gt; re.split('; |, |\\*|\\n',a)\n['Beautiful', 'is', 'better', 'than', 'ugly']\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I want to be able to get the data sent to my Flask app.  I've tried accessing <code>request.data</code> but it is an empty string. How do you access request data?</p>\n\n<pre><code>@app.route('/', methods=['GET', 'POST'])\ndef parse_request():\n    data = request.data  # data is empty\n    # need posted data here\n</code></pre>\n\n<hr>\n\n<p>The answer to this question led me to ask <a href=\"https://stackoverflow.com/q/10999990\">Get raw POST body in Python Flask regardless of Content-Type header</a> next, which is about getting the raw data rather than the parsed data.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The <a href=\"http://flask.pocoo.org/docs/api/#flask.Request\" rel=\"noreferrer\">docs</a> describe the attributes available on the request.  In most common cases <code>request.data</code> will be empty because it's used as a fallback:</p>\n\n<blockquote>\n  <p><code>request.data</code> Contains the incoming request data as string in case it came with a mimetype Flask does not handle.</p>\n</blockquote>\n\n<ul>\n<li><code>request.args</code>: the key/value pairs in the URL query string</li>\n<li><code>request.form</code>: the key/value pairs in the body, from a HTML post form, or JavaScript request that isn't JSON encoded</li>\n<li><code>request.files</code>: the files in the body, which Flask keeps separate from <code>form</code>. HTML forms must use <code>enctype=multipart/form-data</code> or files will not be uploaded.</li>\n<li><code>request.values</code>: combined <code>args</code> and <code>form</code>, preferring <code>args</code> if keys overlap</li>\n</ul>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/4309684/split-a-string-with-unknown-number-of-spaces-as-separator-in-python\" dir=\"ltr\">Split a string with unknown number of spaces as separator in Python</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    2 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>I'm looking for the Python equivalent of </p>\n\n<pre><code>String str = \"many   fancy word \\nhello    \\thi\";\nString whiteSpaceRegex = \"\\\\s\";\nString[] words = str.split(whiteSpaceRegex);\n\n[\"many\", \"fancy\", \"word\", \"hello\", \"hi\"]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The <code>str.split()</code> method without an argument splits on whitespace:</p>\n\n<pre><code>&gt;&gt;&gt; \"many   fancy word \\nhello    \\thi\".split()\n['many', 'fancy', 'word', 'hello', 'hi']\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is there an obvious way to do this that I'm missing?  I'm just trying to make thumbnails.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Define a maximum size.\nThen, compute a resize ratio by taking <code>min(maxwidth/width, maxheight/height)</code>.</p>\n\n<p>The proper size is <code>oldsize*ratio</code>.</p>\n\n<p>There is of course also a library method to do this: the method <code>Image.thumbnail</code>.<br>\nBelow is an (edited) example from the <a href=\"http://effbot.org/imagingbook/introduction.htm\" rel=\"noreferrer\">PIL documentation</a>.</p>\n\n<pre><code>import os, sys\nimport Image\n\nsize = 128, 128\n\nfor infile in sys.argv[1:]:\n    outfile = os.path.splitext(infile)[0] + \".thumbnail\"\n    if infile != outfile:\n        try:\n            im = Image.open(infile)\n            im.thumbnail(size, Image.ANTIALIAS)\n            im.save(outfile, \"JPEG\")\n        except IOError:\n            print \"cannot create thumbnail for '%s'\" % infile\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I've tried to look around the web for answers to splitting a string into an array of characters but I can't seem to find a simple method</p>\n\n<p><code>str.split(//)</code> does not seem to work like Ruby does. Is there a simple way of doing this without looping?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>&gt;&gt;&gt; s = \"foobar\"\n&gt;&gt;&gt; list(s)\n['f', 'o', 'o', 'b', 'a', 'r']\n</code></pre>\n\n<p>You need <a href=\"http://docs.python.org/library/functions.html#list\" rel=\"noreferrer\">list</a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>When I print a numpy array, I get a truncated representation, but I want the full array. </p>\n\n<p>Is there any way to do this?</p>\n\n<p><strong>Examples:</strong></p>\n\n<pre><code>&gt;&gt;&gt; numpy.arange(10000)\narray([   0,    1,    2, ..., 9997, 9998, 9999])\n&gt;&gt;&gt; numpy.arange(10000).reshape(250,40)\narray([[   0,    1,    2, ...,   37,   38,   39],\n       [  40,   41,   42, ...,   77,   78,   79],\n       [  80,   81,   82, ...,  117,  118,  119],\n       ..., \n       [9880, 9881, 9882, ..., 9917, 9918, 9919],\n       [9920, 9921, 9922, ..., 9957, 9958, 9959],\n       [9960, 9961, 9962, ..., 9997, 9998, 9999]])\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>To clarify on Reed's reply</p>\n\n<pre><code>import numpy\nnumpy.set_printoptions(threshold=numpy.nan)\n</code></pre>\n\n<p>Note that the reply as given above works with an initial 'from numpy import *', which is not advisable. \nThis also works for me</p>\n\n<pre><code>numpy.set_printoptions(threshold='nan')\n</code></pre>\n\n<p>For full documentation, see <a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.set_printoptions.html\" rel=\"noreferrer\">http://docs.scipy.org/doc/numpy/reference/generated/numpy.set_printoptions.html</a>. </p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>By default, the <a href=\"http://docs.python-requests.org/en/master/\" rel=\"noreferrer\">Requests</a> library writes log messages to the console, along the lines of <code>Starting new HTTP connection (1): example.com</code> etc. I'm usually not interested in these messages, how do I disable them?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I found out how to configure <em>requests</em>'s logging level, it's done via the standard <a href=\"http://docs.python.org/library/logging.html\" rel=\"noreferrer\">logging</a> module. I decided to configure it to not log messages unless they are at least warnings:</p>\n\n<pre><code>import logging\n\nlogging.getLogger(\"requests\").setLevel(logging.WARNING)\n</code></pre>\n\n<p>If you wish to apply this setting for the urllib3 library (typically used by requests) too, add the following:</p>\n\n<pre><code>logging.getLogger(\"urllib3\").setLevel(logging.WARNING)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm trying to fix up one of my virtualenvs - I'd like to reset all of the installed libraries back to the ones that match production.</p>\n\n<p>Is there a quick and easy way to do this with pip?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I've found this snippet as an alternative solution. It's a more graceful removal of libraries than remaking the virtualenv:</p>\n\n<pre><code>pip freeze | xargs pip uninstall -y\n</code></pre>\n\n<hr>\n\n<p>In case you have packages installed via VCS, you need to exclude those lines and remove the packages manually (elevated from the comments below):</p>\n\n<pre><code>pip freeze | grep -v \"^-e\" | xargs pip uninstall -y\n</code></pre>\n    </div>"]}
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I want to create an object that contains 2 links to Users. For example:</p>\n\n<pre><code>class GameClaim(models.Model):\n    target = models.ForeignKey(User)\n    claimer = models.ForeignKey(User)\n    isAccepted = models.BooleanField()\n</code></pre>\n\n<p>but I am getting the following errors when running the server:</p>\n\n<ul>\n<li><blockquote>\n  <p>Accessor for field 'target' clashes with related field 'User.gameclaim_set'. Add a related_name argument to the definition for 'target'.</p>\n</blockquote></li>\n<li><blockquote>\n  <p>Accessor for field 'claimer' clashes with related field 'User.gameclaim_set'. Add a related_name argument to the definition for 'claimer'.</p>\n</blockquote></li>\n</ul>\n\n<p>Can you please explain why I am getting the errors and how to fix them?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You have two foreign keys to User. Django automatically creates a reverse relation from User back to GameClaim, which is usually <code>gameclaim_set</code>. However, because you have two FKs, you would have two <code>gameclaim_set</code> attributes, which is obviously impossible. So you need to tell Django what name to use for the reverse relation.</p>\n\n<p>Use the <code>related_name</code> attribute in the FK definition.  e.g.</p>\n\n<pre><code>class GameClaim(models.Model):\n    target = models.ForeignKey(User, related_name='gameclaim_targets')\n    claimer = models.ForeignKey(User, related_name='gameclaim_users')\n    isAccepted = models.BooleanField()\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>So, when playing with the development I can just set <code>settings.DEBUG</code> to <code>True</code> and if an error occures I can see it nicely formatted, with good stack trace and request information.</p>\n\n<p>But on kind of production site I'd rather use <code>DEBUG=False</code> and show visitors some standard error 500 page with information that I'm working on fixing this bug at this moment ;)<br>\nAt the same time I'd like to have some way of logging all those information (stack trace and request info) to a file on my server - so I can just output it to my console and watch errors scroll, email the log to me every hour or something like this.</p>\n\n<p>What logging solutions would you recomend for a django-site, that would meet those simple requirements? I have the application running as <code>fcgi</code> server and I'm using apache web server as frontend (although thinking of going to lighttpd).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Well, when <code>DEBUG = False</code>, Django will automatically mail a full traceback of any error to each person listed in the <code>ADMINS</code> setting, which gets you notifications pretty much for free. If you'd like more fine-grained control, you can write and add to your settings a middleware class which defines a method named <code>process_exception()</code>, which will have access to the exception that was raised:</p>\n\n<p><a href=\"http://docs.djangoproject.com/en/dev/topics/http/middleware/#process-exception\" rel=\"noreferrer\">http://docs.djangoproject.com/en/dev/topics/http/middleware/#process-exception</a></p>\n\n<p>Your <code>process_exception()</code> method can then perform whatever type of logging you'd like: writing to console, writing to a file, etc., etc.</p>\n\n<p>Edit: though it's a bit less useful, you can also listen for the <code>got_request_exception</code> signal, which will be sent whenever an exception is encountered during request processing:</p>\n\n<p><a href=\"http://docs.djangoproject.com/en/dev/ref/signals/#got-request-exception\" rel=\"noreferrer\">http://docs.djangoproject.com/en/dev/ref/signals/#got-request-exception</a></p>\n\n<p>This does <em>not</em> give you access to the exception object, however, so the middleware method is much easier to work with.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a big dictionary object that has several key value pairs (about 16), but I am only interested in 3 of them. What is the best way (shortest/efficient/most elegant) to achieve that?</p>\n\n<p>The best I know is:</p>\n\n<pre><code>bigdict = {'a':1,'b':2,....,'z':26} \nsubdict = {'l':bigdict['l'], 'm':bigdict['m'], 'n':bigdict['n']}\n</code></pre>\n\n<p>I am sure there is a more elegant way than this. Ideas?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You could try:</p>\n\n<pre><code>dict((k, bigdict[k]) for k in ('l', 'm', 'n'))\n</code></pre>\n\n<p>... or in <del>Python 3</del> Python versions 2.7 or later <em>(thanks to <a href=\"https://stackoverflow.com/users/541842/fabio-diniz\">F\u00e1bio Diniz</a> for pointing that out that it works in 2.7 too)</em>:</p>\n\n<pre><code>{k: bigdict[k] for k in ('l', 'm', 'n')}\n</code></pre>\n\n<p><em>Update: As <a href=\"https://stackoverflow.com/users/94237/havard-s\">H\u00e5vard S</a> points out, I'm assuming that you know the keys are going to be in the dictionary - see <a href=\"https://stackoverflow.com/questions/5352546/best-way-to-extract-subset-of-key-value-pairs-from-python-dictionary-object/5352649#5352649\">his answer</a> if you aren't able to make that assumption. Alternatively, as <a href=\"https://stackoverflow.com/users/127660/timbo\">timbo</a> points out in the comments, if you want a key that's missing in <code>bigdict</code> to map to <code>None</code>,  you can do:</em></p>\n\n<pre><code>{k: bigdict.get(k, None) for k in ('l', 'm', 'n')}\n</code></pre>\n\n<p>If you're using Python 3, and you <em>only</em> want want keys in the new dict that actually exist in the original one, you can use the fact the view objects implement some set operations:</p>\n\n<pre><code>{k: bigdict[k] for k in bigdict.keys() &amp; {'l', 'm', 'n'}}\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In Python, calling</p>\n\n<pre><code>temp = open(filename,'r').readlines()\n</code></pre>\n\n<p>results in a list in which each element is a line in the file. Its a little stupid but still: <code>readlines()</code> also writes newline character to each element, something I do not wish to happen. How can I avoid it? </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can read the whole file and split lines using <a href=\"https://docs.python.org/2/library/stdtypes.html#str.splitlines\" rel=\"noreferrer\"><code>str.splitlines</code></a>:</p>\n\n<pre><code>temp = file.read().splitlines()\n</code></pre>\n\n<p>Or you can strip the newline by hand:</p>\n\n<pre><code>temp = [line[:-1] for line in file]\n</code></pre>\n\n<p><strong>Note:</strong> this last solution only works if the file ends with a newline, otherwise the last line will lose a character.</p>\n\n<p>This assumption is true in most cases (especially for files created by text editors, which often <em>do</em> add an ending newline anyway).</p>\n\n<p>If you want to avoid this you can add a newline at the end of file:</p>\n\n<pre><code>with open(the_file, 'r+') as f:\n    f.seek(-1, 2)  # go at the end of the file\n    if f.read(1) != '\\n':\n        # add missing newline if not already present\n        f.write('\\n')\n        f.flush()\n        f.seek(0)\n    lines = [line[:-1] for line in f]\n</code></pre>\n\n<p>Or a simpler alternative is to <code>strip</code> the newline instead:</p>\n\n<pre><code>[line.rstrip('\\n') for line in file]\n</code></pre>\n\n<p>Or even, although pretty unreadable:</p>\n\n<pre><code>[line[:-(line[-1] == '\\n') or len(line)+1] for line in file]\n</code></pre>\n\n<p>Which exploits the fact that the return value of <code>or</code> isn't a boolean, but the object that was evaluated true or false.</p>\n\n<hr>\n\n<p>The <code>readlines</code> method is actually equivalent to:</p>\n\n<pre><code>def readlines(self):\n    lines = []\n    for line in iter(self.readline, ''):\n        lines.append(line)\n    return lines\n\n# or equivalently\n\ndef readlines(self):\n    lines = []\n    while True:\n        line = self.readline()\n        if not line:\n            break\n        lines.append(line)\n    return lines\n</code></pre>\n\n<p>Since <code>readline()</code> keeps the newline also <code>readlines()</code> keeps it.</p>\n\n<p><strong>Note:</strong> for symmetry to <code>readlines()</code> the <a href=\"https://docs.python.org/3/library/io.html#io.IOBase.writelines\" rel=\"noreferrer\"><code>writelines()</code></a> method does <em>not</em> add ending newlines, so <code>f2.writelines(f.readlines())</code> produces an exact copy of <code>f</code> in <code>f2</code>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Given the python function:</p>\n\n<pre><code>def aMethod(arg1, arg2):\n    pass\n</code></pre>\n\n<p>How can I extract the number and names of the arguments. Ie. given that I have a reference to func, I want the func.[something] to return (\"arg1\", \"arg2\")</p>\n\n<p>The usage scenario for this is that I have a decorator, and I wish to use the method arguments in the same order that they appear for the actual function as a key. Ie. how would the decorator look that printed \"a,b\" when I call aMethod(\"a\",\"b\")</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Take a look at the <a href=\"http://docs.python.org/library/inspect.html\" rel=\"noreferrer\">inspect</a> module - this will do the inspection of the various code object properties for you.</p>\n\n<pre><code>&gt;&gt;&gt; inspect.getargspec(aMethod)\n(['arg1', 'arg2'], None, None, None)\n</code></pre>\n\n<p>The other results are the name of the *args and **kwargs variables, and the defaults provided.  ie.</p>\n\n<pre><code>&gt;&gt;&gt; def foo(a,b,c=4, *arglist, **keywords): pass\n&gt;&gt;&gt; inspect.getargspec(foo)\n(['a', 'b', 'c'], 'arglist', 'keywords', (4,))\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Since Python's <code>string</code> can't be changed, I was wondering how to concatenate a string more efficiently?</p>\n\n<p>I can write like it:</p>\n\n<pre><code>s += stringfromelsewhere\n</code></pre>\n\n<p>or like this:</p>\n\n<pre><code>s = []\ns.append(somestring)\n\nlater\n\ns = ''.join(s)\n</code></pre>\n\n<p>While writing this question, I found a good article talking about the topic.</p>\n\n<p><a href=\"http://www.skymind.com/~ocrow/python_string/\">http://www.skymind.com/~ocrow/python_string/</a></p>\n\n<p>But it's in Python 2.x., so the question would be did something change in Python 3?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The <em>best</em> way of appending a string to a string variable is to use <code>+</code> or <code>+=</code>. This is because it's readable and fast. They are also just as fast, which one you choose is a matter of taste, the latter one is the most common. Here are timings with the <code>timeit</code> module:</p>\n\n<pre><code>a = a + b:\n0.11338996887207031\na += b:\n0.11040496826171875\n</code></pre>\n\n<p>However, those who recommend having lists and appending to them and then joining those lists, do so because appending a string to a list is presumably very fast compared to extending a string. And this can be true, in some cases. Here, for example, is one\nmillion appends of a one-character string, first to a string, then to a list:</p>\n\n<pre><code>a += b:\n0.10780501365661621\na.append(b):\n0.1123361587524414\n</code></pre>\n\n<p>OK, turns out that even when the resulting string is a million characters long, appending was still faster.</p>\n\n<p>Now let's try with appending a thousand character long string a hundred thousand times:</p>\n\n<pre><code>a += b:\n0.41823482513427734\na.append(b):\n0.010656118392944336\n</code></pre>\n\n<p>The end string, therefore, ends up being about 100MB long. That was pretty slow, appending to a list was much faster. That that timing doesn't include the final <code>a.join()</code>. So how long would that take? </p>\n\n<pre><code>a.join(a):\n0.43739795684814453\n</code></pre>\n\n<p>Oups. Turns out even in this case, append/join is slower.</p>\n\n<p>So where does this recommendation come from? Python 2?</p>\n\n<pre><code>a += b:\n0.165287017822\na.append(b):\n0.0132720470428\na.join(a):\n0.114929914474\n</code></pre>\n\n<p>Well, append/join is <em>marginally</em> faster there if you are using extremely long strings (which you usually aren't, what would you have a string that's 100MB in memory?)</p>\n\n<p>But the real clincher is Python 2.3. Where I won't even show you the timings, because it's so slow that it hasn't finished yet. These tests suddenly take <em>minutes</em>. Except for the append/join, which is just as fast as under later Pythons.</p>\n\n<p>Yup. String concatenation was very slow in Python back in the stone age. But on 2.4 it isn't anymore (or at least Python 2.4.7), so the recommendation to use append/join became outdated in 2008, when Python 2.3 stopped being updated, and you should have stopped using it. :-)</p>\n\n<p><em>(Update: Turns out when I did the testing more carefully that using <code>+</code> and <code>+=</code> is faster for two strings on Python 2.3 as well. The recommendation to use <code>''.join()</code> must be a misunderstanding)</em></p>\n\n<p>However, this is CPython. Other implementations may have other concerns. And this is just yet another reason why premature optimization is the root of all evil. Don't use a technique that's supposed \"faster\" unless you first measure it.</p>\n\n<p><strong>Therefore the \"best\" version to do string concatenation is to use + or +=</strong>. And if that turns out to be slow for you, which is pretty unlikely, then do something else.</p>\n\n<p>So why do I use a lot of append/join in my code? Because sometimes it's actually clearer. Especially when whatever you should concatenate together should be separated by spaces or commas or newlines.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm starting to code in various projects using Python (including Django web development and Panda3D game development). </p>\n\n<p>To help me understand what's going on, I would like to basically 'look' inside the Python objects to see how they tick - like their methods and properties. </p>\n\n<p>So say I have a Python object, what would I need to print out its contents? Is that even possible?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Python has a strong set of introspection features. </p>\n\n<p>Take a look at the following <a href=\"http://docs.python.org/library/functions.html\" rel=\"noreferrer\">built-in functions</a>:</p>\n\n<ul>\n<li>type()</li>\n<li>dir()</li>\n<li>id()</li>\n<li>getattr()</li>\n<li>hasattr()</li>\n<li>globals()</li>\n<li>locals()</li>\n<li>callable()</li>\n</ul>\n\n<p>type() and dir() are particularly useful for inspecting the type of an object and its set of attributes, respectively.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>There are various snippets on the web that would give you a function to return human readable size from bytes size:</p>\n\n<pre><code>&gt;&gt;&gt; human_readable(2048)\n'2 kilobytes'\n&gt;&gt;&gt;\n</code></pre>\n\n<p>But is there a Python library that provides this?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Addressing the above \"too small a task to require a library\" issue by a straightforward implementation:</p>\n\n<pre><code>def sizeof_fmt(num, suffix='B'):\n    for unit in ['','Ki','Mi','Gi','Ti','Pi','Ei','Zi']:\n        if abs(num) &lt; 1024.0:\n            return \"%3.1f%s%s\" % (num, unit, suffix)\n        num /= 1024.0\n    return \"%.1f%s%s\" % (num, 'Yi', suffix)\n</code></pre>\n\n<p>Supports:</p>\n\n<ul>\n<li>all currently known <a href=\"https://en.wikipedia.org/wiki/Binary_prefix#Specific_units_of_IEC_60027-2_A.2_and_ISO.2FIEC_80000\" rel=\"noreferrer\">binary prefixes</a></li>\n<li>negative and positive numbers</li>\n<li>numbers larger than 1000 Yobibytes</li>\n<li>arbitrary units (maybe you like to count in Gibibits!)</li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>&gt;&gt;&gt; sizeof_fmt(168963795964)\n'157.4GiB'\n</code></pre>\n\n<p>by <a href=\"https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size\" rel=\"noreferrer\">Fred Cirera</a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<pre><code>datetime.datetime.utcnow()\n</code></pre>\n\n<p>Why does this <code>datetime</code> not have any timezone info given that it is explicitly a UTC <code>datetime</code>?</p>\n\n<p>I would expect that this would contain <code>tzinfo</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>That means it is timezone naive, so you can't use it with <code>datetime.astimezone</code></p>\n\n<p>you can give it a timezone like this</p>\n\n<pre><code>import pytz  # 3rd party: $ pip install pytz\n\nu = datetime.utcnow()\nu = u.replace(tzinfo=pytz.utc) #NOTE: it works only with a fixed utc offset\n</code></pre>\n\n<p>now you can change timezones</p>\n\n<pre><code>print(u.astimezone(pytz.timezone(\"America/New_York\")))\n</code></pre>\n\n<p>To get the current time in a given timezone, you could pass tzinfo to <code>datetime.now()</code> directly:</p>\n\n<pre><code>#!/usr/bin/env python\nfrom datetime import datetime\nimport pytz # $ pip install pytz\n\nprint(datetime.now(pytz.timezone(\"America/New_York\")))\n</code></pre>\n\n<p>It works for any timezone including those that observe daylight saving time (DST) i.e., it works for timezones that may have different utc offsets at different times (non-fixed utc offset). Don't use <code>tz.localize(datetime.now())</code> -- it may fail during end-of-DST transition when the local time is ambiguous.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Right now I have a central module in a framework that spawns multiple processes using the Python 2.6 <a href=\"http://docs.python.org/library/multiprocessing.html?#module-multiprocessing\" rel=\"noreferrer\"><code>multiprocessing</code> module</a>. Because it uses <code>multiprocessing</code>, there is module-level multiprocessing-aware log, <code>LOG = multiprocessing.get_logger()</code>. Per <a href=\"http://docs.python.org/library/multiprocessing.html#logging\" rel=\"noreferrer\">the docs</a>, this logger has process-shared locks so that you don't garble things up in <code>sys.stderr</code> (or whatever filehandle) by having multiple processes writing to it simultaneously.</p>\n\n<p>The issue I have now is that the other modules in the framework are not multiprocessing-aware. The way I see it, I need to make all dependencies on this central module use multiprocessing-aware logging. That's annoying <em>within</em> the framework, let alone for all clients of the framework. Are there alternatives I'm not thinking of?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The only way to deal with this non-intrusively is to:</p>\n\n<ol>\n<li>Spawn each worker process such that its log goes to <strong>a different file descriptor</strong> (to disk or to pipe.)  Ideally, all log entries should be timestamped.  </li>\n<li>Your controller process can then do <em>one</em> of the following:\n\n<ul>\n<li><strong>If using disk files:</strong> Coalesce the log files at the end of the run, sorted by timestamp</li>\n<li><strong>If using pipes (recommended):</strong> Coalesce log entries on-the-fly from all pipes, into a central log file. (E.g., Periodically <a href=\"http://docs.python.org/library/select.html\" rel=\"noreferrer\"><code>select</code></a> from the pipes' file descriptors, perform merge-sort on the available log entries, and flush to centralized log. Repeat.)</li>\n</ul></li>\n</ol>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Set_up: I have a .py file for each function I need to use in a program.</p>\n\n<p>In this program, I need to call the function from the external files.</p>\n\n<p>I've tried:</p>\n\n<pre><code>from file.py import function(a,b)\n</code></pre>\n\n<p>But I get the error:</p>\n\n<blockquote>\n  <p>ImportError: No module named 'file.py'; file is not a package</p>\n</blockquote>\n\n<p>How do I fix this problem?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There isn't any need to add <code>file.py</code> while importing. Just write <code>from file import function</code>, and then call the function using <code>function(a, b)</code>. The reason why this may not work, is because <code>file</code> is one of Python's core modules, so I suggest you change the name of your file.</p>\n\n<p>Note that if you're trying to import functions from <code>a.py</code> to a file called <code>b.py</code>, you will need to make sure that <code>a.py</code> and <code>b.py</code> are in the same directory.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm pulling data out of a Google doc, processing it, and writing it to a file (that eventually I will paste into a Wordpress page).</p>\n\n<p>It has some non-ASCII symbols. How can I convert these safely to symbols that can be used in HTML source? </p>\n\n<p>Currently I'm converting everything to Unicode on the way in, joining it all together in a Python string, then doing: </p>\n\n<pre><code>import codecs\nf = codecs.open('out.txt', mode=\"w\", encoding=\"iso-8859-1\")\nf.write(all_html.encode(\"iso-8859-1\", \"replace\"))\n</code></pre>\n\n<p>There is an encoding error on the last line: </p>\n\n<blockquote>\n  <p>UnicodeDecodeError: 'ascii' codec can't decode byte 0xa0 in position\n  12286: ordinal not in range(128)</p>\n</blockquote>\n\n<p><strong>Partial solution:</strong></p>\n\n<p>This Python runs without an error:</p>\n\n<pre><code>row = [unicode(x.strip()) if x is not None else u'' for x in row]\nall_html = row[0] + \"&lt;br/&gt;\" + row[1]\nf = open('out.txt', 'w')\nf.write(all_html.encode(\"utf-8\")\n</code></pre>\n\n<p>But then if I open the actual text file, I see lots of symbols like:</p>\n\n<pre><code>Qur\u201a\u00c4\u00f4an \n</code></pre>\n\n<p>Maybe I need to write to something other than a text file? </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Deal exclusively with unicode objects as much as possible by decoding things to unicode objects when you first get them and encoding them as necessary on the way out.</p>\n\n<p>If your string is actually a unicode object, you'll need to convert it to a unicode-encoded string object before writing it to a file:</p>\n\n<pre><code>foo = u'\u0394, \u0419, \u05e7, \u200e \u0645, \u0e57, \u3042, \u53f6, \u8449, and \ub9d0.'\nf = open('test', 'w')\nf.write(foo.encode('utf8'))\nf.close()\n</code></pre>\n\n<p>When you read that file again, you'll get a unicode-encoded string that you can decode to a unicode object:</p>\n\n<pre><code>f = file('test', 'r')\nprint f.read().decode('utf8')\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>With the Time module in python is it possible to measure elapsed time? If so, how do I do that? </p>\n\n<p>I need to do this so that if the cursor has been in a widget for a certain duration an event happens.  </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>start_time = time.time()\n# your code\nelapsed_time = time.time() - start_time\n</code></pre>\n\n<p>You can also write simple decorator to simplify measurement of execution time of various functions:</p>\n\n<pre><code>import time\nfrom functools import wraps\n\nPROF_DATA = {}\n\ndef profile(fn):\n    @wraps(fn)\n    def with_profiling(*args, **kwargs):\n        start_time = time.time()\n\n        ret = fn(*args, **kwargs)\n\n        elapsed_time = time.time() - start_time\n\n        if fn.__name__ not in PROF_DATA:\n            PROF_DATA[fn.__name__] = [0, []]\n        PROF_DATA[fn.__name__][0] += 1\n        PROF_DATA[fn.__name__][1].append(elapsed_time)\n\n        return ret\n\n    return with_profiling\n\ndef print_prof_data():\n    for fname, data in PROF_DATA.items():\n        max_time = max(data[1])\n        avg_time = sum(data[1]) / len(data[1])\n        print \"Function %s called %d times. \" % (fname, data[0]),\n        print 'Execution time max: %.3f, average: %.3f' % (max_time, avg_time)\n\ndef clear_prof_data():\n    global PROF_DATA\n    PROF_DATA = {}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>@profile\ndef your_function(...):\n    ...\n</code></pre>\n\n<p>You can profile more then one function simultaneously. Then to print measurements just call the print_prof_data():</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How do I accomplish variable variables in Python? </p>\n\n<p>Here is an elaborative manual entry, for instance: <em><a href=\"http://us3.php.net/manual/en/language.variables.variable.php\" rel=\"noreferrer\">Variable variables</a></em></p>\n\n<p>I have heard this is a bad idea in general though, and it is a security hole in Python. Is that true?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use dictionaries to accomplish this. Dictionaries are stores of keys and values. </p>\n\n<pre><code>&gt;&gt;&gt; dct = {'x': 1, 'y': 2, 'z': 3}\n&gt;&gt;&gt; dct\n{'y': 2, 'x': 1, 'z': 3}\n&gt;&gt;&gt; dct[\"y\"]\n2\n</code></pre>\n\n<p>You can use variable key names to achieve the effect of variable variables without the security risk.</p>\n\n<pre><code>&gt;&gt;&gt; x = \"spam\"\n&gt;&gt;&gt; z = {x: \"eggs\"}\n&gt;&gt;&gt; z[\"spam\"]\n'eggs'\n</code></pre>\n\n<p>Make sense?</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What is the most efficient way to shift a list in python? \nRight now I have something like this:</p>\n\n<pre><code>&gt;&gt;&gt; def shift(l, n):\n...     return l[n:] + l[:n]\n... \n&gt;&gt;&gt; l = [1,2,3,4]\n&gt;&gt;&gt; shift(l,1)\n[2, 3, 4, 1]\n&gt;&gt;&gt; shift(l,2)\n[3, 4, 1, 2]\n&gt;&gt;&gt; shift(l,0)\n[1, 2, 3, 4]\n&gt;&gt;&gt; shift(l,-1)\n[4, 1, 2, 3]\n</code></pre>\n\n<p>Is there a better way?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>A <a href=\"http://docs.python.org/library/collections.html#deque-objects\" rel=\"noreferrer\"><code>collections.deque</code></a> is optimized for pulling and pushing on both ends. They even have a dedicated <code>rotate()</code> method. </p>\n\n<pre><code>from collections import deque\nitems = deque([1, 2])\nitems.append(3) # deque == [1, 2, 3]\nitems.rotate(1) # The deque is now: [3, 1, 2]\nitems.rotate(-1) # Returns deque to original state: [1, 2, 3]\nitem = items.popleft() # deque == [2, 3]\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm trying to use pip behind a proxy at work. I'm not a networking expert so bear with me if this super obvious.</p>\n\n<p>One of the answers from <a href=\"https://stackoverflow.com/questions/9698557/how-to-use-pip-on-windows-behind-an-authenticating-proxy\">this post</a> suggested using <a href=\"http://cntlm.sourceforge.net/\" rel=\"noreferrer\">CNTLM</a>. I installed and configured it per <a href=\"https://stackoverflow.com/questions/9181637/how-to-fill-proxy-information-in-cntlm-config-file\">this other post</a>, but running <code>cntlm.exe -c cntlm.ini -I -M http://google.com</code> gave the error <code>Connection to proxy failed, bailing out</code>.</p>\n\n<p>I also tried <code>pip install -\u2013proxy=user:pass@localhost:3128</code> (the default CNTLM port) but that raised <code>Cannot fetch index base URL http://pypi.python.org/simple/</code>. Clearly something's up with the proxy.</p>\n\n<p>Does anyone know how to check more definitively whether CNTLM is set up right, or if there's another way around this altogether? I know you can also set the <code>http_proxy</code> environment variable as described <a href=\"https://stackoverflow.com/questions/11726881/how-to-set-an-http-proxy-in-python-2-7\">here</a> but I'm not sure what credentials to put in. The ones from <code>cntlm.ini</code>?</p>\n\n<p>Thanks!</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>To setup CNTLM for windows, follow this <a href=\"http://stormpoopersmith.com/2012/03/20/using-applications-behind-a-corporate-proxy/\" rel=\"noreferrer\">article</a>. For Ubuntu, read <a href=\"http://annelagang.blogspot.com/2012/11/installing-gems-in-ubuntu-1204-using.html\" rel=\"noreferrer\">my blog post</a>. </p>\n\n<p><strong>Edit:</strong></p>\n\n<p>Basically, to use CNTLM in any platform, you need to setup your username and <em>hashed</em> password, before using <code>http://127.0.0.1:3128</code> as a proxy to your parent proxy.</p>\n\n<ol>\n<li><p>Edit the config and add important information like domain, username, password and parent proxy. </p></li>\n<li><p>Generate hashed password.</p>\n\n<p><strong>Windows</strong> <code>cntlm \u2013c cntlm.ini \u2013H</code></p>\n\n<p><strong>Ubuntu/Linux</strong> <code>cntlm -v -H -c /etc/cntlm.conf</code></p></li>\n<li><p>Remove plain text password from the config and replace them with the generated passwords.</p></li>\n</ol>\n\n<p>To check if working:</p>\n\n<p><strong>Windows</strong> <code>cntlm \u2013M http://www.google.com</code></p>\n\n<p><strong>Ubuntu/Linux</strong> <code>sudo cntlm -M http://www.google.com/</code></p>\n\n<p>For more detailed instructions, see links above.</p>\n\n<p><strong>Update:</strong> </p>\n\n<p>Just for completeness sake, I was able to configure and use CNTLM in Windows recently. I encountered a problem during the syncing process of Kindle for PC because of our proxy and installing and configuring CNTLM for Windows fixed that issue for me. Refer to <a href=\"http://annelagang.blogspot.com/2014/01/register-and-download-books-using.html\" rel=\"noreferrer\">my article</a> for more details. </p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Ok, I see plenty of these errors around. I have tried everything I know to do and have yet to figure this out.</p>\n\n<p>I am working on a development server running python 2.5 and Django 1.3. Django 1.3 was installed using python setup.py install after unpacking the tar.gz download.</p>\n\n<p>All works well, I seldom have the need to run <code>manage.py</code> but am trying to use the new staticfiles app and am running into problems.</p>\n\n<pre><code>python manage.py collectstatic\nTraceback (most recent call last):\n  File \"manage.py\", line 2, in &lt;module&gt;\n    from django.core.management import execute_manager\nImportError: No module named core.management\n</code></pre>\n\n<p>Ok, so I have <code>PATH</code> issue.</p>\n\n<p>From <a href=\"http://docs.djangoproject.com/en/dev//topics/install/#finding-site-packages\" rel=\"noreferrer\">Django install</a> I double check my <code>site-packages</code> directory.</p>\n\n<pre><code>python -c \"from distutils.sysconfig import get_python_lib; print get_python_lib()\"\n/usr/lib/python2.5/site-packages\n</code></pre>\n\n<p>Ok, let's check out what I have, echo $PYTHON_PATH was empty, so I set it</p>\n\n<pre><code>export PYTHON_PATH=/usr/lib/python2.5/site-packages/django\n</code></pre>\n\n<p>Still no luck. Lets check what sys.path has to say</p>\n\n<pre><code>&gt;&gt;&gt; import sys\n&gt;&gt;&gt; print sys.path\n['', '/usr/lib/python2.5', '/usr/lib/python2.5/plat-linux2', '/usr/lib/python2.5/lib-tk', '/usr/lib/python2.5/lib-dynload', '/usr/local/lib/python2.5/site-packages', '/usr/lib/python2.5/site-packages', '/usr/lib/python2.5/site-packages/PIL', '/usr/lib/python2.5/site-packages/django', '/var/lib/python-support/python2.5']\n</code></pre>\n\n<p>path is there, I even created /usr/lib/python2.5/site-packages/django.pth with contents</p>\n\n<pre><code>cat /usr/lib/python2.5/site-packages/django.pth \n/usr/lib/python2.5/site-packages/django/\n</code></pre>\n\n<p>Anyone got an clues to what is going on here? </p>\n\n<p>I found a symlink further up the path that was getting in the way, but no on to a new error.</p>\n\n<pre><code>python manage.py collectstatic\nTraceback (most recent call last):\n  File \"manage.py\", line 14, in &lt;module&gt;\n    execute_manager(settings)\n  File \"/usr/lib/python2.5/site-packages/django/core/management/__init__.py\", line 438, in execute_manager\n    utility.execute()\n  File \"/usr/lib/python2.5/site-packages/django/core/management/__init__.py\", line 349, in execute\n    version=get_version(),\n  File \"/usr/lib/python2.5/site-packages/django/__init__.py\", line 12, in get_version\n    from django.utils.version import get_svn_revision\nImportError: No module named utils.version\n</code></pre>\n\n<p>I also tried creating a new project to see if there were any issues there and get the same utils.version error.</p>\n\n<p>Side node: Unode from #django helped me a bit, set up virtualenv on same machine and got past the errors so still not sure what is up with this actual install here, but it seems to not be in the django projects but in the django/python install.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If, like me, you are running your django in a virtualenv, and getting this error, look at your <code>manage.py</code>.\nThe first line should define the python executable used to run the script.\nThis should be the path to your virtualenv's python, but it is something wrong like /usr/bin/python, which is not the same path and will use the global python environment (and packages will be missing).\nJust change the path into the path to the python executable in your virtualenv.</p>\n\n<p>You can also replace your shebang line with <code>#!/usr/bin/env python</code>. This should use the proper python environment and interpreter provided that you activate your virtualenv first (I assume you know how to do this).</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>The following code works as expected in both Python 2.5 and 3.0:</p>\n\n<pre><code>a, b, c = (1, 2, 3)\n\nprint(a, b, c)\n\ndef test():\n    print(a)\n    print(b)\n    print(c)    # (A)\n    #c+=1       # (B)\ntest()\n</code></pre>\n\n<p>However, when I uncomment line <strong>(B)</strong>, I get an <code>UnboundLocalError: 'c' not assigned</code> at line <strong>(A)</strong>. The values of <code>a</code> and <code>b</code> are printed correctly. This has me completely baffled for two reasons:</p>\n\n<ol>\n<li><p>Why is there a runtime error thrown at line <strong>(A)</strong> because of a later statement on line <strong>(B)</strong>?</p></li>\n<li><p>Why are variables <code>a</code> and <code>b</code> printed as expected, while <code>c</code> raises an error?</p></li>\n</ol>\n\n<p>The only explanation I can come up with is that a <strong>local</strong> variable <code>c</code> is created by the assignment <code>c+=1</code>, which takes precedent over the \"global\" variable <code>c</code> even before the local variable is created. Of course, it doesn't make sense for a variable to \"steal\" scope before it exists.</p>\n\n<p>Could someone please explain this behavior?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Python treats variables in functions differently depending on whether you assign values to them from within the function or not.  If a function contains any assignments to a variable, it is treated by default as a local variable.  Therefore, when you uncomment the line, you are trying to reference a local variable before any value has been assigned to it.</p>\n\n<p>If you want the variable <code>c</code> to refer to the global <code>c</code> put</p>\n\n<pre><code>global c\n</code></pre>\n\n<p>as the first line of the function.</p>\n\n<p>As for python 3, there is now</p>\n\n<pre><code>nonlocal c\n</code></pre>\n\n<p>that you can use to refer to the nearest enclosing function scope that has a <code>c</code> variable.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>The <code>time</code> module can be initialized using seconds since epoch:</p>\n\n<pre><code>&gt;&gt;&gt; import time\n&gt;&gt;&gt; t1=time.gmtime(1284286794)\n&gt;&gt;&gt; t1\ntime.struct_time(tm_year=2010, tm_mon=9, tm_mday=12, tm_hour=10, tm_min=19, \n                 tm_sec=54, tm_wday=6, tm_yday=255, tm_isdst=0)\n</code></pre>\n\n<p>Is there an elegant way to initialize a <code>datetime.datetime</code> object in the same way?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"http://docs.python.org/library/datetime.html#datetime.datetime.fromtimestamp\"><code>datetime.datetime.fromtimestamp</code></a> will do, if you know the time zone, you could produce the same output as with <code>time.gmtime</code></p>\n\n<pre><code>&gt;&gt;&gt; datetime.datetime.fromtimestamp(1284286794)\ndatetime.datetime(2010, 9, 12, 11, 19, 54)\n</code></pre>\n\n<p>or </p>\n\n<pre><code>&gt;&gt;&gt; datetime.datetime.utcfromtimestamp(1284286794)\ndatetime.datetime(2010, 9, 12, 10, 19, 54)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am looking over <a href=\"http://docs.djangoproject.com/en/1.2/topics/auth/#django.contrib.auth.models.User\" rel=\"noreferrer\">this website</a> but just can't seem to figure out how to do this as it's not working. I need to check if the current site user is logged in (authenticated), and am trying:</p>\n\n<pre><code>request.user.is_authenticated\n</code></pre>\n\n<p>despite being sure that the user is logged in, it returns just:</p>\n\n<pre><code>&gt;\n</code></pre>\n\n<p>I'm able to do other requests (from the first section in the url above), such as:</p>\n\n<pre><code>request.user.is_active\n</code></pre>\n\n<p>which returns a successful response.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>is_authenticated</code> is a function. You should call it like</p>\n\n<pre><code>if request.user.is_authenticated():\n    # do something if the user is authenticated\n</code></pre>\n\n<p>As Peter Rowell pointed out, what may be tripping you up is that in the default Django template language, you don't tack on parenthesis to call functions. So you may have seen something like this in template code:</p>\n\n<pre><code>{% if user.is_authenticated %}\n</code></pre>\n\n<p>However, in Python code, it is indeed a method in the <code>User</code> class.</p>\n\n<p><strong>Edit for Django 1.10</strong>: <code>is_authenticated</code> is now an attribute in Django 1.10. The method still exists for backwards compatibility, but will be removed in Django 2.0.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am trying to get a list of files in a directory using Python, but I do not want a list of ALL the files.</p>\n\n<p>What I essentially want is the ability to do something like the following but using Python and not executing ls.</p>\n\n<pre><code>ls 145592*.jpg\n</code></pre>\n\n<p>If there is no built-in method for this, I am currently thinking of writing a for loop to iterate through the results of an <code>os.listdir()</code> and to append all the matching files to a new list.</p>\n\n<p>However, there are a lot of files in that directory and therefore I am hoping there is a more efficient method (or a built-in method).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"http://docs.python.org/library/glob.html#glob.glob\" rel=\"noreferrer\"><code>glob.glob('145592*.jpg')</code></a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In a matplotlib figure, how can I make the font size for the tick labels using <code>ax1.set_xticklabels()</code> smaller?</p>\n\n<p>Further, how can one rotate it from horizontal to vertical?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Please note that newer versions of MPL have a shortcut for this task. An example is shown in the other answer to this question: <a href=\"https://stackoverflow.com/a/11386056/42346\">https://stackoverflow.com/a/11386056/42346</a></p>\n\n<p>The code below is for illustrative purposes and may not necessarily be optimized.</p>\n\n<pre><code>import matplotlib.pyplot as plt\nimport numpy as np\n\ndef xticklabels_example():\n    fig = plt.figure() \n\n    x = np.arange(20)\n    y1 = np.cos(x)\n    y2 = (x**2)\n    y3 = (x**3)\n    yn = (y1,y2,y3)\n    COLORS = ('b','g','k')\n\n    for i,y in enumerate(yn):\n        ax = fig.add_subplot(len(yn),1,i+1)\n\n        ax.plot(x, y, ls='solid', color=COLORS[i]) \n\n        if i != len(yn) - 1:\n            # all but last \n            ax.set_xticklabels( () )\n        else:\n            for tick in ax.xaxis.get_major_ticks():\n                tick.label.set_fontsize(14) \n                # specify integer or one of preset strings, e.g.\n                #tick.label.set_fontsize('x-small') \n                tick.label.set_rotation('vertical')\n\n    fig.suptitle('Matplotlib xticklabels Example')\n    plt.show()\n\nif __name__ == '__main__':\n    xticklabels_example()\n</code></pre>\n\n<p><img src=\"https://i.stack.imgur.com/lRp5U.png\" alt=\"enter image description here\"></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I know that most decimals don't have an exact floating point representation (<a href=\"https://stackoverflow.com/questions/588004\">Is floating point math broken?</a>).</p>\n\n<p>But I don't see why <code>4*0.1</code> is printed nicely as <code>0.4</code>, but <code>3*0.1</code> isn't, when\nboth values actually have ugly decimal representations:</p>\n\n<pre><code>&gt;&gt;&gt; 3*0.1\n0.30000000000000004\n&gt;&gt;&gt; 4*0.1\n0.4\n&gt;&gt;&gt; from decimal import Decimal\n&gt;&gt;&gt; Decimal(3*0.1)\nDecimal('0.3000000000000000444089209850062616169452667236328125')\n&gt;&gt;&gt; Decimal(4*0.1)\nDecimal('0.40000000000000002220446049250313080847263336181640625')\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The simple answer is because <code>3*0.1 != 0.3</code> due to quantization (roundoff) error (whereas <code>4*0.1 == 0.4</code> because multiplying by a power of two is usually an \"exact\" operation).</p>\n\n<p>You can use the <code>.hex</code> method in Python to view the internal representation of a number (basically, the <em>exact</em> binary floating point value, rather than the base-10 approximation). This can help to explain what's going on under the hood.</p>\n\n<pre><code>&gt;&gt;&gt; (0.1).hex()\n'0x1.999999999999ap-4'\n&gt;&gt;&gt; (0.3).hex()\n'0x1.3333333333333p-2'\n&gt;&gt;&gt; (0.1*3).hex()\n'0x1.3333333333334p-2'\n&gt;&gt;&gt; (0.4).hex()\n'0x1.999999999999ap-2'\n&gt;&gt;&gt; (0.1*4).hex()\n'0x1.999999999999ap-2'\n</code></pre>\n\n<p>0.1 is 0x1.999999999999a times 2^-4. The \"a\" at the end means the digit 10 - in other words, 0.1 in binary floating point is <em>very slightly</em> larger than the \"exact\" value of 0.1 (because the final 0x0.99 is rounded up to 0x0.a). When you multiply this by 4, a power of two, the exponent shifts up (from 2^-4 to 2^-2) but the number is otherwise unchanged, so <code>4*0.1 == 0.4</code>.</p>\n\n<p>However, when you multiply by 3, the little tiny difference between 0x0.99 and 0x0.a0 (0x0.07) magnifies into a 0x0.15 error, which shows up as a one-digit error in the last position. This causes 0.1*3 to be <em>very slightly</em> larger than the rounded value of 0.3.</p>\n\n<p>Python 3's float <code>repr</code> is designed to be <em>round-trippable</em>, that is, the value shown should be exactly convertible into the original value. Therefore, it cannot display <code>0.3</code> and <code>0.1*3</code> exactly the same way, or the two <em>different</em> numbers would end up the same after round-tripping. Consequently, Python 3's <code>repr</code> engine chooses to display one with a slight apparent error.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What's the easiest way to shuffle an array with python?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>import random\nrandom.shuffle(array)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Say I have a Python function that returns multiple values in a tuple:</p>\n\n<pre><code>def func():\n    return 1, 2\n</code></pre>\n\n<p>Is there a nice way to ignore one of the results rather than just assigning to a temporary variable? Say if I was only interested in the first value, is there a better way than this:</p>\n\n<pre><code>x, temp = func()\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>One common convention is to use a \"_\" as a variable name for the elements of the tuple you wish to ignore. For instance:</p>\n\n<pre><code>def f():\n    return 1, 2, 3\n\n_, _, x = f()\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What named colors are available in matplotlib for use in plots?  I can find a list on the matplotlib documentation that claims that these are the only names:</p>\n\n<pre><code>b: blue\ng: green\nr: red\nc: cyan\nm: magenta\ny: yellow\nk: black\nw: white\n</code></pre>\n\n<p>However, I've found that these colors can also be used, at least in this context:</p>\n\n<pre><code>scatter(X,Y, color='red')\nscatter(X,Y, color='orange')\nscatter(X,Y, color='darkgreen')\n</code></pre>\n\n<p>but these are not on the above list.  Does anyone know an exhaustive list of the named colors that are available?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Matplotlib uses a dictionary from its colors.py module. </p>\n\n<p>To print the names use:</p>\n\n<pre><code># python2:\n\nimport matplotlib\nfor name, hex in matplotlib.colors.cnames.iteritems():\n    print(name, hex)\n\n# python3:\n\nimport matplotlib\nfor name, hex in matplotlib.colors.cnames.items():\n    print(name, hex)\n</code></pre>\n\n<p>This is the complete dictionary:</p>\n\n<pre><code>cnames = {\n'aliceblue':            '#F0F8FF',\n'antiquewhite':         '#FAEBD7',\n'aqua':                 '#00FFFF',\n'aquamarine':           '#7FFFD4',\n'azure':                '#F0FFFF',\n'beige':                '#F5F5DC',\n'bisque':               '#FFE4C4',\n'black':                '#000000',\n'blanchedalmond':       '#FFEBCD',\n'blue':                 '#0000FF',\n'blueviolet':           '#8A2BE2',\n'brown':                '#A52A2A',\n'burlywood':            '#DEB887',\n'cadetblue':            '#5F9EA0',\n'chartreuse':           '#7FFF00',\n'chocolate':            '#D2691E',\n'coral':                '#FF7F50',\n'cornflowerblue':       '#6495ED',\n'cornsilk':             '#FFF8DC',\n'crimson':              '#DC143C',\n'cyan':                 '#00FFFF',\n'darkblue':             '#00008B',\n'darkcyan':             '#008B8B',\n'darkgoldenrod':        '#B8860B',\n'darkgray':             '#A9A9A9',\n'darkgreen':            '#006400',\n'darkkhaki':            '#BDB76B',\n'darkmagenta':          '#8B008B',\n'darkolivegreen':       '#556B2F',\n'darkorange':           '#FF8C00',\n'darkorchid':           '#9932CC',\n'darkred':              '#8B0000',\n'darksalmon':           '#E9967A',\n'darkseagreen':         '#8FBC8F',\n'darkslateblue':        '#483D8B',\n'darkslategray':        '#2F4F4F',\n'darkturquoise':        '#00CED1',\n'darkviolet':           '#9400D3',\n'deeppink':             '#FF1493',\n'deepskyblue':          '#00BFFF',\n'dimgray':              '#696969',\n'dodgerblue':           '#1E90FF',\n'firebrick':            '#B22222',\n'floralwhite':          '#FFFAF0',\n'forestgreen':          '#228B22',\n'fuchsia':              '#FF00FF',\n'gainsboro':            '#DCDCDC',\n'ghostwhite':           '#F8F8FF',\n'gold':                 '#FFD700',\n'goldenrod':            '#DAA520',\n'gray':                 '#808080',\n'green':                '#008000',\n'greenyellow':          '#ADFF2F',\n'honeydew':             '#F0FFF0',\n'hotpink':              '#FF69B4',\n'indianred':            '#CD5C5C',\n'indigo':               '#4B0082',\n'ivory':                '#FFFFF0',\n'khaki':                '#F0E68C',\n'lavender':             '#E6E6FA',\n'lavenderblush':        '#FFF0F5',\n'lawngreen':            '#7CFC00',\n'lemonchiffon':         '#FFFACD',\n'lightblue':            '#ADD8E6',\n'lightcoral':           '#F08080',\n'lightcyan':            '#E0FFFF',\n'lightgoldenrodyellow': '#FAFAD2',\n'lightgreen':           '#90EE90',\n'lightgray':            '#D3D3D3',\n'lightpink':            '#FFB6C1',\n'lightsalmon':          '#FFA07A',\n'lightseagreen':        '#20B2AA',\n'lightskyblue':         '#87CEFA',\n'lightslategray':       '#778899',\n'lightsteelblue':       '#B0C4DE',\n'lightyellow':          '#FFFFE0',\n'lime':                 '#00FF00',\n'limegreen':            '#32CD32',\n'linen':                '#FAF0E6',\n'magenta':              '#FF00FF',\n'maroon':               '#800000',\n'mediumaquamarine':     '#66CDAA',\n'mediumblue':           '#0000CD',\n'mediumorchid':         '#BA55D3',\n'mediumpurple':         '#9370DB',\n'mediumseagreen':       '#3CB371',\n'mediumslateblue':      '#7B68EE',\n'mediumspringgreen':    '#00FA9A',\n'mediumturquoise':      '#48D1CC',\n'mediumvioletred':      '#C71585',\n'midnightblue':         '#191970',\n'mintcream':            '#F5FFFA',\n'mistyrose':            '#FFE4E1',\n'moccasin':             '#FFE4B5',\n'navajowhite':          '#FFDEAD',\n'navy':                 '#000080',\n'oldlace':              '#FDF5E6',\n'olive':                '#808000',\n'olivedrab':            '#6B8E23',\n'orange':               '#FFA500',\n'orangered':            '#FF4500',\n'orchid':               '#DA70D6',\n'palegoldenrod':        '#EEE8AA',\n'palegreen':            '#98FB98',\n'paleturquoise':        '#AFEEEE',\n'palevioletred':        '#DB7093',\n'papayawhip':           '#FFEFD5',\n'peachpuff':            '#FFDAB9',\n'peru':                 '#CD853F',\n'pink':                 '#FFC0CB',\n'plum':                 '#DDA0DD',\n'powderblue':           '#B0E0E6',\n'purple':               '#800080',\n'red':                  '#FF0000',\n'rosybrown':            '#BC8F8F',\n'royalblue':            '#4169E1',\n'saddlebrown':          '#8B4513',\n'salmon':               '#FA8072',\n'sandybrown':           '#FAA460',\n'seagreen':             '#2E8B57',\n'seashell':             '#FFF5EE',\n'sienna':               '#A0522D',\n'silver':               '#C0C0C0',\n'skyblue':              '#87CEEB',\n'slateblue':            '#6A5ACD',\n'slategray':            '#708090',\n'snow':                 '#FFFAFA',\n'springgreen':          '#00FF7F',\n'steelblue':            '#4682B4',\n'tan':                  '#D2B48C',\n'teal':                 '#008080',\n'thistle':              '#D8BFD8',\n'tomato':               '#FF6347',\n'turquoise':            '#40E0D0',\n'violet':               '#EE82EE',\n'wheat':                '#F5DEB3',\n'white':                '#FFFFFF',\n'whitesmoke':           '#F5F5F5',\n'yellow':               '#FFFF00',\n'yellowgreen':          '#9ACD32'}\n</code></pre>\n\n<p>You could plot them like this:</p>\n\n<pre><code>import matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nimport matplotlib.colors as colors\nimport math\n\n\nfig = plt.figure()\nax = fig.add_subplot(111)\n\nratio = 1.0 / 3.0\ncount = math.ceil(math.sqrt(len(colors.cnames)))\nx_count = count * ratio\ny_count = count / ratio\nx = 0\ny = 0\nw = 1 / x_count\nh = 1 / y_count\n\nfor c in colors.cnames:\n    pos = (x / x_count, y / y_count)\n    ax.add_patch(patches.Rectangle(pos, w, h, color=c))\n    ax.annotate(c, xy=pos)\n    if y &gt;= y_count-1:\n        x += 1\n        y = 0\n    else:\n        y += 1\n\nplt.show()\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Recently I started using Python3 and it's lack of xrange hurts.</p>\n\n<p>Simple example:</p>\n\n<p><strong>1)</strong> Python2:</p>\n\n<pre><code>from time import time as t\ndef count():\n  st = t()\n  [x for x in xrange(10000000) if x%4 == 0]\n  et = t()\n  print et-st\ncount()\n</code></pre>\n\n<p><strong>2)</strong> Python3:</p>\n\n<pre><code>from time import time as t\n\ndef xrange(x):\n\n    return iter(range(x))\n\ndef count():\n    st = t()\n    [x for x in xrange(10000000) if x%4 == 0]\n    et = t()\n    print (et-st)\ncount()\n</code></pre>\n\n<p>The results are, respectively:</p>\n\n<p><strong>1)</strong> 1.53888392448\n<strong>2)</strong> 3.215819835662842</p>\n\n<p>Why is that? I mean, why xrange's been removed? It's such a great tool to learn. For the beginners, just like myself, like we all were at some point. Why remove it? Can somebody point me to the proper PEP, I can't find it.</p>\n\n<p>Cheers.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Some performance measurements, using <code>timeit</code> instead of trying to do it manually with <code>time</code>.</p>\n\n<p>First, Apple 2.7.2 64-bit:</p>\n\n<pre><code>In [37]: %timeit collections.deque((x for x in xrange(10000000) if x%4 == 0), maxlen=0)\n1 loops, best of 3: 1.05 s per loop\n</code></pre>\n\n<p>Now, python.org 3.3.0 64-bit:</p>\n\n<pre><code>In [83]: %timeit collections.deque((x for x in range(10000000) if x%4 == 0), maxlen=0)\n1 loops, best of 3: 1.32 s per loop\n\nIn [84]: %timeit collections.deque((x for x in xrange(10000000) if x%4 == 0), maxlen=0)\n1 loops, best of 3: 1.31 s per loop\n\nIn [85]: %timeit collections.deque((x for x in iter(range(10000000)) if x%4 == 0), maxlen=0) \n1 loops, best of 3: 1.33 s per loop\n</code></pre>\n\n<p>Apparently, 3.x <code>range</code> really is a bit slower than 2.x <code>xrange</code>. And the OP's <code>xrange</code> function has nothing to do with it. (Not surprising, as a one-time call to the <code>__iter__</code> slot isn't likely to be visible among 10000000 calls to whatever happens in the loop, but someone brought it up as a possibility.)</p>\n\n<p>But it's only 30% slower. How did the OP get 2x as slow? Well, if I repeat the same tests with 32-bit Python, I get 1.58 vs. 3.12. So my guess is that this is yet another of those cases where 3.x has been optimized for 64-bit performance in ways that hurt 32-bit.</p>\n\n<p>But does it really matter? Check this out, with 3.3.0 64-bit again:</p>\n\n<pre><code>In [86]: %timeit [x for x in range(10000000) if x%4 == 0]\n1 loops, best of 3: 3.65 s per loop\n</code></pre>\n\n<p>So, building the <code>list</code> takes more than twice as long than the entire iteration. </p>\n\n<p>And as for \"consumes much more resources than Python 2.6+\", from my tests, it looks like a 3.x <code>range</code> is exactly the same size as a 2.x <code>xrange</code>\u2014and, even if it were 10x as big, building the unnecessary list is still about 10000000x more of a problem than anything the range iteration could possibly do.</p>\n\n<p>And what about an explicit <code>for</code> loop instead of the C loop inside <code>deque</code>?</p>\n\n<pre><code>In [87]: def consume(x):\n   ....:     for i in x:\n   ....:         pass\nIn [88]: %timeit consume(x for x in range(10000000) if x%4 == 0)\n1 loops, best of 3: 1.85 s per loop\n</code></pre>\n\n<p>So, almost as much time wasted in the <code>for</code> statement as in the actual work of iterating the <code>range</code>.</p>\n\n<p>If you're worried about optimizing the iteration of a range object, you're probably looking in the wrong place.</p>\n\n<hr>\n\n<p>Meanwhile, you keep asking why <code>xrange</code> was removed, no matter how many times people tell you the same thing, but I'll repeat it again: It was not removed: it was renamed to <code>range</code>, and the 2.x <code>range</code> is what was removed.</p>\n\n<p>Here's some proof that the 3.3 <code>range</code> object is a direct descendant of the 2.x <code>xrange</code> object (and not of the 2.x <code>range</code> function): the source to <a href=\"http://hg.python.org/cpython/file/3.3/Objects/rangeobject.c\" rel=\"noreferrer\">3.3 <code>range</code></a> and <a href=\"http://hg.python.org/cpython/file/2.7/Objects/rangeobject.c\" rel=\"noreferrer\">2.7 <code>xrange</code></a>. You can even see the <a href=\"http://hg.python.org/cpython/diff/a6eb6acfe04a/Objects/rangeobject.c\" rel=\"noreferrer\">change history</a> (linked to, I believe, the change that replaced the last instance of the string \"xrange\" anywhere in the file).</p>\n\n<p>So, why is it slower?</p>\n\n<p>Well, for one, they've added a lot of new features. For another, they've done all kinds of changes all over the place (especially inside iteration) that have minor side effects. And there'd been a lot of work to dramatically optimize various important cases, even if it sometimes slightly pessimizes less important cases. Add this all up, and I'm not surprised that iterating a <code>range</code> as fast as possible is now a bit slower. It's one of those less-important cases that nobody would ever care enough to focus on. No one is likely to ever have a real-life use case where this performance difference is the hotspot in their code.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I do most of my programming in Python 3.x on Windows 7, but now I need to use the Python Imaging Library (PIL), ImageMagick, and wxPython, all of which require Python 2.x.</p>\n\n<p>Can I have both Python 2.x and Python 3.x installed in Windows 7? When I run a script, how would I \"choose\" which version of Python should run it? Will the aforementioned programs be able to handle multiple versions of Python installed at once? I have searched for hours and hours for how to do this to no avail.</p>\n\n<p>Thanks.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I found that the formal way to do this is as follows:</p>\n\n<p>Just install two (or more, using their installers) versions of Python on Windows 7 (for me work with 3.3 and 2.7). </p>\n\n<p>Follow the instuctions below, changing the parameters for your needs.</p>\n\n<p>Create the following environment variable (to default on double click):</p>\n\n<pre><code>Name:  PY_PYTHON\nValue: 3\n</code></pre>\n\n<p>To launch a script in a particular interpreter, add the following shebang (beginning of script):</p>\n\n<pre><code>#! python2\n</code></pre>\n\n<p>To execute a script using a specific interpreter, use the following prompt command:</p>\n\n<pre><code>&gt; py -2 MyScript.py\n</code></pre>\n\n<p>To launch a specific interpreter:</p>\n\n<pre><code>&gt; py -2\n</code></pre>\n\n<p>To launch the default interpreter (defined by the PY_PYTHON variable):</p>\n\n<pre><code>&gt; py\n</code></pre>\n\n<p><strong>Resources</strong></p>\n\n<p>Documentation: <a href=\"http://docs.python.org/3.3/using/windows.html\" rel=\"noreferrer\">Using Python on Windows</a></p>\n\n<p><a href=\"http://www.python.org/dev/peps/pep-0397/\" rel=\"noreferrer\">PEP 397</a> - Python launcher for Windows</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How can I use the nifty JavaScript date and time widgets that the default admin uses with my custom view?</p>\n\n<p>I have looked through <a href=\"https://docs.djangoproject.com/en/dev/topics/forms/\" rel=\"noreferrer\">the Django forms documentation</a>, and it briefly mentions django.contrib.admin.widgets, but I don't know how to use it?</p>\n\n<p>Here is my template that I want it applied on.</p>\n\n<pre><code>&lt;form action=\".\" method=\"POST\"&gt;\n    &lt;table&gt;\n        {% for f in form %}\n           &lt;tr&gt; &lt;td&gt; {{ f.name }}&lt;/td&gt; &lt;td&gt;{{ f }}&lt;/td&gt; &lt;/tr&gt;\n        {% endfor %}\n    &lt;/table&gt;\n    &lt;input type=\"submit\" name=\"submit\" value=\"Add Product\"&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>Also, I think it should be noted that I haven't really written a view up myself for this form, I am using a generic view. Here is the entry from the url.py:</p>\n\n<pre><code>(r'^admin/products/add/$', create_object, {'model': Product, 'post_save_redirect': ''}),\n</code></pre>\n\n<p>And I am relevantly new to the whole Django/MVC/MTV thing, so please go easy...</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The growing complexity of this answer over time, and the many hacks required, probably ought to caution you against doing this at all. It's relying on undocumented internal implementation details of the admin, is likely to break again in future versions of Django, and is no easier to implement than just finding another JS calendar widget and using that.</p>\n\n<p>That said, here's what you have to do if you're determined to make this work:</p>\n\n<ol>\n<li><p>Define your own ModelForm subclass for your model (best to put it in forms.py in your app), and tell it to use the AdminDateWidget / AdminTimeWidget / AdminSplitDateTime (replace 'mydate' etc with the proper field names from your model):</p>\n\n<pre><code>from django import forms\nfrom my_app.models import Product\nfrom django.contrib.admin import widgets                                       \n\nclass ProductForm(forms.ModelForm):\n    class Meta:\n        model = Product\n    def __init__(self, *args, **kwargs):\n        super(ProductForm, self).__init__(*args, **kwargs)\n        self.fields['mydate'].widget = widgets.AdminDateWidget()\n        self.fields['mytime'].widget = widgets.AdminTimeWidget()\n        self.fields['mydatetime'].widget = widgets.AdminSplitDateTime()\n</code></pre></li>\n<li><p>Change your URLconf to pass 'form_class': ProductForm instead of 'model': Product to the generic create_object view (that'll mean \"from my_app.forms import ProductForm\" instead of \"from my_app.models import Product\", of course).</p></li>\n<li><p>In the head of your template, include {{ form.media }} to output the links to the Javascript files.</p></li>\n<li><p>And the hacky part: the admin date/time widgets presume that the i18n JS stuff has been loaded, and also require core.js, but don't provide either one automatically.  So in your template above {{ form.media }} you'll need:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"/my_admin/jsi18n/\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\" src=\"/media/admin/js/core.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>You may also wish to use the following admin CSS (thanks <a href=\"https://stackoverflow.com/questions/38601/using-django-time-date-widgets-in-custom-form/719583#719583\">Alex</a> for mentioning this):</p>\n\n<pre><code>&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"/media/admin/css/forms.css\"/&gt;\n&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"/media/admin/css/base.css\"/&gt;\n&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"/media/admin/css/global.css\"/&gt;\n&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"/media/admin/css/widgets.css\"/&gt;\n</code></pre></li>\n</ol>\n\n<p>This implies that Django's admin media (ADMIN_MEDIA_PREFIX) is at /media/admin/ - you can change that for your setup.  Ideally you'd use a context processor to pass this values to your template instead of hardcoding it, but that's beyond the scope of this question.</p>\n\n<p>This also requires that the URL /my_admin/jsi18n/ be manually wired up to the django.views.i18n.javascript_catalog view (or null_javascript_catalog if you aren't using I18N).  You have to do this yourself instead of going through the admin application so it's accessible regardless of whether you're logged into the admin (thanks <a href=\"https://stackoverflow.com/questions/38601/using-django-time-date-widgets-in-custom-form/408230#408230\">Jeremy</a> for pointing this out).  Sample code for your URLconf:</p>\n\n<pre><code>(r'^my_admin/jsi18n', 'django.views.i18n.javascript_catalog'),\n</code></pre>\n\n<p>Lastly, if you are using Django 1.2 or later, you need some additional code in your template to help the widgets find their media:</p>\n\n<pre><code>{% load adminmedia %} /* At the top of the template. */\n\n/* In the head section of the template. */\n&lt;script type=\"text/javascript\"&gt;\nwindow.__admin_media_prefix__ = \"{% filter escapejs %}{% admin_media_prefix %}{% endfilter %}\";\n&lt;/script&gt;\n</code></pre>\n\n<p>Thanks <a href=\"https://stackoverflow.com/questions/38601/using-django-time-date-widgets-in-custom-form/2818128#2818128\">lupefiasco</a> for this addition.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Ok, I've tried about near everything and I cannot get this to work.</p>\n\n<ul>\n<li>I have a Django model with an ImageField on it</li>\n<li>I have code that downloads an image via HTTP (tested and works)</li>\n<li>The image is saved directly into the 'upload_to' folder (the upload_to being the one that is set on the ImageField)</li>\n<li>All I need to do is associate the already existing image file path with the ImageField</li>\n</ul>\n\n<p>I've written this code about 6 different ways.</p>\n\n<p>The problem I'm running into is all of the code that I'm writing results in the following behavior:\n(1) Django will make a 2nd file, (2) rename the new file, adding an _ to the end of the file name, then (3) not transfer any of the data over leaving it basically an empty re-named file.  What's left in the 'upload_to' path is 2 files, one that is the actual image, and one that is the name of the image,but is empty, and of course the ImageField path is set to the empty file that Django try to create.</p>\n\n<p>In case that was unclear, I'll try to illustrate:</p>\n\n<pre><code>## Image generation code runs.... \n/Upload\n     generated_image.jpg     4kb\n\n## Attempt to set the ImageField path...\n/Upload\n     generated_image.jpg     4kb\n     generated_image_.jpg    0kb\n\nImageField.Path = /Upload/generated_image_.jpg\n</code></pre>\n\n<p>How can I do this without having Django try to re-store the file?  What I'd really like is something to this effect...</p>\n\n<pre><code>model.ImageField.path = generated_image_path\n</code></pre>\n\n<p>...but of course that doesn't work.</p>\n\n<p>And yes I've gone through the other questions here like <a href=\"https://stackoverflow.com/questions/811167/how-to-manually-assign-imagefield-in-django\">this one</a> as well as the django doc on <a href=\"http://docs.djangoproject.com/en/dev/ref/files/file/#django.core.files.File.save\" rel=\"noreferrer\">File</a></p>\n\n<p><strong>UPDATE</strong>\nAfter further testing, it only does this behavior when running under Apache on Windows Server.  While running under the 'runserver' on XP it does not execute this behavior. </p>\n\n<p>I am stumped.</p>\n\n<p>Here is the code which runs successfully on XP...</p>\n\n<pre><code>f = open(thumb_path, 'r')\nmodel.thumbnail = File(f)\nmodel.save()\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I have some code that fetches an image off the web and stores it in a model.  The important bits are:</p>\n\n<pre><code>from django.core.files import File  # you need this somewhere\nimport urllib\n\n\n# The following actually resides in a method of my model\n\nresult = urllib.urlretrieve(image_url) # image_url is a URL to an image\n\n# self.photo is the ImageField\nself.photo.save(\n    os.path.basename(self.url),\n    File(open(result[0]))\n    )\n\nself.save()\n</code></pre>\n\n<p>That's a bit confusing because it's pulled out of my model and a bit out of context, but the important parts are:</p>\n\n<ul>\n<li>The image pulled from the web is <em>not</em> stored in the upload_to folder, it is instead stored as a tempfile by urllib.urlretrieve() and later discarded.</li>\n<li>The ImageField.save() method takes a filename (the os.path.basename bit) and a django.core.files.File object.</li>\n</ul>\n\n<p>Let me know if you have questions or need clarification.</p>\n\n<p>Edit: for the sake of clarity, here is the model (minus any required import statements):</p>\n\n<pre><code>class CachedImage(models.Model):\n    url = models.CharField(max_length=255, unique=True)\n    photo = models.ImageField(upload_to=photo_path, blank=True)\n\n    def cache(self):\n        \"\"\"Store image locally if we have a URL\"\"\"\n\n        if self.url and not self.photo:\n            result = urllib.urlretrieve(self.url)\n            self.photo.save(\n                    os.path.basename(self.url),\n                    File(open(result[0]))\n                    )\n            self.save()\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I was wondering how to check whether a variable is a class (not an instance!) or not.</p>\n\n<p>I've tried to use the function <code>isinstance(object, class_or_type_or_tuple)</code> to do this, but I don't know what type would a class will have.</p>\n\n<p>For example, in the following code</p>\n\n<pre><code>class Foo: pass  \nisinstance(Foo, **???**) # i want to make this return True.\n</code></pre>\n\n<p>I tried to substitute  \"<code>class</code>\" with <strong>???</strong>, but I realized that <code>class</code> is a keyword in python.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Even better: use the <a href=\"https://docs.python.org/library/inspect.html#inspect.isclass\" rel=\"noreferrer\"><code>inspect.isclass</code></a> function.</p>\n\n<pre><code>&gt;&gt;&gt; import inspect\n&gt;&gt;&gt; class X(object):\n...     pass\n... \n&gt;&gt;&gt; inspect.isclass(X)\nTrue\n\n&gt;&gt;&gt; x = X()\n&gt;&gt;&gt; isinstance(x, X)\nTrue\n&gt;&gt;&gt; y = 25\n&gt;&gt;&gt; isinstance(y, X)\nFalse\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Suppose I have the following argparse snippet:</p>\n\n<pre><code>diags.cmdln_parser.add_argument( '--scan-time',\n                     action  = 'store',\n                     nargs   = '?',\n                     type    = int,\n                     default = 5,\n                     help    = \"Wait SCAN-TIME seconds between status checks.\")\n</code></pre>\n\n<p>Currently, --help returns:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>usage: connection_check.py [-h]\n                             [--version] [--scan-time [SCAN_TIME]]\n\n          Test the reliability/uptime of a connection.\n\n\n\noptional arguments:\n-h, --help            show this help message and exit\n--version             show program's version number and exit\n--scan-time [SCAN_TIME]\n                    Wait SCAN-TIME seconds between status checks.\n</code></pre>\n\n<p>I would prefer something like:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>--scan-time [SCAN_TIME]\n                    Wait SCAN-TIME seconds between status checks.\n                    (Default = 5)\n</code></pre>\n\n<p>Peeking at the help formatter code revealed limited options.  Is there a clever way to get argparse to print the default value for '--scan-time' in a similar fashion, or should I just sub-class the help formatter?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use the <a href=\"http://docs.python.org/library/argparse.html#formatter-class\"><code>argparse.ArgumentDefaultsHelpFormatter</code> formatter</a>:</p>\n\n<pre><code>parser = argparse.ArgumentParser(\n    # ... other options ...\n    formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n</code></pre>\n\n<p>To quote the documentation:</p>\n\n<blockquote>\n  <p>The other formatter class available, <code>ArgumentDefaultsHelpFormatter</code>, will add information about the default value of each of the arguments.</p>\n</blockquote>\n\n<p>Note that this only applies to arguments that have help text defined; with no <code>help</code> value for an argument, there is noting to add information <em>to</em>.</p>\n\n<p>The exact output for your scan-time option then becomes:</p>\n\n<pre><code>  --scan-time [SCAN_TIME]\n                        Wait SCAN-TIME seconds between status checks.\n                        (default: 5)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I want to find the position (or index) of the last occurrence of a certain substring in given inputted string <code>str</code>.</p>\n\n<p>For example, suppose the inputted string is <code>str = 'hello'</code> and the substring is <code>target = 'l'</code>, then it should output 3.</p>\n\n<p>How can I do this?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use <a href=\"http://docs.python.org/py3k/library/stdtypes.html#str.rfind\"><code>.rfind()</code></a>:</p>\n\n<pre><code>&gt;&gt;&gt; s = 'hello'\n&gt;&gt;&gt; s.rfind('l')\n3\n</code></pre>\n\n<p>Also don't use <code>str</code> as variable name or you'll shadow the built-in <a href=\"http://docs.python.org/py3k/library/functions.html#str\"><code>str()</code></a>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/1712227/how-to-get-the-number-of-elements-in-a-list-in-python\" dir=\"ltr\">How to get the number of elements in a list in Python?</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    7 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>I am a newbe to Python..\nI am trying to find a simple way of getting a count of the number of elements in a list \ne.g. </p>\n\n<pre><code>MyList = [\"a\", \"b\", \"c\"]\n</code></pre>\n\n<p>So I want to know there are three.\nI am surely missing something.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"http://docs.python.org/library/functions.html#len\" rel=\"noreferrer\"><code>len()</code></a></p>\n\n<pre><code>&gt;&gt;&gt; someList=[]\n&gt;&gt;&gt; print len(someList)\n0\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'd like to extract the text from an HTML file using Python.  I want essentially the same output I would get if I copied the text from a browser and pasted it into notepad.  </p>\n\n<p>I'd like something more robust than using regular expressions that may fail on poorly formed HTML.  I've seen many people recommend Beautiful Soup, but I've had a few problems using it.  For one, it picked up unwanted text, such as JavaScript source.  Also, it did not interpret HTML entities.  For example, I would expect &amp;#39; in HTML source to be converted to an apostrophe in text, just as if I'd pasted the browser content into notepad.</p>\n\n<p><strong>Update</strong> <code>html2text</code> looks promising. It handles HTML entities correctly and ignores JavaScript.  However, it does not exactly produce plain text; it produces markdown that would then have to be turned into plain text. It comes with no examples or documentation, but the code looks clean.</p>\n\n<hr>\n\n<p>Related questions:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/37486/filter-out-html-tags-and-resolve-entities-in-python\">Filter out HTML tags and resolve entities in python</a></li>\n<li><a href=\"https://stackoverflow.com/questions/57708/convert-xmlhtml-entities-into-unicode-string-in-python\">Convert XML/HTML Entities into Unicode String in Python</a></li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"http://www.aaronsw.com/2002/html2text/\" rel=\"noreferrer\">html2text</a> is a Python program that does a pretty good job at this.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have terminal access to a VPS running centos 5.9 and default python 2.4.3 installed. I also installed python 2.7.3 via these commands: (I used <code>make altinstall</code> instead of <code>make install</code>)</p>\n\n<pre><code>wget http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tgz\ntar -xf Python-2.7.3.tgz\ncd Python-2.7.3\n./configure\nmake\nmake altinstall\n</code></pre>\n\n<p>then I installed node.js from source via these commands:</p>\n\n<pre><code>python2.7 ./configure\nmake\nmake install\n</code></pre>\n\n<p>The problem is, when I use <code>npm install</code> and try to install a node.js package which requires python &gt; 2.4.3 I get this error:</p>\n\n<pre><code>gyp ERR! configure error\ngyp ERR! stack Error: Python executable \"python\" is v2.4.3, which is not supported by gyp.\ngyp ERR! stack You can pass the --python switch to point to Python &gt;= v2.5.0 &amp; &lt; 3.0.0.\ngyp ERR! stack     at failPythonVersion (/usr/local/lib/node_modules/npm/node_modules/node-gyp/lib/configure.js:125:14)\ngyp ERR! stack     at /usr/local/lib/node_modules/npm/node_modules/node-gyp/lib/configure.js:114:9\n</code></pre>\n\n<p>how should I <em>\"pass the --python switch to point to Python &gt;= v2.5.0\"</em>?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use <code>--python</code> option to npm like so:</p>\n\n<pre><code>npm install --python=python2.7\n</code></pre>\n\n<p>or set it to be used always:</p>\n\n<pre><code>npm config set python python2.7\n</code></pre>\n\n<p>Npm will in turn pass this option to node-gyp when needed.</p>\n\n<p>(note: I'm the one who opened an issue on Github to have this included in the docs, as there were so many questions about it ;-) )</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p><br>\nI've created a pandas DataFrame</p>\n\n<pre><code>df=DataFrame(index=['A','B','C'], columns=['x','y'])\n</code></pre>\n\n<p>and got this</p>\n\n<pre>\n    x    y\nA  NaN  NaN\nB  NaN  NaN\nC  NaN  NaN\n</pre>\n\n<p><br>\nThen I want to assign value to particular cell, for example for row 'C' and column 'x'.\nI've expected to get such result:</p>\n\n<pre>\n    x    y\nA  NaN  NaN\nB  NaN  NaN\nC  10  NaN\n</pre>\n\n<p>with this code:</p>\n\n<pre><code>df.xs('C')['x']=10\n</code></pre>\n\n<p>but contents of <b>df</b> haven't changed. It's again only Nan's in dataframe. </p>\n\n<p>Any suggestions?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"https://stackoverflow.com/a/24517695/190597\">RukTech's answer</a>, <code>df.set_value('C', 'x', 10)</code>, is far and away faster than the options I've suggested below. However, it has been <a href=\"https://github.com/pandas-dev/pandas/issues/15269\" rel=\"noreferrer\"><strong>slated for deprecation</strong></a>.</p>\n\n<p>Going forward, the <a href=\"https://github.com/pandas-dev/pandas/issues/15269#issuecomment-276382712\" rel=\"noreferrer\">recommended method is <code>.iat/.at</code></a>.</p>\n\n<hr>\n\n<p><strong>Why <code>df.xs('C')['x']=10</code> does not work:</strong></p>\n\n<p><code>df.xs('C')</code> by default, returns a new dataframe <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.xs.html#pandas.DataFrame.xsY\" rel=\"noreferrer\">with a copy</a> of the data, so </p>\n\n<pre><code>df.xs('C')['x']=10\n</code></pre>\n\n<p>modifies this new dataframe only.</p>\n\n<p><code>df['x']</code> returns a view of the <code>df</code> dataframe, so </p>\n\n<pre><code>df['x']['C'] = 10\n</code></pre>\n\n<p>modifies <code>df</code> itself.</p>\n\n<p><strong>Warning</strong>: It is sometimes difficult to predict if an operation returns a copy or a view. For this reason the <a href=\"http://pandas.pydata.org/pandas-docs/stable/indexing.html#returning-a-view-versus-a-copy\" rel=\"noreferrer\">docs recommend avoiding assignments with \"chained indexing\"</a>.  </p>\n\n<hr>\n\n<p>So the recommended alternative is</p>\n\n<pre><code>df.at['C', 'x'] = 10\n</code></pre>\n\n<p>which <em>does</em> modify <code>df</code>.</p>\n\n<hr>\n\n<pre><code>In [18]: %timeit df.set_value('C', 'x', 10)\n100000 loops, best of 3: 2.9 \u00b5s per loop\n\nIn [20]: %timeit df['x']['C'] = 10\n100000 loops, best of 3: 6.31 \u00b5s per loop\n\nIn [81]: %timeit df.at['C', 'x'] = 10\n100000 loops, best of 3: 9.2 \u00b5s per loop\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I would like to make a deep copy of a <code>dict</code> in python. Unfortunately the <code>.deepcopy()</code> method doesn't exist for the <code>dict</code>. How do I do that?</p>\n\n<pre><code>&gt;&gt;&gt; my_dict = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n&gt;&gt;&gt; my_copy = my_dict.deepcopy()\nTraceback (most recent calll last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: 'dict' object has no attribute 'deepcopy'\n&gt;&gt;&gt; my_copy = my_dict.copy()\n&gt;&gt;&gt; my_dict['a'][2] = 7\n&gt;&gt;&gt; my_copy['a'][2]\n7\n</code></pre>\n\n<p>The last line should be <code>3</code>.</p>\n\n<p>I would like that modifications in <code>my_dict</code> don't impact the snapshot <code>my_copy</code>.</p>\n\n<p>How do I do that? The solution should be compatible with Python 3.x.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>How about:</p>\n\n<pre><code>import copy\nd = { ... }\nd2 = copy.deepcopy(d)\n</code></pre>\n\n<p>Python 2 or 3:</p>\n\n<pre><code>Python 3.2 (r32:88445, Feb 20 2011, 21:30:00) [MSC v.1500 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import copy\n&gt;&gt;&gt; my_dict = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n&gt;&gt;&gt; my_copy = copy.deepcopy(my_dict)\n&gt;&gt;&gt; my_dict['a'][2] = 7\n&gt;&gt;&gt; my_copy['a'][2]\n3\n&gt;&gt;&gt;\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a list of tuples in <a href=\"http://en.wikipedia.org/wiki/Python_%28programming_language%29\" rel=\"noreferrer\">Python</a>, and I have a conditional where I want to take the branch ONLY if the tuple is not in the list (if it is in the list, then I don't want to take the if branch)</p>\n\n<pre><code>if curr_x -1 &gt; 0 and (curr_x-1 , curr_y) not in myList: \n\n    # Do Something\n</code></pre>\n\n<p>This is not really working for me though. What have I done wrong?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The bug is probably somewhere else in your code, because it should work fine:</p>\n\n<pre><code>&gt;&gt;&gt; 3 not in [2, 3, 4]\nFalse\n&gt;&gt;&gt; 3 not in [4, 5, 6]\nTrue\n</code></pre>\n\n<p>Or with tuples:</p>\n\n<pre><code>&gt;&gt;&gt; (2, 3) not in [(2, 3), (5, 6), (9, 1)]\nFalse\n&gt;&gt;&gt; (2, 3) not in [(2, 7), (7, 3), \"hi\"]\nTrue\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I need to replace all non-ASCII (\\x00-\\x7F) characters with a space. I'm surprised that this is not dead-easy in Python, unless I'm missing something. The following function simply removes all non-ASCII characters:</p>\n\n<pre><code>def remove_non_ascii_1(text):\n\n    return ''.join(i for i in text if ord(i)&lt;128)\n</code></pre>\n\n<p>And this one replaces non-ASCII characters with the amount of spaces as per the amount of bytes in the character code point (i.e. the <code>\u2013</code> character is replaced with 3 spaces):</p>\n\n<pre><code>def remove_non_ascii_2(text):\n\n    return re.sub(r'[^\\x00-\\x7F]',' ', text)\n</code></pre>\n\n<p><strong>How can I replace all non-ASCII characters with a single space?</strong></p>\n\n<p><a href=\"https://stackoverflow.com/questions/1342000/how-to-replace-non-ascii-characters-in-string\">Of</a> <a href=\"https://stackoverflow.com/questions/196345/how-to-check-if-a-string-in-python-is-in-ascii\">the</a> <a href=\"https://stackoverflow.com/questions/6609895/efficiently-replace-bad-characters\">myriad</a> <a href=\"https://stackoverflow.com/questions/92438/stripping-non-printable-characters-from-a-string-in-python\">of</a> <a href=\"https://stackoverflow.com/questions/15737048/handle-non-ascii-code-string-in-python\">similar</a> <a href=\"https://stackoverflow.com/questions/8689795/python-remove-non-ascii-characters-but-leave-periods-and-spaces\">SO</a> <a href=\"https://stackoverflow.com/questions/2921815/help-replacing-non-ascii-character-in-python\">questions</a>, <a href=\"https://stackoverflow.com/questions/17273575/python-replace-non-ascii-characters-in-a-list-of-strings\">none</a> <a href=\"https://stackoverflow.com/questions/16866261/detecting-non-ascii-characters-in-unicode-string\">address</a> <a href=\"https://stackoverflow.com/questions/3667875/removing-non-ascii-characters-from-any-given-stringtype-in-python\">character</a> <a href=\"https://stackoverflow.com/questions/19000968/what-is-the-correct-way-to-use-unicode-characters-in-a-python-regex\">replacement</a> <a href=\"https://stackoverflow.com/questions/10993612/python-removing-xa0-from-string\">as</a> <a href=\"https://stackoverflow.com/questions/3586903/sqlite-remove-non-utf-8-characters\">opposed</a> <a href=\"https://stackoverflow.com/questions/15321138/removing-unicode-u2026-like-characters-in-a-string-in-python2-7\">to</a> <a href=\"https://stackoverflow.com/questions/18522127/removing-non-ascii-characters-in-a-csv-file\">stripping</a>, <a href=\"https://stackoverflow.com/questions/3870084/how-to-decode-a-non-unicode-character-in-python\">and </a> additionally address all non-ascii characters not  a  specific  character.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Your <code>''.join()</code> expression is <em>filtering</em>, removing anything non-ASCII; you could use a conditional expression instead:</p>\n\n<pre><code>return ''.join([i if ord(i) &lt; 128 else ' ' for i in text])\n</code></pre>\n\n<p>This handles characters one by one and would still use one space per character replaced.</p>\n\n<p>Your regular expression should just replace <em>consecutive</em> non-ASCII characters with a space:</p>\n\n<pre><code>re.sub(r'[^\\x00-\\x7F]+',' ', text)\n</code></pre>\n\n<p>Note the <code>+</code> there.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I want to use input from a user as a regex pattern for a search over some text.  It works, but how I can handle cases where user puts characters that have meaning in regex?  For example, the user wants to search for Word <code>(s)</code>: regex engine will take the <code>(s)</code> as a group.  I want it to treat it like a string <code>\"(s)\"</code>.  I can run <code>replace</code> on user input and replace the <code>(</code> with <code>\\(</code> and the <code>)</code> with <code>\\)</code> but the problem is I will need to do replace for every possible regex symbol. Do you know some better way ?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use the <code>re.escape()</code> function for this:</p>\n\n<p><a href=\"http://docs.python.org/library/re.html#re.escape\" rel=\"noreferrer\">4.2.3 <code>re</code> Module Contents</a></p>\n\n<blockquote>\n  <p><strong>escape(string)</strong></p>\n  \n  <p>Return string with all non-alphanumerics backslashed; this is useful if you want to match an arbitrary literal string that may have regular expression metacharacters in it.</p>\n</blockquote>\n\n<p>A simplistic example, search any occurence of the provided string optionally followed by 's', and return the match object.</p>\n\n<pre><code>def simplistic_plural(word, text):\n    word_or_plural = re.escape(word) + 's?'\n    return re.match(word_or_plural, text)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am trying to run a Django management command from cron. I am using virtualenv to keep my project sandboxed.</p>\n\n<p>I have seen examples here and elsewhere that show running management commands from within virtualenv's like:</p>\n\n<pre><code>0 3 * * * source /home/user/project/env/bin/activate &amp;&amp; /home/user/project/manage.py command arg\n</code></pre>\n\n<p>However, even though syslog shows an entry when the task should have started, this task never actually runs (the log file for the script is empty). If I run the line manually from the shell, it works as expected. </p>\n\n<p>The only way I can currently get the command to run via cron, is to break the commands up and put them in a dumb bash wrapper script:</p>\n\n<pre><code>#!/bin/sh\nsource /home/user/project/env/bin/activate\ncd /home/user/project/\n./manage.py command arg\n</code></pre>\n\n<p>Please enlighten me what the difference is. What am I missing?</p>\n\n<p>Thanks</p>\n\n<p>EDIT:</p>\n\n<p>ars came up with a working combination of commands:</p>\n\n<pre><code>0 3 * * * cd /home/user/project &amp;&amp; /home/user/project/env/bin/python /home/user/project/manage.py command arg\n</code></pre>\n\n<p>At least in my case, invoking the activate script for the virtualenv did nothing. This works, so on with the show.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You should be able to do this by using the <code>python</code> in your virtual environment:</p>\n\n<pre><code>/home/my/virtual/bin/python /home/my/project/manage.py command arg\n</code></pre>\n\n<p>EDIT: If your django project isn't in the PYTHONPATH, then you'll need to switch to the right directory:</p>\n\n<pre><code>cd /home/my/project &amp;&amp; /home/my/virtual/bin/python ...\n</code></pre>\n\n<p>You can also try to log the failure from cron:</p>\n\n<pre><code>cd /home/my/project &amp;&amp; /home/my/virtual/bin/python /home/my/project/manage.py &gt; /tmp/cronlog.txt 2&gt;&amp;1\n</code></pre>\n\n<p>Another thing to try is to make the same change in your <code>manage.py</code> script at the very top:</p>\n\n<pre><code>#!/home/my/virtual/bin/python\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am currently beginning with Python and I have a strong PHP background and in PHP I have took the habit of using <code>javadoc</code> as a documentation template.</p>\n\n<p>I was wondering if <code>javadoc</code> has its place as <code>docstring</code> documentation in Python. Is something like this too elaborate to fit in the Python mindset or should I try to be as concise as possible?</p>\n\n<pre><code>\"\"\"\nreplaces template place holder with values\n\n@param string timestamp     formatted date to display\n@param string priority      priority number\n@param string priority_name priority name\n@param string message       message to display\n\n@return string formatted string\n\"\"\"\n</code></pre>\n\n<p>And if I am a bit too exhaustive should I go with something like this instead (where most of the documentation doesn't get printed through the <code>__doc__</code> method)?</p>\n\n<pre><code># replaces template place holder with values\n#    \n# @param string timestamp     formatted date to display\n# @param string priority      priority number\n# @param string priority_name priority name\n# @param string message       message to display\n#    \n# @return string formatted string\n\ndef format(self, timestamp = '', priority = '', priority_name = '', message = ''):\n    \"\"\"\n    replaces template place holder with values\n    \"\"\"\n    values = {'%timestamp%' : timestamp,\n              '%priorityName%' : priority_name,\n              '%priority%' : priority,\n              '%message%' : message}\n\n    return self.__pattern.format(**values)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Have a look at the <a href=\"http://docutils.sourceforge.net/rst.html\">reStructuredText</a> (also known as \"reST\") format, which is a plaintext/docstring markup format, and probably the most popular in the Python world. And you should certainly look at <a href=\"http://sphinx-doc.org\">Sphinx</a>, a tool to generate documentation from reStructuredText (used for eg. the Python documentation itself). Sphinx includes the possibility to extract documentation from the docstrings in your code (see <a href=\"http://sphinx-doc.org/ext/autodoc.html\">sphinx.ext.autodoc</a>), and recognizes reST <a href=\"http://sphinx-doc.org/domains.html#info-field-lists\">field lists</a> following certain conventions. This has probably become (or is becoming) the most popular way to do it.</p>\n\n<p>Your example could look as follows:</p>\n\n<pre><code>\"\"\"Replaces template placeholder with values.\n\n:param timestamp: formatted date to display\n:param priority: priority number\n:param priority_name: priority name\n:param message: message to display\n:returns: formatted string\n\"\"\"\n</code></pre>\n\n<p>Or extended with type information:</p>\n\n<pre><code>\"\"\"Replaces template placeholder with values.\n\n:param timestamp: formatted date to display\n:type timestamp: str or unicode\n:param priority: priority number\n:type priority: str or unicode\n:param priority_name: priority name\n:type priority_name: str or unicode\n:param message: message to display\n:type message: str or unicode\n:returns: formatted string\n:rtype: str or unicode\n\"\"\"\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I know that <code>print(e)</code> (where e is an Exception) prints the occurred exception\nbut, I was trying to find the python equivalent of Java's <code>e.printStackTrace()</code> that exactly traces the exception to what line it occurred and prints the entire trace of it.</p>\n\n<p>Could anyone please tell me the equivalent of <code>e.printStackTrace()</code> in Python?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>import traceback\ntraceback.print_exc()\n</code></pre>\n\n<p>When doing this inside an <code>except ...:</code> block it will automatically use the current exception. See <a href=\"http://docs.python.org/library/traceback.html\">http://docs.python.org/library/traceback.html</a> for more information.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"https://stackoverflow.com/questions/1602934/what-is-a-good-way-to-test-if-a-key-exists-in-python-dictionary\">What is a good way to test if a Key exists in Python Dictionary</a>  </p>\n</blockquote>\n\n\n\n<p>What's the cleanest way to test if a dictionary contains a key?</p>\n\n<pre><code>x = {'a' : 1, 'b' : 2}\nif (x.contains_key('a')):\n    ....\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>'a' in x\n</code></pre>\n\n<p>and a quick search reveals some nice information about it: <a href=\"http://docs.python.org/3/tutorial/datastructures.html#dictionaries\" rel=\"noreferrer\">http://docs.python.org/3/tutorial/datastructures.html#dictionaries</a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In the <a href=\"https://docs.python.org/2/library/threading.html#thread-objects\" rel=\"noreferrer\">Python documentation</a>\nit says:</p>\n\n<blockquote>\n  <p>A thread can be flagged as a \"daemon thread\". The significance of this\n  flag is that the entire Python program exits when only daemon threads\n  are left. The initial value is inherited from the creating thread.</p>\n</blockquote>\n\n<p>Does anyone have a clearer explanation of what that means or a practical example showing where you would want to set threads as <code>daemonic</code>?</p>\n\n<hr>\n\n<p>To clarify for me:</p>\n\n<p>so the only time you <strong>wouldn't</strong> set threads as daemonic is if you wanted them to continue running after the main thread exits?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Some threads do background tasks, like sending keepalive packets, or performing periodic garbage collection, or whatever. These are only useful when the main program is running, and it's okay to kill them off once the other, non-daemon, threads have exited.</p>\n\n<p>Without daemon threads, you'd have to keep track of them, and tell them to exit, before your program can completely quit. By setting them as daemon threads, you can let them run and forget about them, and when your program quits, any daemon threads are killed automatically.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>If I have a Python dictionary, how do I get the key to the entry which contains the minimum value?</p>\n\n<p>I was thinking about something to do with the <code>min()</code> function...</p>\n\n<p>Given the input:</p>\n\n<pre><code>{320:1, 321:0, 322:3}\n</code></pre>\n\n<p>It would return <code>321</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Best: <code>min(d, key=d.get)</code> -- no reason to interpose a useless <code>lambda</code> indirection layer or extract items or keys!</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a directory that contains my Python unit tests. Each unit test module is of the form <strong>test_*.py</strong>. I am attempting to make a file called <strong>all_test.py</strong> that will, you guessed it, run all files in the aforementioned test form and return the result. I have tried two methods so far; both have failed. I will show the two methods, and I hope someone out there knows how to actually do this correctly.</p>\n\n<p>For my first valiant attempt, I thought \"If I just import all my testing modules in the file, and then call this <code>unittest.main()</code> doodad, it will work, right?\" Well, turns out I was wrong.</p>\n\n<pre><code>import glob\nimport unittest\n\ntestSuite = unittest.TestSuite()\ntest_file_strings = glob.glob('test_*.py')\nmodule_strings = [str[0:len(str)-3] for str in test_file_strings]\n\nif __name__ == \"__main__\":\n     unittest.main()\n</code></pre>\n\n<p>This did not work, the result I got was:</p>\n\n<pre><code>$ python all_test.py \n\n----------------------------------------------------------------------\nRan 0 tests in 0.000s\n\nOK\n</code></pre>\n\n<p>For my second try, I though, ok, maybe I will try to do this whole testing thing in a more \"manual\" fashion. So I attempted to do that below:</p>\n\n<pre><code>import glob\nimport unittest\n\ntestSuite = unittest.TestSuite()\ntest_file_strings = glob.glob('test_*.py')\nmodule_strings = [str[0:len(str)-3] for str in test_file_strings]\n[__import__(str) for str in module_strings]\nsuites = [unittest.TestLoader().loadTestsFromName(str) for str in module_strings]\n[testSuite.addTest(suite) for suite in suites]\nprint testSuite \n\nresult = unittest.TestResult()\ntestSuite.run(result)\nprint result\n\n#Ok, at this point I have a result\n#How do I display it as the normal unit test command line output?\nif __name__ == \"__main__\":\n    unittest.main()\n</code></pre>\n\n<p>This also did not work, but it seems so close!</p>\n\n<pre><code>$ python all_test.py \n&lt;unittest.TestSuite tests=[&lt;unittest.TestSuite tests=[&lt;unittest.TestSuite tests=[&lt;test_main.TestMain testMethod=test_respondes_to_get&gt;]&gt;]&gt;]&gt;\n&lt;unittest.TestResult run=1 errors=0 failures=0&gt;\n\n----------------------------------------------------------------------\nRan 0 tests in 0.000s\n\nOK\n</code></pre>\n\n<p>I seem to have a suite of some sort, and I can execute the result. I am a little concerned about the fact that it says I have only <code>run=1</code>, seems like that should be <code>run=2</code>, but it is progress. But how do I pass and display the result to main? Or how do I basically get it working so I can just run this file, and in doing so, run all the unit tests in this directory?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You could use a test runner that would do this for you.  <a href=\"https://nose.readthedocs.org/en/latest/\" rel=\"noreferrer\">nose</a> is very good for example.  When run, it will find tests in the current tree and run them.</p>\n\n<p>Updated:</p>\n\n<p>Here's some code from my pre-nose days.  You probably don't want the explicit list of module names, but maybe the rest will be useful to you.</p>\n\n<pre><code>testmodules = [\n    'cogapp.test_makefiles',\n    'cogapp.test_whiteutils',\n    'cogapp.test_cogapp',\n    ]\n\nsuite = unittest.TestSuite()\n\nfor t in testmodules:\n    try:\n        # If the module defines a suite() function, call it to get the suite.\n        mod = __import__(t, globals(), locals(), ['suite'])\n        suitefn = getattr(mod, 'suite')\n        suite.addTest(suitefn())\n    except (ImportError, AttributeError):\n        # else, just load all the test cases from the module.\n        suite.addTest(unittest.defaultTestLoader.loadTestsFromName(t))\n\nunittest.TextTestRunner().run(suite)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am quite new to Python and I am now struggling with formatting my data nicely for printed output.</p>\n\n<p>I have one list that is used for two headings, and a matrix that should be the contents of the table. Like so:</p>\n\n<pre><code>teams_list = [\"Man Utd\", \"Man City\", \"T Hotspur\"]\ndata = np.array([[1, 2, 1],\n                 [0, 1, 0],\n                 [2, 4, 2]])\n</code></pre>\n\n<p>Note that the heading names are not necessarily the same lengths. The data entries are all integers, though.</p>\n\n<p>Now, I want to represent this in a table format, something like this:</p>\n\n<pre><code>            Man Utd   Man City   T Hotspur\n  Man Utd         1          0           0\n Man City         1          1           0\nT Hotspur         0          1           2\n</code></pre>\n\n<p>I have a hunch that there must be a data structure for this, but I cannot find it. I have tried using a dictionary and formatting the printing, I have tried for-loops with indentation and I have tried printing as strings.</p>\n\n<p>I am sure there must be a very simple way to do this, but I am probably missing it due to lack of experience.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Some ad-hoc code for Python 2.7:</p>\n\n<pre><code>row_format =\"{:&gt;15}\" * (len(teams_list) + 1)\nprint row_format.format(\"\", *teams_list)\nfor team, row in zip(teams_list, data):\n    print row_format.format(team, *row)\n</code></pre>\n\n<p>This relies on <a href=\"http://docs.python.org/py3k/library/stdtypes.html#str.format\" rel=\"noreferrer\"><code>str.format()</code></a> and the <a href=\"http://docs.python.org/py3k/library/string.html#formatspec\" rel=\"noreferrer\">Format Specification Mini-Language</a>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>My python script uses subprocess to call a linux utility that is very noisy.  I want to store all of the output to a log file and show some of it to the user.  I thought the following would work, but the output doesn't show up in my application until the utility has produced a significant amount of output.</p>\n\n<pre><code>#fake_utility.py, just generates lots of output over time\nimport time\ni = 0\nwhile True:\n   print hex(i)*512\n   i += 1\n   time.sleep(0.5)\n\n#filters output\nimport subprocess\nproc = subprocess.Popen(['python','fake_utility.py'],stdout=subprocess.PIPE)\nfor line in proc.stdout:\n   #the real code does filtering here\n   print \"test:\", line.rstrip()\n</code></pre>\n\n<p>The behavior I really want is for the filter script to print each line as it is received from the subprocess.  Sorta like what <a href=\"http://unixhelp.ed.ac.uk/CGI/man-cgi?tee\" rel=\"noreferrer\"><code>tee</code></a> does but with python code.</p>\n\n<p>What am I missing?  Is this even possible?</p>\n\n<hr>\n\n<p><strong>Update:</strong></p>\n\n<p>If a <code>sys.stdout.flush()</code> is added to fake_utility.py, the code has the desired behavior in python 3.1.  I'm using python 2.6.  You would think that using <code>proc.stdout.xreadlines()</code> would work the same as py3k, but it doesn't.</p>\n\n<hr>\n\n<p><strong>Update 2:</strong></p>\n\n<p>Here is the minimal working code.</p>\n\n<pre><code>#fake_utility.py, just generates lots of output over time\nimport sys, time\nfor i in range(10):\n   print i\n   sys.stdout.flush()\n   time.sleep(0.5)\n\n#display out put line by line\nimport subprocess\nproc = subprocess.Popen(['python','fake_utility.py'],stdout=subprocess.PIPE)\n#works in python 3.0+\n#for line in proc.stdout:\nfor line in iter(proc.stdout.readline,''):\n   print line.rstrip()\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It's been a long time since I last worked with Python, but I think the problem is with the statement <code>for line in proc.stdout</code>, which reads the entire input before iterating over it. The solution is to use <code>readline()</code> instead:</p>\n\n<pre><code>#filters output\nimport subprocess\nproc = subprocess.Popen(['python','fake_utility.py'],stdout=subprocess.PIPE)\nwhile True:\n  line = proc.stdout.readline()\n  if line != '':\n    #the real code does filtering here\n    print \"test:\", line.rstrip()\n  else:\n    break\n</code></pre>\n\n<p>Of course you still have to deal with the subprocess' buffering.</p>\n\n<p>Note: <a href=\"http://docs.python.org/library/stdtypes.html#file.next\" rel=\"noreferrer\">according to the documentation</a> the solution with an iterator should be equivalent to using <code>readline()</code>, except for the read-ahead buffer, but (or exactly because of this) the proposed change did produce different results for me (Python 2.5 on Windows XP).</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How can I sort an array in NumPy by the nth column?</p>\n\n<p>For example,</p>\n\n<pre><code>a = array([[1, 2, 3],\n           [4, 5, 6],\n           [0, 0, 1]])\n</code></pre>\n\n<p>I'd like to sort rows by the second column, such that I get back:</p>\n\n<pre><code>array([[0, 0, 1],\n       [1, 2, 3],\n       [4, 5, 6]])\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"https://stackoverflow.com/users/208339/steve-tjoa\">@steve</a>'s is actually the most elegant way of doing it.</p>\n\n<p>For the \"correct\" way see the order keyword argument of <a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.sort.html#numpy.ndarray.sort\" rel=\"nofollow noreferrer\">numpy.ndarray.sort</a> </p>\n\n<p>However, you'll need to view your array as an array with fields (a structured array).</p>\n\n<p>The \"correct\" way is quite ugly if you didn't initially define your array with fields...</p>\n\n<p>As a quick example, to sort it and return a copy:</p>\n\n<pre><code>In [1]: import numpy as np\n\nIn [2]: a = np.array([[1,2,3],[4,5,6],[0,0,1]])\n\nIn [3]: np.sort(a.view('i8,i8,i8'), order=['f1'], axis=0).view(np.int)\nOut[3]: \narray([[0, 0, 1],\n       [1, 2, 3],\n       [4, 5, 6]])\n</code></pre>\n\n<p>To sort it in-place:</p>\n\n<pre><code>In [6]: a.view('i8,i8,i8').sort(order=['f1'], axis=0) #&lt;-- returns None\n\nIn [7]: a\nOut[7]: \narray([[0, 0, 1],\n       [1, 2, 3],\n       [4, 5, 6]])\n</code></pre>\n\n<p>@Steve's really is the most elegant way to do it, as far as I know... </p>\n\n<p>The only advantage to this method is that the \"order\" argument is a list of the fields to order the search by. For example, you can sort by the second column, then the third column, then the first column by supplying order=['f1','f2','f0'].</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Why is <code>x**4.0</code> faster than <code>x**4</code>? I am using CPython 3.5.2.</p>\n\n<pre><code>$ python -m timeit \"for x in range(100):\" \" x**4.0\"\n  10000 loops, best of 3: 24.2 usec per loop\n\n$ python -m timeit \"for x in range(100):\" \" x**4\"\n  10000 loops, best of 3: 30.6 usec per loop\n</code></pre>\n\n<p>I tried changing the power I raised by to see how it acts, and for example if I raise x to the power of 10 or 16 it's jumping from 30 to 35, but if I'm raising by <strong>10.0</strong> as a float, it's just moving around 24.1~4.</p>\n\n<p>I guess it has something to do with float conversion and powers of 2 maybe, but I don't really know.</p>\n\n<p>I noticed that in both cases powers of 2 are faster, I guess since those calculations are more native/easy for the interpreter/computer. But still, with floats it's almost not moving. <code>2.0 =&gt; 24.1~4 &amp; 128.0 =&gt; 24.1~4</code> <strong>but</strong> <code>2 =&gt; 29 &amp; 128 =&gt; 62</code></p>\n\n<p></p><hr> <a href=\"https://stackoverflow.com/users/2617068/tigerhawkt3\">TigerhawkT3</a> pointed out that it doesn't happen outside of the loop. I checked and the situation only occurs (from what I've seen) when the <strong>base</strong> is getting raised. Any idea about that?\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<blockquote>\n  <p>Why is <code>x**4.0</code> <em>faster</em> than <code>x**4</code> in Python 3<sup>*</sup>?</p>\n</blockquote>\n\n<p>Python 3 <code>int</code> objects are a full fledged object designed to support an arbitrary size; due to that fact, they are <a href=\"https://github.com/python/cpython/blob/master/Objects/longobject.c#L4051\" rel=\"nofollow noreferrer\">handled as such on the C level</a> (see how all variables are declared as <code>PyLongObject *</code> type in <code>long_pow</code>). This also makes their exponentiation a lot more <em>trickier</em> and <em>tedious</em> since you need to play around with the <code>ob_digit</code> array it uses to represent its value to perform it. (<a href=\"https://github.com/python/cpython/blob/master/Objects/longobject.c#L4148\" rel=\"nofollow noreferrer\">Source for the brave.</a> -- See: <a href=\"https://stackoverflow.com/questions/40344159/understanding-memory-allocation-for-large-integers-in-python\">Understanding memory allocation for large integers in Python</a> for more on <code>PyLongObject</code>s.) </p>\n\n<p>Python <code>float</code> objects, on the contrary, <em>can be transformed</em> to a C <code>double</code> type (by using <a href=\"https://docs.python.org/3/c-api/float.html#c.PyFloat_AsDouble\" rel=\"nofollow noreferrer\"><code>PyFloat_AsDouble</code></a>) and operations can be performed <a href=\"https://github.com/python/cpython/blob/master/Objects/floatobject.c#L686\" rel=\"nofollow noreferrer\">using those native types</a>. <em>This is great</em> because, after checking for relevant edge-cases, it allows Python to <a href=\"https://github.com/python/cpython/blob/master/Objects/floatobject.c#L784\" rel=\"nofollow noreferrer\">use the platforms' <code>pow</code></a> (<a href=\"http://en.cppreference.com/w/c/numeric/math/pow\" rel=\"nofollow noreferrer\">C's <code>pow</code>, that is</a>) to handle the actual exponentiation:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>/* Now iv and iw are finite, iw is nonzero, and iv is\n * positive and not equal to 1.0.  We finally allow\n * the platform pow to step in and do the rest.\n */\nerrno = 0;\nPyFPE_START_PROTECT(\"pow\", return NULL)\nix = pow(iv, iw); \n</code></pre>\n\n<p>where <code>iv</code> and <code>iw</code> are our original <code>PyFloatObject</code>s as C <code>double</code>s.</p>\n\n<blockquote>\n  <p>For what it's worth: Python <code>2.7.13</code> for me is a factor <code>2~3</code> faster, and shows the inverse behaviour.</p>\n</blockquote>\n\n<p>The previous fact <em>also explains</em> the discrepancy between Python 2 and 3 so, I thought I'd address this comment too because it is interesting.</p>\n\n<p>In Python 2, you're using the old <code>int</code> object that differs from the <code>int</code> object in Python 3 (all <code>int</code> objects in 3.x are of <code>PyLongObject</code> type). In Python 2, there's a distinction that depends on the value of the object (or, if you use the suffix <code>L/l</code>):</p>\n\n<pre><code># Python 2\ntype(30)  # &lt;type 'int'&gt;\ntype(30L) # &lt;type 'long'&gt;\n</code></pre>\n\n<p>The <code>&lt;type 'int'&gt;</code> you see here <em>does the same thing <code>float</code>s do</em>, it gets safely converted into a C <code>long</code> <a href=\"https://github.com/python/cpython/blob/2.7/Objects/intobject.c#L726\" rel=\"nofollow noreferrer\">when exponentiation is performed on it</a> (The <code>int_pow</code> also hints the compiler to put 'em in a register if it can do so, so that <em>could</em> make a difference):</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>static PyObject *\nint_pow(PyIntObject *v, PyIntObject *w, PyIntObject *z)\n{\n    register long iv, iw, iz=0, ix, temp, prev;\n/* Snipped for brevity */    \n</code></pre>\n\n<p>this allows for a good speed gain. </p>\n\n<p>To see how sluggish <code>&lt;type 'long'&gt;</code>s are in comparison to <code>&lt;type 'int'&gt;</code>s, if you wrapped the <code>x</code> name in a <code>long</code> call in Python 2 (essentially forcing it to use <code>long_pow</code> as in Python 3), the speed gain disappears:</p>\n\n<pre><code># &lt;type 'int'&gt;\n(python2) \u279c python -m timeit \"for x in range(1000):\" \" x**2\"       \n10000 loops, best of 3: 116 usec per loop\n# &lt;type 'long'&gt; \n(python2) \u279c python -m timeit \"for x in range(1000):\" \" long(x)**2\"\n100 loops, best of 3: 2.12 msec per loop\n</code></pre>\n\n<p>Take note that, though the one snippet transforms the <code>int</code> to <code>long</code> while the other does not (as pointed out by @pydsinger), this cast is not the contributing force behind the slowdown. The implementation of <code>long_pow</code> is. (Time the statements solely with <code>long(x)</code> to see).</p>\n\n<blockquote>\n  <p>[...] it doesn't happen outside of the loop. [...] Any idea about that?</p>\n</blockquote>\n\n<p>This is CPython's peephole optimizer folding the constants for you. You get the same exact timings either case since there's no actual computation to find the result of the exponentiation, only loading of values:</p>\n\n<pre><code>dis.dis(compile('4 ** 4', '', 'exec'))\n  1           0 LOAD_CONST               2 (256)\n              3 POP_TOP\n              4 LOAD_CONST               1 (None)\n              7 RETURN_VALUE\n</code></pre>\n\n<p>Identical byte-code is generated for <code>'4 ** 4.'</code> with the only difference being that the <code>LOAD_CONST</code> loads the float <code>256.0</code> instead of the int <code>256</code>:</p>\n\n<pre><code>dis.dis(compile('4 ** 4.', '', 'exec'))\n  1           0 LOAD_CONST               3 (256.0)\n              2 POP_TOP\n              4 LOAD_CONST               2 (None)\n              6 RETURN_VALUE\n</code></pre>\n\n<p>So the times are identical.</p>\n\n<hr>\n\n<p><sup>*All of the above apply solely for CPython, the reference implementation of Python. Other implementations might perform differently.</sup></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>This seems rather obvious, but I can't seem to figure out how do I convert an index of data frame to a column?</p>\n\n<p>For example:</p>\n\n<pre><code>df=\n           gi  ptt_loc\n 0  384444683      593  \n 1  384444684      594 \n 2  384444686      596  \n</code></pre>\n\n<p>To,</p>\n\n<pre><code>df=\n    index1       gi    ptt_loc\n 0  0     384444683      593  \n 1  1     384444684      594 \n 2  2     384444686      596  \n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>either:</p>\n\n<pre><code>df['index1'] = df.index\n</code></pre>\n\n<p>or, <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.reset_index.html#pandas.DataFrame.reset_index\"><code>.reset_index</code></a>:</p>\n\n<pre><code>df.reset_index(level=0, inplace=True)\n</code></pre>\n\n<hr>\n\n<p>so, if you have a multi-index frame with 3 levels of index, like:</p>\n\n<pre><code>&gt;&gt;&gt; df\n                       val\ntick       tag obs        \n2016-02-26 C   2    0.0139\n2016-02-27 A   2    0.5577\n2016-02-28 C   6    0.0303\n</code></pre>\n\n<p>and you want to convert the 1st (<code>tick</code>) and 3rd (<code>obs</code>) levels in the index into columns, you would do:</p>\n\n<pre><code>&gt;&gt;&gt; df.reset_index(level=['tick', 'obs'])\n          tick  obs     val\ntag                        \nC   2016-02-26    2  0.0139\nA   2016-02-27    2  0.5577\nC   2016-02-28    6  0.0303\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a timezone aware <code>timestamptz</code> field in PostgreSQL. When I pull data from the table, I then want to subtract the time right now so I can get it's age.</p>\n\n<p>The problem I'm having is that both <code>datetime.datetime.now()</code> and <code>datetime.datetime.utcnow()</code> seem to return timezone unaware timestamps, which results in me getting this error:</p>\n\n<pre><code>TypeError: can't subtract offset-naive and offset-aware datetimes \n</code></pre>\n\n<p>Is there a way to avoid this (preferably without a third-party module being used).</p>\n\n<p>EDIT: Thanks for the suggestions, however trying to adjust the timezone seems to give me errors.. so I'm just going to use timezone unaware timestamps in PG and always insert using:</p>\n\n<pre><code>NOW() AT TIME ZONE 'UTC'\n</code></pre>\n\n<p>That way all my timestamps are UTC by default (even though it's more annoying to do this).</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>have you tried to remove the timezone awareness?</p>\n\n<p>from <a href=\"http://pytz.sourceforge.net/\" rel=\"noreferrer\">http://pytz.sourceforge.net/</a></p>\n\n<pre><code>naive = dt.replace(tzinfo=None)\n</code></pre>\n\n<p>may have to add time zone conversion as well.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have an application, written in Python, which is used by a fairly technical audience (scientists). </p>\n\n<p>I'm looking for a good way to make the application extensible by the users, i.e. a scripting/plugin architecture. </p>\n\n<p>I am looking for something <strong>extremely lightweight</strong>. Most scripts, or plugins, are not going to be developed and distributed by a third-party and installed, but are going to be something whipped up by a user in a few minutes to automate a repeating task, add support for a file format, etc. So plugins should have the absolute minimum boilerplate code, and require no 'installation' other than copying to a folder (so something like setuptools entry points, or the Zope plugin architecture seems like too much.)</p>\n\n<p>Are there any systems like this already out there, or any projects that implement a similar scheme that I should look at for ideas / inspiration?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Mine is, basically, a directory called \"plugins\" which the main app can poll and then use <a href=\"https://docs.python.org/library/imp.html#imp.load_module\" rel=\"noreferrer\">imp.load_module</a> to pick up files, look for a well-known entry point possibly with module-level config params, and go from there. I use file-monitoring stuff for a certain amount of dynamism in which plugins are active, but that's a nice-to-have.</p>\n\n<p>Of course, any requirement that comes along saying \"I don't need [big, complicated thing] X; I just want something lightweight\" runs the risk of re-implementing X one discovered requirement at a time. But that's not to say you can't have some fun doing it anyway :)</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is there a standard way to associate version string with a python package in such way that I could do the following?</p>\n\n<pre><code>import foo\nprint foo.version\n</code></pre>\n\n<p>I would imagine there's some way to retrieve that data without any extra hardcoding, since minor/major strings are specified in <code>setup.py</code> already. Alternative solution that I found was to have <code>import __version__</code> in my <code>foo/__init__.py</code> and then have <code>__version__.py</code> generated by <code>setup.py</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Not directly an answer to your question, but you should consider naming it <code>__version__</code>, not <code>version</code>.</p>\n\n<p>This is almost a quasi-standard. Many modules in the standard library use <code>__version__</code>, and this is also used in <a href=\"http://www.google.com/codesearch?as_q=__version__&amp;btnG=Search+Code&amp;hl=en&amp;as_lang=python&amp;as_license_restrict=i&amp;as_license=&amp;as_package=&amp;as_filename=&amp;as_case=\" rel=\"noreferrer\">lots</a> of 3rd-party modules, so it's the quasi-standard.</p>\n\n<p>Usually, <code>__version__</code> is a string, but sometimes it's also a float or tuple.</p>\n\n<p>Edit: as mentioned by S.Lott (Thank you!), <a href=\"http://www.python.org/dev/peps/pep-0008/\" rel=\"noreferrer\">PEP 8</a> says it explicitly:</p>\n\n<blockquote>\n  <p>Version Bookkeeping</p>\n  \n  <p>If you have to have Subversion, CVS, or RCS crud in your source file,\n  do it as follows.</p>\n\n<pre><code>    __version__ = \"$Revision: 63990 $\"\n    # $Source$\n</code></pre>\n  \n  <p>These lines should be included after the module's docstring, before\n  any other code, separated by a blank line above and below.</p>\n</blockquote>\n\n<p>You should also make sure that the version number conforms to the format described in <a href=\"http://www.python.org/dev/peps/pep-0440/\" rel=\"noreferrer\">PEP 440</a> (<a href=\"http://www.python.org/dev/peps/pep-0386/\" rel=\"noreferrer\">PEP 386</a> a previous version of this standard).</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Very similar to <a href=\"https://stackoverflow.com/questions/2418125/matplotlib-subplots-adjust-hspace-so-titles-and-xlabels-dont-overlap\">this question</a> but with the difference that my figure can be as large as it needs to be.</p>\n\n<p>I need to generate a whole bunch of vertically-stacked plots in matplotlib. The result will be saved using figsave and viewed on a webpage, so I don't care how tall the final image is as long as the subplots are spaced so they don't overlap. </p>\n\n<p>No matter how big I allow the figure to be, the subplots always seem to overlap.</p>\n\n<p>My code currently looks like</p>\n\n<pre><code>import matplotlib.pyplot as plt\nimport my_other_module\n\ntitles, x_lists, y_lists = my_other_module.get_data()\n\nfig = plt.figure(figsize=(10,60))\nfor i, y_list in enumerate(y_lists):\n    plt.subplot(len(titles), 1, i)\n    plt.xlabel(\"Some X label\")\n    plt.ylabel(\"Some Y label\")\n    plt.title(titles[i])\n    plt.plot(x_lists[i],y_list)\nfig.savefig('out.png', dpi=100)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Try using <a href=\"http://matplotlib.sourceforge.net/users/tight_layout_guide.html\" rel=\"noreferrer\"><code>plt.tight_layout</code></a></p>\n\n<p>As a quick example:</p>\n\n<pre><code>import matplotlib.pyplot as plt\n\nfig, axes = plt.subplots(nrows=4, ncols=4)\nfig.tight_layout() # Or equivalently,  \"plt.tight_layout()\"\n\nplt.show()\n</code></pre>\n\n<hr>\n\n<p>Without Tight Layout</p>\n\n<p><img src=\"https://i.stack.imgur.com/roV9q.png\" alt=\"enter image description here\"></p>\n\n<hr>\n\n<p>With Tight Layout\n<img src=\"https://i.stack.imgur.com/ouSJi.png\" alt=\"enter image description here\"></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What is a classy way to way truncate a python datetime object? </p>\n\n<p>In this particular case, to the day. So basically setting hour, minute, seconds, and microseconds to 0.</p>\n\n<p>I would like the output to also be a datetime object, not a string.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I think this is what you're looking for...</p>\n\n<pre><code>&gt;&gt;&gt; dt = datetime.datetime.now()\n&gt;&gt;&gt; dt = dt.replace(hour=0, minute=0, second=0, microsecond=0) # Returns a copy\n&gt;&gt;&gt; dt\ndatetime.datetime(2011, 3, 29, 0, 0)\n</code></pre>\n\n<p>But if you really don't care about the time aspect of things, then you should really only be passing around <code>date</code> objects...</p>\n\n<pre><code>&gt;&gt;&gt; d_truncated = datetime.date(dt.year, dt.month, dt.day)\n&gt;&gt;&gt; d_truncated\ndatetime.date(2011, 3, 29)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have some kind of test data and want to create an unit test for each item. My first idea was to do it like this:</p>\n\n<pre><code>import unittest\n\nl = [[\"foo\", \"a\", \"a\",], [\"bar\", \"a\", \"b\"], [\"lee\", \"b\", \"b\"]]\n\nclass TestSequence(unittest.TestCase):\n    def testsample(self):\n        for name, a,b in l:\n            print \"test\", name\n            self.assertEqual(a,b)\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre>\n\n<p>The downside of this is that it handles all data in one test. I would like to generate one test for each item on the fly. Any suggestions?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>i use something like this:</p>\n\n<pre><code>import unittest\n\nl = [[\"foo\", \"a\", \"a\",], [\"bar\", \"a\", \"b\"], [\"lee\", \"b\", \"b\"]]\n\nclass TestSequense(unittest.TestCase):\n    pass\n\ndef test_generator(a, b):\n    def test(self):\n        self.assertEqual(a,b)\n    return test\n\nif __name__ == '__main__':\n    for t in l:\n        test_name = 'test_%s' % t[0]\n        test = test_generator(t[1], t[2])\n        setattr(TestSequense, test_name, test)\n    unittest.main()\n</code></pre>\n\n<p>The <a href=\"https://github.com/wolever/nose-parameterized\" rel=\"noreferrer\"><code>nose-parameterized</code></a> package can be used to automate this process:</p>\n\n<pre><code>from nose_parameterized import parameterized\n\nclass TestSequence(unittest.TestCase):\n    @parameterized.expand([\n        [\"foo\", \"a\", \"a\",],\n        [\"bar\", \"a\", \"b\"],\n        [\"lee\", \"b\", \"b\"],\n    ])\n    def test_sequence(self, name, a, b):\n        self.assertEqual(a,b)\n</code></pre>\n\n<p>Which will generate the tests:</p>\n\n<pre><code>test_sequence_0_foo (__main__.TestSequence) ... ok\ntest_sequence_1_bar (__main__.TestSequence) ... FAIL\ntest_sequence_2_lee (__main__.TestSequence) ... ok\n\n======================================================================\nFAIL: test_sequence_1_bar (__main__.TestSequence)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/site-packages/nose_parameterized/parameterized.py\", line 233, in &lt;lambda&gt;\n    standalone_func = lambda *a: func(*(a + p.args), **p.kwargs)\n  File \"x.py\", line 12, in test_sequence\n    self.assertEqual(a,b)\nAssertionError: 'a' != 'b'\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Python allows easy creation of an integer from a string of a given base via </p>\n\n<pre><code>int(str, base). \n</code></pre>\n\n<p>I want to perform the inverse: <strong>creation of a string from an integer</strong>, \ni.e. I want some function <code>int2base(num, base)</code>, such that:</p>\n\n<pre><code>int(int2base(x, b), b) == x\n</code></pre>\n\n<p>The function name/argument order is unimportant. </p>\n\n<p>For any number <code>x</code> and base <code>b</code> that <code>int()</code> will accept.</p>\n\n<p>This is an easy function to write: in fact it's easier than describing it in this question. However, I feel like I must be missing something.  </p>\n\n<p>I know about the functions <code>bin</code>, <code>oct</code>, <code>hex</code>, but I cannot use them for a few reasons:</p>\n\n<ul>\n<li><p>Those functions are not available on older versions of Python, with which I need compatibility with (2.2) </p></li>\n<li><p>I want a general solution that can be called the same way for different bases</p></li>\n<li><p>I want to allow bases other than 2, 8, 16</p></li>\n</ul>\n\n<h3>Related</h3>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2063425/python-elegant-inverse-function-of-intstring-base\">Python elegant inverse function of int(string, base)</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2088201/integer-to-base-x-system-using-recursion-in-python\">Integer to base-x system using recursion in python</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1119722/base-62-conversion-in-python\">Base 62 conversion in Python</a></li>\n<li><a href=\"https://stackoverflow.com/questions/561486/how-to-convert-an-integer-to-the-shortest-url-safe-string-in-python\">How to convert an integer to the shortest url-safe string in Python?</a></li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you need compatibility with ancient versions of Python, you can either use <a href=\"https://github.com/aleaxit/gmpy\" rel=\"noreferrer\">gmpy</a> (which does include a fast, completely general int-to-string conversion function, and can be built for such ancient versions -- you may need to try older releases since the recent ones have not been tested for venerable Python and GMP releases, only somewhat recent ones), or, for less speed but more convenience, use Python code -- e.g., most simply:</p>\n\n<pre><code>import string\ndigs = string.digits + string.letters\n\n\ndef int2base(x, base):\n    if x &lt; 0:\n        sign = -1\n    elif x == 0:\n        return digs[0]\n    else:\n        sign = 1\n\n    x *= sign\n    digits = []\n\n    while x:\n        digits.append(digs[x % base])\n        x /= base\n\n    if sign &lt; 0:\n        digits.append('-')\n\n    digits.reverse()\n\n    return ''.join(digits)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>If I have a dictionary like:</p>\n\n<pre><code>{ 'a': 1, 'b': 2, 'c': 3 }\n</code></pre>\n\n<p>How can I convert it to this?</p>\n\n<pre><code>[ ('a', 1), ('b', 2), ('c', 3) ]\n</code></pre>\n\n<p>And how can I convert it to this?</p>\n\n<pre><code>[ (1, 'a'), (2, 'b'), (3, 'c') ]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>&gt;&gt;&gt; d = { 'a': 1, 'b': 2, 'c': 3 }\n&gt;&gt;&gt; d.items()\n[('a', 1), ('c', 3), ('b', 2)]\n&gt;&gt;&gt; [(v, k) for k, v in d.iteritems()]\n[(1, 'a'), (3, 'c'), (2, 'b')]\n</code></pre>\n\n<p>It's not in the order you want, but dicts don't have any specific order anyway. Sort it or organize it as necessary.</p>\n\n<p>See: <a href=\"http://docs.python.org/library/stdtypes.html#dict.items\" rel=\"noreferrer\">items()</a>, <a href=\"http://docs.python.org/library/stdtypes.html#dict.iteritems\" rel=\"noreferrer\">iteritems()</a></p>\n\n<hr>\n\n<p>In Python 3.x, you would not use <code>iteritems</code> (which no longer exists), but instead use <code>items</code>, which now returns a \"view\" into the dictionary items. See the <a href=\"http://docs.python.org/release/3.0.1/whatsnew/3.0.html#views-and-iterators-instead-of-lists\" rel=\"noreferrer\">What's New</a> document for Python 3.0, and the new <a href=\"http://docs.python.org/py3k/library/stdtypes.html#dictionary-view-objects\" rel=\"noreferrer\">documentation on views</a>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How can I make a class or method abstract in Python?</p>\n\n<p>I tried redefining <code>__new__()</code> like so:</p>\n\n<pre><code>class F:\n    def __new__(cls):\n        raise Exception(\"Unable to create an instance of abstract class %s\" %cls)\n</code></pre>\n\n<p>but now if I create a class <code>G</code> that inherits from <code>F</code> like so:</p>\n\n<pre><code>class G(F):\n    pass\n</code></pre>\n\n<p>then I can't instantiate <code>G</code> either, since it calls its super class's <code>__new__</code> method.</p>\n\n<p>Is there a better way to define an abstract class?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use the <a href=\"http://docs.python.org/library/abc.html\" rel=\"noreferrer\"><code>abc</code></a> module to create abstract classes. Use the <a href=\"https://docs.python.org/library/abc.html#abc.abstractmethod\" rel=\"noreferrer\"><code>abstractmethod</code></a> decorator to declare a method abstract, and declare a class abstract using one of three ways, depending upon your Python version.</p>\n\n<p>In Python 3.4 and above, you can inherit from <a href=\"https://docs.python.org/3/library/abc.html#abc.ABC\" rel=\"noreferrer\"><code>ABC</code></a>. In earlier versions of Python, you need to specify your class's metaclass as <a href=\"https://docs.python.org/library/abc.html#abc.ABCMeta\" rel=\"noreferrer\"><code>ABCMeta</code></a>. Specifying the metaclass has different syntax in Python 3 and Python 2. The three possibilities are shown below:</p>\n\n<pre><code># Python 3.4+\nfrom abc import ABC, abstractmethod\nclass Abstract(ABC):\n    @abstractmethod\n    def foo(self):\n        pass\n</code></pre>\n\n\n\n<pre><code># Python 3.0+\nfrom abc import ABCMeta, abstractmethod\nclass Abstract(metaclass=ABCMeta):\n    @abstractmethod\n    def foo(self):\n        pass\n</code></pre>\n\n\n\n<pre><code># Python 2\nfrom abc import ABCMeta, abstractmethod\nclass Abstract:\n    __metaclass__ = ABCMeta\n\n    @abstractmethod\n    def foo(self):\n        pass\n</code></pre>\n\n<p>Whichever way you use, you won't be able to instantiate an abstract class that has abstract methods, but will be able to instantiate a subclass that provides concrete definitions of those methods:</p>\n\n<pre><code>&gt;&gt;&gt; <b><i>Abstract()</i></b>\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: Can't instantiate abstract class Abstract with abstract methods foo\n&gt;&gt;&gt; <b><i>class StillAbstract(Abstract):</i></b>\n...     <b><i>pass</i></b>\n... \n&gt;&gt;&gt; <b><i>StillAbstract()</i></b>\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: Can't instantiate abstract class StillAbstract with abstract methods foo\n&gt;&gt;&gt; <b><i>class Concrete(Abstract):</i></b>\n...     <b><i>def foo(self):</i></b>\n...         <b><i>print('Hello, World')</i></b>\n... \n&gt;&gt;&gt; <b><i>Concrete()</i></b>\n&lt;__main__.Concrete object at 0x7fc935d28898&gt;</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm sure there's a simpler way of doing this that's just not occurring to me.</p>\n\n<p>I'm calling a bunch of methods that return a list.  The list may be empty.  If the list is non-empty, I want to return the first item; otherwise, I want to return None.  This code works:</p>\n\n<pre><code>my_list = get_list()\nif len(my_list) &gt; 0: return my_list[0]\nreturn None\n</code></pre>\n\n<p>It seems to me that there should be a simple one-line idiom for doing this, but for the life of me I can't think of it.  Is there?</p>\n\n<p><strong>Edit:</strong></p>\n\n<p>The reason that I'm looking for a one-line expression here is not that I like incredibly terse code, but because I'm having to write a lot of code like this:</p>\n\n<pre><code>x = get_first_list()\nif x:\n    # do something with x[0]\n    # inevitably forget the [0] part, and have a bug to fix\ny = get_second_list()\nif y:\n    # do something with y[0]\n    # inevitably forget the [0] part AGAIN, and have another bug to fix\n</code></pre>\n\n<p>What I'd like to be doing can certainly be accomplished with a function (and probably will be):</p>\n\n<pre><code>def first_item(list_or_none):\n    if list_or_none: return list_or_none[0]\n\nx = first_item(get_first_list())\nif x:\n    # do something with x\ny = first_item(get_second_list())\nif y:\n    # do something with y\n</code></pre>\n\n<p>I posted the question because I'm frequently surprised by what simple expressions in Python can do, and I thought that writing a function was a silly thing to do if there was a simple expression could do the trick.  But seeing these answers, it seems like a function <em>is</em> the simple solution.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<h2>Python 2.6+</h2>\n\n<pre><code>next(iter(your_list or []), None)\n</code></pre>\n\n<h2>Python 2.4</h2>\n\n<pre><code>def get_first(iterable, default=None):\n    if iterable:\n        for item in iterable:\n            return item\n    return default\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>x = get_first(get_first_list())\nif x:\n    ...\ny = get_first(get_second_list())\nif y:\n    ...\n</code></pre>\n\n<p>Another option is to inline the above function:</p>\n\n<pre><code>for x in get_first_list() or []:\n    # process x\n    break # process at most one item\nfor y in get_second_list() or []:\n    # process y\n    break\n</code></pre>\n\n<p>To avoid <code>break</code> you could write:</p>\n\n<pre><code>for x in yield_first(get_first_list()):\n    x # process x\nfor y in yield_first(get_second_list()):\n    y # process y\n</code></pre>\n\n<p>Where:</p>\n\n<pre><code>def yield_first(iterable):\n    for item in iterable or []:\n        yield item\n        return\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"https://stackoverflow.com/questions/1854/python-what-os-am-i-running-on\">Python: What OS am I running on?</a>  </p>\n</blockquote>\n\n\n\n<p>As the title says, how can I find the current operating system in python?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I usually use <code>sys.platform</code> to get the platform. <code>sys.platform</code> will distinguish between linux, other unixes, and OS X while <code>os.name</code> is \"<code>posix</code>\" for all of them.</p>\n\n<p>For much more detailed information, use the <a href=\"https://docs.python.org/2/library/platform.html\" rel=\"noreferrer\">platform module</a>. This has cross-platform functions that will give you information on the machine architecture, OS and OS version, version of Python, etc. Also it has os-specific functions to get things like the particular linux distribution.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>If a tuple is immutable then why can it contain mutable items?</p>\n\n<p>It is seemingly a contradiction that when a mutable item such as a list does get modified, the tuple it belongs to maintains being immutable.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>That's an excellent question.</p>\n\n<p>The key insight is that tuples have no way of knowing whether the objects inside them are mutable.  The only thing that makes an object mutable is to have a method that alters its data.  In general, there is no way to detect this.</p>\n\n<p>Another insight is that Python's containers don't actually contain anything.  Instead, they keep references to other objects.  Likewise, Python's variables aren't like variables in compiled languages; instead the variable names are just keys in a namespace dictionary where they are associated with a corresponding object. Ned Batchhelder explains this nicely in his <a href=\"http://nedbatchelder.com/text/names.html\">blog post</a>.  Either way, objects only know their reference count; they don't know what those references are (variables, containers, or the Python internals).</p>\n\n<p>Together, these two insights explain your mystery (why an immutable tuple \"containing\" a list seems to change when the underlying list changes).  In fact, the tuple did not change (it still has the same references to other objects that it did before).  The tuple could not change (because it did not have mutating methods).  When the list changed, the tuple didn't get notified of the change (the list doesn't know whether it is referred to by a variable, a tuple, or another list).</p>\n\n<p>While we're on the topic, here are a few other thoughts to help complete your mental model of what tuples are, how they work, and their intended use:</p>\n\n<ol>\n<li><p>Tuples are characterized less by their immutability and more by their intended purpose.<br>\nTuples are Python's way of collecting heterogeneous pieces of information under one roof.  For example, \n<code>s = ('www.python.org', 80)</code> \nbrings together a string and a number so that the host/port pair can be passed around as a socket, a composite object.  Viewed in that light, it is perfectly reasonable to have mutable components.</p></li>\n<li><p>Immutability goes hand-in-hand with another property, <a href=\"http://docs.python.org/3.3/glossary.html#term-hashable\">hashability</a>.  But hashability isn't an absolute property.  If one of the tuple's components isn't hashable, then the overall tuple isn't hashable either. For example, <code>t = ('red', [10, 20, 30])</code> isn't hashable.</p></li>\n</ol>\n\n<p>The last example shows a 2-tuple that contains a string and a list. The tuple itself isn't mutable (i.e. it doesn't have any methods that for changing its contents).  Likewise, the string is immutable because strings don't have any mutating methods.  The list object does have mutating methods, so it can be changed.   This shows that mutability is a property of an object type -- some objects have mutating methods and some don't.  This doesn't change just because the objects are nested.</p>\n\n<p>Remember two things.  First, immutability is not magic -- it is merely the absence of mutating methods.  Second, objects don't know what variables or containers refer to them -- they only know the reference count.</p>\n\n<p>Hope, this was useful to you :-)</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Assume I have a form</p>\n\n<pre><code>class SampleClass(forms.Form):\n    name = forms.CharField(max_length=30)\n    age = forms.IntegerField()\n    django_hacker = forms.BooleanField(required=False)\n</code></pre>\n\n<p>Is there a way for me to define css classes on each field such that I can then use jQuery based on class in my rendered page?</p>\n\n<p>I was hoping not to have to manually build the form.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Yet another solution that doesn't require changes in python code and so is better for designers and one-off presentational changes: <a href=\"https://github.com/kmike/django-widget-tweaks\" rel=\"noreferrer\">django-widget-tweaks</a>. Hope somebody will find it useful.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am using PyCharm on Windows. I am not getting the settings to change the maximum line length to 79 characters. I see that it is 120 characters by default. Where can I change it to 79 characters? I searched in the settings but didn't find.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here is screenshot of my Pycharm. Required settings is in following path: <code>File -&gt; Settings -&gt; Editor -&gt; Code Style -&gt; General: Right margin (columns)</code></p>\n\n<p><a href=\"https://i.stack.imgur.com/V3BLg.png\"><img src=\"https://i.stack.imgur.com/V3BLg.png\" alt=\"Pycharm 4 Settings Screenshot\"></a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/6074018/why-does-the-expression-0-0-0-return-false-in-python\" dir=\"ltr\">Why does the expression 0 &lt; 0 == 0 return False in Python?</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    9 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>When I was looking at answers to <a href=\"https://stackoverflow.com/questions/9201445/python-best-way-to-keep-track-of-results-from-loop\">this question</a>, I found I didn't understand my own answer.</p>\n\n<p>I don't really understand how this is being parsed. Why does the second example return False?</p>\n\n<pre><code>&gt;&gt;&gt; 1 in [1,0]             # This is expected\nTrue\n&gt;&gt;&gt; 1 in [1,0] == True     # This is strange\nFalse\n&gt;&gt;&gt; (1 in [1,0]) == True   # This is what I wanted it to be\nTrue\n&gt;&gt;&gt; 1 in ([1,0] == True)   # But it's not just a precedence issue!\n                           # It did not raise an exception on the second example.\n\nTraceback (most recent call last):\n  File \"&lt;pyshell#4&gt;\", line 1, in &lt;module&gt;\n    1 in ([1,0] == True)\nTypeError: argument of type 'bool' is not iterable\n</code></pre>\n\n<p>Thanks for any help. I think I must be missing something really obvious.</p>\n\n<hr>\n\n<p>I think this is subtly different to the linked duplicate:</p>\n\n<p><a href=\"https://stackoverflow.com/questions/6074018/why-does-the-expression-0-0-0-return-false-in-python\">Why does the expression 0 &lt; 0 == 0 return False in Python?</a>.</p>\n\n<p>Both questions are to do with human comprehension of the expression. There seemed to be two ways (to my mind) of evaluating the expression. Of course neither were correct, but in my example, the last interpretation is impossible.</p>\n\n<p>Looking at <code>0 &lt; 0 == 0</code> you could imagine each half being evaluated and making sense as an expression:</p>\n\n<pre><code>&gt;&gt;&gt; (0 &lt; 0) == 0\nTrue\n&gt;&gt;&gt; 0 &lt; (0 == 0)\nTrue\n</code></pre>\n\n<p>So the link answers why this evaluates <code>False</code>:</p>\n\n<pre><code>&gt;&gt;&gt; 0 &lt; 0 == 0\nFalse\n</code></pre>\n\n<p>But with my example <code>1 in ([1,0] == True)</code> doesn't make sense as an expression, so instead of there being two (admittedly wrong) possible interpretations, only one seems possible:</p>\n\n<pre><code>&gt;&gt;&gt; (1 in [1,0]) == True\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Python actually applies comparison operator chaining here.  The expression is translated to</p>\n\n<pre><code>(1 in [1, 0]) and ([1, 0] == True)\n</code></pre>\n\n<p>which is obviously <code>False</code>.</p>\n\n<p>This also happens for expressions like</p>\n\n<pre><code>a &lt; b &lt; c\n</code></pre>\n\n<p>which translate to</p>\n\n<pre><code>(a &lt; b) and (b &lt; c)\n</code></pre>\n\n<p>(without evaluating <code>b</code> twice).</p>\n\n<p>See the <a href=\"http://docs.python.org/reference/expressions.html#not-in\">Python language documentation</a> for further details.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How do I convert a <a href=\"http://en.wikipedia.org/wiki/NumPy\" rel=\"noreferrer\">NumPy</a> array to a Python List (for example <code>[[1,2,3],[4,5,6]]</code> ), and do it reasonably fast?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use <a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.tolist.html\" rel=\"noreferrer\"><code>tolist()</code></a>:</p>\n\n<pre><code>import numpy as np\n&gt;&gt;&gt; np.array([[1,2,3],[4,5,6]]).tolist()\n[[1, 2, 3], [4, 5, 6]]\n</code></pre>\n\n<p>Note that this converts the values from whatever numpy type they may have (e.g. np.int32 or np.float32) to the \"nearest compatible Python type\" (in a list). If you want to preserve the numpy data types, you could call list() on your array instead, and you'll end up with a list of <a href=\"https://docs.scipy.org/doc/numpy-1.10.0/reference/arrays.scalars.html\" rel=\"noreferrer\">numpy scalars</a>. (Thanks to Mr_and_Mrs_D for pointing that out in a comment.)</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/2354329/whats-the-meaning-of-r-in-python\" dir=\"ltr\">what's the meaning of %r in python</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    5 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>On <a href=\"http://learnpythonthehardway.org/\">Learn Python the Hard Way</a> page 21, I see this code example:</p>\n\n<pre><code>x = \"There are %d types of people.\" % 10\n...\nprint \"I said: %r.\" % x\n</code></pre>\n\n<p>Why is <code>%r</code> used here instead of <code>%s</code>?  When would you use <code>%r</code>, and when would you use <code>%s</code>?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The <code>%s</code> specifier converts the object using <a href=\"https://docs.python.org/2/library/functions.html#str\"><code>str()</code></a>, and <code>%r</code> converts it using <a href=\"https://docs.python.org/2/library/functions.html#repr\"><code>repr()</code></a>.</p>\n\n<p>For some objects such as integers, they yield the same result, but <a href=\"https://docs.python.org/2/library/functions.html#repr\"><code>repr()</code></a> is special in that (for types where this is possible) it conventionally returns a result that is valid Python syntax, which could be used to unambiguously recreate the object it represents.</p>\n\n<p>Here's an example, using a date:</p>\n\n<pre><code>&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; d = datetime.date.today()\n&gt;&gt;&gt; str(d)\n'2011-05-14'\n&gt;&gt;&gt; repr(d)\n'datetime.date(2011, 5, 14)'\n</code></pre>\n\n<p>Types for which <a href=\"https://docs.python.org/2/library/functions.html#repr\"><code>repr()</code></a> doesn't produce Python syntax include those that point to external resources such as a <code>file</code>, which you can't guarantee to recreate in a different context.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm trying to get started with unit testing in Python and I was wondering if someone could explain the advantages and disadvantages of doctest and unittest.  </p>\n\n<p>What conditions would you use each for?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Both are valuable.  I use both doctest and <a href=\"https://pypi.python.org/pypi/nose/\" rel=\"noreferrer\">nose</a> taking the place of unittest. I use doctest for cases where the test is giving an example of usage that is actually useful as documentation.  Generally I don't make these tests comprehensive, aiming solely for informative.  I'm effectively using doctest in reverse:  not to test my code is correct based on my doctest, but to check that my documentation is correct based on the code.</p>\n\n<p>The reason is that I find comprehensive doctests will clutter your documentation far too much, so you will either end up with either unusable docstrings, or incomplete testing.</p>\n\n<p>For actually testing the <em>code</em>, the goal is to thoroughly test every case, rather than illustrate what is does by example, which is a different goal which I think is better met by other frameworks.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am trying to <code>pip install</code> the <code>MySQL-python</code> package, but I get an <code>ImportError</code>.</p>\n\n<pre><code>Jans-MacBook-Pro:~ jan$ /Library/Frameworks/Python.framework/Versions/3.3/bin/pip-3.3 install MySQL-python\nDownloading/unpacking MySQL-python\n  Running setup.py egg_info for package MySQL-python\n    Traceback (most recent call last):\n      File \"&lt;string&gt;\", line 16, in &lt;module&gt;\n      File \"/var/folders/lf/myf7bjr57_jg7_5c4014bh640000gn/T/pip-build/MySQL-python/setup.py\", line 14, in &lt;module&gt;\n        from setup_posix import get_config\n      File \"./setup_posix.py\", line 2, in &lt;module&gt;\n        from ConfigParser import SafeConfigParser\n    ImportError: No module named 'ConfigParser'\n    Complete output from command python setup.py egg_info:\n    Traceback (most recent call last):\n\n  File \"&lt;string&gt;\", line 16, in &lt;module&gt;\n\n  File \"/var/folders/lf/myf7bjr57_jg7_5c4014bh640000gn/T/pip-build/MySQL-python/setup.py\", line 14, in &lt;module&gt;\n\n    from setup_posix import get_config\n\n  File \"./setup_posix.py\", line 2, in &lt;module&gt;\n\n    from ConfigParser import SafeConfigParser\n\nImportError: No module named 'ConfigParser'\n\n----------------------------------------\nCommand python setup.py egg_info failed with error code 1 in /var/folders/lf/myf7bjr57_jg7_5c4014bh640000gn/T/pip-build/MySQL-python\nStoring complete log in /Users/jan/.pip/pip.log\nJans-MacBook-Pro:~ jan$ \n</code></pre>\n\n<p>Any ideas?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In Python 3, <a href=\"https://docs.python.org/2/library/configparser.html\"><code>ConfigParser</code></a> has been renamed to <a href=\"https://docs.python.org/3/library/configparser.html\"><code>configparser</code></a> for PEP 8 compliance. It looks like the package you are installing does not support Python 3.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I can't figure out how to use an array or matrix in the way that I would normally use a list. I want to create an empty array (or matrix) and then add one column (or row) to it at a time.</p>\n\n<p>At the moment the only way I can find to do this is like:</p>\n\n<pre><code>mat = None\nfor col in columns:\n    if mat is None:\n        mat = col\n    else:\n        mat = hstack((mat, col))\n</code></pre>\n\n<p>Whereas if it were a list, I'd do something like this:</p>\n\n<pre><code>list = []\nfor item in data:\n    list.append(item)\n</code></pre>\n\n<p>Is there a way to use that kind of notation for <a href=\"http://en.wikipedia.org/wiki/NumPy\" rel=\"noreferrer\">NumPy</a> arrays or matrices?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You have the wrong mental model for using NumPy efficiently. NumPy arrays are stored in contiguous blocks of memory. If you want to add rows or columns to an existing array, the entire array needs to be copied to a new block of memory, creating gaps for the new elements to be stored. This is very inefficient if done repeatedly to build an array.</p>\n\n<p>In the case of adding rows, your best bet is to create an array that is as big as your data set will eventually be, and then add data to it row-by-row:</p>\n\n<pre><code>&gt;&gt;&gt; import numpy\n&gt;&gt;&gt; a = numpy.zeros(shape=(5,2))\n&gt;&gt;&gt; a\narray([[ 0.,  0.],\n   [ 0.,  0.],\n   [ 0.,  0.],\n   [ 0.,  0.],\n   [ 0.,  0.]])\n&gt;&gt;&gt; a[0] = [1,2]\n&gt;&gt;&gt; a[1] = [2,3]\n&gt;&gt;&gt; a\narray([[ 1.,  2.],\n   [ 2.,  3.],\n   [ 0.,  0.],\n   [ 0.,  0.],\n   [ 0.,  0.]])\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>This is the traceback on my windows system. </p>\n\n<pre><code>Traceback (most recent call last):\n  File \"D:\\AMD\\workspace\\steelrumors\\manage.py\", line 9, in &lt;module&gt;\n    django.setup()\n  File \"D:\\AMD\\Django\\django-django-4c85a0d\\django\\__init__.py\", line 21, in setup\n    apps.populate(settings.INSTALLED_APPS)\n  File \"D:\\AMD\\Django\\django-django-4c85a0d\\django\\apps\\registry.py\", line 108, in populate\n    app_config.import_models(all_models)\n  File \"D:\\AMD\\Django\\django-django-4c85a0d\\django\\apps\\config.py\", line 197, in import_models\n    self.models_module = import_module(models_module_name)\n  File \"C:\\Python27\\lib\\importlib\\__init__.py\", line 37, in import_module\n    __import__(name)\n  File \"C:\\Python27\\lib\\site-packages\\registration\\models.py\", line 15, in &lt;module&gt;\n    User = get_user_model()\n  File \"D:\\AMD\\Django\\django-django-4c85a0d\\django\\contrib\\auth\\__init__.py\", line 135, in get_user_model\n    return django_apps.get_model(settings.AUTH_USER_MODEL)\n  File \"D:\\AMD\\Django\\django-django-4c85a0d\\django\\apps\\registry.py\", line 199, in get_model\n    self.check_models_ready()\n  File \"D:\\AMD\\Django\\django-django-4c85a0d\\django\\apps\\registry.py\", line 131, in check_models_ready\n    raise AppRegistryNotReady(\"Models aren't loaded yet.\")\ndjango.core.exceptions.AppRegistryNotReady: Models aren't loaded yet.\n</code></pre>\n\n<p>And my manage.py looks like this:</p>\n\n<pre><code>import os\nimport sys\nimport django\n\nif __name__ == \"__main__\":\n\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"steelrumors.settings\")\n    django.setup()\n    from django.core.management import execute_from_command_line\n\n    execute_from_command_line(sys.argv)\n</code></pre>\n\n<p>I get this error when i am trying to use <a href=\"https://bitbucket.org/ubernostrum/django-registration/\">registration</a> app in Django 1.7</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This is what solved it for us and <a href=\"https://stackoverflow.com/a/26636758/48735\">these folks</a>:</p>\n\n<p>Our project started with Django 1.4, we went to 1.5 and then to 1.7. Our wsgi.py looked like this:</p>\n\n<pre><code>import os\n\nfrom django.core.handlers.wsgi import WSGIHandler\n\nos.environ['DJANGO_SETTINGS_MODULE'] = 'myapp.settings'\napplication = WSGIHandler()\n</code></pre>\n\n<p>When I updated to the 1.7 style WSGI handler:</p>\n\n<pre><code>import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ['DJANGO_SETTINGS_MODULE'] = 'myapp.settings'\napplication = get_wsgi_application()\n</code></pre>\n\n<p>Everything works now.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How do I accomplish a simple redirect (e.g. <code>cflocation</code> in ColdFusion, or <code>header(location:http://)</code> for PHP) in Django?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It's simple:</p>\n\n<pre><code>from django.http import HttpResponseRedirect\n\ndef myview(request):\n    ...\n    return HttpResponseRedirect(\"/path/\")\n</code></pre>\n\n<p>More info in the <a href=\"https://docs.djangoproject.com/en/1.4/ref/request-response/#django.http.HttpResponseRedirect\" rel=\"nofollow noreferrer\">official Django docs</a></p>\n\n<p><strong>Update: Django 1.0</strong></p>\n\n<p>There is apparently a better way of doing this in Django now using <code>generic views</code>.</p>\n\n<p>Example -</p>\n\n<pre><code>from django.views.generic.simple import redirect_to\n\nurlpatterns = patterns('',   \n    (r'^one/$', redirect_to, {'url': '/another/'}),\n\n    #etc...\n)\n</code></pre>\n\n<p>There is more in the <a href=\"https://docs.djangoproject.com/en/1.4/ref/generic-views/#django-views-generic-simple-redirect-to\" rel=\"nofollow noreferrer\">generic views documentation</a>.\nCredit - <a href=\"https://stackoverflow.com/users/166761/carles-barrobes\">Carles Barrob\u00e9s</a>.</p>\n\n<p><strong>Update #2: Django 1.3+</strong></p>\n\n<p>In Django 1.5 <em>redirect_to</em> no longer exists and has been replaced by <a href=\"https://docs.djangoproject.com/en/1.5/ref/class-based-views/base/#redirectview\" rel=\"nofollow noreferrer\">RedirectView</a>. Credit to <a href=\"https://stackoverflow.com/users/221917/yonatan\">Yonatan</a></p>\n\n<pre><code>from django.views.generic import RedirectView\n\nurlpatterns = patterns('',\n    (r'^one/$', RedirectView.as_view(url='/another/')),\n)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I want to I check whether a string is in ASCII or not.</p>\n\n<p>I am aware of <code>ord()</code>, however when I try <code>ord('\u00e9')</code>, I have <code>TypeError: ord() expected a character, but string of length 2 found</code>. I understood it is caused by the way I built Python (as explained in <a href=\"http://docs.python.org/library/functions.html#ord\" rel=\"noreferrer\"><code>ord()</code>'s documentation</a>). </p>\n\n<p>Is there another way to check?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>def is_ascii(s):\n    return all(ord(c) &lt; 128 for c in s)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm trying to build a simple website with login functionality very similar to the one here on SO.\nThe user should be able to browse the site as an anonymous user and there will be a login link on every page. When clicking on the login link the user will be taken to the login form. After a successful login the user should be taken back to the page from where he clicked the login link in the first place.\nI'm guessing that I have to somehow pass the url of the current page to the view that handles the login form but I can't really get it to work.</p>\n\n<p>EDIT:\nI figured it out. I linked to the login form by passing the current page as a GET parameter and then used 'next' to redirect to that page. Thanks!</p>\n\n<p>EDIT 2:\nMy explanation did not seem to be clear so as requested here is my code:\nLets say we are on a page foo.html and we are not logged in. Now we would like to have a link on foo.html that links to login.html. There we can login and are then redirected back to foo.html.\nThe link on foo.html looks like this:</p>\n\n<pre><code>      &lt;a href='/login/?next={{ request.path }}'&gt;Login&lt;/a&gt; \n</code></pre>\n\n<p>Now I wrote a custom login view that looks somewhat like this:</p>\n\n<pre><code>def login_view(request):\n   redirect_to = request.REQUEST.get('next', '')\n   if request.method=='POST':\n      #create login form...\n      if valid login credentials have been entered:\n         return HttpResponseRedirect(redirect_to)  \n   #...\n   return render_to_response('login.html', locals())\n</code></pre>\n\n<p>And the important line in login.html:</p>\n\n<pre><code>&lt;form method=\"post\" action=\"./?next={{ redirect_to }}\"&gt;\n</code></pre>\n\n<p>So yeah thats pretty much it, hope that makes it clear.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You do not need to make an extra view for this, the functionality is already built in.</p>\n\n<p>First each page with a login link needs to know the current path, and the easiest way is to add the request context preprosessor to settings.py (the 4 first are default), then the request object will be available in each request:</p>\n\n<p><strong>settings.py:</strong></p>\n\n<pre><code>TEMPLATE_CONTEXT_PROCESSORS = (\n    \"django.core.context_processors.auth\",\n    \"django.core.context_processors.debug\",\n    \"django.core.context_processors.i18n\",\n    \"django.core.context_processors.media\",\n    \"django.core.context_processors.request\",\n)\n</code></pre>\n\n<p>Then add in the template you want the Login link:</p>\n\n<p><strong>base.html:</strong></p>\n\n<pre><code>&lt;a href=\"{% url django.contrib.auth.views.login %}?next={{request.path}}\"&gt;Login&lt;/a&gt;\n</code></pre>\n\n<p>This will add a GET argument to the login page that points back to the current page.</p>\n\n<p>The login template can then be as simple as this:</p>\n\n<p><strong>registration/login.html:</strong></p>\n\n<pre><code>{% block content %}\n&lt;form method=\"post\" action=\"\"&gt;\n  {{form.as_p}}\n&lt;input type=\"submit\" value=\"Login\"&gt;\n&lt;/form&gt;\n{% endblock %}\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a <a href=\"http://en.wikipedia.org/wiki/Bluehost\" rel=\"noreferrer\">Bluehost</a> account where I can run Python scripts as CGI. I guess it's the simplest CGI, because to run I have to define the following in <code>.htaccess</code>:</p>\n\n<pre><code>Options +ExecCGI\nAddType text/html py\nAddHandler cgi-script .py\n</code></pre>\n\n<p>Now, whenever I look up web programming with Python, I hear a lot about WSGI and how most frameworks use it. But I just don't understand how it all fits together, especially when my web server is given (Apache running at a host's machine) and not something I can really play with (except defining <code>.htaccess</code> commands).</p>\n\n<p>How are <a href=\"http://en.wikipedia.org/wiki/Web_Server_Gateway_Interface\" rel=\"noreferrer\">WSGI</a>, CGI, and the frameworks all connected? What do I need to know, install, and do if I want to run a web framework (say <a href=\"http://webpy.org/\" rel=\"noreferrer\">web.py</a> or <a href=\"http://en.wikipedia.org/wiki/CherryPy\" rel=\"noreferrer\">CherryPy</a>) on my basic CGI configuration? How to install WSGI support?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>How WSGI, CGI, and the frameworks are all connected?</strong></p>\n\n<p>Apache listens on port 80.  It gets an HTTP request.  It parses the request to find a way to respond.  Apache has a LOT of choices for responding.   One way to respond is to use CGI to run a script.  Another way to respond is to simply serve a file.  </p>\n\n<p>In the case of CGI, Apache prepares an environment and invokes the script through the CGI protocol.  This is a standard Unix Fork/Exec situation -- the CGI subprocess inherits an OS environment including the socket and stdout.  The CGI subprocess writes a response, which goes back to Apache; Apache sends this response to the browser.</p>\n\n<p>CGI is primitive and annoying.  Mostly because it forks a subprocess for every request, and subprocess must exit or close stdout and stderr to signify end of response.</p>\n\n<p>WSGI is an interface that is based on the CGI design pattern.  It is not necessarily CGI -- it does not have to fork a subprocess for each request.  It can be CGI, but it doesn't have to be.</p>\n\n<p>WSGI adds to the CGI design pattern in several important ways.  It parses the HTTP Request Headers for you and adds these to the environment.  It supplies any POST-oriented input as a file-like object in the environment.  It also provides you a function that will formulate the response, saving you from a lot of formatting details.</p>\n\n<p><strong>What do I need to know / install / do if I want to run a web framework (say web.py or cherrypy) on my basic CGI configuration?</strong></p>\n\n<p>Recall that forking a subprocess is expensive.  There are two ways to work around this.</p>\n\n<ol>\n<li><p><strong>Embedded</strong> <code>mod_wsgi</code> or <code>mod_python</code> embeds Python inside Apache; no process is forked.  Apache runs the Django application directly.</p></li>\n<li><p><strong>Daemon</strong> <code>mod_wsgi</code> or <code>mod_fastcgi</code> allows Apache to interact with a separate daemon (or \"long-running process\"), using the WSGI protocol.  You start your long-running Django process, then you configure Apache's mod_fastcgi to communicate with this process.</p></li>\n</ol>\n\n<p>Note that <code>mod_wsgi</code> can work in either mode: embedded or daemon.</p>\n\n<p>When you read up on mod_fastcgi, you'll see that Django uses <a href=\"http://pypi.python.org/pypi/flup/\" rel=\"nofollow noreferrer\">flup</a> to create a WSGI-compatible interface from the information provided by mod_fastcgi.  The pipeline works like this.</p>\n\n<pre><code>Apache -&gt; mod_fastcgi -&gt; FLUP (via FastCGI protocol) -&gt; Django (via WSGI protocol)\n</code></pre>\n\n<p>Django has several \"django.core.handlers\" for the various interfaces.</p>\n\n<p>For mod_fastcgi, Django provides a <code>manage.py runfcgi</code> that integrates FLUP and the handler.</p>\n\n<p>For mod_wsgi, there's a core handler for this.</p>\n\n<p><strong>How to install WSGI support?</strong></p>\n\n<p>Follow these instructions.</p>\n\n<p><a href=\"https://code.google.com/archive/p/modwsgi/wikis/IntegrationWithDjango.wiki\" rel=\"nofollow noreferrer\">https://code.google.com/archive/p/modwsgi/wikis/IntegrationWithDjango.wiki</a></p>\n\n<p>For background see this</p>\n\n<p><a href=\"http://docs.djangoproject.com/en/dev/howto/deployment/#howto-deployment-index\" rel=\"nofollow noreferrer\">http://docs.djangoproject.com/en/dev/howto/deployment/#howto-deployment-index</a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/82831/how-do-i-check-whether-a-file-exists-using-python\" dir=\"ltr\">How do I check whether a file exists using Python?</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    40 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>Which is the preferred way to check if a file exists and if not create it?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>To check if a path is an existing file:</p>\n\n<p><a href=\"http://docs.python.org/library/os.path.html#os.path.isfile\" rel=\"noreferrer\"><code>os.path.isfile(path)</code></a></p>\n\n<blockquote>\n  <p>Return <code>True</code> if <em>path</em> is an existing\n  regular file. This follows symbolic\n  links, so both <code>islink()</code> and\n  <code>isfile()</code> can be true for the same\n  path.</p>\n</blockquote>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm trying to create required libraries in a package I'm distributing. It requires both the <a href=\"http://en.wikipedia.org/wiki/SciPy\">SciPy</a> and <a href=\"http://en.wikipedia.org/wiki/NumPy\">NumPy</a> libraries.\nWhile developing, I installed both using</p>\n\n<pre><code>apt-get install scipy\n</code></pre>\n\n<p>which installed SciPy 0.9.0 and NumPy 1.5.1, and it worked fine.</p>\n\n<p>I would like to do the same using <code>pip install</code> - in order to be able to specify dependencies in a setup.py of my own package.</p>\n\n<p>The problem is, when I try:</p>\n\n<pre><code>pip install 'numpy==1.5.1'\n</code></pre>\n\n<p>it works fine.</p>\n\n<p>But then</p>\n\n<pre><code>pip install 'scipy==0.9.0'\n</code></pre>\n\n<p>fails miserably, with</p>\n\n<pre><code>raise self.notfounderror(self.notfounderror.__doc__)\n\nnumpy.distutils.system_info.BlasNotFoundError:\n\nBlas (http://www.netlib.org/blas/) libraries not found.\n\nDirectories to search for the libraries can be specified in the\n\nnumpy/distutils/site.cfg file (section [blas]) or by setting\n\nthe BLAS environment variable.\n</code></pre>\n\n<p>How do I get it to work?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I am assuming Linux experience in my answer; I found that there are three prerequisites to getting <code>pip install scipy</code> to proceed nicely.</p>\n\n<p>Go here: <a href=\"http://www.scipy.org/Installing_SciPy/BuildingGeneral\">Installing SciPY</a></p>\n\n<p>Follow the instructions to download, build and export the env variable for <a href=\"http://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms\">BLAS</a> and then <a href=\"http://en.wikipedia.org/wiki/LAPACK\">LAPACK</a>. Be careful to not just blindly cut'n'paste the shell commands - there will be a few lines you need to select depending on your architecture, etc., and you'll need to fix/add the correct directories that it incorrectly assumes as well.</p>\n\n<p>The third thing you may need is to <strong>yum install numpy-f2py</strong> or the equivalent.</p>\n\n<p>Oh, yes and lastly, you may need to <strong>yum install gcc-gfortran</strong> as the libraries above are <a href=\"http://en.wikipedia.org/wiki/Fortran\">Fortran</a> source.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How does one change the 'Django administration' text in the django admin header?</p>\n\n<p>It doesn't seem to be covered in the \"Customizing the admin\" documentation.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You need to create your own admin base_site.html template to do this. The easiest way is to create the file:</p>\n\n<pre><code>/&lt;projectdir&gt;/templates/admin/base_site.html\n</code></pre>\n\n<p>This should be a copy of <a href=\"https://github.com/django/django/blob/master/django/contrib/admin/templates/admin/base_site.html\">https://github.com/django/django/blob/master/django/contrib/admin/templates/admin/base_site.html</a> - except putting in your custom title:</p>\n\n<pre><code>{% block branding %}\n&lt;h1 id=\"site-name\"&gt;{% trans 'my cool admin console' %}&lt;/h1&gt;\n{% endblock %}\n</code></pre>\n\n<p>For this to work, you need to have the correct settings for your project, namely in settings.py:</p>\n\n<ul>\n<li>Make sure '/projectdir/templates/' is added into TEMPLATE_DIRS</li>\n<li>Make sure 'django.template.loaders.filesystem.Loader' is added into TEMPLATE_LOADERS</li>\n</ul>\n\n<p>See <a href=\"http://docs.djangoproject.com/en/dev/ref/settings/\">http://docs.djangoproject.com/en/dev/ref/settings/</a> for more information on settings.py</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm starting from the pandas Data Frame docs here: <a href=\"http://pandas.pydata.org/pandas-docs/stable/dsintro.html\" rel=\"noreferrer\">http://pandas.pydata.org/pandas-docs/stable/dsintro.html</a></p>\n\n<p>I'd like to iteratively fill the Data Frame with values in a time series kind of calculation.\nSo basically, I'd like to initialize, data frame with columns A,B and timestamp rows, all 0 or all NaN.</p>\n\n<p>I'd then add initial values and go over this data calculating the new row from the row before, say row[A][t] = row[A][t-1]+1 or so.</p>\n\n<p>I'm currently using the code as below, but I feel it's kind of ugly and there must be a  way to do this with a data frame directly or just a better way in general.\nNote: I'm using Python 2.7.</p>\n\n<pre><code>import datetime as dt\nimport pandas as pd\nimport scipy as s\n\nif __name__ == '__main__':\n    base = dt.datetime.today().date()\n    dates = [ base - dt.timedelta(days=x) for x in range(0,10) ]\n    dates.sort()\n\n    valdict = {}\n    symbols = ['A','B', 'C']\n    for symb in symbols:\n        valdict[symb] = pd.Series( s.zeros( len(dates)), dates )\n\n    for thedate in dates:\n        if thedate &gt; dates[0]:\n            for symb in valdict:\n                valdict[symb][thedate] = 1+valdict[symb][thedate - dt.timedelta(days=1)]\n\n    print valdict\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here's a couple of suggestions:</p>\n\n<p>Use <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.date_range.html\" rel=\"noreferrer\"><code>date_range</code></a> for the index:</p>\n\n<pre><code>import datetime\nimport pandas as pd\nimport numpy as np\n\ntodays_date = datetime.datetime.now().date()\nindex = pd.date_range(todays_date-datetime.timedelta(10), periods=10, freq='D')\n\ncolumns = ['A','B', 'C']\n</code></pre>\n\n<p><em>Note: we could create an empty DataFrame (with <code>NaN</code>s) simply by writing:</em></p>\n\n<pre><code>df_ = pd.DataFrame(index=index, columns=columns)\ndf_ = df_.fillna(0) # with 0s rather than NaNs\n</code></pre>\n\n<p>To do these type of calculations for the data, use a numpy array:</p>\n\n<pre><code>data = np.array([np.arange(10)]*3).T\n</code></pre>\n\n<p>Hence we can create the DataFrame:</p>\n\n<pre><code>In [10]: df = pd.DataFrame(data, index=index, columns=columns)\n\nIn [11]: df\nOut[11]: \n            A  B  C\n2012-11-29  0  0  0\n2012-11-30  1  1  1\n2012-12-01  2  2  2\n2012-12-02  3  3  3\n2012-12-03  4  4  4\n2012-12-04  5  5  5\n2012-12-05  6  6  6\n2012-12-06  7  7  7\n2012-12-07  8  8  8\n2012-12-08  9  9  9\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Here is the code I was trying to turn into a list comprehension:</p>\n\n<pre><code>table = ''\nfor index in xrange(256):\n    if index in ords_to_keep:\n        table += chr(index)\n    else:\n        table += replace_with\n</code></pre>\n\n<p>Is there a way to add the else statement to this comprehension?</p>\n\n<pre><code>table = ''.join(chr(index) for index in xrange(15) if index in ords_to_keep)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The syntax <code>a if b else c</code> is a ternary operator in Python that evaluates to <code>a</code> if the condition <code>b</code> is true - otherwise, it evaluates to <code>c</code>. It can be used in comprehension statements:</p>\n\n<pre><code>&gt;&gt;&gt; [a if a else 2 for a in [0,1,0,3]]\n[2, 1, 2, 3]\n</code></pre>\n\n<p>So for your example,</p>\n\n<pre><code>table = ''.join(chr(index) if index in ords_to_keep else replace_with\n                for index in xrange(15))\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/546321/how-do-i-calculate-the-date-six-months-from-the-current-date-using-the-datetime\" dir=\"ltr\">How do I calculate the date six months from the current date using the datetime Python module?</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    34 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>I need to increment the month of a datetime value</p>\n\n<pre><code>next_month = datetime.datetime(mydate.year, mydate.month+1, 1)\n</code></pre>\n\n<p>when the month is 12, it becomes 13 and raises error \"month must be in 1..12\". (I expected the year would increment)</p>\n\n<p>I wanted to use timedelta, but it doesn't take month argument.\nThere is <a href=\"http://labix.org/python-dateutil\" rel=\"noreferrer\">relativedelta</a> python package, but i don't want to install it just only for this.\nAlso there is a solution using <a href=\"http://pypi.python.org/pypi/timelib/0.2\" rel=\"noreferrer\">strtotime</a>.</p>\n\n<pre><code>time = strtotime(str(mydate));\nnext_month = date(\"Y-m-d\", strtotime(\"+1 month\", time));\n</code></pre>\n\n<p>I don't want to convert from datetime to str then to time, and then to datetime; therefore, it's still a library too</p>\n\n<p>Does anyone have any good and <strong>simple</strong> solution just like using timedelta?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>Edit</strong> - based on your comment of dates being needed to be rounded down if there are fewer days in the next month, here is a solution:</p>\n\n<pre><code>&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; import calendar\n&gt;&gt;&gt;\n&gt;&gt;&gt; def add_months(sourcedate,months):\n...     month = sourcedate.month - 1 + months\n...     year = int(sourcedate.year + month / 12 )\n...     month = month % 12 + 1\n...     day = min(sourcedate.day,calendar.monthrange(year,month)[1])\n...     return datetime.date(year,month,day)\n...\n&gt;&gt;&gt; somedate = datetime.date.today()\n&gt;&gt;&gt; somedate\ndatetime.date(2010, 11, 9)\n&gt;&gt;&gt; add_months(somedate,1)\ndatetime.date(2010, 12, 9)\n&gt;&gt;&gt; add_months(somedate,23)\ndatetime.date(2012, 10, 9)\n&gt;&gt;&gt; otherdate = datetime.date(2010,10,31)\n&gt;&gt;&gt; add_months(otherdate,1)\ndatetime.date(2010, 11, 30)\n</code></pre>\n\n<p>Also, if you're not worried about hours, minutes and seconds you could use <code>date</code> rather than <code>datetime</code>.  If you are worried about hours, minutes and seconds you need to modify my code to use <code>datetime</code> and copy hours, minutes and seconds from the source to the result.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In a comment on <a href=\"https://stackoverflow.com/questions/2079786/caching-sitemaps-in-django\">this question</a>, I saw a statement that recommended using</p>\n\n<pre><code>result is not None\n</code></pre>\n\n<p>vs</p>\n\n<pre><code>result != None\n</code></pre>\n\n<p>I was wondering what the difference is, and why one might be recommended over the other?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>==</code> is an <strong>equality test</strong>. It checks whether the right hand side and the left hand side are equal objects (according to their <code>__eq__</code> or <code>__cmp__</code> methods.)</p>\n\n<p><code>is</code> is an <strong>identity test</strong>. It checks whether the right hand side and the left hand side are the very same object. No methodcalls are done, objects can't influence the <code>is</code> operation.</p>\n\n<p>You use <code>is</code> (and <code>is not</code>) for singletons, like <code>None</code>, where you don't care about objects that might want to pretend to be <code>None</code> or where you want to protect against objects breaking when being compared against <code>None</code>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>It's seems rare to read of a Python \"virtual machine\" while in Java \"virtual machine\" is used all the time. Both interpret byte codes, why call one a virtual machine and the other an interpreter? </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>A virtual machine is a virtual computing environment with a specific set of atomic well defined instructions that are supported independent of any specific language and it is generally thought of as a sandbox unto itself. The VM is analogous to an instruction set of a specific CPU and tends to work at a more fundamental level with very basic building blocks of such instructions (or byte codes) that are independent of the next. An instruction executes deterministically based only on the current state of the virtual machine and does not depend on information elsewhere in the instruction stream at that point in time.</p>\n\n<p>An interpreter on the other hand is more sophisticated in that it is tailored to parse a stream of some syntax that is of a specific language and of a specific grammer that must be decoded in the context of the surrounding tokens. You can't look at each byte or even each line in isolation and know exactly what to do next. The tokens in the language can't be taken in isolation like they can relative to the instructions (byte codes) of a VM.</p>\n\n<p>A Java compiler converts Java language into a byte-code stream no different than a C compiler converts C Language programs into assembly code. An interpreter on the other hand doesn't really convert the program into any well defined intermediate form, it just takes the program actions as a matter of the process of interpreting the source.</p>\n\n<p>Another test of the difference between a VM and an interpreter is whether you think of it as being language independent. What we know as the Java VM is not really Java specific. You could make a compiler from other languages that result in byte codes that can be run on the JVM. On the other hand, I don't think we would really think of \"compiling\" some other language other than Python into Python for interpretation by the Python interpreter.</p>\n\n<p>Because of the sophistication of the interpretation process, this can be a relatively slow process....specifically parsing and identifying the language tokens, etc. and understanding the context of the source to be able to undertake the execution process within the interpreter. To help accelerate such interpreted languages, this is where we can define intermediate forms of pre-parsed, pre-tokenized source code that is more readily directly interpreted. This sort of binary form is still interpreted at execution time, it is just starting from a much less human readable form to improve performance. However, the logic executing that form is not a virtual machine, because those codes still can't be taken in isolation - the context of the surrounding tokens still matter, they are just now in a different more computer efficient form.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have some lines of python code that I'm continuously copying/pasting into the python console. Is there a <code>load</code> command or something I can run? e.g. <code>load file.py</code></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Give this a try:</p>\n\n<pre><code>execfile('file.py')\n</code></pre>\n\n<p>Example usage:</p>\n\n<pre><code>C:\\junk&gt;copy con execfile_example.py\na = [9, 42, 888]\nb = len(a)\n^Z\n        1 file(s) copied.\n\nC:\\junk&gt;\\python27\\python\nPython 2.7.1 (r271:86832, Nov 27 2010, 18:30:46) [MSC v.1500 32 bit (Intel)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; execfile('execfile_example.py')\n&gt;&gt;&gt; a\n[9, 42, 888]\n&gt;&gt;&gt; b\n3\n&gt;&gt;&gt;\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What exactly is the difference between Python and <a href=\"http://en.wikipedia.org/wiki/IPython\" rel=\"noreferrer\">IPython</a>?</p>\n\n<p>If I write code in Python, will it run in IPython as is or does it need to be modified?</p>\n\n<p>I know IPython is supposed to be an interactive shell for Python, but is that all? Or is there a language called IPython? If I write something under IPython, will it run in Python, and vice-versa? If there are differences, how do I know what they are? Will all packages used by Python work as is in IPython?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"http://ipython.org/\"><code>ipython</code></a> is an interactive shell built with python.</p>\n\n<p>From the project website:</p>\n\n<blockquote>\n  <p>IPython provides a rich toolkit to help you make the most out of using Python, with:</p>\n  \n  <ul>\n  <li>Powerful Python shells (terminal and Qt-based).</li>\n  <li>A web-based notebook with the same core features but support for code, text, mathematical expressions, inline plots and other rich media.</li>\n  <li>Support for interactive data visualization and use of GUI toolkits.</li>\n  <li>Flexible, embeddable interpreters to load into your own projects.</li>\n  <li>Easy to use, high performance tools for parallel computing.</li>\n  </ul>\n</blockquote>\n\n<p>Note that the first 2 lines tell you it helps you make the most of using Python. Thus, you don't need to alter your code, the IPython shell runs your python code just like the normal python shell does, only with more features.</p>\n\n<p>I recommend reading the <a href=\"http://ipython.readthedocs.io/en/stable/interactive/tutorial.html\">IPython tutorial</a> to get a sense of what features you gain when using IPython.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>My package has the following structure:</p>\n\n<pre><code>mobilescouter/\n    __init__.py #1\n    mapper/\n        __init__.py  #2\n        lxml/\n            __init__.py #3\n            vehiclemapper.py\n            vehiclefeaturemapper.py\n            vehiclefeaturesetmapper.py\n        ...\n        basemapper.py\n   vehicle/\n        __init__.py #4\n        vehicle.py\n        vehiclefeature.py\n        vehiclefeaturemapper.py\n   ...\n</code></pre>\n\n<p>I'm not sure how the <code>__init__.py</code> files should be correctly written.<br> The <code>__init__.py #1</code> looks like:</p>\n\n<pre><code>__all__ = ['mapper', 'vehicle']\nimport mapper\nimport vehicle\n</code></pre>\n\n<p>But how should for example <code>__init__.py #2</code> look like? Mine is:</p>\n\n<pre><code>__all__ = ['basemapper', 'lxml']\nfrom basemaper import *\nimport lxml\n</code></pre>\n\n<p>When should be <code>__all__</code> used? </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>__all__</code> is very good - it helps guide import statements without automatically importing modules\n<a href=\"http://docs.python.org/tutorial/modules.html#importing-from-a-package\" rel=\"noreferrer\">http://docs.python.org/tutorial/modules.html#importing-from-a-package</a></p>\n\n<p>using <code>__all__</code> and <code>import *</code> is redundant, only <code>__all__</code> is needed</p>\n\n<p>I think one of the most powerful reasons to use <code>import *</code> in an <code>__init__.py</code> to import packages is to be able to refactor a script that has grown into multiple scripts without breaking an existing application. But if you're designing a package from the start. I think it's best to leave <code>__init__.py</code> files empty.</p>\n\n<p>for example:</p>\n\n<pre><code>foo.py - contains classes related to foo such as fooFactory, tallFoo, shortFoo\n</code></pre>\n\n<p>then the app grows and now it's a whole folder</p>\n\n<pre><code>foo/\n    __init__.py\n    foofactories.py\n    tallFoos.py\n    shortfoos.py\n    mediumfoos.py\n    santaslittlehelperfoo.py\n    superawsomefoo.py\n    anotherfoo.py\n</code></pre>\n\n<p>then the init script can say</p>\n\n<pre><code>__all__ = ['foofactories', 'tallFoos', 'shortfoos', 'medumfoos',\n           'santaslittlehelperfoo', 'superawsomefoo', 'anotherfoo']\n# deprecated to keep older scripts who import this from breaking\nfrom foo.foofactories import fooFactory\nfrom foo.tallfoos import tallFoo\nfrom foo.shortfoos import shortFoo\n</code></pre>\n\n<p>so that a script written to do the following does not break during the change:</p>\n\n<pre><code>from foo import fooFactory, tallFoo, shortFoo\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm trying to create a basic template to display the selected instance's field values, along with their names.  Think of it as just a standard output of the values of that instance in table format, with the field name (verbose_name specifically if specified on the field) in the first column and the value of that field in the second column.</p>\n\n<p>For example, let's say we have the following model definition:</p>\n\n<pre><code>class Client(Model):\n    name = CharField(max_length=150)\n    email = EmailField(max_length=100, verbose_name=\"E-mail\")\n</code></pre>\n\n<p>I would want it to be output in the template like so (assume an instance with the given values):</p>\n\n<pre><code>Field Name      Field Value\n----------      -----------\nName            Wayne Koorts\nE-mail          waynes@email.com\n</code></pre>\n\n<p>What I'm trying to achieve is being able to pass an instance of the model to a template and be able to iterate over it dynamically in the template, something like this:</p>\n\n<pre><code>&lt;table&gt;\n    {% for field in fields %}\n        &lt;tr&gt;\n            &lt;td&gt;{{ field.name }}&lt;/td&gt;\n            &lt;td&gt;{{ field.value }}&lt;/td&gt;\n        &lt;/tr&gt;\n    {% endfor %}\n&lt;/table&gt;\n</code></pre>\n\n<p>Is there a neat, \"Django-approved\" way to do this?  It seems like a very common task, and I will need to do it often for this particular project.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>model._meta.get_all_field_names()</code> will give you all the model's field names, then you can use <code>model._meta.get_field()</code> to work your way to the verbose name, and <code>getattr(model_instance, 'field_name')</code> to get the value from the model.</p>\n\n<p>NOTE: <code>model._meta.get_all_field_names()</code> is deprecated in django 1.9. Instead use <code>model._meta.get_fields()</code> to get the model's fields and <code>field.name</code> to get each field name.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is there something similar to the Python utility <a href=\"http://pypi.python.org/pypi/virtualenv\" rel=\"noreferrer\">virtualenv</a>?</p>\n\n<p>Basically it allows you to install Python packages into a sandboxed environment, so <code>easy_install django</code> doesn't go in your system-wide site-packages directory, it would go in the virtualenv-created directory.</p>\n\n<p>For example:</p>\n\n<pre><code>$ virtualenv test\nNew python executable in test/bin/python\nInstalling setuptools...cd .........done.\n$ cd test/\n$ source bin/activate\n(test)$ easy_install tvnamer\nSearching for tvnamer\nBest match: tvnamer 0.5.1\nProcessing tvnamer-0.5.1-py2.5.egg\nAdding tvnamer 0.5.1 to easy-install.pth file\nInstalling tvnamer script to /Users/dbr/test/bin\n\nUsing /Library/Python/2.5/site-packages/tvnamer-0.5.1-py2.5.egg\nProcessing dependencies for tvnamer\nFinished processing dependencies for tvnamer\n(test)$ which tvnamer \n/Users/dbr/test/bin/tvnamer\n</code></pre>\n\n<p>Is there something like this for RubyGems?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"http://rvm.io/\" rel=\"noreferrer\">RVM</a> works closer to how virtualenv works since it lets you sandbox different ruby versions and their gems, etc.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I've been hunting for an answer to this on South's site, Google, and SO, but couldn't find a simple way to do this. </p>\n\n<p>I want to rename a Django model using South.\nSay you have the following:</p>\n\n<pre><code>class Foo(models.Model):\n    name = models.CharField()\n\nclass FooTwo(models.Model):\n    name = models.CharField()\n    foo = models.ForeignKey(Foo)\n</code></pre>\n\n<p>and you want to convert Foo to Bar, namely</p>\n\n<pre><code>class Bar(models.Model):\n    name = models.CharField()\n\nclass FooTwo(models.Model):\n    name = models.CharField()\n    foo = models.ForeignKey(Bar)\n</code></pre>\n\n<p>To keep it simple, I'm just trying to change the name from <code>Foo</code> to <code>Bar</code>, but ignore the <code>foo</code> member in <code>FooTwo</code> for now.</p>\n\n<p>What's the easiest way to do this using South?</p>\n\n<ol>\n<li>I could probably do a data migration, but that seems pretty involved.</li>\n<li>Write a custom migration, e.g. <code>db.rename_table('city_citystate', 'geo_citystate')</code>, but I'm not sure how to fix the foreign key in this case.</li>\n<li>An easier way that you know?</li>\n</ol>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>To answer your first question, the simple model/table rename is pretty straightforward. Run the command:</p>\n\n<pre><code>./manage.py schemamigration yourapp rename_foo_to_bar --empty\n</code></pre>\n\n<p>(Update 2: try <code>--auto</code> instead of <code>--empty</code> to avoid the warning below.  Thanks to @KFB for the tip.)</p>\n\n<p>If you're using an older version of south, you'll need <code>startmigration</code> instead of <code>schemamigration</code>.</p>\n\n<p>Then manually edit the migration file to look like this:</p>\n\n<pre><code>class Migration(SchemaMigration):\n\n    def forwards(self, orm):\n        db.rename_table('yourapp_foo', 'yourapp_bar')\n\n\n    def backwards(self, orm):\n        db.rename_table('yourapp_bar','yourapp_foo')   \n</code></pre>\n\n<p>You can accomplish this more simply using the <code>db_table</code> Meta option in your model class.  But every time you do that, you increase the legacy weight of your codebase -- having class names differ from table names makes your code harder to understand and maintain.  I fully support doing simple refactorings like this for the sake of clarity.</p>\n\n<p>(update) I just tried this in production, and got a strange warning when I went to apply the migration.  It said:</p>\n\n<blockquote>\n<pre><code>The following content types are stale and need to be deleted:\n\n    yourapp | foo\n\nAny objects related to these content types by a foreign key will also\nbe deleted. Are you sure you want to delete these content types?\nIf you're unsure, answer 'no'.\n</code></pre>\n</blockquote>\n\n<p>I answered \"no\" and everything seemed to be fine.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm new to Python, so this is probably a simple scoping question. The following code in a Python file (module) is confusing me slightly:</p>\n\n<pre><code>if __name__ == '__main__':\n    x = 1\n\nprint x\n</code></pre>\n\n<p>In other languages I've worked in, this code would throw an exception, as the <code>x</code> variable is local to the <code>if</code> statement and should not exist outside of it. But this code executes, and prints 1. Can anyone explain this behavior? Are all variables created in a module global/available to the entire module?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Python variables are scoped to the innermost function or module; control blocks like <code>if</code> and <code>while</code> blocks don't count. (IIUC, this is also how JavaScript's <code>var</code>-declared variables work.)</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a dataframe df :</p>\n\n<pre><code>&gt;&gt;&gt; df\n                  sales  discount  net_sales    cogs\nSTK_ID RPT_Date                                     \n600141 20060331   2.709       NaN      2.709   2.245\n       20060630   6.590       NaN      6.590   5.291\n       20060930  10.103       NaN     10.103   7.981\n       20061231  15.915       NaN     15.915  12.686\n       20070331   3.196       NaN      3.196   2.710\n       20070630   7.907       NaN      7.907   6.459\n</code></pre>\n\n<p>Then I want to drop rows with certain sequence numbers which indicated in a list, suppose here is <code>[1,2,4],</code> then left:</p>\n\n<pre><code>                  sales  discount  net_sales    cogs\nSTK_ID RPT_Date                                     \n600141 20060331   2.709       NaN      2.709   2.245\n       20061231  15.915       NaN     15.915  12.686\n       20070630   7.907       NaN      7.907   6.459\n</code></pre>\n\n<p>How or what function can do that ?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.drop.html\">DataFrame.drop</a> and pass it a Series of index labels:</p>\n\n<pre><code>In [65]: df\nOut[65]: \n       one  two\none      1    4\ntwo      2    3\nthree    3    2\nfour     4    1\n\n\nIn [66]: df.drop(df.index[[1,3]])\nOut[66]: \n       one  two\none      1    4\nthree    3    2\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm calling a function in Python which I know may stall and force me to restart the script. </p>\n\n<p>How do I call the function or what do I wrap it in so that if it takes longer than 5 seconds the script cancels it and does something else?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You may use the <a href=\"http://docs.python.org/library/signal.html\" rel=\"noreferrer\">signal</a> package if you are running on UNIX:</p>\n\n<pre><code>In [1]: import signal\n\n# Register an handler for the timeout\nIn [2]: def handler(signum, frame):\n   ...:     print \"Forever is over!\"\n   ...:     raise Exception(\"end of time\")\n   ...: \n\n# This function *may* run for an indetermined time...\nIn [3]: def loop_forever():\n   ...:     import time\n   ...:     while 1:\n   ...:         print \"sec\"\n   ...:         time.sleep(1)\n   ...:         \n   ...:         \n\n# Register the signal function handler\nIn [4]: signal.signal(signal.SIGALRM, handler)\nOut[4]: 0\n\n# Define a timeout for your function\nIn [5]: signal.alarm(10)\nOut[5]: 0\n\nIn [6]: try:\n   ...:     loop_forever()\n   ...: except Exception, exc: \n   ...:     print exc\n   ....: \nsec\nsec\nsec\nsec\nsec\nsec\nsec\nsec\nForever is over!\nend of time\n\n# Cancel the timer if the function returned before timeout\n# (ok, mine won't but yours maybe will :)\nIn [7]: signal.alarm(0)\nOut[7]: 0\n</code></pre>\n\n<p>10 seconds after the call <code>alarm.alarm(10)</code>, the handler is called. This raises an exception that you can intercept from the regular Python code.</p>\n\n<p>This module doesn't play well with threads (but then, who does?)</p>\n\n<p><strong>Note that</strong> since we raise an exception when timeout happens, it may end up caught and ignored inside the function, for example of one such function:</p>\n\n<pre><code>def loop_forever():\n    while 1:\n        print 'sec'\n        try:\n            time.sleep(10)\n        except:\n            continue\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a model that represents paintings I present on my site. On the main webpage I'd like to show some of them: newest, one that was not visited for most time, most popular one and a random one. </p>\n\n<p>I'm using Django 1.0.2.</p>\n\n<p>While first 3 of them are easy to pull using django models, last one (random) causes me some trouble. I can ofc code it in my view, to something like this:</p>\n\n<pre><code>number_of_records = models.Painting.objects.count()\nrandom_index = int(random.random()*number_of_records)+1\nrandom_paint = models.Painting.get(pk = random_index)\n</code></pre>\n\n<p>It doesn't look like something I'd like to have in my view tho - this is entirely part of database abstraction and should be in the model. Also, here I need to take care of removed records (then number of all records won't cover me all the possible key values) and probably lots of other things.</p>\n\n<p>Any other options how I can do it, preferably somehow inside the model abstraction?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Using <code>order_by('?')</code> will kill the db server on the second day in production. A better way is something like what is described in <a href=\"http://web.archive.org/web/20110802060451/http://bolddream.com/2010/01/22/getting-a-random-row-from-a-relational-database/\" rel=\"noreferrer\">Getting a random row from a relational database</a>.</p>\n\n<pre><code>from django.db.models.aggregates import Count\nfrom random import randint\n\nclass PaintingManager(models.Manager):\n    def random(self):\n        count = self.aggregate(count=Count('id'))['count']\n        random_index = randint(0, count - 1)\n        return self.all()[random_index]\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I load a some machine learning data from a csv file. The first 2 columns are observations and the remaining columns are features.</p>\n\n<p>Currently, I do the following :</p>\n\n<pre><code>data = pandas.read_csv('mydata.csv')\n</code></pre>\n\n<p>which gives something like:</p>\n\n<pre><code>data = pandas.DataFrame(np.random.rand(10,5), columns = list('abcde'))\n</code></pre>\n\n<p>I'd like to slice this dataframe in two dataframes: one containing the columns <code>a</code> and <code>b</code> and one containing the columns <code>c</code>, <code>d</code> and <code>e</code>.</p>\n\n<p>It is not possible to write something like </p>\n\n<pre><code>observations = data[:'c']\nfeatures = data['c':]\n</code></pre>\n\n<p>I'm not sure what the best method is. Do I need a <code>pd.Panel</code>?</p>\n\n<p>By the way, I find dataframe indexing pretty inconsistent: <code>data['a']</code> is permitted, but <code>data[0]</code> is not. On the other side, <code>data['a':]</code> is not permitted but <code>data[0:]</code> is.\nIs there a practical reason for this? This is really confusing if columns are indexed by Int, given that <code>data[0] != data[0:1]</code></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<h1>2017 Answer - pandas 0.20: .ix is deprecated. Use .loc</h1>\n\n<p>See the <a href=\"https://pandas.pydata.org/pandas-docs/stable/indexing.html#ix-indexer-is-deprecated\" rel=\"noreferrer\">deprecation in the docs</a></p>\n\n<p><code>.loc</code> uses label based indexing to select both rows and columns. The labels being the values of the index or the columns. Slicing with <code>.loc</code> includes the last element. </p>\n\n<blockquote>\n  <p>Let's assume we have a DataFrame with the following columns:<br>\n  <code>foo</code>, <code>bar</code>, <code>quz</code>, <code>ant</code>, <code>cat</code>, <code>sat</code>, <code>dat</code>.</p>\n</blockquote>\n\n<pre><code># selects all rows and all columns beginning at 'foo' up to and including 'ant'\ndf.loc[:, 'foo':'sat']\n# foo bar quz ant cat sat\n</code></pre>\n\n<p><code>.loc</code> accepts the same slice notation that Python lists do for both row and columns. Slice notation being <code>start:stop:step</code></p>\n\n<pre><code># slice from 'foo' to 'cat' by every 2nd column\ndf.loc[:, 'foo':'cat':2]\n# foo quz cat\n\n# slice from the beginning to 'bar'\ndf.loc[:, :'bar']\n# foo bar\n\n# slice from 'quz' to the end by 3\ndf.loc[:, 'quz'::3]\n# quz sat\n\n# attempt from 'sat' to 'bar'\ndf.loc[:, 'sat':'bar']\n# no columns returned\n\n# slice from 'sat' to 'bar'\ndf.loc[:, 'sat':'bar':-1]\nsat cat ant quz bar\n\n# slice notation is syntatic sugar for the slice function\n# slice from 'quz' to the end by 2 with slice function\ndf.loc[:, slice('quz',None, 2)]\n# quz cat dat\n\n# select specific columns with a list\n# select columns foo, bar and dat\ndf.loc[:, ['foo','bar','dat']]\n# foo bar dat\n</code></pre>\n\n<p>You can slice by rows and columns. For instance if you have 5 rows with labels <code>v</code>, <code>w</code>, <code>x</code>, <code>y</code>, <code>z</code></p>\n\n<pre><code># slice from 'w' to 'y' and 'foo' to 'ant' by 3\ndf.loc['w':'y', 'foo':'ant':3]\n#    foo ant\n# w\n# x\n# y\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I've just updated my Mac OS to 10.9 and I discovered that some (all?) of my Python modules are not here anymore, especially the Image one.</p>\n\n<p>So I try to execute <code>sudo pip install pil</code>, but I get this error:</p>\n\n<pre><code>/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/usr/include/tk.h:78:11: fatal error: 'X11/Xlib.h' file not found\n\n#      include &lt;X11/Xlib.h&gt;\n\n               ^\n\n1 error generated.\n\nerror: command 'cc' failed with exit status 1\n</code></pre>\n\n<p>My Xcode is up-to-date and I don't have any idea. Is it possible that PIL is not yet 10.9 compatible ?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Following worked for me:</p>\n\n<pre><code>ln -s  /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/System/Library/Frameworks/Tk.framework/Versions/8.5/Headers/X11 /usr/local/include/X11\nsudo pip install pil\n</code></pre>\n\n<p>UPDATE:</p>\n\n<p>But there is more correct solution below, provided by Will.</p>\n\n<blockquote>\n  <p>open your terminal and execute:\n  <code>xcode-select --install</code></p>\n</blockquote>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>When I run something like:</p>\n\n<pre><code>from multiprocessing import Pool\n\np = Pool(5)\ndef f(x):\n     return x*x\n\np.map(f, [1,2,3])\n</code></pre>\n\n<p>it works fine. However, putting this as a function of a class:</p>\n\n<pre><code>class calculate(object):\n    def run(self):\n        def f(x):\n            return x*x\n\n        p = Pool()\n        return p.map(f, [1,2,3])\n\ncl = calculate()\nprint cl.run()\n</code></pre>\n\n<p>Gives me the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Exception in thread Thread-1:\nTraceback (most recent call last):\n  File \"/sw/lib/python2.6/threading.py\", line 532, in __bootstrap_inner\n    self.run()\n  File \"/sw/lib/python2.6/threading.py\", line 484, in run\n    self.__target(*self.__args, **self.__kwargs)\n  File \"/sw/lib/python2.6/multiprocessing/pool.py\", line 225, in _handle_tasks\n    put(task)\nPicklingError: Can't pickle &lt;type 'function'&gt;: attribute lookup __builtin__.function failed\n</code></pre>\n\n<p>I've seen a post from Alex Martelli dealing with the same kind of problem, but it wasn't explicit enough.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I also was annoyed by restrictions on what sort of functions pool.map could accept. I wrote the following to circumvent this. It appears to work, even for recursive use of parmap.</p>\n\n<pre><code>from multiprocessing import Process, Pipe\nfrom itertools import izip\n\ndef spawn(f):\n    def fun(pipe,x):\n        pipe.send(f(x))\n        pipe.close()\n    return fun\n\ndef parmap(f,X):\n    pipe=[Pipe() for x in X]\n    proc=[Process(target=spawn(f),args=(c,x)) for x,(p,c) in izip(X,pipe)]\n    [p.start() for p in proc]\n    [p.join() for p in proc]\n    return [p.recv() for (p,c) in pipe]\n\nif __name__ == '__main__':\n    print parmap(lambda x:x**x,range(1,5))\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In the book that I am reading on Python, it keeps using the code <code>eval(input('blah'))</code> </p>\n\n<p>I read the documentation, and I understand it, but I still do not see how it changes the <code>input()</code> function. </p>\n\n<p>What does it do? Can someone explain?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The eval function lets a python program run python code within itself.</p>\n\n<p>eval example (interactive shell):</p>\n\n<pre><code>&gt;&gt;&gt; x = 1\n&gt;&gt;&gt; eval('x + 1')\n2\n&gt;&gt;&gt; eval('x')\n1\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I've read the documentation on egg entry points in Pylons and on the Peak pages, and I still don't really understand. Could someone explain them to me?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>An \"entry point\" is typically a function (or other callable function-like object) that a developer or user of your Python package might want to use, though a non-callable object can be supplied as an entry point as well (as correctly pointed out in the comments!).</p>\n\n<p>The most popular kind of entry point is the \"console_script\" entry point, which points to a function that you want made available as a command-line tool to whoever installs your package.  This goes into your setup.py like:</p>\n\n<pre><code>entry_points={\n    'console_scripts': [\n        'cursive = cursive.tools.cmd:cursive_command',\n    ],\n},\n</code></pre>\n\n<p>I have a package I've just deployed called \"cursive.tools\", and I wanted it to make available a \"cursive\" command that someone could run from the command line, like:</p>\n\n<pre><code>$ cursive --help\nusage: cursive ...\n</code></pre>\n\n<p>The way to do this is define a function, like maybe a \"cursive_command\" function in cursive/tools/cmd.py that looks like:</p>\n\n<pre><code>def cursive_command():\n    args = sys.argv[1:]\n    if len(args) &lt; 1:\n        print \"usage: ...\"\n</code></pre>\n\n<p>and so forth; it should assume that it's been called from the command line, parse the arguments that the user has provided, and ... well, do whatever the command is designed to do.</p>\n\n<p>Install the <a href=\"http://pypi.python.org/pypi/docutils/\" rel=\"noreferrer\">docutils</a> package for a great example of entry-point use: it will install something like a half-dozen useful commands for converting Python documentation to other formats.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a list of sets:</p>\n\n<pre><code>setlist = [s1,s2,s3...]\n</code></pre>\n\n<p>I want s1 \u2229 s2 \u2229 s3 ...</p>\n\n<p>I can write a function to do it by performing a series of pairwise <code>s1.intersection(s2)</code>, etc.</p>\n\n<p>Is there a recommended, better, or built-in way?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>From Python version 2.6 on you can use multiple arguments to <a href=\"http://docs.python.org/library/stdtypes.html#set.intersection\" rel=\"noreferrer\"><code>set.intersection()</code></a>, like</p>\n\n<pre><code>u = set.intersection(s1, s2, s3)\n</code></pre>\n\n<p>If the sets are in a list, this translates to:</p>\n\n<pre><code>u = set.intersection(*setlist)\n</code></pre>\n\n<p>where <code>*a_list</code> is <a href=\"https://stackoverflow.com/questions/36901/what-does-double-star-and-star-do-for-python-parameters\">list expansion</a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm trying to disable warning C0321 (\"more than one statement on a single line\" -- I often put <code>if</code> statements with short single-line results on the same line), in Pylint 0.21.1 (if it matters: astng 0.20.1, common 0.50.3, Python 2.6.6 (r266:84292, Sep 15 2010, 16:22:56)).</p>\n\n<p>I've tried adding <code>disable=C0321</code> in the Pylint configuration file, but Pylint insists on reporting it anyway. Variations on that line (like <code>disable=0321</code> or <code>disable=C321</code>) are flagged as errors, so Pylint <em>does</em> recognize the option properly, it's just ignoring it.</p>\n\n<p>Is this a Pylint bug, or am I doing something wrong? Is there any way around this? I'd really like to get rid of some of this noise.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>pylint --generate-rcfile</code> shows it like this:</p>\n\n<pre><code>[MESSAGES CONTROL]\n\n# Enable the message, report, category or checker with the given id(s). You can\n# either give multiple identifier separated by comma (,) or put this option\n# multiple time.\n#enable=\n\n# Disable the message, report, category or checker with the given id(s). You\n# can either give multiple identifier separated by comma (,) or put this option\n# multiple time (only on the command line, not in the configuration file where\n# it should appear only once).\n#disable=\n</code></pre>\n\n<p>So it looks like your <code>~/.pylintrc</code> should have the <code>disable=</code> line/s in it inside a section <code>[MESSAGES CONTROL]</code>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm running Python 2.7 on Windows 7 64-bit, and when I run the installer for setuptools it tells me that Python 2.7 is not installed.  The specific error message is:</p>\n\n<pre><code>`Python Version 2.7 required which was not found in the registry`\n</code></pre>\n\n<p>My installed version of Python is:</p>\n\n<pre><code>`Python 2.7 (r27:82525, Jul  4 2010, 07:43:08) [MSC v.1500 64 bit (AMD64)] on win32`\n</code></pre>\n\n<p>I'm looking at the setuptools site and it doesn't mention any installers for 64-bit Windows.  Have I missed something or do I have to install this from source?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Apparently (having faced related 64- and 32-bit issues on OS X) there is a <a href=\"http://bugs.python.org/issue6792\" rel=\"noreferrer\">bug in the Windows installer</a>. I stumbled across <a href=\"http://selfsolved.com/problems/setuptools-06c11-fails-to-instal/s/63\" rel=\"noreferrer\">this workaround</a>, which might help - basically, you create your own registry value <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Python\\PythonCore\\2.6\\InstallPath</code> and copy over the InstallPath value from <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\2.6\\InstallPath</code>. See the answer below for more details.</p>\n\n<p>If you do this, beware that setuptools <strong>may only install 32-bit libraries</strong>.</p>\n\n<p>NOTE: the responses below offer more detail, so please read them too.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am trying to loop from 100 to 0. How do I do this in Python?</p>\n\n<p><code>for i in range (100,0)</code> doesn't work.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Try <code>range(100,-1,-1)</code>, the 3rd argument being the increment to use (documented <a href=\"https://docs.python.org/library/functions.html#range\" rel=\"noreferrer\">here</a>).</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Reading the Python cookbook at the minute and currently looking at generators. I'm finding it hard to get my head round.</p>\n\n<p>As I come from a Java background, is there a Java equivalent? The book was speaking about 'Producer / Consumer', however when I hear that I think of threading.</p>\n\n<p>Can anyone explain what a generator is and why you would use it? Without quoting any books, obviously (unless you can find a decent, simplistic answer direct from a book). Perhaps with examples, if you're feeling generous!</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>Note: this post assumes Python 3.x syntax.</strong><sup>\u2020</sup></p>\n\n<p>A <a href=\"http://www.python.org/dev/peps/pep-0255/\" rel=\"noreferrer\">generator</a> is simply a function which returns an object on which you can call <code>next</code>, such that for every call it returns some value, until it raises a <code>StopIteration</code> exception, signaling that all values have been generated. Such an object is called an <em>iterator</em>.</p>\n\n<p>Normal functions return a single value using <code>return</code>, just like in Java. In Python, however, there is an alternative, called <code>yield</code>. Using <code>yield</code> anywhere in a function makes it a generator. Observe this code:</p>\n\n<pre><code>&gt;&gt;&gt; def myGen(n):\n...     yield n\n...     yield n + 1\n... \n&gt;&gt;&gt; g = myGen(6)\n&gt;&gt;&gt; next(g)\n6\n&gt;&gt;&gt; next(g)\n7\n&gt;&gt;&gt; next(g)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nStopIteration\n</code></pre>\n\n<p>As you can see, <code>myGen(n)</code> is a function which yields <code>n</code> and <code>n + 1</code>. Every call to <a href=\"http://docs.python.org/3/library/functions.html#next\" rel=\"noreferrer\"><code>next</code></a> yields a single value, until all values have been yielded. <code>for</code> loops call <code>next</code> in the background, thus:</p>\n\n<pre><code>&gt;&gt;&gt; for n in myGen(6):\n...     print(n)\n... \n6\n7\n</code></pre>\n\n<p>Likewise there are <a href=\"http://www.python.org/dev/peps/pep-0289/\" rel=\"noreferrer\"><em>generator expressions</em></a>, which provide a means to succinctly describe certain common types of generators:</p>\n\n<pre><code>&gt;&gt;&gt; g = (n for n in range(3, 5))\n&gt;&gt;&gt; next(g)\n3\n&gt;&gt;&gt; next(g)\n4\n&gt;&gt;&gt; next(g)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nStopIteration\n</code></pre>\n\n<p>Note that generator expressions are much like <a href=\"http://docs.python.org/3/tutorial/datastructures.html#list-comprehensions\" rel=\"noreferrer\"><em>list comprehensions</em></a>:</p>\n\n<pre><code>&gt;&gt;&gt; lc = [n for n in range(3, 5)]\n&gt;&gt;&gt; lc\n[3, 4]\n</code></pre>\n\n<p>Observe that a generator object is generated <em>once</em>, but its code is <em>not</em> run all at once. Only calls to <code>next</code> actually execute (part of) the code. Execution of the code in a generator stops once a <code>yield</code> statement has been reached, upon which it returns a value. The next call to <code>next</code> then causes execution to continue in the state in which the generator was left after the last <code>yield</code>. This is a fundamental difference with regular functions: those always start execution at the \"top\" and discard their state upon returning a value.</p>\n\n<p>There are more things to be said about this subject. It is e.g. possible to <code>send</code> data back into a generator (<a href=\"http://docs.python.org/3/reference/expressions.html#yield-expressions\" rel=\"noreferrer\">reference</a>). But that is something I suggest you do not look into until you understand the basic concept of a generator.</p>\n\n<p>Now you may ask: why use generators? There are a couple of good reasons:</p>\n\n<ul>\n<li>Certain concepts can be described much more succinctly using generators.</li>\n<li>Instead of creating a function which returns a list of values, one can write a generator which generates the values on the fly. This means that no list needs to be constructed, meaning that the resulting code is more memory efficient. In this way one can even describe data streams which would simply be too large to fit in memory.</li>\n<li><p>Generators allow for a natural way to describe <em>infinite</em> streams. Consider for example the <a href=\"http://en.wikipedia.org/wiki/Fibonacci_number\" rel=\"noreferrer\">Fibonacci numbers</a>:</p>\n\n<pre><code>&gt;&gt;&gt; def fib():\n...     a, b = 0, 1\n...     while True:\n...         yield a\n...         a, b = b, a + b\n... \n&gt;&gt;&gt; import itertools\n&gt;&gt;&gt; list(itertools.islice(fib(), 10))\n[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n</code></pre>\n\n<p>This code uses <a href=\"http://docs.python.org/3/library/itertools.html#itertools.islice\" rel=\"noreferrer\"><code>itertools.islice</code></a> to take a finite number of elements from an infinite stream. You are advised to have a good look at the functions in the <a href=\"http://docs.python.org/3/library/itertools.html\" rel=\"noreferrer\"><code>itertools</code></a> module, as they are essential tools for writing advanced generators with great ease.</p></li>\n</ul>\n\n<hr>\n\n<p>\u00a0\u00a0<sup>\u2020</sup> <strong>About Python &lt;=2.6:</strong> in the above examples <code>next</code> is a function which calls the method <code>__next__</code> on the given object. In Python &lt;=2.6 one uses a slightly different technique, namely <code>o.next()</code> instead of <code>next(o)</code>. Python 2.7 has <code>next()</code> call <code>.next</code> so you need not use the following in 2.7:</p>\n\n<pre><code>&gt;&gt;&gt; g = (n for n in range(3, 5))\n&gt;&gt;&gt; g.next()\n3\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have this code in template, which I would like to printout number of votes that each choice got. votes is just dictionary while choices are model object.</p>\n\n<pre><code>{% for choice in choices %}\n    {{choice.choice}} - {{votes[choice.id]}} &lt;br /&gt;\n{% endfor %}\n</code></pre>\n\n<p>it raises an exception with this message \"Could not parse the remainder\"</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>To echo / extend upon Jeff's comment, what I think you should aim for is simply a property in your Choice class that calculates the number of votes associated with that object: </p>\n\n<pre><code>    class Choice(models.Model):\n        text = models.CharField(max_length=200) \n\n        def calculateVotes(self):\n            return Vote.objects.filter(choice = self).count()\n\n        votes = property(calculateVotes)\n</code></pre>\n\n<p>And then in your template, you can do:</p>\n\n<pre><code>    {% for choice in choices %}\n            {{choice.choice}} - {{choice.votes}} &lt;br /&gt;\n    {% endfor %}\n</code></pre>\n\n<p>The template tag, is IMHO a bit overkill for this solution, but it's not a terrible solution either. The goal of templates in Django is to insulate you from code in your templates and vice-versa. </p>\n\n<p>I'd try the above method and see what SQL the ORM generates as I'm not sure off the top of my head if it will pre-cache the properties and just create a subselect for the property or if it will iteratively / on-demand run the query to calculate vote count. But if it generates atrocious queries, you could always populate the property in your view with data you've collected yourself.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I've had some really awesome help on my previous questions <a href=\"https://stackoverflow.com/questions/4087919\">for detecting paws</a> and <a href=\"https://stackoverflow.com/questions/3684484\">toes within a paw</a>, but all these solutions only work for one measurement at a time.</p>\n\n<p><a href=\"http://dl.dropbox.com/u/5207386/RAR-collectie.rar\" rel=\"nofollow noreferrer\">Now I have data</a> that consists off:</p>\n\n<ul>\n<li>about 30 dogs; </li>\n<li>each has 24 measurements (divided into several subgroups); </li>\n<li>each measurement has at least 4 contacts (one for each paw) and \n\n<ul>\n<li>each contact is divided into 5 parts and </li>\n<li>has several parameters, like contact time, location, total force etc.</li>\n</ul></li>\n</ul>\n\n<p><img src=\"https://i.stack.imgur.com/8x2uG.png\" alt=\"alt text\"></p>\n\n<p>Obviously sticking everything into one big object isn't going to cut it, so I figured I needed to use classes instead of the current slew of functions. But even though I've read Learning Python's chapter about classes, I fail to apply it to my own code (<a href=\"http://cloud.github.com/downloads/ivoflipse/DogsRus/pressureanalysis.py\" rel=\"nofollow noreferrer\">GitHub link</a>)</p>\n\n<p>I also feel like it's rather strange to process all the data <em>every</em> time I want to get out some information. Once I know the locations of each paw, there's no reason for me to calculate this again. Furthermore, I want to compare all the paws of the same dog to determine which contact belongs to which paw (front/hind, left/right). This would become a mess if I continue using only functions.</p>\n\n<p>So now I'm looking for advice on how to create classes that will let me process my data (<a href=\"http://dl.dropbox.com/u/5207386/Krupp_Krulle.rar\" rel=\"nofollow noreferrer\">link to the zipped data of one dog</a>) in a sensible fashion. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>How to design a class.</p>\n\n<ol>\n<li><p>Write down the words.  You started to do this.  Some people don't and wonder why they have problems.</p></li>\n<li><p>Expand your set of words into simple statements about what these objects will be doing.  That is to say, write down the various calculations you'll be doing on these things.  Your short list of 30 dogs, 24 measurements, 4 contacts, and several \"parameters\" per contact is interesting, but only part of the story.  Your \"locations of each paw\" and \"compare all the paws of the same dog to determine which contact belongs to which paw\" are the next step in object design.</p></li>\n<li><p>Underline the nouns.  Seriously.  Some folks debate the value of this, but I find that for first-time OO developers it helps.  Underline the nouns.</p></li>\n<li><p>Review the nouns.  Generic nouns like \"parameter\" and \"measurement\" need to be replaced with specific, concrete nouns that apply to your problem in your problem domain.  Specifics help clarify the problem.  Generics simply elide details.</p></li>\n<li><p>For each noun (\"contact\", \"paw\", \"dog\", etc.) write down the attributes of that noun and the actions in which that object engages.  Don't short-cut this.  Every attribute.  \"Data Set contains 30 Dogs\" for example is important.</p></li>\n<li><p>For each attribute, identify if this is a relationship to a defined noun, or some other kind of \"primitive\" or \"atomic\" data like a string or a float or something irreducible.</p></li>\n<li><p>For each action or operation, you have to identify which noun has the responsibility, and which nouns merely participate.  It's a  question of \"mutability\".  Some objects get updated, others don't.  Mutable objects must own total responsibility for their mutations. </p></li>\n<li><p>At this point, you can start to transform nouns into class definitions.  Some collective nouns are lists, dictionaries, tuples, sets or namedtuples, and you don't need to do very much work.  Other classes are more complex, either because of complex derived data or because of some update/mutation which is performed.</p></li>\n</ol>\n\n<p>Don't forget to test each class in isolation using unittest.</p>\n\n<p>Also, there's no law that says classes must be mutable.  In your case, for example, you have almost no mutable data.  What you have is derived data, created by transformation functions from the source dataset.   </p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I need to execute a Python script from the Django shell. I tried</p>\n\n<pre><code>./manage.py shell &lt;&lt; my_script.py\n</code></pre>\n\n<p>But it didn't work. It was just kinda waiting for me to write something.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The <code>&lt;&lt;</code> part is wrong, use <code>&lt;</code> instead:</p>\n\n<pre><code>$ ./manage.py shell &lt; myscript.py\n</code></pre>\n\n<p>You could also do:</p>\n\n<pre><code>$ ./manage.py shell\n...\n&gt;&gt;&gt; execfile('myscript.py')\n</code></pre>\n\n<p>For python3 you would need to use</p>\n\n<pre><code>&gt;&gt;&gt; exec(open('myscript.py').read())\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I want to display:</p>\n\n<p><code>49</code> as <code>49.00</code></p>\n\n<p>and:</p>\n\n<p><code>54.9</code> as <code>54.90</code></p>\n\n<p>Regardless of the length of the decimal or whether there are are any decimal places, I would like to display a <code>Decimal</code> with 2 decimal places, and I'd like to do it in an efficient way. The purpose is to display money values.</p>\n\n<p>eg, <code>4898489.00</code></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I suppose you're probably using the <a href=\"https://docs.python.org/2/library/decimal.html#decimal-objects\" rel=\"noreferrer\" title=\"Decimal objects\"><code>Decimal()</code></a> objects from the <a href=\"https://docs.python.org/2/library/decimal.html\" rel=\"noreferrer\" title=\"decimal \u2014 Decimal fixed point and floating point arithmetic\"><code>decimal</code></a> module? (If you need exactly two digits of precision beyond the decimal point with arbitrarily large numbers, you definitely should be, and that's what your question's title suggests...)</p>\n\n<p>If so, the <a href=\"https://docs.python.org/2/library/decimal.html#decimal-faq\" rel=\"noreferrer\" title=\"Decimal FAQ\"><em>Decimal FAQ</em></a> section of the docs has a question/answer pair which may be useful for you:</p>\n\n<blockquote>\n  <p>Q. In a fixed-point application with two decimal places, some inputs have many places and need to be rounded. Others are not supposed to have excess digits and need to be validated. What methods should be used?</p>\n  \n  <p>A. The quantize() method rounds to a fixed number of decimal places. If the Inexact trap is set, it is also useful for validation:</p>\n</blockquote>\n\n<pre><code>&gt;&gt;&gt; TWOPLACES = Decimal(10) ** -2       # same as Decimal('0.01')\n&gt;&gt;&gt; # Round to two places\n&gt;&gt;&gt; Decimal('3.214').quantize(TWOPLACES)\nDecimal('3.21')\n&gt;&gt;&gt; # Validate that a number does not exceed two places\n&gt;&gt;&gt; Decimal('3.21').quantize(TWOPLACES, context=Context(traps=[Inexact]))\nDecimal('3.21')\n&gt;&gt;&gt; Decimal('3.214').quantize(TWOPLACES, context=Context(traps=[Inexact]))\nTraceback (most recent call last):\n   ...\nInexact: None\n</code></pre>\n\n<p>The next question reads</p>\n\n<blockquote>\n  <p>Q. Once I have valid two place inputs, how do I maintain that invariant throughout an application?</p>\n</blockquote>\n\n<p>If you need the answer to that (along with lots of other useful information), see <a href=\"https://docs.python.org/2/library/decimal.html#decimal-objects\" rel=\"noreferrer\" title=\"Decimal objects\"><em>the aforementioned section of the docs</em></a>. Also, if you keep your <code>Decimal</code>s with two digits of precision beyond the decimal point (meaning as much precision as is necessary to keep all digits to the left of the decimal point and two to the right of it and no more...), then converting them to strings with <code>str</code> will work fine:</p>\n\n<pre><code>str(Decimal('10'))\n# -&gt; '10'\nstr(Decimal('10.00'))\n# -&gt; '10.00'\nstr(Decimal('10.000'))\n# -&gt; '10.000'\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How can I make as \"perfect\" a subclass of <em>dict</em> as possible? The end goal is to have a simple <em>dict</em> in which the keys are lowercase.</p>\n\n<p>It would seem that should be some tiny set of primitives I can override to make this work, but all my research and attempts have made it seem like this isn't the case:</p>\n\n<ul>\n<li><p>If I <a href=\"https://stackoverflow.com/a/2390889\">override <code>__getitem__</code>/<code>__setitem__</code></a>, then <code>get</code>/<code>set</code> don't work. \nHow do I make them work?  Surely I don't need to implement them individually?</p></li>\n<li><p>Am I preventing pickling from working, and do I need to implement <code>__setstate__</code> etc?</p></li>\n<li><p>Do I <a href=\"https://stackoverflow.com/a/2390997\">need <code>repr</code>, <code>update</code> and <code>__init__</code></a>?</p></li>\n<li><p>Should I just <a href=\"https://stackoverflow.com/a/1622872\">use mutablemapping</a> (it seems one shouldn't use <code>UserDict</code>\nor <code>DictMixin</code>)?  If so, how? The docs aren't exactly enlightening.</p></li>\n</ul>\n\n<p>Here is my first go at it, <code>get()</code> doesn't work at least, and no doubt there are many minor subtle problems:</p>\n\n<pre><code>class arbitrary_dict(dict):\n    \"\"\"A dictionary that applies an arbitrary key-altering function\n       before accessing the keys.\"\"\"\n\n    def __keytransform__(self, key):\n        return key\n\n    # Overridden methods. List from \n    # https://stackoverflow.com/questions/2390827/how-to-properly-subclass-dict\n\n    def __init__(self, *args, **kwargs):\n        self.update(*args, **kwargs)\n\n    # Note: I'm using dict directly, since super(dict, self) doesn't work.\n    # I'm not sure why, perhaps dict is not a new-style class.\n\n    def __getitem__(self, key):\n        return dict.__getitem__(self, self.__keytransform__(key))\n\n    def __setitem__(self, key, value):\n        return dict.__setitem__(self, self.__keytransform__(key), value)\n\n    def __delitem__(self, key):\n        return dict.__delitem__(self, self.__keytransform__(key))\n\n    def __contains__(self, key):\n        return dict.__contains__(self, self.__keytransform__(key))\n\n\nclass lcdict(arbitrary_dict):\n    def __keytransform__(self, key):\n        return str(key).lower()\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can write an object that behaves like a dict quite easily with <a href=\"http://docs.python.org/library/abc.html\" rel=\"noreferrer\">ABC</a>s\n(Abstract Base Classes) from the <a href=\"http://docs.python.org/2/library/collections.html\" rel=\"noreferrer\">collections</a> module.  It even tells you\nif you missed a method, so below is the minimal version that shuts the ABC up.</p>\n\n<pre><code>import collections\n\n\nclass TransformedDict(collections.MutableMapping):\n    \"\"\"A dictionary that applies an arbitrary key-altering\n       function before accessing the keys\"\"\"\n\n    def __init__(self, *args, **kwargs):\n        self.store = dict()\n        self.update(dict(*args, **kwargs))  # use the free update to set keys\n\n    def __getitem__(self, key):\n        return self.store[self.__keytransform__(key)]\n\n    def __setitem__(self, key, value):\n        self.store[self.__keytransform__(key)] = value\n\n    def __delitem__(self, key):\n        del self.store[self.__keytransform__(key)]\n\n    def __iter__(self):\n        return iter(self.store)\n\n    def __len__(self):\n        return len(self.store)\n\n    def __keytransform__(self, key):\n        return key\n</code></pre>\n\n<p>You get a few free methods from the ABC:</p>\n\n<pre><code>class MyTransformedDict(TransformedDict):\n\n    def __keytransform__(self, key):\n        return key.lower()\n\n\ns = MyTransformedDict([('Test', 'test')])\n\nassert s.get('TEST') is s['test']   # free get\nassert 'TeSt' in s                  # free __contains__\n                                    # free setdefault, __eq__, and so on\n\nimport pickle\nassert pickle.loads(pickle.dumps(s)) == s\n                                    # works too since we just use a normal dict\n</code></pre>\n\n<p>I wouldn't subclass <code>dict</code> (or other builtins) directly. It often makes no sense, because what you actually want to do is <em>implement the interface of a dict</em>. And that is exactly what ABCs are for.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Code like this often happens:</p>\n\n<pre><code>l = []\nwhile foo:\n    #baz\n    l.append(bar)\n    #qux\n</code></pre>\n\n<p>This is really slow if you're about to append thousands of elements to your list, as the list will have to be constantly resized to fit the new elements.</p>\n\n<p>In Java, you can create an ArrayList with an initial capacity. If you have some idea how big your list will be, this will be a lot more efficient.</p>\n\n<p>I understand that code like this can often be re-factored into a list comprehension. If the for/while loop is very complicated, though, this is unfeasible. Is there any equivalent for us Python programmers?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>def doAppend( size=10000 ):\n    result = []\n    for i in range(size):\n        message= \"some unique object %d\" % ( i, )\n        result.append(message)\n    return result\n\ndef doAllocate( size=10000 ):\n    result=size*[None]\n    for i in range(size):\n        message= \"some unique object %d\" % ( i, )\n        result[i]= message\n    return result\n</code></pre>\n\n<p><strong>Results</strong>. (evaluate each function 144 times and average the duration)</p>\n\n<pre><code>simple append 0.0102\npre-allocate  0.0098\n</code></pre>\n\n<p><strong>Conclusion</strong>.  It barely matters.  </p>\n\n<p>Premature optimization is the root of all evil.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How can I make one python file to run another?  </p>\n\n<p>For example I have two <em>.py files</em>.  I want one file to be run, and then have it run the other <em>.py file</em>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There are more than a few ways. I'll list them in order of inverted preference (<em>i.e.</em>, best first, worst last):</p>\n\n<ol>\n<li><strong>Treat it like a module:</strong> <code>import file</code>. This is good because it's secure, fast, and maintainable. Code gets reused as it's supposed to be done. Most Python libraries run using multiple methods stretched over lots of files. Highly recommended. Note that if your file is called <code>file.py</code>, your <code>import</code> should <em>not</em> include the <code>.py</code> extension at the end.</li>\n<li><strong>The infamous (and unsafe) <a href=\"http://docs.python.org/library/functions.html#execfile\" rel=\"noreferrer\">exec</a> command:</strong> <code>execfile('file.py')</code>. Insecure, hacky, usually the wrong answer. Avoid where possible.</li>\n<li><strong>Spawn a shell process:</strong> <code>os.system('python file.py')</code>. Use when desperate.</li>\n</ol>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Not many are aware of this feature, but Python's functions (and methods) can have <a href=\"http://www.python.org/dev/peps/pep-0232/\" rel=\"noreferrer\">attributes</a>. Behold:</p>\n\n<pre><code>&gt;&gt;&gt; def foo(x):\n...     pass\n...     \n&gt;&gt;&gt; foo.score = 10\n&gt;&gt;&gt; dir(foo)\n['__call__', '__class__', '__delattr__', '__dict__', '__doc__', '__get__', '__getattribute__', '__hash__', '__init__', '__module__', '__name__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__str__', 'func_closure', 'func_code', 'func_defaults', 'func_dict', 'func_doc', 'func_globals', 'func_name', 'score']\n&gt;&gt;&gt; foo.score\n10\n&gt;&gt;&gt; foo.score += 1\n&gt;&gt;&gt; foo.score\n11\n</code></pre>\n\n<p>What are the possible uses and abuses of this feature in Python ? One good use I'm aware of is <a href=\"http://www.dabeaz.com/ply/\" rel=\"noreferrer\">PLY</a>'s usage of the docstring to associate a syntax rule with a method. But what about custom attributes ? Are there good reasons to use them ?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I typically use function attributes as storage for annotations. Suppose I want to write, in the style of C# (indicating that a certain method should be part of the web service interface)</p>\n\n<pre><code>class Foo(WebService):\n    @webmethod\n    def bar(self, arg1, arg2):\n         ...\n</code></pre>\n\n<p>then I can define</p>\n\n<pre><code>def webmethod(func):\n    func.is_webmethod = True\n    return func\n</code></pre>\n\n<p>Then, when a webservice call arrives, I look up the method, check whether the underlying function has the is_webmethod attribute (the actual value is irrelevant), and refuse the service if the method is absent or not meant to be called over the web.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I would like to know how can I set a variable with another variable in jinja. I will explain, I have got a submenu and I would like show which link is active. I tried this:</p>\n\n<pre><code>{% set active_link = {{recordtype}} -%}\n</code></pre>\n\n<p>where recordtype is a variable given for my template.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>{{ }}</code> tells the template to <em>print</em> the value, this won't work in expressions like you're trying to do.  Instead, use the <code>{% set %}</code> template tag and then assign the value the same way you would in normal python code.</p>\n\n<pre><code>{% set testing = 'it worked' %}\n{% set another = testing %}\n{{ another }}\n</code></pre>\n\n<p>Result:</p>\n\n<pre><code>it worked\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm pretty new to Python and am completely confused by <code>.join()</code> which I have read is the preferred method for concatenating strings.</p>\n\n<p>I try:</p>\n\n<pre><code>strid = repr(595)\nprint array.array('c', random.sample(string.ascii_letters, 20 - len(strid)))\n    .tostring().join(strid)\n</code></pre>\n\n<p>and get something like:</p>\n\n<pre><code>5wlfgALGbXOahekxSs9wlfgALGbXOahekxSs5\n</code></pre>\n\n<p>Why does it work like this?  Shouldn't the <code>595</code> just be automatically appended?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Look carefully at your output:</p>\n\n<pre><code>5wlfgALGbXOahekxSs9wlfgALGbXOahekxSs5\n^                 ^                 ^\n</code></pre>\n\n<p>I've highlighted the \"5\", \"9\", \"5\" of your original string. The Python <a href=\"https://docs.python.org/3/library/stdtypes.html#str.join\" rel=\"noreferrer\"><code>join()</code></a> method is a string method, and takes a <em>list</em> of things to join with the string. A simpler example might help explain:</p>\n\n<pre><code>&gt;&gt;&gt; \",\".join([\"a\", \"b\", \"c\"])\n'a,b,c'\n</code></pre>\n\n<p>The \",\" is inserted between each element of the given list. In your case, your \"list\" is the string representation \"595\", which is treated as the list [\"5\", \"9\", \"5\"].</p>\n\n<p>It appears that you're looking for <code>+</code> instead:</p>\n\n<pre><code>print array.array('c', random.sample(string.ascii_letters, 20 - len(strid)))\n.tostring() + strid\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What event system for Python do you use? I'm already aware of <a href=\"http://pydispatcher.sourceforge.net/\" rel=\"noreferrer\">pydispatcher</a>, but I was wondering what else can be found, or is commonly used?</p>\n\n<p>I'm not interested in event managers that are part of large frameworks, I'd rather use a small bare-bones solution that I can easily extend.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Wrapping up the various event systems that are mentioned in the answers here:</p>\n\n<p>The most basic style of event system is the 'bag of handler methods', which is a simple implementation of the <a href=\"http://en.wikipedia.org/wiki/Observer_pattern\" rel=\"nofollow noreferrer\">Observer pattern</a>.  Basically, the handler methods (callables) are stored in an array and are each called when the event 'fires'.</p>\n\n<ul>\n<li><a href=\"https://pypi.python.org/pypi/zope.event\" rel=\"nofollow noreferrer\">zope.event</a> shows the bare bones of how this works (see <a href=\"https://stackoverflow.com/a/1092617/1075152\">Lennart's answer</a>). Note: this example does not even support handler arguments.</li>\n<li><a href=\"https://stackoverflow.com/a/2022629/1075152\">LongPoke's 'callable list'</a> implementation shows that such an event system can be implemented very minimalistically by subclassing <code>list</code>.</li>\n<li><a href=\"https://stackoverflow.com/a/1094423/1075152\">spassig's EventHook</a> (Michael Foord's Event Pattern) is a straightforward implementation.</li>\n<li><a href=\"https://stackoverflow.com/a/1096614/1075152\">Josip's Valued Lessons Event class</a> is basically the same, but uses a <code>set</code> instead of a <code>list</code> to store the bag, and implements <code>__call__</code> which are both reasonable additions.</li>\n<li><a href=\"http://home.gna.org/py-notify/\" rel=\"nofollow noreferrer\">PyNotify</a> is similar in concept and also provides additional concepts of variables and conditions ('variable changed event').</li>\n<li><a href=\"https://pypi.python.org/pypi/axel\" rel=\"nofollow noreferrer\">axel</a> is basically a bag-of-handlers with more features related to threading, error handling, ...</li>\n</ul>\n\n<p>The disadvantage of these event systems is that you can only register the handlers on the actual Event object (or handlers list).\nSo at registration time the event already needs to exist.</p>\n\n<p>That's why the second style of event systems exists: the <a href=\"http://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern\" rel=\"nofollow noreferrer\">publish-subscribe pattern</a>.\nHere, the handlers don't register on an event object (or handler list), but on a central dispatcher.  Also the notifiers only talk to the dispatcher.  What to listen for, or what to publish is determined by 'signal', which is nothing more than a name (string).</p>\n\n<ul>\n<li><a href=\"https://pythonhosted.org/blinker/\" rel=\"nofollow noreferrer\">blinker</a> has some nifty features such as automatic disconnection and filtering based on sender.</li>\n<li><a href=\"http://pypubsub.readthedocs.io/en/stable/\" rel=\"nofollow noreferrer\">PyPubSub</a> at first sight seems to be pretty straightforward.</li>\n<li><a href=\"http://pydispatcher.sourceforge.net/\" rel=\"nofollow noreferrer\">PyDispatcher</a> seems to emphasize flexibility with regards to many-to-many publication etc.</li>\n<li><a href=\"https://github.com/11craft/louie\" rel=\"nofollow noreferrer\">louie</a> is a reworked PyDispatcher \"providing plugin infrastructure including Twisted and PyQt specific support\".  It seems to have lost maintenance after January 2016.</li>\n<li><a href=\"https://code.djangoproject.com/browser/django/trunk/django/dispatch\" rel=\"nofollow noreferrer\">django.dispatch</a> is a rewritten PyDispatcher \"with a more limited interface, but higher performance\".</li>\n<li>Qt's Signals and Slots are available from <a href=\"http://pyqt.sourceforge.net/Docs/PyQt4/new_style_signals_slots.html\" rel=\"nofollow noreferrer\">PyQt</a> or <a href=\"https://wiki.qt.io/Signals_and_Slots_in_PySide\" rel=\"nofollow noreferrer\">PySide</a>. They work as callback when used in the same thread, or as events (using an event loop) between two different threads.  Signals and Slots have the limitation that they only work in objects of classes that derive from <code>QObject</code>.</li>\n</ul>\n\n<p>Note: <a href=\"https://docs.python.org/3.5/library/threading.html#event-objects\" rel=\"nofollow noreferrer\">threading.Event</a> is not an 'event system' in the above sense.  It's a thread synchronization system where one thread waits until another thread 'signals' the Event object.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/10712002/create-an-empty-list-in-python-with-certain-size\" dir=\"ltr\">Create an empty list in python with certain size</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    6 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>How can I create a <code>list</code> which contains only zeros? I want to be able to create a zeros <code>list</code> for each <code>int</code> in <code>range(10)</code></p>\n\n<p>For example, if the <code>int</code> in the range was <code>4</code> I will get:</p>\n\n<pre><code>[0,0,0,0]\n</code></pre>\n\n<p>and for <code>7</code>:</p>\n\n<pre><code>[0,0,0,0,0,0,0]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>#add code here to figure out the number of 0's you need, naming the variable n.\nlistofzeros = [0] * n\n</code></pre>\n\n<p>if you prefer to put it in the function, just drop in that code and add <code>return listofzeros</code></p>\n\n<p>Which would look like this:</p>\n\n<pre><code>def zerolistmaker(n):\n    listofzeros = [0] * n\n    return listofzeros\n</code></pre>\n\n<p>sample output:</p>\n\n<pre><code>&gt;&gt;&gt; zerolistmaker(4)\n[0, 0, 0, 0]\n&gt;&gt;&gt; zerolistmaker(5)\n[0, 0, 0, 0, 0]\n&gt;&gt;&gt; zerolistmaker(15)\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n&gt;&gt;&gt; \n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Whenever i try to use pip I get an error. For exampple:</p>\n\n<pre><code>$ sudo pip install gevent-websocket\n\nTraceback (most recent call last):  \nFile \"/usr/local/bin/pip\", line 5, in &lt;module&gt;\nfrom pkg_resources import load_entry_point\nFile \"/usr/lib/python2.7/dist-packages/pkg_resources.py\", line 2675, in &lt;module&gt;\nparse_requirements(__requires__), Environment()\nFile \"/usr/lib/python2.7/dist-packages/pkg_resources.py\", line 552, in resolve\nraise DistributionNotFound(req)\npkg_resources.DistributionNotFound: pip==0.8.1\n</code></pre>\n\n<p>I feel tempted to change the value of into pip==0.8.2.. but I dont feel dealing with the consequences of 'hacking' up my installation...\nI'm running python 2.7 and pip is at version 0.8.2.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I find this problem in my MacBook, the reason is because as @Stephan said, I use <code>easy_install</code>  to install pip, and the mixture of both py package manage tools led to the <code>pkg_resources.DistributionNotFound</code> problem.\nThe resolve is:</p>\n\n<pre><code>easy_install --upgrade pip\n</code></pre>\n\n<p>Remember: just use <strong>one</strong> of the above tools to manage your Py packages.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a list of variable length and am trying to find a way to test if the list item currently being evaluated is the longest string contained in the list. And I am using Python 2.6.1</p>\n\n<p>For example:</p>\n\n<pre><code>mylist = ['123','123456','1234']\n\nfor each in mylist:\n    if condition1:\n        do_something()\n    elif ___________________: #else if each is the longest string contained in mylist:\n        do_something_else()\n</code></pre>\n\n<p>I'm brand new to python and I'm sure I'm just having a brain fart. Surely there's a simple list comprehension that's short and elegant that I'm overlooking?</p>\n\n<p>Thanks!</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>From the <a href=\"http://docs.python.org/whatsnew/2.5.html#other-language-changes\" rel=\"noreferrer\">Python documentation</a> itself, you can use <a href=\"http://docs.python.org/library/functions.html#max\" rel=\"noreferrer\"><code>max</code></a>:</p>\n\n<pre><code>&gt;&gt;&gt; mylist = ['123','123456','1234']\n&gt;&gt;&gt; print max(mylist, key=len)\n123456\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is there a way for a Python program to determine how much memory it's currently using? I've seen discussions about memory usage for a single object, but what I need is total memory usage for the process, so that I can determine when it's necessary to start discarding cached data.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>On Windows, you can use WMI (<a href=\"http://timgolden.me.uk/python/wmi.html\" rel=\"noreferrer\">home page</a>, <a href=\"http://pypi.python.org/pypi/WMI/1.3.2\" rel=\"noreferrer\">cheeseshop</a>):</p>\n\n<pre><code>\ndef memory():\n    import os\n    from wmi import WMI\n    w = WMI('.')\n    result = w.query(\"SELECT WorkingSet FROM Win32_PerfRawData_PerfProc_Process WHERE IDProcess=%d\" % os.getpid())\n    return int(result[0].WorkingSet)\n</code></pre>\n\n<p>On Linux (from python cookbook <a href=\"http://code.activestate.com/recipes/286222/\" rel=\"noreferrer\">http://code.activestate.com/recipes/286222/</a>:</p>\n\n<pre><code>import os\n_proc_status = '/proc/%d/status' % os.getpid()\n\n_scale = {'kB': 1024.0, 'mB': 1024.0*1024.0,\n          'KB': 1024.0, 'MB': 1024.0*1024.0}\n\ndef _VmB(VmKey):\n    '''Private.\n    '''\n    global _proc_status, _scale\n     # get pseudo file  /proc/&lt;pid&gt;/status\n    try:\n        t = open(_proc_status)\n        v = t.read()\n        t.close()\n    except:\n        return 0.0  # non-Linux?\n     # get VmKey line e.g. 'VmRSS:  9999  kB\\n ...'\n    i = v.index(VmKey)\n    v = v[i:].split(None, 3)  # whitespace\n    if len(v) &lt; 3:\n        return 0.0  # invalid format?\n     # convert Vm value to bytes\n    return float(v[1]) * _scale[v[2]]\n\n\ndef memory(since=0.0):\n    '''Return memory usage in bytes.\n    '''\n    return _VmB('VmSize:') - since\n\n\ndef resident(since=0.0):\n    '''Return resident memory usage in bytes.\n    '''\n    return _VmB('VmRSS:') - since\n\n\ndef stacksize(since=0.0):\n    '''Return stack size in bytes.\n    '''\n    return _VmB('VmStk:') - since\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is there any performance difference between tuples and lists when it comes to instantiation and retrieval of elements? </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The <a href=\"https://docs.python.org/3/library/dis.html\" rel=\"noreferrer\"><code>dis</code></a> module disassembles the byte code for a function and is useful to see the difference between tuples and lists.</p>\n\n<p>In this case, you can see that accessing an element generates identical code, but that assigning a tuple is much faster than assigning a list.</p>\n\n<pre><code>&gt;&gt;&gt; def a():\n...     x=[1,2,3,4,5]\n...     y=x[2]\n...\n&gt;&gt;&gt; def b():\n...     x=(1,2,3,4,5)\n...     y=x[2]\n...\n&gt;&gt;&gt; import dis\n&gt;&gt;&gt; dis.dis(a)\n  2           0 LOAD_CONST               1 (1)\n              3 LOAD_CONST               2 (2)\n              6 LOAD_CONST               3 (3)\n              9 LOAD_CONST               4 (4)\n             12 LOAD_CONST               5 (5)\n             15 BUILD_LIST               5\n             18 STORE_FAST               0 (x)\n\n  3          21 LOAD_FAST                0 (x)\n             24 LOAD_CONST               2 (2)\n             27 BINARY_SUBSCR\n             28 STORE_FAST               1 (y)\n             31 LOAD_CONST               0 (None)\n             34 RETURN_VALUE\n&gt;&gt;&gt; dis.dis(b)\n  2           0 LOAD_CONST               6 ((1, 2, 3, 4, 5))\n              3 STORE_FAST               0 (x)\n\n  3           6 LOAD_FAST                0 (x)\n              9 LOAD_CONST               2 (2)\n             12 BINARY_SUBSCR\n             13 STORE_FAST               1 (y)\n             16 LOAD_CONST               0 (None)\n             19 RETURN_VALUE\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<pre><code>import ftplib\nimport urllib2\nimport os\nimport logging\nlogger = logging.getLogger('ftpuploader')\nhdlr = logging.FileHandler('ftplog.log')\nformatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')\nhdlr.setFormatter(formatter)\nlogger.addHandler(hdlr)\nlogger.setLevel(logging.INFO)\nFTPADDR = \"some ftp address\"\n\ndef upload_to_ftp(con, filepath):\n    try:\n        f = open(filepath,'rb')                # file to send\n        con.storbinary('STOR '+ filepath, f)         # Send the file\n        f.close()                                # Close file and FTP\n        logger.info('File successfully uploaded to '+ FTPADDR)\n    except, e:\n        logger.error('Failed to upload to ftp: '+ str(e))\n</code></pre>\n\n<p>This doesn't seem to work, I get syntax error, what is the proper way of doing this for logging all kind of exceptions to a file</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You have to define which type of exception you want to catch. So write <code>except Exception, e:</code> instead of <code>except, e:</code> for a general exception (that will be logged anyway).</p>\n\n<p>Other possibility is to write your whole try/except code this way:</p>\n\n<pre><code>try:\n    with open(filepath,'rb') as f:\n        con.storbinary('STOR '+ filepath, f)\n    logger.info('File successfully uploaded to '+ FTPADDR)\nexcept Exception, e:\n    logger.error('Failed to upload to ftp: '+ str(e))\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I want to use Python to convert JSON data into a Python object.</p>\n\n<p>I receive JSON data objects from the Facebook API, which I want to store in my database.  </p>\n\n<p>My current View in Django (Python) (<code>request.POST</code> contains the JSON):</p>\n\n<pre><code>response = request.POST\nuser = FbApiUser(user_id = response['id'])\nuser.name = response['name']\nuser.username = response['username']\nuser.save()\n</code></pre>\n\n<ul>\n<li><p>This works fine, but how do I handle complex JSON data objects?   </p></li>\n<li><p>Wouldn't it be much better if I could somehow convert this JSON object into a Python object for easy use?</p></li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can do it in one line, using <code>namedtuple</code> and <code>object_hook</code>:</p>\n\n<pre><code>import json\nfrom collections import namedtuple\n\ndata = '{\"name\": \"John Smith\", \"hometown\": {\"name\": \"New York\", \"id\": 123}}'\n\n# Parse JSON into an object with attributes corresponding to dict keys.\nx = json.loads(data, object_hook=lambda d: namedtuple('X', d.keys())(*d.values()))\nprint x.name, x.hometown.name, x.hometown.id\n</code></pre>\n\n<p>or, to reuse this easily:</p>\n\n<pre><code>def _json_object_hook(d): return namedtuple('X', d.keys())(*d.values())\ndef json2obj(data): return json.loads(data, object_hook=_json_object_hook)\n\nx = json2obj(data)\n</code></pre>\n\n<p>If you want it to handle keys that aren't good attribute names, check out <code>namedtuple</code>'s <a href=\"http://docs.python.org/2/library/collections.html#collections.namedtuple\" rel=\"noreferrer\"><code>rename</code> parameter</a>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Which are the most advanced frameworks and tools there are available for python for practicing Behavior Driven Development? Especially finding similar tools as rspec and mocha for ruby would be great.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"http://blog.ianbicking.org/behavior-driven-programming.html\" rel=\"nofollow noreferrer\">Ian Bicking</a> recommends using <a href=\"http://docs.python.org/library/doctest.html?highlight=doctest#module-doctest\" rel=\"nofollow noreferrer\">doctest</a> for behavior driven design:</p>\n\n<p>I personally tend to use <a href=\"https://web.archive.org/web/20110610084952/http://somethingaboutorange.com/mrl/projects/nose/1.0.0\" rel=\"nofollow noreferrer\">nose</a> and <a href=\"http://www.voidspace.org.uk/python/mock.html\" rel=\"nofollow noreferrer\">voidspace mock</a> in a behavior driven design style. Specifically, the spec <a href=\"http://darcs.idyll.org/~t/projects/pinocchio/doc/#spec-generate-test-description-from-test-class-method-names\" rel=\"nofollow noreferrer\">plugin</a> for nose is excellent for BDD.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Dictionaries are ordered in Python 3.6 (under the CPython implementation at least) unlike in previous incarnations. This seems like a substantial change, but it's only a short paragraph in the <a href=\"https://docs.python.org/3.6/whatsnew/3.6.html#other-language-changes\" rel=\"noreferrer\">documentation</a>. It is described as a CPython implementation detail rather than a language feature, but also implies this may become standard in the future.</p>\n\n<p>How does the new dictionary implementation perform better than the older one while preserving element order? </p>\n\n<p>Here is the text from the documentation:</p>\n\n<blockquote>\n  <p><code>dict()</code> now uses a \u201ccompact\u201d representation <a href=\"https://morepypy.blogspot.com/2015/01/faster-more-memory-efficient-and-more.html\" rel=\"noreferrer\">pioneered by PyPy</a>. The memory usage of the new dict() is between 20% and 25% smaller compared to Python 3.5. <a href=\"https://www.python.org/dev/peps/pep-0468\" rel=\"noreferrer\">PEP 468</a> (Preserving the order of **kwargs in a function.) is implemented by this. The order-preserving aspect of this new implementation is considered an implementation detail and should not be relied upon (this may change in the future, but it is desired to have this new dict implementation in the language for a few releases before changing the language spec to mandate order-preserving semantics for all current and future Python implementations; this also helps preserve backwards-compatibility with older versions of the language where random iteration order is still in effect, e.g. Python 3.5). (Contributed by INADA Naoki in <a href=\"https://bugs.python.org/issue27350\" rel=\"noreferrer\">issue 27350</a>. Idea <a href=\"https://mail.python.org/pipermail/python-dev/2012-December/123028.html\" rel=\"noreferrer\">originally suggested by Raymond Hettinger</a>.)</p>\n</blockquote>\n\n<p>EDIT: Raymond Hettinger <a href=\"https://twitter.com/raymondh/status/850102884972675072\" rel=\"noreferrer\">recently tweeted</a> that \"[having <code>dict</code>s ordered] is so convenient that a guarantee for [Python] 3.7 is almost inevitable\".</p>\n\n<p>EDIT 2: Two examples of how CPython 3.6 <code>dict</code>s are not always displayed in the insertion order, <a href=\"https://stackoverflow.com/questions/45016455/pprint-sorting-dicts-but-not-sets/\">with <code>pprint</code></a> and <a href=\"https://stackoverflow.com/questions/45347084/how-can-ordereddict-know-about-the-element-order-of-an-already-instantiated-dict\">with IPython's <code>pprint</code></a>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<blockquote>\n  <p>How does the Python <code>3.6</code> dictionary implementation perform better* than the older one while preserving element order?</p>\n</blockquote>\n\n<p>Essentially, by <em>keeping two arrays</em>. </p>\n\n<ul>\n<li><p>The first array, <a href=\"https://github.com/python/cpython/blob/474ef63e38726d4bcde14f6104984a742c6cb747/Objects/dictobject.c#L551\" rel=\"noreferrer\"><code>dk_entries</code></a>, holds the entries (<a href=\"https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L4\" rel=\"noreferrer\">of type <code>PyDictKeyEntry</code></a>) for the dictionary in the order that they were inserted. Preserving order is achieved by this being an append only array where new items are always inserted at the end (insertion order).</p></li>\n<li><p>The second, <a href=\"https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L70\" rel=\"noreferrer\"><code>dk_indices</code></a>, holds the indices for the <code>dk_entries</code> array (that is, values that indicate the position of the corresponding entry in <code>dk_entries</code>). This array acts as the hash table. When a key is hashed it leads to one of the indices stored in <code>dk_indices</code> and the corresponding entry is fetched by indexing <code>dk_entries</code>. Since only indices are kept, the type of this array depends on the overall size of the dictionary (ranging from type <a href=\"https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L64\" rel=\"noreferrer\"><code>int8_t</code></a>(<code>1</code> byte) to <a href=\"https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L66\" rel=\"noreferrer\"><code>int32_t</code></a>/<a href=\"https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L68\" rel=\"noreferrer\"><code>int64_t</code></a> (<code>4</code>/<code>8</code> bytes) on <code>32</code>/<code>64</code> bit builds) </p></li>\n</ul>\n\n<p>In the previous implementation, a sparse array of type <code>PyDictKeyEntry</code> and size <code>dk_size</code> had to be allocated; unfortunately, it also resulted in a lot of empty space since that array was not allowed to be more than <code>2/3 * dk_size</code> full <a href=\"https://github.com/python/cpython/blob/474ef63e38726d4bcde14f6104984a742c6cb747/Objects/dictobject.c#L375\" rel=\"noreferrer\">for performance reasons</a>. (and the empty space <em>still</em> had <code>PyDictKeyEntry</code> size!). </p>\n\n<p>This is not the case now since only the <em>required</em> entries are stored (those that have been inserted) and a sparse array of type <code>intX_t</code> (<code>X</code> depending on dict size) <code>2/3 * dk_size</code>s full is kept. The empty space changed from type <code>PyDictKeyEntry</code> to <code>intX_t</code>. </p>\n\n<p>So, obviously, creating a sparse array of type <code>PyDictKeyEntry</code> is much more memory demanding than a sparse array for storing <code>int</code>s.</p>\n\n<p>You can see the full conversation <a href=\"https://mail.python.org/pipermail/python-dev/2016-September/146327.html\" rel=\"noreferrer\">on Python-Dev</a> regarding this feature if interested, it is a good read.</p>\n\n<hr>\n\n<p><a href=\"https://mail.python.org/pipermail/python-dev/2012-December/123028.html\" rel=\"noreferrer\">In the original proposal made by Raymond Hettinger</a>, a visualization of the data structures used can be seen which captures the gist of the idea.</p>\n\n<blockquote>\n  <p>For example, the dictionary:</p>\n\n<pre><code>d = {'timmy': 'red', 'barry': 'green', 'guido': 'blue'}\n</code></pre>\n  \n  <p>is currently stored as:</p>\n\n<pre><code>entries = [['--', '--', '--'],\n           [-8522787127447073495, 'barry', 'green'],\n           ['--', '--', '--'],\n           ['--', '--', '--'],\n           ['--', '--', '--'],\n           [-9092791511155847987, 'timmy', 'red'],\n           ['--', '--', '--'],\n           [-6480567542315338377, 'guido', 'blue']]\n</code></pre>\n  \n  <p>Instead, the data should be organized as follows:</p>\n\n<pre><code>indices =  [None, 1, None, None, None, 0, None, 2]\nentries =  [[-9092791511155847987, 'timmy', 'red'],\n            [-8522787127447073495, 'barry', 'green'],\n            [-6480567542315338377, 'guido', 'blue']]\n</code></pre>\n</blockquote>\n\n<p>As you can visually now see, in the original proposal, a lot of space is essentially empty to reduce collisions and make look-ups faster. With the new approach, you reduce the memory required by moving the sparseness where it's really required, in the indices.</p>\n\n<p><sub>\n*The new dictionary implementations performs better <strong>memory wise</strong> by being designed more compactly; that's the main benefit here. Speed wise, the difference isn't so drastic, there's places where the new dict might introduce slight regressions (<a href=\"http://bugs.python.org/msg275587\" rel=\"noreferrer\">key-lookups, for example</a>) while in others (iteration and resizing come to mind) a performance boost should be present. \n</sub></p>\n\n<p><sub>\nOverall, the performance of the dictionary, especially in real-life situations, improves due to the compactness introduced.<br>\n</sub></p>\n\n<hr>\n\n<blockquote>\n  <p>Should you depend on it and/or use it?</p>\n</blockquote>\n\n<p><em>No!</em> Anything characterized as an <em>implementation detail</em> (as noted in the documentation) should be something you <em>shouldn't</em> depend on. If you do it is going to be your fault if code you've written breaks in previous versions/different implementation and/or stops working in future releases.</p>\n\n<p>Different implementations of Python aren't required to make the dictionary ordered, rather, just support an ordered mapping where that is required (Notable examples are <em><a href=\"https://docs.python.org/3.6/whatsnew/3.6.html#pep-520-preserving-class-attribute-definition-order\" rel=\"noreferrer\">PEP 520: Preserving Class Attribute Definition Order</a></em> and <em><a href=\"https://docs.python.org/3.6/whatsnew/3.6.html#pep-468-preserving-keyword-argument-order\" rel=\"noreferrer\">PEP 468: Preserving Keyword Argument Order</a></em>)</p>\n\n<p>If you want to write code that preserves the ordering and want it to not break on previous versions/different implementations you should use <code>OrderedDict</code>. Besides, <code>OrderedDict</code> will most likely eventually become a thin-wrapper around the new <code>dict</code> implementation.</p>\n\n<p><strong>Note:</strong> This might be elevated from implementation detail to feature at some point (as alluded by <a href=\"https://twitter.com/raymondh/status/850102884972675072\" rel=\"noreferrer\">this tweet by RDH</a>). If that happens the previous, of course, doesn't apply.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm confused on what an immutable type is. I know the <code>float</code> object is considered to be immutable, with this type of example from my book:</p>\n\n<pre><code>class RoundFloat(float):\n    def __new__(cls, val):\n        return float.__new__(cls, round(val, 2))\n</code></pre>\n\n<p>Is this considered to be immutable because of the class structure / hierarchy?, meaning <code>float</code> is at the top of the class and is its own method call. Similar to this type of example (even though my book says <code>dict</code> is mutable):</p>\n\n<pre><code>class SortedKeyDict(dict):\n    def __new__(cls, val):\n        return dict.__new__(cls, val.clear())\n</code></pre>\n\n<p>Whereas something mutable has methods inside the class, with this type of example:</p>\n\n<pre><code>class SortedKeyDict_a(dict):\n    def example(self):\n        return self.keys()\n</code></pre>\n\n<hr>\n\n<p>Also, for the last <code>class(SortedKeyDict_a)</code>, if I pass this type of set to it:</p>\n\n<pre><code>d = (('zheng-cai', 67), ('hui-jun', 68),('xin-yi', 2))\n</code></pre>\n\n<p>without calling the <code>example</code> method, it returns a dictionary. The <code>SortedKeyDict</code> with <code>__new__</code> flags it as an error. I tried passing integers to the <code>RoundFloat</code> class with <code>__new__</code> and it flagged no errors.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>What? Floats are immutable? But can't I do</p>\n\n<pre><code>x = 5.0\nx += 7.0\nprint x # 12.0\n</code></pre>\n\n<p>Doesn't that \"mut\" x?</p>\n\n<p>Well you agree strings are immutable right? But you can do the same thing.</p>\n\n<pre><code>s = 'foo'\ns += 'bar'\nprint s # foobar\n</code></pre>\n\n<p>The value of the variable changes, but it changes by changing what the variable refers to. A mutable type can change that way, and it can <em>also</em> change \"in place\".</p>\n\n<p>Here is the difference.</p>\n\n<pre><code>x = something # immutable type\nprint x\nfunc(x)\nprint x # prints the same thing\n\nx = something # mutable type\nprint x\nfunc(x)\nprint x # might print something different\n\nx = something # immutable type\ny = x\nprint x\n# some statement that operates on y\nprint x # prints the same thing\n\nx = something # mutable type\ny = x\nprint x\n# some statement that operates on y\nprint x # might print something different\n</code></pre>\n\n<p>Concrete examples</p>\n\n<pre><code>x = 'foo'\ny = x\nprint x # foo\ny += 'bar'\nprint x # foo\n\nx = [1, 2, 3]\ny = x\nprint x # [1, 2, 3]\ny += [3, 2, 1]\nprint x # [1, 2, 3, 3, 2, 1]\n\ndef func(val):\n    val += 'bar'\n\nx = 'foo'\nprint x # foo\nfunc(x)\nprint x # foo\n\ndef func(val):\n    val += [3, 2, 1]\n\nx = [1, 2, 3]\nprint x # [1, 2, 3]\nfunc(x)\nprint x # [1, 2, 3, 3, 2, 1]\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>When multiple directories need to be concatenated, as in an executable search path, there is an os-dependent separator character.  For Windows it's <code>';'</code>, for Linux it's <code>':'</code>.  Is there a way in Python to get which character to split on?</p>\n\n<p>In the discussions to this question <a href=\"https://stackoverflow.com/questions/1489599/how-do-i-find-out-my-python-path-using-python\">How do I find out my python path using python?</a> , it is suggested that <code>os.sep</code> will do it. That answer is wrong, since it is the separator for components of a directory or filename and equates to <code>'\\\\'</code> or <code>'/'</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"http://docs.python.org/library/os.html#os.pathsep\" rel=\"noreferrer\"><code>os.pathsep</code></a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Given a dictionary <code>{ k1: v1, k2: v2 ... }</code> I want to get <code>{ k1: f(v1), k2: f(v2) ... }</code> provided I pass a function <code>f</code>.</p>\n\n<p>Is there any such built in function? Or do I have to do</p>\n\n<pre><code>dict([(k, f(v)) for (k, v) in my_dictionary.iteritems()])\n</code></pre>\n\n<p>Ideally I would just write</p>\n\n<pre><code>my_dictionary.map_values(f)\n</code></pre>\n\n<p>or</p>\n\n<pre><code>my_dictionary.mutate_values_with(f)\n</code></pre>\n\n<p>That is, it doesn't matter to me if the original dictionary is mutated or a copy is created.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There is no such function; the easiest way to do this is to use a dict comprehension:</p>\n\n<pre><code>my_dictionary = {k: f(v) for k, v in my_dictionary.items()}\n</code></pre>\n\n<p>In python 2.7, use the <code>.iteritems()</code> method instead of <code>.items()</code> to save memory. The dict comprehension syntax wasn't introduced until python 2.7.</p>\n\n<p>Note that there is no such method on lists either; you'd have to use a list comprehension or the <code>map()</code> function.</p>\n\n<p>As such, you could use the <code>map()</code> function for processing your dict as well:</p>\n\n<pre><code>my_dictionary = dict(map(lambda (k,v): (k, f(v)), my_dictionary.iteritems()))\n</code></pre>\n\n<p>but that's not that readable, really.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/2801882/generating-a-png-with-matplotlib-when-display-is-undefined\" dir=\"ltr\">Generating a PNG with matplotlib when DISPLAY is undefined</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    10 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>Matplotlib seems to require the $DISPLAY environment variable which means a running X server.<br>Some web hosting services do not allow a running X server session.<br>Is there a way to generate graphs using matplotlib without a running X server?</p>\n\n<pre><code>[username@hostname ~]$ python2.6\nPython 2.6.5 (r265:79063, Nov 23 2010, 02:02:03)\n[GCC 4.1.2 20080704 (Red Hat 4.1.2-48)] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import matplotlib.pyplot as plt\n&gt;&gt;&gt; fig = plt.figure()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"/home/username/lib/python2.6/matplotlib-1.0.1-py2.6-linux-i686.egg/matplotlib/pyplot.py\", line 270, in figure\n    **kwargs)\n  File \"/home/username/lib/python2.6/matplotlib-1.0.1-py2.6-linux-i686.egg/matplotlib/backends/backend_tkagg.py\", line 80, in new_figure_manager\n    window = Tk.Tk()\n  File \"/usr/local/lib/python2.6/lib-tk/Tkinter.py\", line 1643, in __init__\n    self.tk = _tkinter.create(screenName, baseName, className, interactive, wantobjects, useTk, sync, use)\n_tkinter.TclError: no display name and no $DISPLAY environment variable\n&gt;&gt;&gt;\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>@Neil's answer is one (perfectly valid!) way of doing it, but you can also <a href=\"http://matplotlib.sourceforge.net/faq/howto_faq.html#matplotlib-in-a-web-application-server\" rel=\"noreferrer\">simply call <code>matplotlib.use('Agg')</code> <em>before</em> importing <code>matplotlib.pyplot</code></a>, and then continue as normal.  </p>\n\n<p>E.g.</p>\n\n<pre><code>import matplotlib as mpl\nmpl.use('Agg')\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\nax = fig.add_subplot(111)\nax.plot(range(10))\nfig.savefig('temp.png')\n</code></pre>\n\n<p>You don't have to use the Agg backend, as well.  The <a href=\"http://matplotlib.org/faq/usage_faq.html#what-is-a-backend\" rel=\"noreferrer\">pdf, ps, svg, agg, cairo, and gdk backends</a> can all be used without an X-server.  However, only the Agg backend will be built by default (I think?), so there's a good chance that the other backends may not be enabled on your particular install.</p>\n\n<p>Alternately, you can just set the backend parameter in your <a href=\"http://matplotlib.org/users/customizing.html#the-matplotlibrc-file\" rel=\"noreferrer\"><code>.matplotlibrc</code></a> file to automatically have <code>matplotlib.pyplot</code> use the given renderer.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What is the best way to create a new empty list in Python?</p>\n\n<pre><code>l = [] \n</code></pre>\n\n<p>or</p>\n\n<pre><code>l = list()\n</code></pre>\n\n<p>I am asking this because of two reasons:</p>\n\n<ol>\n<li>Technical reasons, as to which is faster. (creating a class causes overhead?)<br></li>\n<li>Code readability - which one is the standard convention.</li>\n</ol>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here is how you can test which piece of code is faster:</p>\n\n<pre><code>% python -mtimeit  \"l=[]\"\n10000000 loops, best of 3: 0.0711 usec per loop\n\n% python -mtimeit  \"l=list()\"\n1000000 loops, best of 3: 0.297 usec per loop\n</code></pre>\n\n<p>However, in practice, this initialization is most likely an extremely small part of your program, so worrying about this is probably wrong-headed.</p>\n\n<p>Readability is very subjective. I prefer <code>[]</code>, but some very knowledgable people, like Alex Martelli, prefer <code>list()</code> because <a href=\"https://stackoverflow.com/questions/2745008/differences-between-d-dict-and-d/2745292#2745292\">it is pronounceable</a>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What is the pythonic way of writing the following code?</p>\n\n<pre><code>extensions = ['.mp3','.avi']\nfile_name = 'test.mp3'\n\nfor extension in extensions:\n    if file_name.endswith(extension):\n        #do stuff\n</code></pre>\n\n<p>I have a vague memory that the explicit declaration of the <code>for</code> loop can be avoided and be written in the <code>if</code> condition. Is this true?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Though not widely known, <a href=\"http://docs.python.org/2/library/stdtypes.html#str.endswith\" rel=\"noreferrer\">str.endswith</a> also accepts a tuple. You don't need to loop.</p>\n\n<pre><code>&gt;&gt;&gt; 'test.mp3'.endswith(('.mp3', '.avi'))\nTrue\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"https://stackoverflow.com/questions/1537202/variables-inside-and-outside-of-a-class-init-function\">Variables inside and outside of a class __init__() function</a>  </p>\n</blockquote>\n\n\n\n<p>I noticed that in Python, people initialize their class attributes in two different ways.</p>\n\n<p>The first way is like this:</p>\n\n<pre><code>class MyClass:\n  __element1 = 123\n  __element2 = \"this is Africa\"\n\n  def __init__(self):\n    #pass or something else\n</code></pre>\n\n<p>The other style looks like:</p>\n\n<pre><code>class MyClass:\n  def __init__(self):\n    self.__element1 = 123\n    self.__element2 = \"this is Africa\"\n</code></pre>\n\n<p>Which is the correct way to initialize class attributes?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Both ways aren't correct or incorrect, they are just two different kind of class elements:</p>\n\n<ul>\n<li>Elements outside the <code>__init__</code> method are static elements, it means, they belong to the class.</li>\n<li>Elements inside the <code>__init__</code> method are elements of the object (<code>self</code>), they don't belong to the class.</li>\n</ul>\n\n<p>You'll see it more clearly with some code:</p>\n\n<pre><code>class MyClass:\n    static_elem = 123\n\n    def __init__(self):\n        self.object_elem = 456\n\nc1 = MyClass()\nc2 = MyClass()\n\n# Initial values of both elements\n&gt;&gt;&gt; print c1.static_elem, c1.object_elem \n123 456\n&gt;&gt;&gt; print c2.static_elem, c2.object_elem\n123 456\n\n# Nothing new so far ...\n\n# Let's try changing the static element\nMyClass.static_elem = 999\n\n&gt;&gt;&gt; print c1.static_elem, c1.object_elem\n999 456\n&gt;&gt;&gt; print c2.static_elem, c2.object_elem\n999 456\n\n# Now, let's try changing the object element\nc1.object_elem = 888\n\n&gt;&gt;&gt; print c1.static_elem, c1.object_elem\n999 888\n&gt;&gt;&gt; print c2.static_elem, c2.object_elem\n999 456\n</code></pre>\n\n<p>As you can see, when we changed the class element, it changed for both objects. But, when we changed the object element, the other object remained unchanged.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I was wondering if there's any library for asynchronous method calls in <a href=\"http://en.wikipedia.org/wiki/Python_%28programming_language%29\" rel=\"noreferrer\">Python</a>. It would be great if you could do something like</p>\n\n<pre><code>@async\ndef longComputation():\n    &lt;code&gt;\n\n\ntoken = longComputation()\ntoken.registerCallback(callback_function)\n# alternative, polling\nwhile not token.finished():\n    doSomethingElse()\n    if token.finished():\n        result = token.result()\n</code></pre>\n\n<p>Or to call a non-async routine asynchronously</p>\n\n<pre><code>def longComputation()\n    &lt;code&gt;\n\ntoken = asynccall(longComputation())\n</code></pre>\n\n<p>It would be great to have a more refined strategy as native in the language core. Was this considered?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use the <a href=\"http://docs.python.org/library/multiprocessing.html#module-multiprocessing\" rel=\"noreferrer\">multiprocessing module</a> added in Python 2.6. You can use pools of processes and then get results asynchronously with: </p>\n\n<pre><code>apply_async(func[, args[, kwds[, callback]]])\n</code></pre>\n\n<p>E.g.:</p>\n\n<pre><code>from multiprocessing import Pool\n\ndef f(x):\n    return x*x\n\nif __name__ == '__main__':\n    pool = Pool(processes=1)              # Start a worker processes.\n    result = pool.apply_async(f, [10], callback) # Evaluate \"f(10)\" asynchronously calling callback when finished.\n</code></pre>\n\n<p>This is only one alternative. This module provides lots of facilities to achieve what you want. Also it will be really easy to make a decorator from this.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/11277432/how-to-remove-a-key-from-a-python-dictionary\" dir=\"ltr\">How to remove a key from a python dictionary?</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    6 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>Is there any other way to delete an item in a dictionary only if the given key exists, other than:</p>\n\n<pre><code>if key in mydict:\n    del mydict[key]\n</code></pre>\n\n<p>The scenario is that I'm given a collection of keys to be removed from a given dictionary, but I am not certain if all of them exist in the dictionary. Just in case I miss a more efficient solution.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use <a href=\"http://docs.python.org/3/library/stdtypes.html#dict.pop\" rel=\"noreferrer\"> <code>dict.pop</code></a>:</p>\n\n<pre><code> mydict.pop(\"key\", None)\n</code></pre>\n\n<p>Note that if the second argument, i.e. <code>None</code> is not given, <code>KeyError</code> is raised if the key is not in the dictionary. Providing the second argument prevents the conditional exception.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm really confused with the <code>codecs.open function</code>. When I do:</p>\n\n<pre><code>file = codecs.open(\"temp\", \"w\", \"utf-8\")\nfile.write(codecs.BOM_UTF8)\nfile.close()\n</code></pre>\n\n<p>It gives me the error</p>\n\n<blockquote>\n  <p>UnicodeDecodeError: 'ascii' codec can't decode byte 0xef in position\n  0: ordinal not in range(128)</p>\n</blockquote>\n\n<p>If I do:</p>\n\n<pre><code>file = open(\"temp\", \"w\")\nfile.write(codecs.BOM_UTF8)\nfile.close()\n</code></pre>\n\n<p>It works fine.</p>\n\n<p><strong>Question</strong> is why does the first method fail? And how do I insert the bom?</p>\n\n<p>If the second method is the correct way of doing it, what the point of using <code>codecs.open(filename, \"w\", \"utf-8\")</code>?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I believe the problem is that <a href=\"https://docs.python.org/library/codecs.html#codecs.BOM_UTF8\" rel=\"noreferrer\"><code>codecs.BOM_UTF8</code></a> is a byte string, not a Unicode string. I suspect the file handler is trying to guess what you really mean based on \"I'm meant to be writing Unicode as UTF-8-encoded text, but you've given me a byte string!\"</p>\n\n<p>Try writing the Unicode string for the byte order mark (i.e. Unicode U+FEFF) directly, so that the file just encodes that as UTF-8:</p>\n\n<pre><code>import codecs\n\nfile = codecs.open(\"lol\", \"w\", \"utf-8\")\nfile.write(u'\\ufeff')\nfile.close()\n</code></pre>\n\n<p>(That seems to give the right answer - a file with bytes EF BB BF.)</p>\n\n<p>EDIT: S. Lott's <a href=\"https://stackoverflow.com/a/934203/12892\">suggestion</a> of using \"utf-8-sig\" as the encoding is a better one than explicitly writing the BOM yourself, but I'll leave this answer here as it explains what was going wrong before.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What's the easiest way to use a linked list in python? In scheme, a linked list is defined simply by <code>'(1 2 3 4 5)</code>. Python's lists, <code>[1, 2, 3, 4, 5]</code>, and tuples, <code>(1, 2, 3, 4, 5)</code>, are not, in fact, linked lists, and linked lists have some nice properties such as constant-time concatenation, and being able to reference separate parts of them. Make them immutable and they are really easy to work with!</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here is some list functions based on <a href=\"https://stackoverflow.com/questions/280243/python-linked-list#280284\">Martin v. L\u00f6wis's representation</a>:</p>\n\n<pre><code>cons   = lambda el, lst: (el, lst)\nmklist = lambda *args: reduce(lambda lst, el: cons(el, lst), reversed(args), None)\ncar = lambda lst: lst[0] if lst else lst\ncdr = lambda lst: lst[1] if lst else lst\nnth = lambda n, lst: nth(n-1, cdr(lst)) if n &gt; 0 else car(lst)\nlength  = lambda lst, count=0: length(cdr(lst), count+1) if lst else count\nbegin   = lambda *args: args[-1]\ndisplay = lambda lst: begin(w(\"%s \" % car(lst)), display(cdr(lst))) if lst else w(\"nil\\n\")\n</code></pre>\n\n<p>where <code>w = sys.stdout.write</code></p>\n\n<p>Although doubly linked lists are famously used in Raymond Hettinger's <a href=\"http://code.activestate.com/recipes/576694-orderedset/\" rel=\"nofollow noreferrer\">ordered set recipe</a>, singly linked lists have no practical value in Python.</p>\n\n<p>I've <em>never</em> used a singly linked list in Python for any problem except educational. </p>\n\n<p>Thomas Watnedal <a href=\"https://stackoverflow.com/questions/280243/python-linked-list#280280\">suggested</a> a good educational resource <a href=\"http://greenteapress.com/thinkpython/html/chap17.html\" rel=\"nofollow noreferrer\">How to Think Like a Computer Scientist, Chapter 17: Linked lists</a>:</p>\n\n<p>A linked list is either: </p>\n\n<ul>\n<li>the empty list, represented by None, or </li>\n<li><p>a node that contains a cargo object and a reference to a linked list.</p>\n\n<pre><code>class Node: \n  def __init__(self, cargo=None, next=None): \n    self.car = cargo \n    self.cdr = next    \n  def __str__(self): \n    return str(self.car)\n\ndef display(lst):\n  if lst:\n    w(\"%s \" % lst)\n    display(lst.cdr)\n  else:\n    w(\"nil\\n\")\n</code></pre></li>\n</ul>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I would like to return two values from a function in two separate variables. \nFor example:</p>\n\n<pre><code>def select_choice():\n    loop = 1\n    row = 0\n    while loop == 1:\n        print('''Choose from the following options?:\n                 1. Row 1\n                 2. Row 2\n                 3. Row 3''')\n\n        row = int(input(\"Which row would you like to move the card from?: \"))\n        if row == 1:\n            i = 2\n            card = list_a[-1]\n        elif row == 2:\n            i = 1\n            card = list_b[-1]\n        elif row == 3:\n            i = 0\n            card = list_c[-1]\n        return i\n        return card\n</code></pre>\n\n<p>And I want to be able to use these values separately. When I tried to use <code>return i, card</code>, it returns a <code>tuple</code> and this is not what I want. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You cannot return two values, but you can return a <code>tuple</code> or a <code>list</code> and unpack it after the call:</p>\n\n<pre><code>def select_choice():\n    ...\n    return i, card  # or [i, card]\n\nmy_i, my_card = select_choice()\n</code></pre>\n\n<p>In line <code>return i, card</code> <code>i, card</code> means creating a tuple. You can also use parenthesis like <code>return (i, card)</code>, but tuples are created by comma, so parens are not mandatory. But you can use parens to make your code more readable or to split the tuple over multiple lines. The same applies to line <code>my_i, my_card = select_choice()</code>.</p>\n\n<p>If you want to return more than two values, consider using a <a href=\"https://docs.python.org/3.6/library/collections.html#collections.namedtuple\" rel=\"noreferrer\">named tuple</a>. It will allow the caller of the function to access fields of the returned value by name, which is more readable. You can still access items of the tuple by index. For example in <code>Schema.loads</code> method Marshmallow framework returns a <a href=\"http://marshmallow.readthedocs.io/en/latest/api_reference.html#marshmallow.UnmarshalResult\" rel=\"noreferrer\"><code>UnmarshalResult</code></a> which is a <a href=\"https://github.com/marshmallow-code/marshmallow/blob/fe5469998a6f1f297f8c85acfba8c48ff7bc3d7d/marshmallow/schema.py#L29\" rel=\"noreferrer\"><code>namedtuple</code></a>. So you can do:</p>\n\n<pre><code>data, errors = MySchema.loads(request.json())\nif errors:\n    ...\n</code></pre>\n\n<p>or</p>\n\n<pre><code>result = MySchema.loads(request.json())\nif result.errors:\n    ...\nelse:\n    # use `result.data`\n</code></pre>\n\n<p>In other cases you may return a <code>dict</code> from your function:</p>\n\n<pre><code>def select_choice():\n    ...\n    return {'i': i, 'card': card, 'other_field': other_field, ...}\n</code></pre>\n\n<p>But you might want consider to return an instance of a utility class, which wraps your data:</p>\n\n<pre><code>class ChoiceData():\n    def __init__(self, i, card, other_field, ...):\n        # you can put here some validation logic\n        self.i = i\n        self.card = card\n        self.other_field = other_field\n        ...\n\ndef select_choice():\n    ...\n    return ChoiceData(i, card, other_field, ...)\n\nchoice_data = select_choice()\nprint(choice_data.i, choice_data.card)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>The goal is to create a mock class which behaves like a db resultset.</p>\n\n<p>So for example, if a database query returns, using a dict expression, <code>{'ab':100, 'cd':200}</code>, then I would like to see: </p>\n\n<pre><code>&gt;&gt;&gt; dummy.ab\n100\n</code></pre>\n\n<p>At first I thought maybe I could do it this way:</p>\n\n<pre><code>ks = ['ab', 'cd']\nvs = [12, 34]\nclass C(dict):\n    def __init__(self, ks, vs):\n        for i, k in enumerate(ks):\n            self[k] = vs[i]\n            setattr(self, k, property(lambda x: vs[i], self.fn_readyonly))\n\n    def fn_readonly(self, v)\n        raise \"It is ready only\"\n\nif __name__ == \"__main__\":\n    c = C(ks, vs)\n    print c.ab\n</code></pre>\n\n<p>but <code>c.ab</code> returns a property object instead.</p>\n\n<p>Replacing the <code>setattr</code> line with <code>k = property(lambda x: vs[i])</code> is of no use at all.</p>\n\n<p>So what is the right way to create an instance property at runtime?</p>\n\n<p>P.S. I am aware of an alternative presented in <a href=\"https://stackoverflow.com/questions/371753/how-is-the-getattribute-method-used\"><em>How is the <code>__getattribute__</code> method used?</em></a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I suppose I should expand this answer, now that I'm older and wiser and know what's going on.  Better late than never.</p>\n\n<p>You <em>can</em> add a property to a class dynamically.  But that's the catch: you have to add it to the <em>class</em>.</p>\n\n<pre><code>&gt;&gt;&gt; class Foo(object):\n...     pass\n... \n&gt;&gt;&gt; foo = Foo()\n&gt;&gt;&gt; foo.a = 3\n&gt;&gt;&gt; Foo.b = property(lambda self: self.a + 1)\n&gt;&gt;&gt; foo.b\n4\n</code></pre>\n\n<p>A <code>property</code> is actually a simple implementation of a thing called a <a href=\"http://docs.python.org/2/reference/datamodel.html#implementing-descriptors\" rel=\"noreferrer\">descriptor</a>.  It's an object that provides custom handling for a given attribute, <em>on a given class</em>.  Kinda like a way to factor a huge <code>if</code> tree out of <code>__getattribute__</code>.</p>\n\n<p>When I ask for <code>foo.b</code> in the example above, Python sees that the <code>b</code> defined on the class implements the <em>descriptor protocol</em>\u2014which just means it's an object with a <code>__get__</code>, <code>__set__</code>, or <code>__delete__</code> method.  The descriptor claims responsibility for handling that attribute, so Python calls <code>Foo.b.__get__(foo, Foo)</code>, and the return value is passed back to you as the value of the attribute.  In the case of <code>property</code>, each of these methods just calls the <code>fget</code>, <code>fset</code>, or <code>fdel</code> you passed to the <code>property</code> constructor.</p>\n\n<p>Descriptors are really Python's way of exposing the plumbing of its entire OO implementation.  In fact, there's another type of descriptor even more common than <code>property</code>.</p>\n\n<pre><code>&gt;&gt;&gt; class Foo(object):\n...     def bar(self):\n...         pass\n... \n&gt;&gt;&gt; Foo().bar\n&lt;bound method Foo.bar of &lt;__main__.Foo object at 0x7f2a439d5dd0&gt;&gt;\n&gt;&gt;&gt; Foo().bar.__get__\n&lt;method-wrapper '__get__' of instancemethod object at 0x7f2a43a8a5a0&gt;\n</code></pre>\n\n<p>The humble method is just another kind of descriptor.  Its <code>__get__</code> tacks on the calling instance as the first argument; in effect, it does this:</p>\n\n<pre><code>def __get__(self, instance, owner):\n    return functools.partial(self.function, instance)\n</code></pre>\n\n<p>Anyway, I suspect this is why descriptors only work on classes: they're a formalization of the stuff that powers classes in the first place.  They're even the exception to the rule: you can obviously assign descriptors to a class, and classes are themselves instances of <code>type</code>!  In fact, trying to read <code>Foo.b</code> still calls <code>property.__get__</code>; it's just idiomatic for descriptors to return themselves when accessed as class attributes.</p>\n\n<p>I think it's pretty cool that virtually all of Python's OO system can be expressed in Python.  :)</p>\n\n<p>Oh, and I wrote a <a href=\"http://me.veekun.com/blog/2012/05/23/python-faq-descriptors/\" rel=\"noreferrer\">wordy blog post about descriptors</a> a while back if you're interested.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Sorry for this basic question but my searches on this are not turning up anything other than how to get a dictionary's key based on its value which I would prefer not to use as I simply want the text/name of the key and am worried that searching by value may end up returning 2 or more keys if the dictionary has a lot of entries... what I am trying to do is this:</p>\n\n<pre><code>mydictionary={'keyname':'somevalue'}\nfor current in mydictionary:\n\n   result = mydictionary.(some_function_to_get_key_name)[current]\n   print result\n   \"keyname\"\n</code></pre>\n\n<p>The reason for this is that I am printing these out to a document and I want to use the key name and the value in doing this</p>\n\n<p>I have seen the method below but this seems to just return the key's value</p>\n\n<pre><code>get(key[, default])\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You should iterate over keys with:</p>\n\n<pre><code>for key in mydictionary:\n   print \"key: %s , value: %s\" % (key, mydictionary[key])\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I want to run a script, which basicly shows things like:</p>\n\n<pre><code>Installing XXX...               [DONE]\n</code></pre>\n\n<p>Now, at the moment, I use print to print the whole line AFTER the function has succeeded. However, I now want it to print \"Installing xxx...\" first, and AFTER the function has run, to add the \"DONE\" tag; but on the same line.</p>\n\n<p>Any ideas?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use the <code>print</code> statement to do this without importing <code>sys</code>.</p>\n\n<pre><code>def install_xxx():\n   print(\"Installing XXX...      \"),\n\ninstall_xxx()\nprint \"[DONE]\"\n</code></pre>\n\n<p>The comma on the end of the <code>print</code> line prevents <code>print</code> from issuing a new line (you should note that there will be an extra space at the end of the output).</p>\n\n<p><strong>The Python 3 Solution</strong><br>\nSince the above does not work in Python 3, you can do this instead (again, without importing <code>sys</code>):</p>\n\n<pre><code>def install_xxx():\n    print(\"Installing XXX...      \", end=\"\")\n\ninstall_xxx()\nprint(\"[DONE]\")\n</code></pre>\n\n<p>The print function accepts an <code>end</code> parameter which defaults to <code>\"\\n\"</code>. Setting it to an empty string prevents it from issuing a new line at the end of the line.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In Python 2.7 running on Windows\u00a0XP pro:</p>\n\n<pre><code>import csv\noutfile = file('test.csv', 'w')\nwriter = csv.writer(outfile, delimiter=',', quoting=csv.QUOTE_MINIMAL)\nwriter.writerow(['hi','dude'])\nwriter.writerow(['hi2','dude2'])\noutfile.close()\n</code></pre>\n\n<p>It generates a file, test.csv, with an extra \\r at each row, like so:</p>\n\n<h2>test.csv</h2>\n\n<pre><code>hi,dude\\r\\r\\nhi2,dude2\\r\\r\\n\n</code></pre>\n\n<p>instead of the expected:</p>\n\n<pre><code>hi,dude\\r\\nhi2,dude2\\r\\n\n</code></pre>\n\n<p>Why is this happening, or is this actually the desired behavior?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>On Windows, always open your files in binary mode (\"rb\" or \"wb\") before passing them to csv.reader or csv.writer.</p>\n\n<p>CSV is really a <em>binary</em> format, with \"\\r\\n\" separating records. If that separator is written in text mode, the Python runtime replaces the \"\\n\" with \"\\r\\n\" hence the \"\\r\\r\\n\" that you observed in your file.</p>\n\n<p>See <a href=\"https://stackoverflow.com/questions/1170214/pythons-csv-writer-produces-wrong-line-terminator/1170297#1170297\">this previous answer</a>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have to search through a list and replace all occurrences of one element with another. So far my attempts in code are getting me nowhere, what is the best way to do this?</p>\n\n<p>For example, suppose my list has the following integers</p>\n\n<pre><code>&gt;&gt;&gt; a = [1,2,3,4,5,1,2,3,4,5,1]\n</code></pre>\n\n<p>and I need to replace all occurrences of the number 1 with the value 10 so the output I need is </p>\n\n<pre><code>&gt;&gt;&gt; a = [10, 2, 3, 4, 5, 10, 2, 3, 4, 5, 10]\n</code></pre>\n\n<p>Thus my goal is to replace all instances of the number 1 with the number 10.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>&gt;&gt;&gt; a=[1,2,3,4,5,1,2,3,4,5,1]\n&gt;&gt;&gt; for n,i in enumerate(a):\n...   if i==1:\n...      a[n]=10\n...\n&gt;&gt;&gt; a\n[10, 2, 3, 4, 5, 10, 2, 3, 4, 5, 10]\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Often I find myself wanting to get the first object from a queryset in Django, or return <code>None</code> if there aren't any.  There are lots of ways to do this which all work.  But I'm wondering which is the most performant.</p>\n\n<pre><code>qs = MyModel.objects.filter(blah = blah)\nif qs.count() &gt; 0:\n    return qs[0]\nelse:\n    return None\n</code></pre>\n\n<p>Does this result in two database calls?  That seems wasteful.  Is this any faster? </p>\n\n<pre><code>qs = MyModel.objects.filter(blah = blah)\nif len(qs) &gt; 0:\n    return qs[0]\nelse:\n    return None\n</code></pre>\n\n<p>Another option would be:</p>\n\n<pre><code>qs = MyModel.objects.filter(blah = blah)\ntry:\n    return qs[0]\nexcept IndexError:\n    return None\n</code></pre>\n\n<p>This generates a single database call, which is good.  But requires creating an exception object a lot of the time, which is a very memory-intensive thing to do when all you really need is a trivial if-test.</p>\n\n<p>How can I do this with just a single database call and without churning memory with exception objects?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"https://www.djangoproject.com/weblog/2013/nov/06/django-16-released/\">Django 1.6 (released Nov 2013)</a> introduced the <a href=\"https://docs.djangoproject.com/en/dev/ref/models/querysets/#first\">convenience methods</a> <code>first()</code> and <code>last()</code> which swallow the resulting exception and return <code>None</code> if the queryset returns no objects.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I would like to combine <code>OrderedDict()</code> and <code>defaultdict()</code> from <code>collections</code> in one object, which shall be an ordered, default dict. Is this possible?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The following (using a modified version of <a href=\"http://code.activestate.com/recipes/523034-emulate-collectionsdefaultdict/\" rel=\"noreferrer\">this recipe</a>) works for me:</p>\n\n<pre><code>from collections import OrderedDict, Callable\n\nclass DefaultOrderedDict(OrderedDict):\n    # Source: http://stackoverflow.com/a/6190500/562769\n    def __init__(self, default_factory=None, *a, **kw):\n        if (default_factory is not None and\n           not isinstance(default_factory, Callable)):\n            raise TypeError('first argument must be callable')\n        OrderedDict.__init__(self, *a, **kw)\n        self.default_factory = default_factory\n\n    def __getitem__(self, key):\n        try:\n            return OrderedDict.__getitem__(self, key)\n        except KeyError:\n            return self.__missing__(key)\n\n    def __missing__(self, key):\n        if self.default_factory is None:\n            raise KeyError(key)\n        self[key] = value = self.default_factory()\n        return value\n\n    def __reduce__(self):\n        if self.default_factory is None:\n            args = tuple()\n        else:\n            args = self.default_factory,\n        return type(self), args, None, None, self.items()\n\n    def copy(self):\n        return self.__copy__()\n\n    def __copy__(self):\n        return type(self)(self.default_factory, self)\n\n    def __deepcopy__(self, memo):\n        import copy\n        return type(self)(self.default_factory,\n                          copy.deepcopy(self.items()))\n\n    def __repr__(self):\n        return 'OrderedDefaultDict(%s, %s)' % (self.default_factory,\n                                               OrderedDict.__repr__(self))\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/159720/what-is-the-naming-convention-in-python-for-variable-and-function-names\" dir=\"ltr\">What is the naming convention in Python for variable and function names?</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    11 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>So which is better and why?</p>\n\n<pre><code>def my_function():\n</code></pre>\n\n<p>or</p>\n\n<pre><code>def myFunction():\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>for everything related to Python's style guide: i'd recommend you read <a href=\"http://www.python.org/dev/peps/pep-0008/\">PEP8</a>.</p>\n\n<p>To answer your question:</p>\n\n<blockquote>\n  <p>Function names should be lowercase, with words separated by\n  underscores as necessary to improve readability.</p>\n</blockquote>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Before you jump to conclusions, yes, this is programming related. It covers a situation that comes under the heading of, \"There, but for the grace of God, go you or I.\" This is brand new territory for me so I'm asking for some serious help here.</p>\n\n<p>A young man, <a href=\"http://www.pressdemocrat.com/article/20100418/articles/100419536\" rel=\"noreferrer\">Honza Ripa</a>, in a nearby town did the classic Dumb Thing two weeks after graduating from High School -- he dove into shallow water in the Russian River and had a <a href=\"http://en.wikipedia.org/wiki/Spinal_cord_injury#Cervical_injuries\" rel=\"noreferrer\">C-4/C-5 break</a>, sometimes called a Swimming Pool break. In a matter of seconds he went from an exceptional golfer and wrestler to a quadriplegic. (Read the story ... all of us should have been so lucky as to have a girlfriend like Brianna.) That was 10 months ago and he has regained only tiny amounts of control of his right index finger and a couple of other hand/foot motions, none of them fine-grained.</p>\n\n<p>His total control of his computer (currently running Win7, but we can change that as needed) is via voice command. Honza's not dumb. He had a 3.7 GPA with AP math and physics.</p>\n\n<p><strong>The Problems:</strong></p>\n\n<ol>\n<li><p>Since all of his input is via voice command, he is concerned that the predominance of special characters in programming will require vast amount of verbose commands. Does anyone know of any <em>well done</em> voice input system specifically designed for programmers? I'm thinking about something that might be modal--e.g. you say \"Python input\" and it goes into a macro mode for doing class definitions, etc. Given all of the RSI in programmer-land there's got to be <em>something</em> out there. What OS(es) does it run on?</p></li>\n<li><p>I am planning on teaching him Python, which is my preferred language for programming and teaching. Are there any applications / whatevers that are written in Python and would be a particularly good match for engaging him mentally while supporting his disability? One of his expressed interests is in stock investing, but that not might be a good starting point for a brand-new programmer.</p></li>\n<li><p>There are a <em>lot</em> of environments (Flash, JavaScript, etc) that are not particularly friendly to people with accessibility challenges. I vaguely remember (but cannot find) a research project that basically created an overlay system on top of a screen environment and then allowed macro command construction on top of the screen image. If we can get/train this system, we may be able to remove many hurdles to using the net.</p></li>\n<li><p>I am particularly interested in finding open source Python-based robotics and robotic prostheses projects so that he can simultaneously learn advanced programming concepts while learning to solve some of his own immediate problems.</p></li>\n</ol>\n\n<p>I've done a ton of googling on this, but I <em>know</em> there are things I'm missing. I'm asking the SO community to step up to the plate here. I <em>know</em> this group has the answers, so let me hear them! <em>Overwhelm</em> me with the opportunities that any of us might have/need to still program after such a life-changing event.</p>\n\n<p><strong>Update:</strong> I just registered computingforquads.org and I'll be creating pages for all sorts of solutions to all sorts of problems. Thanks for you help so far and keep those answers coming!</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I have sports injuries, and I cannot type more than few characters without serious pain.</p>\n\n<p>Instead, I use emacs together with Dragon NaturallySpeaking.\nI have written macros and scripts to help it get by.  The system is not perfect, but it works.\nI program mostly in C++, but I also use python.</p>\n\n<p>If you want to, I will help you with that.\nI have to warn you, it takes few months to get used to speech to text software and train it.  moreover, I am not native English speaker, am sure that gets in the way</p>\n\n<p>Do not despair, there are solutions.</p>\n\n<p>here a link to emacs and Dragon files (unfortunately have not documented yet)</p>\n\n<p><a href=\"http://code.google.com/p/asadchev/source/browse/#svn/trunk/home/Dragon\" rel=\"noreferrer\">http://code.google.com/p/asadchev/source/browse/#svn/trunk/home/Dragon</a></p>\n\n<p><a href=\"http://code.google.com/p/asadchev/source/browse/#svn/trunk/emacs/elisp\" rel=\"noreferrer\">http://code.google.com/p/asadchev/source/browse/#svn/trunk/emacs/elisp</a></p>\n\n<p>also, if you need more info, my number is 515 230 9363 (United States, Iowa).\nI will be glad to help you if I can</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a class with two class methods (using the classmethod() function) for getting and setting what is essentially a static variable.  I tried to use the property() function with these, but it results in an error.  I was able to reproduce the error with the following in the interpreter:</p>\n\n<pre><code>class Foo(object):\n    _var = 5\n    @classmethod\n    def getvar(cls):\n        return cls._var\n    @classmethod\n    def setvar(cls, value):\n        cls._var = value\n    var = property(getvar, setvar)\n</code></pre>\n\n<p>I can demonstrate the class methods, but they don't work as properties:</p>\n\n<pre><code>&gt;&gt;&gt; f = Foo()\n&gt;&gt;&gt; f.getvar()\n5\n&gt;&gt;&gt; f.setvar(4)\n&gt;&gt;&gt; f.getvar()\n4\n&gt;&gt;&gt; f.var\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in ?\nTypeError: 'classmethod' object is not callable\n&gt;&gt;&gt; f.var=5\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in ?\nTypeError: 'classmethod' object is not callable\n</code></pre>\n\n<p>Is it possible to use the property() function with classmethod decorated functions?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Reading the <a href=\"http://www.python.org/download/releases/2.2/descrintro/#property\" rel=\"noreferrer\">Python 2.2 release</a> notes, I find the following.</p>\n\n<blockquote>\n  <p>The get method [of a property] won't be called when\n  the property is accessed as a class\n  attribute (C.x) instead of as an\n  instance attribute (C().x). If you\n  want to override the __get__ operation\n  for properties when used as a class\n  attribute, you can subclass property -\n  it is a new-style type itself - to\n  extend its __get__ method, or you can\n  define a descriptor type from scratch\n  by creating a new-style class that\n  defines __get__, __set__ and\n  __delete__ methods.</p>\n</blockquote>\n\n<p><strong>NOTE: The below method doesn't actually work for setters, only getters.</strong></p>\n\n<p>Therefore, I believe the prescribed solution is to create a ClassProperty as a subclass of property.</p>\n\n<pre><code>class ClassProperty(property):\n    def __get__(self, cls, owner):\n        return self.fget.__get__(None, owner)()\n\nclass foo(object):\n    _var=5\n    def getvar(cls):\n        return cls._var\n    getvar=classmethod(getvar)\n    def setvar(cls,value):\n        cls._var=value\n    setvar=classmethod(setvar)\n    var=ClassProperty(getvar,setvar)\n\nassert foo.getvar() == 5\nfoo.setvar(4)\nassert foo.getvar() == 4\nassert foo.var == 4\nfoo.var = 3\nassert foo.var == 3\n</code></pre>\n\n<p>However, the setters don't actually work:</p>\n\n<pre><code>foo.var = 4\nassert foo.var == foo._var # raises AssertionError\n</code></pre>\n\n<p><code>foo._var</code> is unchanged, you've simply overwritten the property with a new value.</p>\n\n<p>You can also use <code>ClassProperty</code> as a decorator:</p>\n\n<pre><code>class Foo(object):\n    _var = 5\n\n    @ClassProperty\n    @classmethod\n    def var(cls):\n        return cls._var\n\n    @var.setter\n    @classmethod\n    def var(cls, value):\n        cls._var = value\n\nassert foo.var == 5\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What is a global interpreter lock and why is it an issue?</p>\n\n<p>A lot of noise has been made around removing the GIL from Python, and I'd like to understand why that is so important. I have never written a compiler nor an interpreter myself, so don't be frugal with details, I'll probably need them to understand.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Python's GIL is intended to serialize access to interpreter internals from different threads. On multi-core systems, it means that multiple threads can't effectively make use of multiple cores. (If the GIL didn't lead to this problem, most people wouldn't care about the GIL - it's only being raised as an issue because of the increasing prevalence of multi-core systems.) If you want to understand it in detail, you can view <a href=\"https://www.youtube.com/watch?v=ph374fJqFPE\" rel=\"noreferrer\">this video</a> or look at <a href=\"http://www.dabeaz.com/python/GIL.pdf\" rel=\"noreferrer\">this set of slides</a>. It might be too much information, but then you did ask for details :-)</p>\n\n<p>Note that Python's GIL is only really an issue for CPython, the reference implementation. Jython and IronPython don't have a GIL. As a Python developer, you don't generally come across the GIL unless you're writing a C extension. C extension writers need to release the GIL when their extensions do blocking I/O, so that other threads in the Python process get a chance to run.</p>\n\n<p><strong>Update:</strong> Updated link to video to point to Youtube, as the earlier <code>blip.tv</code> link had rotted.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is there a convenient way to calculate percentiles for a sequence or single-dimensional numpy array?</p>\n\n<p>I am looking for something similar to Excel's percentile function.</p>\n\n<p>I looked in NumPy's statistics reference, and couldn't find this. All I could find is the median (50th percentile), but not something more specific.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You might be interested in the <a href=\"http://docs.scipy.org/doc/scipy/reference/stats.html\" rel=\"noreferrer\">SciPy Stats</a> package. It has <a href=\"http://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.scoreatpercentile.html#scipy.stats.scoreatpercentile\" rel=\"noreferrer\">the percentile function</a> you're after and many other statistical goodies.</p>\n\n<p><code>percentile()</code> <a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.percentile.html\" rel=\"noreferrer\">is available</a> in <code>numpy</code> too.</p>\n\n<pre><code>import numpy as np\na = np.array([1,2,3,4,5])\np = np.percentile(a, 50) # return 50th percentile, e.g median.\nprint p\n3.0\n</code></pre>\n\n<p><s><a href=\"http://projects.scipy.org/numpy/ticket/626\" rel=\"noreferrer\">This ticket</a> leads me to believe they won't be integrating <code>percentile()</code> into numpy anytime soon.</s></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm trying to call a function inside another function in python, but can't find the right syntax. What I want to do is something like this:</p>\n\n<pre><code>def wrapper(func, args):\n    func(args)\n\ndef func1(x):\n    print(x)\n\ndef func2(x, y, z):\n    return x+y+z\n\nwrapper(func1, [x])\nwrapper(func2, [x, y, z])\n</code></pre>\n\n<p>In this case first call will work, and second won't.\nWhat I want to modify is the wrapper function and not the called functions.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>To expand a little on the other answers:</p>\n\n<p>In the line:</p>\n\n<pre><code>def wrapper(func, *args):\n</code></pre>\n\n<p>The * next to <code>args</code> means \"take the rest of the parameters given and put them in a list called <code>args</code>\". </p>\n\n<p>In the line:</p>\n\n<pre><code>    func(*args)\n</code></pre>\n\n<p>The * next to <code>args</code> here means \"take this list called args and 'unwrap' it into the rest of the parameters.</p>\n\n<p>So you can do the following:</p>\n\n<pre><code>def wrapper1(func, *args): # with star\n    func(*args)\n\ndef wrapper2(func, args): # without star\n    func(*args)\n\ndef func2(x, y, z):\n    print x+y+z\n\nwrapper1(func2, 1, 2, 3)\nwrapper2(func2, [1, 2, 3])\n</code></pre>\n\n<p>In <code>wrapper2</code>, the list is passed explicitly, but in both wrappers <code>args</code> contains the list <code>[1,2,3]</code>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm working on a <strong>multi-tenanted</strong> application in which some users can define their own data fields (via the admin) to collect additional data in forms and report on the data.  The latter bit makes JSONField not a great option, so instead I have the following solution:</p>\n\n<pre><code>class CustomDataField(models.Model):\n    \"\"\"\n    Abstract specification for arbitrary data fields.\n    Not used for holding data itself, but metadata about the fields.\n    \"\"\"\n    site = models.ForeignKey(Site, default=settings.SITE_ID)\n    name = models.CharField(max_length=64)\n\n    class Meta:\n        abstract = True\n\nclass CustomDataValue(models.Model):\n    \"\"\"\n    Abstract specification for arbitrary data.\n    \"\"\"\n    value = models.CharField(max_length=1024)\n\n    class Meta:\n        abstract = True\n</code></pre>\n\n<p>Note how CustomDataField has a ForeignKey to Site - each Site will have a different set of custom data fields, but use the same database.\nThen the various concrete data fields can be defined as:</p>\n\n<pre><code>class UserCustomDataField(CustomDataField):\n    pass\n\nclass UserCustomDataValue(CustomDataValue):\n    custom_field = models.ForeignKey(UserCustomDataField)\n    user = models.ForeignKey(User, related_name='custom_data')\n\n    class Meta:\n        unique_together=(('user','custom_field'),)\n</code></pre>\n\n<p>This leads to the following use:</p>\n\n<pre><code>custom_field = UserCustomDataField.objects.create(name='zodiac', site=my_site) #probably created in the admin\nuser = User.objects.create(username='foo')\nuser_sign = UserCustomDataValue(custom_field=custom_field, user=user, data='Libra')\nuser.custom_data.add(user_sign) #actually, what does this even do?\n</code></pre>\n\n<p>But this feels very clunky, particularly with the need to manually create the related data and associate it with the concrete model.  Is there a better approach?  </p>\n\n<p>Options that have been pre-emptively discarded:</p>\n\n<ul>\n<li>Custom SQL to modify tables on-the-fly.  Partly because this won't scale and partly because it's too much of a hack.</li>\n<li>Schema-less solutions like NoSQL.  I have nothing against them, but they're still not a good fit.  Ultimately this data <strong>is</strong> typed, and the possibility exists of using a third-party reporting application.</li>\n<li>JSONField, as listed above, as it's not going to work well with queries.</li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong><em>As of today, there are four available approaches, two of them requiring a certain storage backend:</em></strong></p>\n\n<ol>\n<li><p><strong><a href=\"https://github.com/mvpdev/django-eav\" rel=\"noreferrer\">Django-eav</a></strong> (the original package is no longer mantained but has some <strong><a href=\"https://github.com/mvpdev/django-eav/network\" rel=\"noreferrer\">thriving forks</a></strong>) </p>\n\n<p>This solution is based on <a href=\"https://en.wikipedia.org/wiki/Entity-attribute-value_model\" rel=\"noreferrer\">Entity Attribute Value</a> data model, essentially, it uses several tables to store dynamic attributes of objects. Great parts about this solution is that it:</p>\n\n<ul>\n<li>uses several pure and simple Django models to represent dynamic fields, which makes it simple to understand and database-agnostic; </li>\n<li><p>allows you to effectively attach/detach dynamic attribute storage to Django model with simple commands like:</p>\n\n<pre><code>eav.unregister(Encounter)\neav.register(Patient)\n</code></pre></li>\n<li><p><strong><a href=\"https://github.com/mvpdev/django-eav/blob/master/eav/admin.py\" rel=\"noreferrer\">Nicely integrates with Django admin</a></strong>;</p></li>\n<li><p>At the same time being really powerful.</p></li>\n</ul>\n\n<p>Downsides:</p>\n\n<ul>\n<li>Not very efficient.  This is more of a criticism of the EAV pattern itself, which requires manually merging the data from a column format to a set of key-value pairs in the model.</li>\n<li>Harder to maintain.  Maintaining data integrity requires a multi-column unique key constraint, which may be inefficient on some databases.</li>\n<li>You will need to select <a href=\"https://github.com/mvpdev/django-eav/network\" rel=\"noreferrer\">one of the forks</a>, since the official package is no longer maintained and there is no clear leader.</li>\n</ul>\n\n<p>The usage is pretty straightforward:</p>\n\n<pre><code>import eav\nfrom app.models import Patient, Encounter\n\neav.register(Encounter)\neav.register(Patient)\nAttribute.objects.create(name='age', datatype=Attribute.TYPE_INT)\nAttribute.objects.create(name='height', datatype=Attribute.TYPE_FLOAT)\nAttribute.objects.create(name='weight', datatype=Attribute.TYPE_FLOAT)\nAttribute.objects.create(name='city', datatype=Attribute.TYPE_TEXT)\nAttribute.objects.create(name='country', datatype=Attribute.TYPE_TEXT)\n\nself.yes = EnumValue.objects.create(value='yes')\nself.no = EnumValue.objects.create(value='no')\nself.unkown = EnumValue.objects.create(value='unkown')\nynu = EnumGroup.objects.create(name='Yes / No / Unknown')\nynu.enums.add(self.yes)\nynu.enums.add(self.no)\nynu.enums.add(self.unkown)\n\nAttribute.objects.create(name='fever', datatype=Attribute.TYPE_ENUM,\\\n                                       enum_group=ynu)\n\n# When you register a model within EAV,\n# you can access all of EAV attributes:\n\nPatient.objects.create(name='Bob', eav__age=12,\n                           eav__fever=no, eav__city='New York',\n                           eav__country='USA')\n# You can filter queries based on their EAV fields:\n\nquery1 = Patient.objects.filter(Q(eav__city__contains='Y'))\nquery2 = Q(eav__city__contains='Y') |  Q(eav__fever=no)\n</code></pre></li>\n<li><p><strong>Hstore, JSON or JSONB fields in PostgreSQL</strong></p>\n\n<p>PostgreSQL supports several more complex data types.  Most are supported via third-party packages, but in recent years Django has adopted them into django.contrib.postgres.fields.</p>\n\n<p><strong>HStoreField</strong>:</p>\n\n<p><a href=\"https://github.com/jordanm/django-hstore\" rel=\"noreferrer\">Django-hstore</a> was originally a third-party package, but Django 1.8 added <strong><a href=\"https://docs.djangoproject.com/en/1.8/ref/contrib/postgres/fields/#hstorefield\" rel=\"noreferrer\">HStoreField</a></strong> as a built-in, along with several other PostgreSQL-supported field types.</p>\n\n<p>This approach is good in a sense that it lets you have the best of both worlds: dynamic fields and relational database. However, hstore is <a href=\"http://archives.postgresql.org/pgsql-performance/2011-05/msg00263.php\" rel=\"noreferrer\">not ideal performance-wise</a>, especially if you are going to end up storing thousands of items in one field.  It also only supports strings for values.</p>\n\n<pre><code>#app/models.py\nfrom django.contrib.postgres.fields import HStoreField\nclass Something(models.Model):\n    name = models.CharField(max_length=32)\n    data = models.HStoreField(db_index=True)\n</code></pre>\n\n<p>In Django's shell you can use it like this:       </p>\n\n<pre><code>&gt;&gt;&gt; instance = Something.objects.create(\n                 name='something',\n                 data={'a': '1', 'b': '2'}\n           )\n&gt;&gt;&gt; instance.data['a']\n'1'        \n&gt;&gt;&gt; empty = Something.objects.create(name='empty')\n&gt;&gt;&gt; empty.data\n{}\n&gt;&gt;&gt; empty.data['a'] = '1'\n&gt;&gt;&gt; empty.save()\n&gt;&gt;&gt; Something.objects.get(name='something').data['a']\n'1'\n</code></pre>\n\n<p>You can issue indexed queries against hstore fields:</p>\n\n<pre><code># equivalence\nSomething.objects.filter(data={'a': '1', 'b': '2'})\n\n# subset by key/value mapping\nSomething.objects.filter(data__a='1')\n\n# subset by list of keys\nSomething.objects.filter(data__has_keys=['a', 'b'])\n\n# subset by single key\nSomething.objects.filter(data__has_key='a')    \n</code></pre>\n\n<p><strong>JSONField</strong>:</p>\n\n<p>JSON/JSONB fields support any JSON-encodable data type, not just key/value pairs, but also tend to be faster and (for JSONB) more compact than Hstore.\nSeveral packages implement JSON/JSONB fields including <strong><a href=\"https://django-pgfields.readthedocs.org/en/latest/fields.html\" rel=\"noreferrer\">django-pgfields</a></strong>, but as of Django 1.9, <strong><a href=\"https://docs.djangoproject.com/en/1.9/ref/contrib/postgres/fields/#jsonfield\" rel=\"noreferrer\">JSONField</a></strong> is a built-in using JSONB for storage.\n<strong>JSONField</strong> is similar to HStoreField, and may perform better with large dictionaries.  It also supports types other than strings, such as integers, booleans and nested dictionaries.</p>\n\n<pre><code>#app/models.py\nfrom django.contrib.postgres.fields import JSONField\nclass Something(models.Model):\n    name = models.CharField(max_length=32)\n    data = JSONField(db_index=True)\n</code></pre>\n\n<p>Creating in the shell:</p>\n\n<pre><code>&gt;&gt;&gt; instance = Something.objects.create(\n                 name='something',\n                 data={'a': 1, 'b': 2, 'nested': {'c':3}}\n           )\n</code></pre>\n\n<p>Indexed queries are nearly identical to HStoreField, except nesting is possible.  Complex indexes may require manually creation (or a scripted migration).</p>\n\n<pre><code>&gt;&gt;&gt; Something.objects.filter(data__a=1)\n&gt;&gt;&gt; Something.objects.filter(data__nested__c=3)\n&gt;&gt;&gt; Something.objects.filter(data__has_key='a')\n</code></pre></li>\n<li><p><strong><a href=\"http://django-mongodb-engine.readthedocs.org/en/latest/\" rel=\"noreferrer\">Django MongoDB</a></strong></p>\n\n<p>Or other NoSQL Django adaptations -- with them you can have fully dynamic models.</p>\n\n<p>NoSQL Django libraries are great, but keep in mind that they are not 100% the Django-compatible, for example, to migrate to <a href=\"http://www.allbuttonspressed.com/projects/django-nonrel\" rel=\"noreferrer\">Django-nonrel</a> from standard Django you will need to replace ManyToMany with <a href=\"https://stackoverflow.com/questions/3877246/django-nonrel-on-google-app-engine-implications-of-using-listfield-for-manytom\">ListField</a> among other things.     </p>\n\n<p>Checkout this Django MongoDB example:</p>\n\n<pre><code>from djangotoolbox.fields import DictField\n\nclass Image(models.Model):\n    exif = DictField()\n...\n\n&gt;&gt;&gt; image = Image.objects.create(exif=get_exif_data(...))\n&gt;&gt;&gt; image.exif\n{u'camera_model' : 'Spamcams 4242', 'exposure_time' : 0.3, ...}\n</code></pre>\n\n<p>You can even create <a href=\"http://django-mongodb.org/topics/embedded-models.html\" rel=\"noreferrer\">embedded lists</a> of any Django models:</p>\n\n<pre><code>class Container(models.Model):\n    stuff = ListField(EmbeddedModelField())\n\nclass FooModel(models.Model):\n    foo = models.IntegerField()\n\nclass BarModel(models.Model):\n    bar = models.CharField()\n...\n\n&gt;&gt;&gt; Container.objects.create(\n    stuff=[FooModel(foo=42), BarModel(bar='spam')]\n)\n</code></pre></li>\n<li><p><strong><a href=\"https://github.com/charettes/django-mutant\" rel=\"noreferrer\">Django-mutant: Dynamic models based on syncdb and South-hooks</a></strong></p>\n\n<p><a href=\"https://github.com/charettes/django-mutant\" rel=\"noreferrer\">Django-mutant</a> implements fully dynamic Foreign Key and m2m fields. And is inspired by incredible but somewhat hackish solutions by <a href=\"http://dynamic-models.readthedocs.org/en/latest/index.html\" rel=\"noreferrer\">Will Hardy</a> and Michael Hall.</p>\n\n<p>All of these are based on Django South hooks, which, according to <a href=\"http://blip.tv/djangocon-europe-2011/wednesday-1415-will-hardy-5311186\" rel=\"noreferrer\">Will Hardy's talk at DjangoCon 2011</a> <strong>(watch it!)</strong> are nevertheless robust and tested in production (<a href=\"http://dynamic-models.readthedocs.org/en/latest/\" rel=\"noreferrer\">relevant source code</a>).</p>\n\n<p>First to <a href=\"https://bitbucket.org/mhall119/dynamo/overview\" rel=\"noreferrer\">implement this</a> was <a href=\"http://mhall119.com/2011/02/fun-with-django-meta-classes-and-dynamic-models/\" rel=\"noreferrer\">Michael Hall</a>.</p>\n\n<p>Yes, this is magic, with these approaches you can achieve <strong>fully dynamic Django apps, models and fields</strong> with any relational database backend. But at what cost? Will stability of application suffer upon heavy use? These are the questions to be considered. You need to be sure to maintain a proper <a href=\"https://stackoverflow.com/questions/1123200/how-to-lock-a-critical-section-in-django\">lock</a> in order to allow simultaneous database altering requests.</p>\n\n<p>If you are using Michael Halls lib, your code will look like this:</p>\n\n<pre><code>from dynamo import models\n\ntest_app, created = models.DynamicApp.objects.get_or_create(\n                      name='dynamo'\n                    )\ntest, created = models.DynamicModel.objects.get_or_create(\n                  name='Test',\n                  verbose_name='Test Model',\n                  app=test_app\n               )\nfoo, created = models.DynamicModelField.objects.get_or_create(\n                  name = 'foo',\n                  verbose_name = 'Foo Field',\n                  model = test,\n                  field_type = 'dynamiccharfield',\n                  null = True,\n                  blank = True,\n                  unique = False,\n                  help_text = 'Test field for Foo',\n               )\nbar, created = models.DynamicModelField.objects.get_or_create(\n                  name = 'bar',\n                  verbose_name = 'Bar Field',\n                  model = test,\n                  field_type = 'dynamicintegerfield',\n                  null = True,\n                  blank = True,\n                  unique = False,\n                  help_text = 'Test field for Bar',\n               )\n</code></pre></li>\n</ol>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/826948/syntax-error-on-print-with-python-3\" dir=\"ltr\">Syntax error on print with Python 3 [duplicate]</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    10 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>I tried running a python script:</p>\n\n<pre><code>print \"Hello, World!\" \n</code></pre>\n\n<p>And I get this error:</p>\n\n<pre><code>  File \"hello.py\", line 1\n    print \"Hello, World!\"\n                        ^\nSyntaxError: invalid syntax\n</code></pre>\n\n<p>What is going on?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>print(\"Hello, World!\")\n</code></pre>\n\n<p>You are probably using Python 3.0, where <code>print</code> is <a href=\"http://docs.python.org/release/3.0.1/whatsnew/3.0.html#print-is-a-function\" rel=\"noreferrer\">now a function</a> (hence the parenthesis) instead of a statement.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I want to programmatically edit python source code. Basically I want to read a <code>.py</code> file, generate the <a href=\"http://en.wikipedia.org/wiki/Abstract_syntax_tree\" rel=\"noreferrer\">AST</a>, and then write back the modified python source code (i.e. another <code>.py</code> file).</p>\n\n<p>There are ways to parse/compile python source code using standard python modules, such as <a href=\"http://docs.python.org/library/ast.html\" rel=\"noreferrer\"><code>ast</code></a> or <a href=\"http://docs.python.org/library/compiler.html\" rel=\"noreferrer\"><code>compiler</code></a>.  However, I don't think any of them support ways to modify the source code (e.g. delete this function declaration) and then write back the modifying python source code.</p>\n\n<p>UPDATE: The reason I want to do this is I'd like to write a <a href=\"http://en.wikipedia.org/wiki/Mutation_testing\" rel=\"noreferrer\">Mutation testing library</a> for python, mostly by deleting statements / expressions, rerunning tests and seeing what breaks.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"http://pythoscope.org/\" rel=\"noreferrer\">Pythoscope</a> does this to the test cases it automatically generates as does the <a href=\"http://docs.python.org/library/2to3.html\" rel=\"noreferrer\">2to3</a> tool for python 2.6 (it converts python 2.x source into python 3.x source). </p>\n\n<p>Both these tools uses the <a href=\"http://svn.python.org/projects/python/trunk/Lib/lib2to3/\" rel=\"noreferrer\">lib2to3</a> library which is a implementation of the python parser/compiler machinery that can preserve comments in source when it's round tripped from source -&gt; AST -&gt; source.</p>\n\n<p>The <a href=\"https://github.com/python-rope/rope\" rel=\"noreferrer\">rope project</a> may meet your needs if you want to do more refactoring like transforms.</p>\n\n<p>The <a href=\"http://docs.python.org/library/ast.html\" rel=\"noreferrer\">ast</a> module is your other option, and <a href=\"http://svn.python.org/view/python/trunk/Demo/parser/unparse.py?view=markup\" rel=\"noreferrer\">there's an older example of how to \"unparse\" syntax trees back into code</a> (using the parser module). But the ast module is more useful when doing an AST transform on code that is then transformed into a code object.</p>\n\n<p>The <a href=\"https://redbaron.readthedocs.org/en/latest/\" rel=\"noreferrer\">redbaron</a> project also may be a good fit (ht Xavier Combelle)</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is there a simple way to iterate over column name and value pairs?</p>\n\n<p>My version of sqlalchemy is 0.5.6</p>\n\n<p>Here is the sample code where I tried using dict(row), but it throws exception , TypeError: 'User' object is not iterable</p>\n\n<pre><code>import sqlalchemy\nfrom sqlalchemy import *\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nprint \"sqlalchemy version:\",sqlalchemy.__version__ \n\nengine = create_engine('sqlite:///:memory:', echo=False)\nmetadata = MetaData()\nusers_table = Table('users', metadata,\n     Column('id', Integer, primary_key=True),\n     Column('name', String),\n)\nmetadata.create_all(engine) \n\nclass User(declarative_base()):\n    __tablename__ = 'users'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n\n    def __init__(self, name):\n        self.name = name\n\nSession = sessionmaker(bind=engine)\nsession = Session()\n\nuser1 = User(\"anurag\")\nsession.add(user1)\nsession.commit()\n\n# uncommenting next line throws exception 'TypeError: 'User' object is not iterable'\n#print dict(user1)\n# this one also throws 'TypeError: 'User' object is not iterable'\nfor u in session.query(User).all():\n    print dict(u)\n</code></pre>\n\n<p>Running this code on my system outputs:</p>\n\n<pre><code>sqlalchemy version: 0.5.6\nTraceback (most recent call last):\n  File \"untitled-1.py\", line 37, in &lt;module&gt;\n    print dict(u)\nTypeError: 'User' object is not iterable\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You may access the internal <code>__dict__</code> of a SQLAlchemy object, like the following::</p>\n\n<pre><code>for u in session.query(User).all():\n    print u.__dict__\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am iterating over a list and I want to print out the index of the item if it meets a certain condition. How would I do this?</p>\n\n<p>Example:  </p>\n\n<pre><code>testlist = [1,2,3,5,3,1,2,1,6]\nfor item in testlist:\n    if item == 1:\n        print position\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Hmmm.  There was an answer with a list comprehension here, but it's disappeared.</p>\n\n<p>Here:</p>\n\n<pre><code> [i for i,x in enumerate(testlist) if x == 1]\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>&gt;&gt;&gt; testlist\n[1, 2, 3, 5, 3, 1, 2, 1, 6]\n&gt;&gt;&gt; [i for i,x in enumerate(testlist) if x == 1]\n[0, 5, 7]\n</code></pre>\n\n<p>Update:</p>\n\n<p>Okay, you want a generator expression, we'll have a generator expression.  Here's the list comprehension again, in a for loop:</p>\n\n<pre><code>&gt;&gt;&gt; for i in [i for i,x in enumerate(testlist) if x == 1]:\n...     print i\n... \n0\n5\n7\n</code></pre>\n\n<p>Now we'll construct a generator...</p>\n\n<pre><code>&gt;&gt;&gt; (i for i,x in enumerate(testlist) if x == 1)\n&lt;generator object at 0x6b508&gt;\n&gt;&gt;&gt; for i in (i for i,x in enumerate(testlist) if x == 1):\n...     print i\n... \n0\n5\n7\n</code></pre>\n\n<p>and niftily enough, we can assign that to a variable, and use it from there...</p>\n\n<pre><code>&gt;&gt;&gt; gen = (i for i,x in enumerate(testlist) if x == 1)\n&gt;&gt;&gt; for i in gen: print i\n... \n0\n5\n7\n</code></pre>\n\n<p>And to think I used to write FORTRAN.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What's the difference between file and open in Python?  When should I use which one?  (Say I'm in 2.5)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You should always use <code>open()</code>.</p>\n\n<p>As the <a href=\"http://docs.python.org/2/library/functions.html#file\" rel=\"noreferrer\" title=\"BuiltinFuncs Doc\">documentation</a> states:</p>\n\n<blockquote>\n  <p>When opening a file, it's preferable\n  to use open() instead of invoking this\n  constructor directly. file is more\n  suited to type testing (for example,\n  writing \"isinstance(f, file)\").</p>\n</blockquote>\n\n<p>Also, <code>file()</code> <a href=\"http://docs.python.org/release/3.0/whatsnew/3.0.html#builtins\" rel=\"noreferrer\">has been removed</a> since Python 3.0.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How does one control the mouse cursor in Python, i.e. move it to certain position and click, under Windows?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Tested on WinXP, Python 2.6 after installing <a href=\"http://sourceforge.net/projects/pywin32/files/\" rel=\"noreferrer\">pywin32</a> (pywin32-214.win32-py2.6.exe in my case):</p>\n\n<pre><code>import win32api, win32con\ndef click(x,y):\n    win32api.SetCursorPos((x,y))\n    win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN,x,y,0,0)\n    win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP,x,y,0,0)\nclick(10,10)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm working on a simple tool that transfers files to a hard-coded location with the password also hard-coded.  I'm a python novice, but thanks to ftplib, it was easy:</p>\n\n<pre><code>import ftplib\n\ninfo= ('someuser', 'password')    #hard-coded\n\ndef putfile(file, site, dir, user=(), verbose=True):\n    \"\"\"\n    upload a file by ftp to a site/directory\n    login hard-coded, binary transfer\n    \"\"\"\n    if verbose: print 'Uploading', file\n    local = open(file, 'rb')    \n    remote = ftplib.FTP(site)   \n    remote.login(*user)         \n    remote.cwd(dir)\n    remote.storbinary('STOR ' + file, local, 1024)\n    remote.quit()\n    local.close()\n    if verbose: print 'Upload done.'\n\nif __name__ == '__main__':\n    site = 'somewhere.com'            #hard-coded\n    dir = './uploads/'                #hard-coded\n    import sys, getpass\n    putfile(sys.argv[1], site, dir, user=info)\n</code></pre>\n\n<p>The problem is that I can't find any library that supports sFTP.  What's the normal way to do something like this securely?  </p>\n\n<p>Edit:  Thanks to the answers here, I've gotten it working with Paramiko and this was the syntax.</p>\n\n<pre><code>import paramiko\n\nhost = \"THEHOST.com\"                    #hard-coded\nport = 22\ntransport = paramiko.Transport((host, port))\n\npassword = \"THEPASSWORD\"                #hard-coded\nusername = \"THEUSERNAME\"                #hard-coded\ntransport.connect(username = username, password = password)\n\nsftp = paramiko.SFTPClient.from_transport(transport)\n\nimport sys\npath = './THETARGETDIRECTORY/' + sys.argv[1]    #hard-coded\nlocalpath = sys.argv[1]\nsftp.put(localpath, path)\n\nsftp.close()\ntransport.close()\nprint 'Upload done.'\n</code></pre>\n\n<p>Thanks again!</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"http://www.lag.net/paramiko/\" rel=\"noreferrer\">Paramiko</a> supports SFTP. I've used it, and I've used Twisted. Both have their place, but you might find it easier to start with Paramiko.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In class we are doing sorting algorithms and, although I understand them fine when talking about them and writing pseudocode, I am having problems writing actual code for them.</p>\n\n<p>This is my attempt in Python:</p>\n\n<pre><code>mylist = [12, 5, 13, 8, 9, 65]\n\ndef bubble(badList):\n    length = len(badList) - 1\n    unsorted = True\n\n    while unsorted:\n        for element in range(0,length):\n            unsorted = False\n            if badList[element] &gt; badList[element + 1]:\n                hold = badList[element + 1]\n                badList[element + 1] = badList[element]\n                badList[element] = hold\n                print badList\n            else:\n                unsorted = True\n\nprint bubble(mylist)\n</code></pre>\n\n<p>Now, this (as far as I can tell) sorts correctly, but once it finishes it just loops indefinitely.</p>\n\n<p>How can this code be fixed so the function finishes properly and correctly sorts a list of any (reasonable) size?</p>\n\n<p>P.S. I know I should not really have prints in a function and I should have a return, but I just have not done that yet as my code does not really work yet.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>To explain why your script isn't working right now, I'll rename the variable <code>unsorted</code> to <code>sorted</code>.</p>\n\n<p>At first, your list isn't yet sorted. Of course, we set <code>sorted</code> to <code>False</code>.</p>\n\n<p>As soon as we start the <code>while</code> loop, we assume that the list is already sorted. The idea is this: as soon as we find two elements that are not in the right order, we set <code>sorted</code> back to <code>False</code>. <code>sorted</code> will remain <code>True</code> <em>only if there were no elements in the wrong order</em>.</p>\n\n<pre><code>sorted = False  # We haven't started sorting yet\n\nwhile not sorted:\n    sorted = True  # Assume the list is now sorted\n    for element in range(0, length):\n        if badList[element] &gt; badList[element + 1]:\n            sorted = False  # We found two elements in the wrong order\n            hold = badList[element + 1]\n            badList[element + 1] = badList[element]\n            badList[element] = hold\n    # We went through the whole list. At this point, if there were no elements\n    # in the wrong order, sorted is still True. Otherwise, it's false, and the\n    # while loop executes again.\n</code></pre>\n\n<p>There are also minor little issues that would help the code be more efficient or readable.</p>\n\n<ul>\n<li><p>In the <code>for</code> loop, you use the variable <code>element</code>. Technically, <code>element</code> is not an element; it's a number representing a list index. Also, it's quite long. In these cases, just use a temporary variable name, like <code>i</code> for \"index\".</p>\n\n<pre><code>for i in range(0, length):\n</code></pre></li>\n<li><p>The <code>range</code> command can also take just one argument (named <code>stop</code>). In that case, you get a list of all the integers from 0 to that argument.</p>\n\n<pre><code>for i in range(length):\n</code></pre></li>\n<li><p>The <a href=\"http://www.python.org/dev/peps/pep-0008/\" rel=\"noreferrer\" title=\"Style Guide for Python Code\">Python Style Guide</a> recommends that variables be named in lowercase with underscores. This is a very minor nitpick for a little script like this; it's more to get you accustomed to what Python code most often resembles.</p>\n\n<pre><code>def bubble(bad_list):\n</code></pre></li>\n<li><p>To swap the values of two variables, write them as a tuple assignment. The right hand side gets evaluated as a tuple (say, <code>(badList[i+1], badList[i])</code> is <code>(3, 5)</code>) and then gets assigned to the two variables on the left hand side (<code>(badList[i], badList[i+1])</code>).</p>\n\n<pre><code>bad_list[i], bad_list[i+1] = bad_list[i+1], bad_list[i]\n</code></pre></li>\n</ul>\n\n<p>Put it all together, and you get this:</p>\n\n<pre><code>my_list = [12, 5, 13, 8, 9, 65]\n\ndef bubble(bad_list):\n    length = len(bad_list) - 1\n    sorted = False\n\n    while not sorted:\n        sorted = True\n        for i in range(length):\n            if bad_list[i] &gt; bad_list[i+1]:\n                sorted = False\n                bad_list[i], bad_list[i+1] = bad_list[i+1], bad_list[i]\n\nbubble(my_list)\nprint my_list\n</code></pre>\n\n<p>(I removed your print statement too, by the way.)</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I would like to know how to convert a string containing digits to a double.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>&gt;&gt;&gt; x = \"2342.34\"\n&gt;&gt;&gt; float(x)\n2342.3400000000001\n</code></pre>\n\n<p>There you go.  Use float (which is almost always a C double).</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a data frame from which I remove some rows. As a result, I get a data frame in which index is something like that: <code>[1,5,6,10,11]</code> and I would like to reset it to <code>[0,1,2,3,4]</code>. How can I do it?</p>\n\n<p><strong>ADDED</strong></p>\n\n<p>The following seems to work:</p>\n\n<pre><code>df = df.reset_index()\ndel df['index']\n</code></pre>\n\n<p>The following does not work:</p>\n\n<pre><code>df = df.reindex()\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.reset_index.html\" rel=\"noreferrer\"><code>reset_index()</code></a> is what you're looking for. If you don't want it saved as a column, then do:</p>\n\n<pre><code>df = df.reset_index(drop=True)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm basically looking for a python version of <a href=\"https://stackoverflow.com/questions/545703/combination-of-listlistint\">Combination of <code>List&lt;List&lt;int&gt;&gt;</code></a></p>\n\n<p>Given a list of lists, I need a new list that gives all the possible combinations of items between the lists.</p>\n\n<pre><code>[[1,2,3],[4,5,6],[7,8,9,10]] -&gt; [[1,4,7],[1,4,8],...,[3,6,10]]\n</code></pre>\n\n<p>The number of lists is unknown, so I need something that works for all cases. Bonus points for elegance!</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>you need <a href=\"https://docs.python.org/2/library/itertools.html#itertools.product\" rel=\"noreferrer\"><code>itertools.product</code></a>:</p>\n\n<pre><code>&gt;&gt;&gt; import itertools\n&gt;&gt;&gt; a = [[1,2,3],[4,5,6],[7,8,9,10]]\n&gt;&gt;&gt; list(itertools.product(*a))\n[(1, 4, 7), (1, 4, 8), (1, 4, 9), (1, 4, 10), (1, 5, 7), (1, 5, 8), (1, 5, 9), (1, 5, 10), (1, 6, 7), (1, 6, 8), (1, 6, 9), (1, 6, 10), (2, 4, 7), (2, 4, 8), (2, 4, 9), (2, 4, 10), (2, 5, 7), (2, 5, 8), (2, 5, 9), (2, 5, 10), (2, 6, 7), (2, 6, 8), (2, 6, 9), (2, 6, 10), (3, 4, 7), (3, 4, 8), (3, 4, 9), (3, 4, 10), (3, 5, 7), (3, 5, 8), (3, 5, 9), (3, 5, 10), (3, 6, 7), (3, 6, 8), (3, 6, 9), (3, 6, 10)]\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>If I am creating my own class in Python, what function should I define so as to allow the use of the 'in' operator, e.g.</p>\n\n<pre><code>class MyClass(object):\n    ...\n\nm = MyClass()\n\nif 54 in m:\n    ...\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"http://docs.python.org/reference/datamodel.html#object.__contains__\" rel=\"noreferrer\"><code>MyClass.__contains__(self, item)</code></a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Why in this millennium should Python <a href=\"http://www.python.org/dev/peps/pep-0008/\" rel=\"noreferrer\">PEP-8</a> specify a maximum line length of 79 characters?</p>\n\n<p>Pretty much every code editor under the sun can handle longer lines.  What to do with wrapping should be the choice of the content consumer, not the responsibility of the content creator.</p>\n\n<p>Are there any (legitimately) good reasons for adhering to 79 characters in this age?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Much of the value of PEP-8 is to stop people arguing about inconsequential formatting rules, and get on with writing good, consistently formatted code. Sure, no one really thinks that 79 is optimal, but there's no obvious gain in changing it to 99 or 119 or whatever your preferred line length is. I think the choices are these: follow the rule and find a worthwhile cause to battle for, or provide some data that demonstrates how readability and productivity vary with line length. The latter would be extremely interesting, and would have a good chance of changing people's minds I think.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How can I order by descending my query set in django by date?</p>\n\n<pre><code>Reserved.objects.all().filter(client=client_id).order_by('check_in')\n</code></pre>\n\n<p>I just want to filter from descending all the Reserved by check_in date.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>Reserved.objects.filter(client=client_id).order_by('-check_in')\n</code></pre>\n\n<p>Notice the <code>-</code> before <code>check_in</code>.</p>\n\n<p><a href=\"https://docs.djangoproject.com/en/dev/ref/models/querysets/#order-by\" rel=\"noreferrer\" title=\"Documentation\">Django Documentation</a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>While I was investigating a problem I had with lexical closures in Javascript code, I came along this problem in Python:</p>\n\n<pre><code>flist = []\n\nfor i in xrange(3):\n    def func(x): return x * i\n    flist.append(func)\n\nfor f in flist:\n    print f(2)\n</code></pre>\n\n<p>Note that this example mindfully avoids <code>lambda</code>. It prints \"4 4 4\", which is surprising. I'd expect \"0 2 4\". </p>\n\n<p>This equivalent Perl code does it right:</p>\n\n<pre><code>my @flist = ();\n\nforeach my $i (0 .. 2)\n{\n    push(@flist, sub {$i * $_[0]});\n}\n\nforeach my $f (@flist)\n{\n    print $f-&gt;(2), \"\\n\";\n}\n</code></pre>\n\n<p>\"0 2 4\" is printed.</p>\n\n<p>Can you please explain the difference ?</p>\n\n<hr>\n\n<p>Update: </p>\n\n<p>The problem <strong>is not</strong> with <code>i</code> being global. This displays the same behavior:</p>\n\n<pre><code>flist = []\n\ndef outer():\n    for i in xrange(3):\n        def inner(x): return x * i\n        flist.append(inner)\n\nouter()\n#~ print i   # commented because it causes an error\n\nfor f in flist:\n    print f(2)\n</code></pre>\n\n<p>As the commented line shows, <code>i</code> is unknown at that point. Still, it prints \"4 4 4\".</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Python is actually behaving as defined. <b>Three separate functions</b> are created, but  they each have the <b>closure of the environment they're defined in</b> - in this case, the global environment (or the outer function's environment if the loop is placed inside another function). This is exactly the problem, though - in this environment, <b>i is mutated</b>, and the closures all <b>refer to the same i</b>.</p>\n\n<p>Here is the best solution I can come up with - create a function creater and invoke <i>that</i> instead. This will force <b>different environments</b> for each of the functions created, with a <b>different i</b> in each one.</p>\n\n<pre><code>flist = []\n\nfor i in xrange(3):\n    def funcC(j):\n        def func(x): return x * j\n        return func\n    flist.append(funcC(i))\n\nfor f in flist:\n    print f(2)\n</code></pre>\n\n<p>This is what happens when you mix side effects and functional programming. </p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In Python, how do you find the number of digits in an integer?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you want the length of an integer as in the number of digits in the integer, you can always convert it to string like <code>str(133)</code> and find its length like <code>len(str(123))</code>. </p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/2176424/hiding-axis-text-in-matplotlib-plots\" dir=\"ltr\">Hiding axis text in matplotlib plots</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    5 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>I have a semilogx plot and I would like to remove the xticks. I tried:</p>\n\n<pre><code>plt.gca().set_xticks([])\nplt.xticks([])\nax.set_xticks([])\n</code></pre>\n\n<p>The grid disappears (ok), but small ticks (at the place of the main ticks) remain. How to remove them?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The <a href=\"http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.tick_params\" rel=\"noreferrer\"><code>tick_params</code></a> method is very useful for stuff like this.  This code turns off major and minor ticks and removes the labels from the x-axis.</p>\n\n<pre><code>from matplotlib import pyplot as plt\nplt.plot(range(10))\nplt.tick_params(\n    axis='x',          # changes apply to the x-axis\n    which='both',      # both major and minor ticks are affected\n    bottom='off',      # ticks along the bottom edge are off\n    top='off',         # ticks along the top edge are off\n    labelbottom='off') # labels along the bottom edge are off\nplt.show()\nplt.savefig('plot')\nplt.clf()\n</code></pre>\n\n<p><img src=\"https://i.stack.imgur.com/0emBv.png\" alt=\"enter image description here\"></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<pre><code>&gt;&gt;&gt; d = {'a':'b'}\n&gt;&gt;&gt; d['a']\n'b'\n&gt;&gt;&gt; d['c']\nKeyError: 'c'\n&gt;&gt;&gt; d.get('c', 'fail')\n'fail'\n\n&gt;&gt;&gt; l = [1]\n&gt;&gt;&gt; l[10]\nIndexError: list index out of range\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Ultimately it probably doesn't have a safe <code>.get</code> method because a <code>dict</code> is an associative collection (values are associated with names) where it is inefficient to check if a key is present (and return its value) without throwing an exception, while it is super trivial to avoid exceptions accessing list elements (as the <code>len</code> method is very fast).  The <code>.get</code> method allows you to query the value associated with a name, not directly access the 37th item in the dictionary (which would be more like what you're asking of your list).</p>\n\n<p>Of course, you can easily implement this yourself:</p>\n\n<pre><code>def safe_list_get (l, idx, default):\n  try:\n    return l[idx]\n  except IndexError:\n    return default\n</code></pre>\n\n<p>You could even monkeypatch it onto the <code>__builtins__.list</code> constructor in <code>__main__</code>, but that would be a less pervasive change since most code doesn't use it.  If you just wanted to use this with lists created by your own code you could simply subclass <code>list</code> and add the <code>get</code> method.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I've been using python for years, but I have little experience with python web programming. I'd like to create a very simple web service that exposes some functionality from an existing python script for use within my company. It will likely return the results in csv. What's the quickest way to get something up? If it affects your suggestion, I will likely be adding more functionality to this, down the road.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Have a look at <a href=\"http://werkzeug.pocoo.org/\" rel=\"noreferrer\">werkzeug</a>. Werkzeug started as a simple collection of various utilities for WSGI applications and has become one of the most advanced WSGI utility modules. It includes a powerful debugger, full featured request and response objects, HTTP utilities to handle entity tags, cache control headers, HTTP dates, cookie handling, file uploads, a powerful URL routing system and a bunch of community contributed addon modules.</p>\n\n<p>It includes lots of cool tools to work with http and has the advantage that you can use it with wsgi in different environments (cgi, fcgi, apache/mod_wsgi or with a plain simple python server for debugging). </p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have two simple one-dimensional arrays in <a href=\"http://en.wikipedia.org/wiki/NumPy\" rel=\"noreferrer\">NumPy</a>. I should be able to concatenate them using <a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.concatenate.html\" rel=\"noreferrer\">numpy.concatenate</a>. But I get this error for the code below:</p>\n\n<blockquote>\n  <p>TypeError: only length-1 arrays can be converted to Python scalars</p>\n</blockquote>\n\n<h3>Code</h3>\n\n<pre><code>import numpy\na = numpy.array([1, 2, 3])\nb = numpy.array([5, 6])\nnumpy.concatenate(a, b)\n</code></pre>\n\n<p>Why?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The line should be:</p>\n\n<pre><code>numpy.concatenate([a,b])\n</code></pre>\n\n<p>The arrays you want to concatenate need to passed in as a sequence, not as separate arguments.</p>\n\n<p>From the <a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.concatenate.html\" rel=\"noreferrer\">NumPy documentation</a>:</p>\n\n<blockquote>\n  <p><code>numpy.concatenate((a1, a2, ...), axis=0)</code></p>\n  \n  <p>Join a sequence of arrays together.</p>\n</blockquote>\n\n<p>It was trying to interpret your <code>b</code> as the axis parameter, which is why it complained it couldn't convert it into a scalar.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm looking for a way to make a virtualenv which will contain just some libraries (which i chose) of the base python installation.</p>\n\n<p>To be more concrete, I'm trying to import my matplotlib to virtualenv during the creation of virtualenv. It can't be installed efficiently with pip or easy_install since it misses some fortran compiler libs. The way i did it till now was to manually copy from</p>\n\n<pre><code>/usr/lib/python2.7/dist-packages/ to virtualenv_name/lib/python2.7/dist-packages/\n</code></pre>\n\n<p>however this prevents the manully imported links to be registerd by yolk (which prints all currently available libs in virtualenv).</p>\n\n<p>So, is there a way to do a selective variant of the</p>\n\n<pre><code>virtualenv --system-site-packages\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Create the environment with <code>virtualenv --system-site-packages</code> . Then, activate the virtualenv and when you install things use <code>pip install --ignore-installed</code> or <code>pip install -I</code> . That way pip will install what you've requested locally even though a system-wide version exists. Your python interpreter will look first in the virtualenv's package directory, so those packages should shadow the global ones.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Like in:</p>\n\n<pre><code>u'Hello'\n</code></pre>\n\n<p>My guess is that it indicates \"Unicode\", is it correct?</p>\n\n<p>If so, since when is it available?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You're right, see <em><a href=\"http://docs.python.org/2/tutorial/introduction.html#unicode-strings\" rel=\"nofollow noreferrer\">3.1.3. Unicode Strings</a></em>.</p>\n\n<p>It's been the syntax since Python 2.0.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How do I make a <code>for</code> loop or a list comprehension so that every iteration gives me two elements?</p>\n\n<pre><code>l = [1,2,3,4,5,6]\n\nfor i,k in ???:\n    print str(i), '+', str(k), '=', str(i+k)\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>1+2=3\n3+4=7\n5+6=11\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You need a <strong><code>pairwise()</code></strong> (or <strong><code>grouped()</code></strong>) implementation.</p>\n\n<p>For Python 2:</p>\n\n<pre><code>from itertools import izip\n\ndef pairwise(iterable):\n    \"s -&gt; (s0, s1), (s2, s3), (s4, s5), ...\"\n    a = iter(iterable)\n    return izip(a, a)\n\nfor x, y in pairwise(l):\n   print \"%d + %d = %d\" % (x, y, x + y)\n</code></pre>\n\n<p>Or, more generally:</p>\n\n<pre><code>from itertools import izip\n\ndef grouped(iterable, n):\n    \"s -&gt; (s0,s1,s2,...sn-1), (sn,sn+1,sn+2,...s2n-1), (s2n,s2n+1,s2n+2,...s3n-1), ...\"\n    return izip(*[iter(iterable)]*n)\n\nfor x, y in grouped(l, 2):\n   print \"%d + %d = %d\" % (x, y, x + y)\n</code></pre>\n\n<p>In Python 3, you can replace <a href=\"https://docs.python.org/2/library/itertools.html#itertools.izip\" rel=\"noreferrer\"><code>izip</code></a> with the built-in <a href=\"https://docs.python.org/3/library/functions.html#zip\" rel=\"noreferrer\"><code>zip()</code></a> function, and drop the <code>import</code>.</p>\n\n<p>All credit to <a href=\"https://stackoverflow.com/users/355230/martineau\">martineau</a> for <a href=\"https://stackoverflow.com/questions/4356329/creating-a-python-dictionary-from-a-line-of-text/4356415#4356415\">his answer</a> to <a href=\"https://stackoverflow.com/q/4356329/78845\">my question</a>, I have found this to be very efficient as it only iterates once over the list and does not create any unnecessary lists in the process. </p>\n\n<p><strong>N.B</strong>: This should not be confused with the <a href=\"https://docs.python.org/3/library/itertools.html#itertools-recipes\" rel=\"noreferrer\"><strong><code>pairwise</code></strong> recipe</a> in Python's own <a href=\"https://docs.python.org/3/library/itertools.html\" rel=\"noreferrer\"><strong><code>itertools</code></strong> documentation</a>, which yields <code>s -&gt; (s0, s1), (s1, s2), (s2, s3), ...</code>, as pointed out by <a href=\"https://stackoverflow.com/users/566644/lazyr\">@lazyr</a> in the comments.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Let's say I have a dictionary in which the keys map to integers like:</p>\n\n<pre><code>d = {'key1': 1,'key2': 14,'key3': 47}\n</code></pre>\n\n<p>Is there a syntactically minimalistic way to return the sum of the values in <code>d</code>\u2014i.e. <code>62</code> in this case?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>As you'd expect:</p>\n\n<pre><code>sum(d.values())\n</code></pre>\n\n<p>In Python&lt;3, you may want to use <code>itervalues</code> instead (which does not build a temporary list). </p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'd like to get from this:</p>\n\n<pre><code>keys = [1,2,3]\n</code></pre>\n\n<p>to this:</p>\n\n<pre><code>{1: None, 2: None, 3: None}\n</code></pre>\n\n<p>Is there a pythonic way of doing it?</p>\n\n<p>This is an ugly way to do it:</p>\n\n<pre><code>&gt;&gt;&gt; keys = [1,2,3]\n&gt;&gt;&gt; dict([(1,2)])\n{1: 2}\n&gt;&gt;&gt; dict(zip(keys, [None]*len(keys)))\n{1: None, 2: None, 3: None}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>dict.fromkeys([1, 2, 3, 4])</code></p>\n\n<p>This is actually a classmethod, so it works for dict-subclasses (like <code>collections.defaultdict</code>) as well. The optional second argument specifies the value to use for the keys (defaults to <code>None</code>.)</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<pre><code>a='aaaa'\nprint isinstance(a, basestring)#true\nprint isinstance(a, str)#true\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In Python versions prior to 3.0 there are two kinds of strings \"plain strings\" and \"unicode strings\". Plain strings (<code>str</code>) cannot represent characters outside of the Latin alphabet (ignoring details of code pages for simplicity). Unicode strings (<code>unicode</code>) can represent characters from any alphabet including some fictional ones like Klingon.</p>\n\n<p>So why have two kinds of strings, would it not be better to just have Unicode since that would cover all the cases? Well it is better to have only Unicode but Python was created before Unicode was the preferred method for representing strings. It takes time to transition the string type in a language with many users, in Python 3.0 it is finally the case that all strings are Unicode.</p>\n\n<p>The inheritance hierarchy of Python strings pre-3.0 is:</p>\n\n<pre><code>          object\n             |\n             |\n         basestring\n            / \\\n           /   \\\n         str  unicode\n</code></pre>\n\n<p>'basestring' introduced in Python 2.3 can be thought of as a step in the direction of string unification as it can be used to check whether an object is an instance of <code>str</code> or <code>unicode</code> </p>\n\n<pre><code>&gt;&gt;&gt; string1 = \"I am a plain string\"\n&gt;&gt;&gt; string2 = u\"I am a unicode string\"\n&gt;&gt;&gt; isinstance(string1, str)\nTrue\n&gt;&gt;&gt; isinstance(string2, str)\nFalse\n&gt;&gt;&gt; isinstance(string1, unicode)\nFalse\n&gt;&gt;&gt; isinstance(string2, unicode)\nTrue\n&gt;&gt;&gt; isinstance(string1, basestring)\nTrue\n&gt;&gt;&gt; isinstance(string2, basestring)\nTrue\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm running into a weird error trying to install Django on my computer.</p>\n\n<p>This is the sequence that I've typed into my command line:</p>\n\n<pre><code>C:\\Python34&gt;python get-pip.py\nRequirement already up-to-date: pip in c:\\python34\\lib\\site-packages\nCleaning up...\n\nC:\\Python34&gt;pip install Django\n'pip' is not recognized as an internal or external command,\noperable program or batch file.\n\nC:\\Python34&gt;lib\\site-packages\\pip install Django\n'lib\\site-packages\\pip' is not recognized as an internal or external command,\noperable program or batch file. \n</code></pre>\n\n<p>What could be causing this?</p>\n\n<p>EDIT <strong>___________________</strong></p>\n\n<p>As requested this is what I get when I type in echo %PATH%</p>\n\n<pre><code>C:\\Python34&gt;echo %PATH%\nC:\\Program Files\\ImageMagick-6.8.8-Q16;C:\\Program Files (x86)\\Intel\\iCLS Client\\\n;C:\\Program Files\\Intel\\iCLS Client\\;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\S\nystem32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\\nWindows Live\\Shared;C:\\Program Files (x86)\\Intel\\OpenCL SDK\\2.0\\bin\\x86;C:\\Progr\nam Files (x86)\\Intel\\OpenCL SDK\\2.0\\bin\\x64;C:\\Program Files\\Intel\\Intel(R) Mana\ngement Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine C\nomponents\\IPT;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\n\\DAL;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\P\nrogram Files (x86)\\nodejs\\;C:\\Program Files (x86)\\Heroku\\bin;C:\\Program Files (x\n86)\\git\\cmd;C:\\RailsInstaller\\Ruby2.0.0\\bin;C:\\RailsInstaller\\Git\\cmd;C:\\RailsIn\nstaller\\Ruby1.9.3\\bin;C:\\Users\\Javi\\AppData\\Roaming\\npm\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>You need to add the path of your pip installation to your PATH system variable</strong>. By default, pip is installed to <code>C:\\Python34\\Scripts\\pip</code> (pip now comes bundled with new versions of python), so the path \"C:\\Python34\\Scripts\" needs to be added to your PATH variable.</p>\n\n<p>To check if it is already in your PATH variable, type <code>echo %PATH%</code> at the CMD prompt</p>\n\n<p><strong>To add the path of your pip installation to your PATH variable</strong>, you can use the Control Panel or the <code>setx</code> command. For example:</p>\n\n<pre><code>setx PATH \"%PATH%;C:\\Python34\\Scripts\"\n</code></pre>\n\n<hr>\n\n<p><strong>Note</strong>:\nAccording to the <a href=\"https://technet.microsoft.com/en-us/library/cc755104%28v=ws.11%29.aspx\">official documentation</a>, \"[v]ariables set with setx variables are available in future command windows only, not in the current command window\". In particular, <em>you will need to start a new cmd.exe instance</em> after entering the above command in order to utilize the new environment variable. </p>\n\n<p>Thanks to Scott Bartell for pointing this out.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am calling different processes with the <code>subprocess</code> module. However, I have a question.</p>\n\n<p>In the following codes:</p>\n\n<pre><code>callProcess = subprocess.Popen(['ls', '-l'], shell=True)\n</code></pre>\n\n<p>and </p>\n\n<pre><code>callProcess = subprocess.Popen(['ls', '-l']) # without shell\n</code></pre>\n\n<p>Both work. After reading the docs, I came to know that <code>shell=True</code> means executing the code through the shell. So that means in absence, the process is directly started. </p>\n\n<p>So what should I prefer for my case - I need to run a process and get its output. What benefit do I have from calling it from within the shell or outside of it.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The benefit of not calling via the shell is that you are not invoking a 'mystery program.'  On POSIX, the environment variable <code>SHELL</code> controls which binary is invoked as the \"shell.\"  On Windows, there is no bourne shell descendent, only cmd.exe.</p>\n\n<p>So invoking the shell invokes a program of the user's choosing and is platform-dependent.  Generally speaking, avoid invocations via the shell.</p>\n\n<p>Invoking via the shell does allow you to expand environment variables and file globs according to the shell's usual mechanism.  On POSIX systems, the shell expands file globs to a list of files.  On Windows, a file glob (e.g., \"*.*\") is not expanded by the shell, anyway (but environment variables on a command line <em>are</em> expanded by cmd.exe).</p>\n\n<p>If you think you want environment variable expansions and file globs, research the <code>ILS</code> attacks of 1992-ish on network services which performed subprogram invocations via the shell.  Examples include the various <code>sendmail</code> backdoors involving <code>ILS</code>.</p>\n\n<p>In summary, use <code>shell=False</code>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is there a javascript equivalent of Python's zip function?  That is, given two arrays of equal lengths create an array of pairs.</p>\n\n<p>For instance, if I have three arrays that look like this:</p>\n\n<pre><code>var array1 = [1, 2, 3];\nvar array2 = ['a','b','c'];\nvar array3 = [4, 5, 6];\n</code></pre>\n\n<p>The output array should be:</p>\n\n<pre><code>var output array:[[1,'a',4], [2,'b',5], [3,'c',6]]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>2016 update:</strong></p>\n\n<p>Here's a snazzier Ecmascript 6 version:</p>\n\n<pre><code>zip= rows=&gt;rows[0].map((_,c)=&gt;rows.map(row=&gt;row[c]))\n</code></pre>\n\n<p>Illustration:</p>\n\n<pre><code>&gt; zip([['row0col0', 'row0col1', 'row0col2'],\n       ['row1col0', 'row1col1', 'row1col2']]);\n[[\"row0col0\",\"row1col0\"],\n [\"row0col1\",\"row1col1\"],\n [\"row0col2\",\"row1col2\"]]\n</code></pre>\n\n<p>(and FizzyTea points out that ES6 has variadic argument syntax, so the following will act like python, but see below for disclaimer... this will not be its own inverse so <code>zip(zip(x))</code> will not equal <code>x</code>:)</p>\n\n<pre><code>&gt; zip = (...rows) =&gt; [...rows[0]].map((_,c) =&gt; rows.map(row =&gt; row[c]))\n&gt; zip( ['row0col0', 'row0col1', 'row0col2'] ,\n       ['row1col0', 'row1col1', 'row1col2'] );\n             // note zip(row0,row1), not zip(matrix)\nsame answer as above\n</code></pre>\n\n<p>(Do note that the <code>...</code> syntax may have performance issues at this time, and possibly in the future, so if you use the second answer with variadic arguments, you may want to perf test it.)</p>\n\n<hr>\n\n<p>Here's a oneliner:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function zip(arrays) {\n    return arrays[0].map(function(_,i){\n        return arrays.map(function(array){return array[i]})\n    });\n}\n\n// &gt; zip([[1,2],[11,22],[111,222]])\n// [[1,11,111],[2,22,222]]]\n\n// If you believe the following is a valid return value:\n//   &gt; zip([])\n//   []\n// then you can special-case it, or just do\n//  return arrays.length==0 ? [] : arrays[0].map(...)\n</code></pre>\n\n<hr>\n\n<p>The above assumes that the arrays are of equal size, as they should be. It also assumes you pass in a single list of lists argument, unlike Python's version where the argument list is variadic. <strong>If you want all of these</strong> \"features\", see below. It takes just about 2 extra lines of code.</p>\n\n<p>The following will mimic Python's <code>zip</code> behavior on edge cases where the arrays are not of equal size, silently pretending the longer parts of arrays don't exist:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function zip() {\n    var args = [].slice.call(arguments);\n    var shortest = args.length==0 ? [] : args.reduce(function(a,b){\n        return a.length&lt;b.length ? a : b\n    });\n\n    return shortest.map(function(_,i){\n        return args.map(function(array){return array[i]})\n    });\n}\n\n// &gt; zip([1,2],[11,22],[111,222,333])\n// [[1,11,111],[2,22,222]]]\n\n// &gt; zip()\n// []\n</code></pre>\n\n<p>This will mimic Python's <code>itertools.zip_longest</code> behavior, inserting <code>undefined</code> where arrays are not defined:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function zip() {\n    var args = [].slice.call(arguments);\n    var longest = args.reduce(function(a,b){\n        return a.length&gt;b.length ? a : b\n    }, []);\n\n    return longest.map(function(_,i){\n        return args.map(function(array){return array[i]})\n    });\n}\n\n// &gt; zip([1,2],[11,22],[111,222,333])\n// [[1,11,111],[2,22,222],[null,null,333]]\n\n// &gt; zip()\n// []\n</code></pre>\n\n<p>If you use these last two version (variadic aka. multiple-argument versions), then zip is no longer its own inverse. To mimic the <code>zip(*[...])</code> idiom from Python, you will need to do <code>zip.apply(this, [...])</code> when you want to invert the zip function or if you want to similarly have a variable number of lists as input.</p>\n\n<hr>\n\n<p><strong>addendum</strong>:</p>\n\n<p>To make this handle any iterable (e.g. in Python you can use <code>zip</code> on strings, ranges, map objects, etc.), you could define the following:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function iterView(iterable) {\n    // returns an array equivalent to the iterable\n}\n</code></pre>\n\n<p>However if you write <code>zip</code> in the following <a href=\"https://stackoverflow.com/a/13735425/711085\">way</a>, even that won't be necessary:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function zip(arrays) {\n    return Array.apply(null,Array(arrays[0].length)).map(function(_,i){\n        return arrays.map(function(array){return array[i]})\n    });\n}\n</code></pre>\n\n<p>Demo:</p>\n\n<pre><code>&gt; JSON.stringify( zip(['abcde',[1,2,3,4,5]]) )\n[[\"a\",1],[\"b\",2],[\"c\",3],[\"d\",4],[\"e\",5]]\n</code></pre>\n\n<p>(Or you could use a <code>range(...)</code> Python-style function if you've written one already. Eventually you will be able to use ECMAScript array comprehensions or generators.)</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Here's what I would like to do:</p>\n\n<p>I'm taking pictures with a webcam at regular intervals.  Sort of like a time lapse thing.  However, if nothing has really changed, that is, the picture pretty much <em>looks</em> the same, I don't want to store the latest snapshot.</p>\n\n<p>I imagine there's some way of quantifying the difference, and I would have to empirically determine a threshold.  </p>\n\n<p>I'm looking for simplicity rather than perfection.\nI'm using python.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<h2>General idea</h2>\n\n<p>Option 1: Load both images as arrays (<code>scipy.misc.imread</code>) and calculate an element-wise (pixel-by-pixel) difference. Calculate the norm of the difference.</p>\n\n<p>Option 2: Load both images. Calculate some feature vector for each of them (like a histogram). Calculate distance between feature vectors rather than images.</p>\n\n<p>However, there are some decisions to make first.</p>\n\n<h2>Questions</h2>\n\n<p>You should answer these questions first:</p>\n\n<ul>\n<li><p>Are images of the same shape and dimension?</p>\n\n<p>If not, you may need to resize or crop them. PIL library will help to do it in Python.</p>\n\n<p>If they are taken with the same settings and the same device, they are probably the same.</p></li>\n<li><p>Are images well-aligned?</p>\n\n<p>If not, you may want to run cross-correlation first, to find the best alignment first. SciPy has functions to do it.</p>\n\n<p>If the camera and the scene are still, the images are likely to be well-aligned.</p></li>\n<li><p>Is exposure of the images always the same? (Is lightness/contrast the same?)</p>\n\n<p>If not, you may want <a href=\"http://en.wikipedia.org/wiki/Normalization_(image_processing)\" rel=\"noreferrer\">to normalize</a> images.</p>\n\n<p>But be careful, in some situations this may do more wrong than good. For example, a single bright pixel on a dark background will make the normalized image very different.</p></li>\n<li><p>Is color information important?</p>\n\n<p>If you want to notice color changes, you will have a vector of color values per point, rather than a scalar value as in gray-scale image. You need more attention when writing such code.</p></li>\n<li><p>Are there distinct edges in the image? Are they likely to move?</p>\n\n<p>If yes, you can apply edge detection algorithm first (e.g. calculate gradient with Sobel or Prewitt transform, apply some threshold), then compare edges on the first image to edges on the second.</p></li>\n<li><p>Is there noise in the image?</p>\n\n<p>All sensors pollute the image with some amount of noise. Low-cost sensors have more noise. You may wish to apply some noise reduction before you compare images. Blur is the most simple (but not the best) approach here.</p></li>\n<li><p>What kind of changes do you want to notice?</p>\n\n<p>This may affect the choice of norm to use for the difference between images.</p>\n\n<p>Consider using Manhattan norm (the sum of the absolute values) or zero norm (the number of elements not equal to zero) to measure how much the image has changed. The former will tell you how much the image is off, the latter will tell only how many pixels differ.</p></li>\n</ul>\n\n<h2>Example</h2>\n\n<p>I assume your images are well-aligned, the same size and shape, possibly with different exposure. For simplicity, I convert them to grayscale even if they are color (RGB) images.</p>\n\n<p>You will need these imports:</p>\n\n<pre><code>import sys\n\nfrom scipy.misc import imread\nfrom scipy.linalg import norm\nfrom scipy import sum, average\n</code></pre>\n\n<p>Main function, read two images, convert to grayscale, compare and print results:</p>\n\n<pre><code>def main():\n    file1, file2 = sys.argv[1:1+2]\n    # read images as 2D arrays (convert to grayscale for simplicity)\n    img1 = to_grayscale(imread(file1).astype(float))\n    img2 = to_grayscale(imread(file2).astype(float))\n    # compare\n    n_m, n_0 = compare_images(img1, img2)\n    print \"Manhattan norm:\", n_m, \"/ per pixel:\", n_m/img1.size\n    print \"Zero norm:\", n_0, \"/ per pixel:\", n_0*1.0/img1.size\n</code></pre>\n\n<p>How to compare. <code>img1</code> and <code>img2</code> are 2D SciPy arrays here:</p>\n\n<pre><code>def compare_images(img1, img2):\n    # normalize to compensate for exposure difference, this may be unnecessary\n    # consider disabling it\n    img1 = normalize(img1)\n    img2 = normalize(img2)\n    # calculate the difference and its norms\n    diff = img1 - img2  # elementwise for scipy arrays\n    m_norm = sum(abs(diff))  # Manhattan norm\n    z_norm = norm(diff.ravel(), 0)  # Zero norm\n    return (m_norm, z_norm)\n</code></pre>\n\n<p>If the file is a color image, <code>imread</code> returns a 3D array, average RGB channels (the last array axis) to obtain intensity. No need to do it for grayscale images (e.g. <code>.pgm</code>):</p>\n\n<pre><code>def to_grayscale(arr):\n    \"If arr is a color image (3D array), convert it to grayscale (2D array).\"\n    if len(arr.shape) == 3:\n        return average(arr, -1)  # average over the last axis (color channels)\n    else:\n        return arr\n</code></pre>\n\n<p>Normalization is trivial, you may choose to normalize to [0,1] instead of [0,255]. <code>arr</code> is a SciPy array here, so all operations are element-wise:</p>\n\n<pre><code>def normalize(arr):\n    rng = arr.max()-arr.min()\n    amin = arr.min()\n    return (arr-amin)*255/rng\n</code></pre>\n\n<p>Run the <code>main</code> function:</p>\n\n<pre><code>if __name__ == \"__main__\":\n    main()\n</code></pre>\n\n<p>Now you can put this all in a script and run against two images. If we compare image to itself, there is no difference:</p>\n\n<pre><code>$ python compare.py one.jpg one.jpg\nManhattan norm: 0.0 / per pixel: 0.0\nZero norm: 0 / per pixel: 0.0\n</code></pre>\n\n<p>If we blur the image and compare to the original, there is some difference:</p>\n\n<pre><code>$ python compare.py one.jpg one-blurred.jpg \nManhattan norm: 92605183.67 / per pixel: 13.4210411116\nZero norm: 6900000 / per pixel: 1.0\n</code></pre>\n\n<p>P.S. Entire <a href=\"http://gist.github.com/626356\" rel=\"noreferrer\">compare.py</a> script.</p>\n\n<h2>Update: relevant techniques</h2>\n\n<p>As the question is about a video sequence, where frames are likely to be almost the same, and you look for something unusual, I'd like to mention some alternative approaches which may be relevant:</p>\n\n<ul>\n<li>background subtraction and segmentation (to detect foreground objects)</li>\n<li>sparse optical flow (to detect motion)</li>\n<li>comparing histograms or some other statistics instead of images</li>\n</ul>\n\n<p>I strongly recommend taking a look at  \u201cLearning OpenCV\u201d book, Chapters 9 (Image parts and segmentation) and 10 (Tracking and motion). The former teaches to use Background subtraction method, the latter gives some info on optical flow methods. All methods are implemented in OpenCV library. If you use Python, I suggest to use OpenCV \u2265 2.3, and its <code>cv2</code> Python module.</p>\n\n<p>The most simple version of the background subtraction:</p>\n\n<ul>\n<li>learn the average value \u03bc and standard deviation \u03c3 for every pixel of the background</li>\n<li>compare current pixel values to the range of (\u03bc-2\u03c3,\u03bc+2\u03c3) or (\u03bc-\u03c3,\u03bc+\u03c3)</li>\n</ul>\n\n<p>More advanced versions make take into account time series for every pixel and handle non-static scenes (like moving trees or grass).</p>\n\n<p>The idea of optical flow is to take two or more frames, and assign velocity vector to every pixel (dense optical flow) or to some of them (sparse optical flow). To estimate sparse optical flow, you may use <a href=\"http://en.wikipedia.org/wiki/Lucas%E2%80%93Kanade_method\" rel=\"noreferrer\">Lucas-Kanade method</a> (it is also implemented in OpenCV). Obviously, if there is a lot of flow (high average over max values of the velocity field), then something is moving in the frame, and subsequent images are more different.</p>\n\n<p>Comparing histograms may help to detect sudden changes between consecutive frames. This approach was used in <a href=\"http://www.sciencedirect.com/science/article/pii/S0967066110000808\" rel=\"noreferrer\">Courbon et al, 2010</a>:</p>\n\n<blockquote>\n  <p><em>Similarity of consecutive frames.</em> The distance between two consecutive frames is measured. If it is too high, it means that the second frame is corrupted and thus the image is eliminated. The <a href=\"https://en.wikipedia.org/wiki/Kullback%E2%80%93Leibler_divergence\" rel=\"noreferrer\">Kullback\u2013Leibler distance</a>, or mutual entropy, on the histograms of the two frames:</p>\n  \n  <p><img src=\"https://i.imgur.com/hdeh8ni.gif\" alt=\"$$ d(p,q) = \\sum_i p(i) \\log (p(i)/q(i)) $$\"></p>\n  \n  <p>where <em>p</em> and <em>q</em> are the histograms of the frames is used. The threshold is fixed on 0.2.</p>\n</blockquote>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Looking into Queue.py in Python 2.6, I found this construct that I found a bit strange:</p>\n\n<pre><code>def full(self):\n    \"\"\"Return True if the queue is full, False otherwise\n    (not reliable!).\"\"\"\n    self.mutex.acquire()\n    n = 0 &lt; self.maxsize == self._qsize()\n    self.mutex.release()\n    return n\n</code></pre>\n\n<p>If <code>maxsize</code> is 0 the queue is never full.</p>\n\n<p>My question is how does it work for this case? How <code>0 &lt; 0 == 0</code> is considered False?</p>\n\n<pre><code>&gt;&gt;&gt; 0 &lt; 0 == 0\nFalse\n&gt;&gt;&gt; (0) &lt; (0 == 0)\nTrue\n&gt;&gt;&gt; (0 &lt; 0) == 0\nTrue\n&gt;&gt;&gt; 0 &lt; (0 == 0)\nTrue\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I believe Python has special case handling for sequences of relational operators to make range comparisons easy to express. It's much nicer to be able to say <code>0 &lt; x &lt;= 5</code> than to say <code>(0 &lt; x) and (x &lt;= 5)</code>.</p>\n\n<p>These are called <a href=\"https://docs.python.org/2/reference/expressions.html#not-in\" rel=\"noreferrer\">chained comparisons</a>. And that's a link to the documentation for them.</p>\n\n<p>With the other cases you talk about, the parenthesis force one relational operator to be applied before the other, and so they are no longer chained comparisons. And since <code>True</code> and <code>False</code> have values as integers you get the answers you do out of the parenthesized versions.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Django (1.5) is workin' fine for me, but when I fire up the Python interpreter (Python 3) to check some things, I get the weirdest error when I try importing - <code>from django.contrib.auth.models import User</code> - </p>\n\n<pre><code>Traceback (most recent call last):\n  File \"/usr/local/lib/python3.2/dist-packages/django/conf/__init__.py\", line 36, in _setup\n    settings_module = os.environ[ENVIRONMENT_VARIABLE]\n  File \"/usr/lib/python3.2/os.py\", line 450, in __getitem__\n    value = self._data[self.encodekey(key)]\nKeyError: b'DJANGO_SETTINGS_MODULE'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"/usr/local/lib/python3.2/dist-packages/django/contrib/auth/models.py\", line 8, in &lt;module&gt;\n    from django.db import models\n  File \"/usr/local/lib/python3.2/dist-packages/django/db/__init__.py\", line 11, in &lt;module&gt;\n    if settings.DATABASES and DEFAULT_DB_ALIAS not in settings.DATABASES:\n  File \"/usr/local/lib/python3.2/dist-packages/django/conf/__init__.py\", line 52, in __getattr__\n    self._setup(name)\n  File \"/usr/local/lib/python3.2/dist-packages/django/conf/__init__.py\", line 45, in _setup\n    % (desc, ENVIRONMENT_VARIABLE))\n\ndjango.core.exceptions.ImproperlyConfigured: Requested setting DATABASES, \n  but settings are not configured. You must either define the environment \n  variable DJANGO_SETTINGS_MODULE or call settings.configure() \n  before accessing settings.\n</code></pre>\n\n<p>How could it be improperly configured, when it works fine outside the Python interpreter? In my Django settings, the <code>DATABASES</code> settings are:</p>\n\n<pre><code>DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql_psycopg2', # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.\n        'NAME': 'django_db', # Or path to database file if using sqlite3.\n        # The following settings are not used with sqlite3:\n        'USER': 'zamphatta',\n        'PASSWORD': 'mypassword91',\n        'HOST': '', # Empty for localhost through domain sockets or '127.0.0.1' for localhost through TCP.\n        'PORT': '', # Set to empty string for default.\n    }\n}\n</code></pre>\n\n<p>...how is this improperly configured?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can't just fire up Python and check things, Django doesn't know what project you want to work on. You have to do one of these things:</p>\n\n<ul>\n<li>Use <code>python manage.py shell</code></li>\n<li>Use <code>django-admin.py shell --settings=mysite.settings</code> (or whatever settings module you use)</li>\n<li>Set <code>DJANGO_SETTINGS_MODULE</code> environment variable in your OS to <code>mysite.settings</code></li>\n<li><p>(This is removed in Django 1.6) Use <code>setup_environ</code> in the python interpreter:</p>\n\n<pre><code>from django.core.management import setup_environ\nfrom mysite import settings\n\nsetup_environ(settings)\n</code></pre></li>\n</ul>\n\n<p>Naturally, the first way is the easiest.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Function Annotations: <a href=\"http://www.python.org/dev/peps/pep-3107/\" rel=\"noreferrer\">PEP-3107</a></p>\n\n<p>I ran across a snippet of code demonstrating Python3's function annotations.  The concept is simple but I can't think of why these were implemented in Python3 or any good uses for them.  Perhaps SO can enlighten me?</p>\n\n<p>How it works:</p>\n\n<pre><code>def foo(a: 'x', b: 5 + 6, c: list) -&gt; max(2, 9):\n    ... function body ...\n</code></pre>\n\n<p>Everything following the colon after an argument is an 'annotation', and the information following the <code>-&gt;</code> is an annotation for the function's return value.  </p>\n\n<p>foo.func_annotations would return a dictionary:</p>\n\n<pre><code>{'a': 'x',\n 'b': 11,\n 'c': list,\n 'return': 9}\n</code></pre>\n\n<p>What's the significance of having this available?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I think this is actually great.</p>\n\n<p>Coming from an academic background, I can tell you that annotations have proved themselves invaluable for enabling smart static analyzers for languages like Java. For instance, you could define semantics like state restrictions, threads that are allowed to access, architecture limitations, etc., and there are quite a few tools that can then read these and process them to provide assurances beyond what you get from the compilers. You could even write things that check preconditions/postconditions. </p>\n\n<p>I feel something like this is especially needed in Python because of its weaker typing, but there were really no constructs that made this straightforward and part of the official syntax. </p>\n\n<p>There are other uses for annotations beyond assurance. I can see how I could apply my Java-based tools to Python. For instance, I have a tool that lets you assign special warnings to methods, and gives you indications when you call them that you should read their documentation (E.g., imagine you have a method that must not be invoked with a negative value, but it's not intuitive from the name). With annotations, I could technicall write something like this for Python. Similarly, a tool that organizes methods in a large class based on tags can be written if there is an official syntax.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have two Series <code>s1</code> and <code>s2</code> with the same (non-consecutive) indices. How do I combine <code>s1</code> and <code>s2</code> to being two columns in a DataFrame and keep one of the indices as a third column?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I think <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.tools.merge.concat.html\"><code>concat</code></a> is a nice way to do this. If they are present it uses the name attributes of the Series as the columns (otherwise it simply numbers them):</p>\n\n<pre><code>In [1]: s1 = pd.Series([1, 2], index=['A', 'B'], name='s1')\n\nIn [2]: s2 = pd.Series([3, 4], index=['A', 'B'], name='s2')\n\nIn [3]: pd.concat([s1, s2], axis=1)\nOut[3]:\n   s1  s2\nA   1   3\nB   2   4\n\nIn [4]: pd.concat([s1, s2], axis=1).reset_index()\nOut[4]:\n  index  s1  s2\n0     A   1   3\n1     B   2   4\n</code></pre>\n\n<p><em>Note: This extends to more than 2 Series.</em></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I've created an object like this:</p>\n\n<pre><code>company1.name = 'banana' \ncompany1.value = 40\n</code></pre>\n\n<p>I would like to save this object. How can I do that?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You could use the <code>pickle</code> module in the standard library.\nHere's an elementary application of it to your example:</p>\n\n<pre><code>import pickle\n\nclass Company(object):\n    def __init__(self, name, value):\n        self.name = name\n        self.value = value\n\nwith open('company_data.pkl', 'wb') as output:\n    company1 = Company('banana', 40)\n    pickle.dump(company1, output, pickle.HIGHEST_PROTOCOL)\n\n    company2 = Company('spam', 42)\n    pickle.dump(company2, output, pickle.HIGHEST_PROTOCOL)\n\ndel company1\ndel company2\n\nwith open('company_data.pkl', 'rb') as input:\n    company1 = pickle.load(input)\n    print(company1.name)  # -&gt; banana\n    print(company1.value)  # -&gt; 40\n\n    company2 = pickle.load(input)\n    print(company2.name) # -&gt; spam\n    print(company2.value)  # -&gt; 42\n</code></pre>\n\n<p>You could also use a simple utility like the following which opens a file and writes a single object to it:</p>\n\n<pre><code>def save_object(obj, filename):\n    with open(filename, 'wb') as output:\n        pickle.dump(obj, output, pickle.HIGHEST_PROTOCOL)\n\n# sample usage\nsave_object(company1, 'company1.pkl')\n</code></pre>\n\n<h2><em>Update:</em></h2>\n\n<p>Since this is such a popular answer, I'd like touch on a few slightly advanced usage topics.</p>\n\n<h3><code>cPickle</code> vs <code>pickle</code></h3>\n\n<p>It's almost always preferable to actually use the <a href=\"http://docs.python.org/2/library/pickle.html#module-cPickle\" rel=\"noreferrer\"><code>cPickle</code></a> module rather than <code>pickle</code> because the former is written in C and is much faster. There are some subtle differences between them, but in most situations they're equivalent and the C version will provide greatly superior performance. Switching to it couldn't be easier, just change the <code>import</code> statement to this:</p>\n\n<pre><code>import cPickle as pickle\n</code></pre>\n\n<p>In Python 3, <code>cPickle</code> was renamed <code>_pickle</code>, but doing this is no longer necessary since the <code>pickle</code> module now does it automatically\u2014see <a href=\"https://stackoverflow.com/questions/19191859/what-difference-between-pickle-and-pickle-in-python-3\"><em>What difference between pickle and _pickle in python 3?</em></a>.</p>\n\n<h3>Data stream formats (protocols)</h3>\n\n<p><code>pickle</code> can read and write files in several different, Python-specific, formats, called <em>protocols</em>. \"Protocol version 0\" is ASCII and therefore \"human-readable\". Versions &gt; 1 are binary and the highest one available depends on what version of Python is being used. The default also depends on Python version. In Python 2 the default was Protocol version <code>0</code>, but in Python 3.6, it's Protocol version <code>3</code>. In Python 3.x the module had a <code>pickle.DEFAULT_PROTOCOL</code> added to it, but that doesn't exist in Python 2.</p>\n\n<p>Fortunately there's shorthand for writing <code>pickle.HIGHEST_PROTOCOL</code> in every call (assuming that's what you want, and you usually do)\u2014just use the literal number <code>-1</code>.\nSo, instead of writing:</p>\n\n<pre><code>pickle.dump(obj, output, pickle.HIGHEST_PROTOCOL)\n</code></pre>\n\n<p>You can just write:</p>\n\n<pre><code>pickle.dump(obj, output, -1)\n</code></pre>\n\n<p>Either way, you'd only have specify the protocol once if you created a <code>Pickler</code> object for use in multiple pickle operations:</p>\n\n<pre><code>pickler = pickle.Pickler(output, -1)\npickler.dump(obj1)\npickler.dump(obj2)\n   etc...\n</code></pre>\n\n<h3>Multiple Objects</h3>\n\n<p>While a pickle file <em>can</em> contain any number of pickled objects, as shown in the above samples, when there's an unknown number of them, it's often easier to store them all in some sort of variably-sized container, like a <code>list</code>, <code>tuple</code>, or <code>dict</code> and write them all to the file in a single call:</p>\n\n<pre><code>tech_companies = [\n    Company('Apple', 114.18), Company('Google', 908.60), Company('Microsoft', 69.18)\n]\nsave_object(tech_companies, 'tech_companies.pkl')\n</code></pre>\n\n<p>and restore the list and everything in it later with:</p>\n\n<pre><code>with open('tech_companies.pkl', 'rb') as input:\n    tech_companies = pickle.load(input)\n</code></pre>\n\n<p>The major advantage is you don't need to know how many object instances are saved in order to load them back later (although doing so without that information <em>is</em> possible, it requires some slightly specialized code). See the answers to the related question <a href=\"https://stackoverflow.com/questions/20716812/saving-and-loading-multiple-objects-in-pickle-file\"><em>Saving and loading multiple objects in pickle file?</em></a> for details on how.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am looking for the best way (fast and elegant) to get a random boolean in python (flip a coin).</p>\n\n<p>For the moment I am using <code>random.randint(0, 1)</code> or <code>random.getrandbits(1)</code>.</p>\n\n<p>Are there better choices that I am not aware of?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Adam's answer is quite fast, but I found that <code>random.getrandbits(1)</code> to be quite a lot faster. If you really want a boolean instead of a long then</p>\n\n<pre><code>bool(random.getrandbits(1))\n</code></pre>\n\n<p>is still about twice as fast as <code>random.choice([True, False])</code></p>\n\n<p>If utmost speed isn't to priority then <code>random.choice</code> definitely reads better</p>\n\n<pre><code>$ python -m timeit -s \"import random\" \"random.choice([True, False])\"\n1000000 loops, best of 3: 0.904 usec per loop\n$ python -m timeit -s \"import random\" \"random.choice((True, False))\" \n1000000 loops, best of 3: 0.846 usec per loop\n$ python -m timeit -s \"import random\" \"random.getrandbits(1)\"\n1000000 loops, best of 3: 0.286 usec per loop\n$ python -m timeit -s \"import random\" \"bool(random.getrandbits(1))\"\n1000000 loops, best of 3: 0.441 usec per loop\n$ python -m timeit -s \"import random\" \"not random.getrandbits(1)\"\n1000000 loops, best of 3: 0.308 usec per loop\n$ python -m timeit -s \"from random import getrandbits\" \"not getrandbits(1)\"\n1000000 loops, best of 3: 0.262 usec per loop  # not takes about 20us of this\n</code></pre>\n\n<p>Added this one after seeing @Pavel's answer</p>\n\n<pre><code>$ python -m timeit -s \"from random import random\" \"random() &lt; 0.5\"\n10000000 loops, best of 3: 0.115 usec per loop\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How to convert a string in the format <code>\"%d/%m/%Y\"</code> to timestamp?</p>\n\n<pre><code>\"01/12/2011\" -&gt; 1322697600\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>&gt;&gt;&gt; import time\n&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; s = \"01/12/2011\"\n&gt;&gt;&gt; time.mktime(datetime.datetime.strptime(s, \"%d/%m/%Y\").timetuple())\n1322697600.0\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Consider the following:</p>\n\n<pre><code>with open(path, mode) as f:\n    return [line for line in f if condition]\n</code></pre>\n\n<p>Will the file be closed properly, or does using <code>return</code> somehow bypass the <a href=\"https://docs.python.org/library/contextlib.html\">context manager</a>?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Yes, it acts like the <code>finally</code> block after a <code>try</code> block, i.e. it always executes (unless the python process terminates in an unusual way of course).</p>\n\n<p>It is also mentioned in one of the examples of <a href=\"http://www.python.org/dev/peps/pep-0343/\" rel=\"noreferrer\">PEP-343</a> which is the specification for the <code>with</code> statement:</p>\n\n<pre><code>with locked(myLock):\n    # Code here executes with myLock held.  The lock is\n    # guaranteed to be released when the block is left (even\n    # if via return or by an uncaught exception).\n</code></pre>\n\n<p>Something worth mentioning is however, that you cannot easily catch exceptions thrown by the <code>open()</code> call without putting the whole <code>with</code> block inside a <code>try..except</code> block which is usually not what one wants.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/7943751/what-is-the-python-3-equivalent-of-python-m-simplehttpserver\" dir=\"ltr\">What is the Python 3 equivalent of \u201cpython -m SimpleHTTPServer\u201d</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    8 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>I want to set up Python <code>SimpleHTTPServer</code> on Windows XP. I have Python installed on my computer. I am executing the following command:</p>\n\n<pre><code>python -m SimpleHTTPServer 8888\n</code></pre>\n\n<p>But I am getting the error:</p>\n\n<pre><code>C:\\Python33\\python.exe: No module named SimpleHTTPServer\n</code></pre>\n\n<p>Is <code>SimpleHTTPServer</code> for Python available on Windows? If yes, what do I do to set up the server?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>From Stack Overflow question <em><a href=\"https://stackoverflow.com/questions/7943751/what-is-the-python3-equivalent-of-python-m-simplehttpserver\">What is the Python 3 equivalent of \"python -m SimpleHTTPServer\"</a></em>:</p>\n\n<p>The following works for me:</p>\n\n<pre><code>python -m http.server [&lt;portNo&gt;]\n</code></pre>\n\n<p>Because I am using <strong>Python 3</strong> the module <code>SimpleHTTPServer</code> has been replaced by <code>http.server</code>, at least in Windows.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I received some text that is encoded, but I don't know what charset was used. Is there a way to determine the encoding of a text file using Python? <a href=\"https://stackoverflow.com/questions/90838/how-can-i-detect-the-encoding-codepage-of-a-text-file\">How can I detect the encoding/codepage of a text file</a> deals with C#.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Correctly detecting the encoding all times is <strong>impossible</strong>.</p>\n\n<p>(From chardet FAQ:)</p>\n\n<blockquote>\n  <p>However, some encodings are optimized\n  for specific languages, and languages\n  are not random. Some character\n  sequences pop up all the time, while\n  other sequences make no sense. A\n  person fluent in English who opens a\n  newspaper and finds \u201ctxzqJv 2!dasd0a\n  QqdKjvz\u201d will instantly recognize that\n  that isn't English (even though it is\n  composed entirely of English letters).\n  By studying lots of \u201ctypical\u201d text, a\n  computer algorithm can simulate this\n  kind of fluency and make an educated\n  guess about a text's language.</p>\n</blockquote>\n\n<p>There is the <a href=\"http://pypi.python.org/pypi/chardet\" rel=\"noreferrer\">chardet</a> library that uses that study to try to detect encoding. chardet is a port of the auto-detection code in Mozilla. </p>\n\n<p>You can also use <a href=\"https://www.crummy.com/software/BeautifulSoup/bs4/doc/#unicode-dammit\" rel=\"noreferrer\">UnicodeDammit</a>. It will try the following methods:</p>\n\n<ul>\n<li>An encoding discovered in the document itself: for instance, in an XML declaration or (for HTML documents) an http-equiv META tag. If Beautiful Soup finds this kind of encoding within the document, it parses the document again from the beginning and gives the new encoding a try. The only exception is if you explicitly specified an encoding, and that encoding actually worked: then it will ignore any encoding it finds in the document.</li>\n<li>An encoding sniffed by looking at the first few bytes of the file. If an encoding is detected at this stage, it will be one of the UTF-* encodings, EBCDIC, or ASCII.</li>\n<li>An encoding sniffed by the <a href=\"http://pypi.python.org/pypi/chardet\" rel=\"noreferrer\">chardet</a> library, if you have it installed.</li>\n<li>UTF-8</li>\n<li>Windows-1252 </li>\n</ul>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How do I use a progress bar when my script is doing some task that is likely to take time?</p>\n\n<p>For example, a function which takes some time to complete and returns <code>True</code> when done. How can I display a progress bar during the time the function is being executed?</p>\n\n<p>Note that I need this to be in real time, so I can't figure out what to do about it. Do I need a <code>thread</code> for this? I have no idea.</p>\n\n<p>Right now I am not printing anything while the function is being executed, however a progress bar would be nice. Also I am more interested in how this can be done from a code point of view.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There are specific libraries (<a href=\"http://pypi.python.org/pypi/progressbar2\" rel=\"noreferrer\">like this one here</a>) but maybe something very simple would do:</p>\n\n<pre><code>import time\nimport sys\n\ntoolbar_width = 40\n\n# setup toolbar\nsys.stdout.write(\"[%s]\" % (\" \" * toolbar_width))\nsys.stdout.flush()\nsys.stdout.write(\"\\b\" * (toolbar_width+1)) # return to start of line, after '['\n\nfor i in xrange(toolbar_width):\n    time.sleep(0.1) # do real work here\n    # update the bar\n    sys.stdout.write(\"-\")\n    sys.stdout.flush()\n\nsys.stdout.write(\"\\n\")\n</code></pre>\n\n<p>Note: this progressbar is a fork of <a href=\"https://pypi.python.org/pypi/progressbar\" rel=\"noreferrer\">progressbar</a> which hasn't been maintained in years.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Does any standard \"comes with batteries\" method exist to clear the terminal screen from a python script, or do I have to go curses (the libraries, not the words) ?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>What about escape sequences?</p>\n\n<pre><code>print(chr(27) + \"[2J\")\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a <code>Decimal('3.9')</code> as part of an object, and wish to encode this to a JSON string which should look like <code>{'x': 3.9}</code>. I don't care about precision on the client side, so a float is fine.</p>\n\n<p>Is there a good way to serialize this? JSONDecoder doesn't accept Decimal objects, and converting to a float beforehand yields <code>{'x': 3.8999999999999999}</code> which is wrong, and will be a big waste of bandwidth.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>How about subclassing <code>json.JSONEncoder</code>?</p>\n\n<pre><code>class DecimalEncoder(json.JSONEncoder):\n    def _iterencode(self, o, markers=None):\n        if isinstance(o, decimal.Decimal):\n            # wanted a simple yield str(o) in the next line,\n            # but that would mean a yield on the line with super(...),\n            # which wouldn't work (see my comment below), so...\n            return (str(o) for o in [o])\n        return super(DecimalEncoder, self)._iterencode(o, markers)\n</code></pre>\n\n<p>Then use it like so:</p>\n\n<pre><code>json.dumps({'x': decimal.Decimal('5.5')}, cls=DecimalEncoder)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Using PyCharm, I noticed it offers to convert a <strong>dict literal</strong>:</p>\n\n<pre><code>d = {\n    'one': '1',\n    'two': '2',\n}\n</code></pre>\n\n<p></p>\n\n<p>into a <strong>dict constructor</strong>:</p>\n\n<pre><code>d = dict(one='1', two='2')\n</code></pre>\n\n<p></p>\n\n<p><strong>Do these different approaches differ in some significant way?</strong></p>\n\n<p>(While writing this question I noticed that using <code>dict()</code> it seems impossible to specify a numeric key .. <code>d = {1: 'one', 2: 'two'}</code> is possible, but, obviously, <code>dict(1='one' ...)</code> is not. Anything else?)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I think you have pointed out the most obvious difference. Apart from that, </p>\n\n<p>the first doesn't need to lookup <code>dict</code> which should make it a tiny bit faster </p>\n\n<p>the second looks up <code>dict</code> in <code>locals()</code> and then <code>globals()</code> and the finds the builtin, so you can switch the behaviour by defining a local called <code>dict</code> for example although I can't think of anywhere this would be a good idea apart from maybe when debugging</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What is the difference between Numpy's <a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html#numpy.array\"><code>array()</code></a> and <a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.asarray.html#numpy.asarray\"><code>asarray()</code></a> functions? When should you use one rather than the other? They seem to generate identical output for all the inputs I can think of.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The <a href=\"https://github.com/numpy/numpy/blob/bcbed877f42ed6e9b01b2125134db4b6395f1d9d/numpy/core/numeric.py#L413-481\" rel=\"nofollow noreferrer\">definition of <code>asarray</code></a> is:</p>\n\n<pre><code>def asarray(a, dtype=None, order=None):\n    return array(a, dtype, copy=False, order=order)\n</code></pre>\n\n<p>So it is like <code>array</code>, except it has fewer options, and <code>copy=False</code>. <code>array</code> has <code>copy=True</code> by default. </p>\n\n<p>The main difference is that <code>array</code> (by default) will make a copy of the object, while <code>asarray</code> will not unless necessary.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>My <code>views.py</code> has become too big and it's hard to find the right view.</p>\n\n<p>How do I split it in several files and then import it? Does it involve any speed loss?</p>\n\n<p>Can I do the same with <code>models.py</code>?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In Django everything is a Python module (*.py). You can create a view folder with an <code>__init__.py</code> inside and you still will be able to import your views, because this also implements a Python module. But an example would be better.</p>\n\n<p>Your original <code>views.py</code> might look like this :</p>\n\n<pre><code>def view1(arg):\n    pass\n\ndef view2(arg):\n   pass\n</code></pre>\n\n<p>With the following folder/file structure it will work the same :</p>\n\n<pre><code>views/\n   __init__.py\n   viewsa.py\n   viewsb.py\n</code></pre>\n\n<p><code>viewsa.py</code> :</p>\n\n<pre><code>def view1(arg):\n    pass\n</code></pre>\n\n<p><code>viewsb.py</code> :</p>\n\n<pre><code>def view2(arg):\n    pass\n</code></pre>\n\n<p><code>__init__.py</code> :</p>\n\n<pre><code>from viewsa import view1\nfrom viewsb import view2\n</code></pre>\n\n<p>The <em>quick</em> explanation would be: when you write <code>from views import view1</code> Python will look for view1 in </p>\n\n<ol>\n<li><p><code>views.py</code>, which is what happens in the first (original) case </p></li>\n<li><p><code>views/__init__.py</code>, which is what happens in the second case. Here, <code>__init__.py</code> is able to provide the view1 method because it imports it.</p></li>\n</ol>\n\n<p>With this kind of solution, you might have no need to change <code>import</code> or <code>urlpattern</code>s arguments in <code>urls.py</code></p>\n\n<p>If you have many methods in each new view file, you might find it useful to make the imports in <code>views/__init__.py</code> use <code>*</code>, like this:</p>\n\n<pre><code>from viewsa import *\nfrom viewsb import *\n</code></pre>\n\n<p>I actually don't know about speed issues (but I doubt there are any).</p>\n\n<p>For Models it might be a bit difficult. </p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is there a difference between <code>assertEquals</code> and <code>assertEqual</code> in the python <code>unittest.TestCase</code>?</p>\n\n<p>And if there is not, why are there two functions? Only for convenience? </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Good question!</p>\n\n<p>Actually, in Python 2.6, both <code>assertEqual</code> and <code>assertEquals</code> are convenience aliases to <code>failUnlessEqual</code>. The source declares them thus: </p>\n\n<pre><code> # Synonyms for assertion methods\n assertEqual = assertEquals = failUnlessEqual\n</code></pre>\n\n<p>In <a href=\"http://docs.python.org/3/library/unittest.html#deprecated-aliases\" rel=\"noreferrer\">Python 3</a>, to your point, <code>failUnlessEqual</code> is explicitly deprecated. <code>assertEquals</code> carries this comment :-)</p>\n\n<blockquote>\n  <p># Synonyms for assertion methods</p>\n  \n  <p># The plurals are undocumented.  Keep them that way to discourage use.</p>\n  \n  <p># Do not add more.  Do not remove.</p>\n  \n  <p># Going through a deprecation cycle on these would annoy many people.</p>\n</blockquote>\n\n<p>So, the upshot appears to be that you should use whatever you like for Python 2.x, but tend toward <code>assertEqual</code> for Python 3.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In my example code below, is the counter = 0 really required, or is there a better, more Python, way to get access to a loop counter? I saw a few PEPs related to loop counters, but they were either deferred or rejected (<a href=\"http://www.python.org/dev/peps/pep-0212/\" rel=\"noreferrer\">PEP 212</a> and <a href=\"http://www.python.org/dev/peps/pep-0281/\" rel=\"noreferrer\">PEP 281</a>).</p>\n\n<p>This is a simplified example of my problem. In my real application this is done with graphics and the whole menu has to be repainted each frame. But this demonstrates it in a simple text way that is easy to reproduce.</p>\n\n<p>Maybe I should also add that I'm using Python 2.5, although I'm still interested if there is a way specific to 2.6 or higher.</p>\n\n<pre><code># Draw all the options, but highlight the selected index\ndef draw_menu(options, selected_index):\n    counter = 0\n    for option in options:\n        if counter == selected_index:\n            print \" [*] %s\" % option\n        else:\n            print \" [ ] %s\" % option\n        counter += 1\n\n\noptions = ['Option 0', 'Option 1', 'Option 2', 'Option 3']\n\ndraw_menu(option, 2) # Draw menu with \"Option2\" selected\n</code></pre>\n\n<p>When run, it outputs:</p>\n\n<pre><code> [ ] Option 0\n [ ] Option 1\n [*] Option 2\n [ ] Option 3\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>Use <a href=\"http://docs.python.org/library/functions.html#enumerate\" rel=\"noreferrer\"><code>enumerate()</code></a> like so:</strong></p>\n\n<pre><code>def draw_menu(options, selected_index):\n    for counter, option in enumerate(options):\n        if counter == selected_index:\n            print \" [*] %s\" % option\n        else:\n            print \" [ ] %s\" % option    \n\noptions = ['Option 0', 'Option 1', 'Option 2', 'Option 3']\ndraw_menu(options, 2)\n</code></pre>\n\n<p><strong>Note</strong>: You can optionally put parenthesis around <code>counter, option</code>, like <code>(counter, option)</code>, if you want, but they're extraneous and not normally included.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In python 2.7, we got the <a href=\"http://docs.python.org/library/stdtypes.html#dictionary-view-objects\" rel=\"noreferrer\">dictionary view methods</a> available.</p>\n\n<p>Now, I know the pro and cons of the following:</p>\n\n<ul>\n<li><code>dict.items()</code> (and <code>values</code>, <code>keys</code>): returns a list, so you can actually store the result</li>\n<li><code>dict.iteritems()</code> (and the like): returns a generator, so you can iterable over each value generated one by one. </li>\n</ul>\n\n<p>What are <code>dict.viewitems()</code> (and the like) for? What are their benefits? How does it work? What is a view after all?</p>\n\n<p>I read that the view is always reflecting the changes from the dictionary. But how does it behave from the perf and memory point of view? What are the pro and cons?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Dictionary views are essentially what their name says: <strong>views are simply like a window</strong> on the keys and values (or items) of a dictionary.  Here is an excerpt from the <a href=\"http://docs.python.org/py3k/library/stdtypes.html#dictionary-view-objects\">official documentation</a> for Python\u00a03:</p>\n\n<pre><code>&gt;&gt;&gt; dishes = {'eggs': 2, 'sausage': 1, 'bacon': 1, 'spam': 500}\n&gt;&gt;&gt; keys = dishes.keys()\n&gt;&gt;&gt; values = dishes.values()\n\n&gt;&gt;&gt; # view objects are dynamic and reflect dict changes\n&gt;&gt;&gt; del dishes['eggs']\n&gt;&gt;&gt; keys  # No eggs anymore!\ndict_keys(['sausage', 'bacon', 'spam'])\n\n&gt;&gt;&gt; values  # No eggs value (2) anymore!\ndict_values([1, 1, 500])\n</code></pre>\n\n<p>(The Python\u00a02 equivalent uses <code>dishes.viewkeys()</code> and <code>dishes.viewvalues()</code>.)</p>\n\n<p>This example shows the <strong>dynamic character of views</strong>: the keys view is <em>not</em> a copy of the keys at a given point in time, but rather a simple window that shows you the keys; if they are changed, then what you see through the window does change as well.  This feature can be useful in some circumstances (for instance, one can work with a view on the keys in multiple parts of a program instead of recalculating the current list of keys each time they are needed).</p>\n\n<p>One advantage is that <em>looking</em> at, say, the keys uses only <strong>a small and fixed amount of memory</strong> and requires <strong>a small and fixed amount of processor time</strong>, as there is no creation of a list of keys (Python\u00a02, on the other hand, often unnecessarily creates a new list, as quoted by Rajendran T, which takes memory and time in an amount proportional to the length of the list).  To continue the window analogy, if you want to see a landscape behind a wall, you simply make an opening in it (you build a window); copying the keys into a list would correspond to instead painting a copy of the landscape on your wall\u2014the copy takes time, space, and does not update itself.</p>\n\n<p>To summarize, views are simply\u2026 views (windows) on your dictionary, which show the contents of the dictionary even after it changes.  They offer features that differ from those of lists: a list of keys contain a <em>copy</em> of the dictionary keys at a given point in time, while a view is dynamic and is much faster to obtain, as it does not have to copy any data (keys or values) in order to be created.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/6494508/how-do-you-pick-x-number-of-unique-numbers-from-a-list-in-python\" dir=\"ltr\">How do you pick \u201cx\u201d number of unique numbers from a list in Python?</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    5 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>I currently have a Python set of n size where n &gt;= 0.  Is there a quick 1 or 2 lines Python solution to do it?  For example, the set will look like:</p>\n\n<pre><code>fruits = set(['apple', 'orange', 'watermelon', 'grape'])\n</code></pre>\n\n<p>The goal is to pick 2 random items from the above and it's possible that the above set can contain 0, 1 or more items.  The only way I can think of doing the above is to convert the set to a list(mutable) from where I can access 2 random unique index within the length of the set.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use the <code>random</code> module: <a href=\"http://docs.python.org/library/random.html\" rel=\"noreferrer\">http://docs.python.org/library/random.html</a></p>\n\n<pre><code>import random\nrandom.sample(set([1, 2, 3, 4, 5, 6]), 2)\n</code></pre>\n\n<p>This samples the two values <em>without</em> replacement (so the two values are different).</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am sorry that I can't reproduce the error with a simpler example, and my code is too complicated to post. If I run the program in IPython shell instead of the regular python, things work out well. </p>\n\n<p>I looked up some previous notes on this problem. They were all caused by using pool to call function defined within a class function. But this is not the case for me. </p>\n\n<pre><code>Exception in thread Thread-3:\nTraceback (most recent call last):\n  File \"/usr/lib64/python2.7/threading.py\", line 552, in __bootstrap_inner\n    self.run()\n  File \"/usr/lib64/python2.7/threading.py\", line 505, in run\n    self.__target(*self.__args, **self.__kwargs)\n  File \"/usr/lib64/python2.7/multiprocessing/pool.py\", line 313, in _handle_tasks\n    put(task)\nPicklingError: Can't pickle &lt;type 'function'&gt;: attribute lookup __builtin__.function failed\n</code></pre>\n\n<p>I would appreciate any help. </p>\n\n<p>UPDATE: The function I pickle is defined at the top level of the module. Though it calls a function that contains a nested function. i.e, f() calls g() calls h() which has a nested function i(), and I am calling pool.apply_async(f). f(), g(), h() are all defined at the top level. I tried simpler example with this pattern and it works though.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here is a <a href=\"http://docs.python.org/library/pickle.html#what-can-be-pickled-and-unpickled\" rel=\"noreferrer\">list of what can be pickled</a>. In particular, functions are only picklable if they are defined at the top-level of a module.</p>\n\n<p>This piece of code:</p>\n\n<pre><code>import multiprocessing as mp\n\nclass Foo():\n    @staticmethod\n    def work(self):\n        pass\n\npool = mp.Pool()\nfoo = Foo()\npool.apply_async(foo.work)\npool.close()\npool.join()\n</code></pre>\n\n<p>yields an error almost identical to the one you posted:</p>\n\n<pre><code>Exception in thread Thread-2:\nTraceback (most recent call last):\n  File \"/usr/lib/python2.7/threading.py\", line 552, in __bootstrap_inner\n    self.run()\n  File \"/usr/lib/python2.7/threading.py\", line 505, in run\n    self.__target(*self.__args, **self.__kwargs)\n  File \"/usr/lib/python2.7/multiprocessing/pool.py\", line 315, in _handle_tasks\n    put(task)\nPicklingError: Can't pickle &lt;type 'function'&gt;: attribute lookup __builtin__.function failed\n</code></pre>\n\n<p>The problem is that the <code>pool</code> methods all use a <code>queue.Queue</code> to pass tasks to the worker processes. Everything that goes through the <code>queue.Queue</code> must be pickable, and <code>foo.work</code> is not picklable since it is not defined at the top level of the module.</p>\n\n<p>It can be fixed by defining a function at the top level, which calls <code>foo.work()</code>:</p>\n\n<pre><code>def work(foo):\n    foo.work()\n\npool.apply_async(work,args=(foo,))\n</code></pre>\n\n<p>Notice that <code>foo</code> is pickable, since <code>Foo</code> is defined at the top level and  <code>foo.__dict__</code> is picklable.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am plotting a dataset using <code>matplotlib</code> where I have an xlabel that is quite \"tall\" (it's a formula rendered in TeX that contains a fraction and is therefore has the height equivalent of a couple of lines of text).</p>\n\n<p>In any case, the bottom of the formula is always cut off when I draw the figures.  Changing figure size doesn't seem to help this, and I haven't been able to figure out how to shift the x-axis \"up\" to make room for the xlabel.  Something like that would be a reasonable temporary solution, but what would be nice would be to have a way to make matplotlib recognize automatically that the label is cut off and resize accordingly.</p>\n\n<p>Here's an example of what I mean:</p>\n\n<pre><code>import matplotlib.pyplot as plt\n\nplt.figure()\nplt.ylabel(r'$\\ln\\left(\\frac{x_a-x_b}{x_a-x_c}\\right)$')\nplt.xlabel(r'$\\ln\\left(\\frac{x_a-x_d}{x_a-x_e}\\right)$')\nplt.show()\n</code></pre>\n\n<p>while you can see the entire ylabel, the xlabel is cut off at the bottom. </p>\n\n<p>In the case this is a machine-specific problem, I am running this on OSX 10.6.8 with matplotlib 1.0.0</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use:</p>\n\n<pre><code>import matplotlib.pyplot as plt\n\nplt.gcf().subplots_adjust(bottom=0.15)\n</code></pre>\n\n<p>to make room for the label.</p>\n\n<p>Edit:</p>\n\n<p>Since i gave the answer, <code>matplotlib</code> has added the <strong><code>tight_layout()</code></strong> function.\nSo i suggest to use it:</p>\n\n<pre><code>plt.tight_layout()\n</code></pre>\n\n<p>should make room for the xlabel.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I need your help about matplotlib. Yes, I did not forget calling the pyplot.show().</p>\n\n<h3>$ ipython --pylab</h3>\n\n<pre><code>import matplotlib.pyplot as p \np.plot(range(20), range(20))\n</code></pre>\n\n<p>It returns <code>matplotlib.lines.Line2D at 0xade2b2c</code> as the output.</p>\n\n<pre><code>p.show()\n</code></pre>\n\n<p>There is nothing to happen. No error message. No new window. Nothing. I install <code>matplotlib</code> by using pip and I didn't take any error messages. </p>\n\n<p>Details:</p>\n\n<p>I use,</p>\n\n<ul>\n<li>Ubuntu</li>\n<li>IPython v0.11</li>\n<li>Python v2.6.6</li>\n<li>matplotlib v1.0.1</li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If I set my backend to <code>template</code> in <code>~/.matplotlib/matplotlibrc</code>,\nthen I can reproduce your symptoms:</p>\n\n<p>~/.matplotlib/matplotlibrc:</p>\n\n<pre><code># backend      : GtkAgg\nbackend      : template\n</code></pre>\n\n<p>Note that the file <code>matplotlibrc</code> may not be in directory <code>~/.matplotlib/</code>. In this case, the following code shows where it is:</p>\n\n<pre><code>&gt;&gt;&gt; import matplotlib\n&gt;&gt;&gt; matplotlib.matplotlib_fname()\n</code></pre>\n\n<hr>\n\n<pre><code>In [1]: import matplotlib.pyplot as p\n\nIn [2]: p.plot(range(20),range(20))\nOut[2]: [&lt;matplotlib.lines.Line2D object at 0xa64932c&gt;]\n\nIn [3]: p.show()\n</code></pre>\n\n<hr>\n\n<p>If you edit <code>~/.matplotlib/matplotlibrc</code> and change the backend to something like <code>GtkAgg</code>, you should see a plot. You can list all the backends available on your machine with</p>\n\n<pre><code>import matplotlib.rcsetup as rcsetup\nprint(rcsetup.all_backends)\n</code></pre>\n\n<p>It should return a list like:</p>\n\n<pre><code>['GTK', 'GTKAgg', 'GTKCairo', 'FltkAgg', 'MacOSX', 'QtAgg', 'Qt4Agg',\n'TkAgg', 'WX', 'WXAgg', 'CocoaAgg', 'agg', 'cairo', 'emf', 'gdk', 'pdf',\n'ps', 'svg', 'template']\n</code></pre>\n\n<p>Reference:</p>\n\n<ul>\n<li><a href=\"http://matplotlib.org/users/customizing.html\" rel=\"noreferrer\">Customizing matplotlib</a></li>\n</ul>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p><a href=\"http://docs.python.org/2/library/functions.html#filter\" rel=\"noreferrer\">This was my source I started with.</a></p>\n\n<p>My List </p>\n\n<pre><code>L = [0, 23, 234, 89, None, 0, 35, 9]\n</code></pre>\n\n<p>When I run this :</p>\n\n<pre><code>L = filter(None, L)\n</code></pre>\n\n<p>I get this results </p>\n\n<pre><code>[23, 234, 89, 35, 9]\n</code></pre>\n\n<p>But this is not what I need, what I really need is :</p>\n\n<pre><code>[0, 23, 234, 89, 0, 35, 9]\n</code></pre>\n\n<p>Because I'm calculating percentile of the data and the 0 make a lot of difference.</p>\n\n<p>How to remove the None value from a list without removing 0 value?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>&gt;&gt;&gt; L = [0, 23, 234, 89, None, 0, 35, 9]\n&gt;&gt;&gt; [x for x in L if x is not None]\n[0, 23, 234, 89, 0, 35, 9]\n</code></pre>\n\n<p>Just for fun, here's how you can adapt <code>filter</code> to do this without using a <code>lambda</code>, (I wouldn't recommend this code - it's just for scientific purposes)</p>\n\n<pre><code>&gt;&gt;&gt; from operator import is_not\n&gt;&gt;&gt; from functools import partial\n&gt;&gt;&gt; L = [0, 23, 234, 89, None, 0, 35, 9]\n&gt;&gt;&gt; filter(partial(is_not, None), L)\n[0, 23, 234, 89, 0, 35, 9]\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm trying to do this query in sqlalchemy</p>\n\n<pre><code>SELECT id, name FROM user WHERE id in (123,456)\n</code></pre>\n\n<p>I would like to bind the list [123,456] at execution time.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>How about <code>session.query(MyUserClass).filter(MyUserClass.id.in_((123,456))).all()</code> ?</p>\n\n<p><strong>edit</strong>: Without the ORM, it would be </p>\n\n<pre><code>session.execute(\n    select(\n        [MyUserTable.c.id, MyUserTable.c.name], \n        MyUserTable.c.id.in_((123, 456))\n    )\n).fetchall()\n</code></pre>\n\n<p><a href=\"http://docs.sqlalchemy.org/en/rel_0_8/core/expression_api.html#sqlalchemy.sql.expression.select\" rel=\"noreferrer\"><code>select()</code></a> takes two parameters, the first one is a list of fields to retrieve, the second one is the <code>where</code> condition. You can access all fields on a table object via the <code>c</code> (or <code>columns</code>) property.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am looking to format a number like 188518982.18 to \u00a3188,518,982.18 using Python.</p>\n\n<p>How can I do this?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>See the <a href=\"https://docs.python.org/2/library/locale.html\" rel=\"noreferrer\">locale</a> module.</p>\n\n<p>This does currency (and date) formatting.</p>\n\n<pre><code>&gt;&gt;&gt; import locale\n&gt;&gt;&gt; locale.setlocale( locale.LC_ALL, '' )\n'English_United States.1252'\n&gt;&gt;&gt; locale.currency( 188518982.18 )\n'$188518982.18'\n&gt;&gt;&gt; locale.currency( 188518982.18, grouping=True )\n'$188,518,982.18'\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>So I'm trying to make a Python script that downloads webcomics and puts them in a folder on my desktop.  I've found a few similar programs on here that do something similar, but nothing quite like what I need.  The one that I found most similar is right here (<a href=\"http://bytes.com/topic/python/answers/850927-problem-using-urllib-download-images\" rel=\"noreferrer\">http://bytes.com/topic/python/answers/850927-problem-using-urllib-download-images</a>).  I tried using this code:</p>\n\n<pre><code>&gt;&gt;&gt; import urllib\n&gt;&gt;&gt; image = urllib.URLopener()\n&gt;&gt;&gt; image.retrieve(\"http://www.gunnerkrigg.com//comics/00000001.jpg\",\"00000001.jpg\")\n('00000001.jpg', &lt;httplib.HTTPMessage instance at 0x1457a80&gt;)\n</code></pre>\n\n<p>I then searched my computer for a file \"00000001.jpg\", but all I found was the cached picture of it.  I'm not even sure it saved the file to my computer.  Once I understand how to get the file downloaded, I think I know how to handle the rest.  Essentially just use a for loop and split the string at the '00000000'.'jpg' and increment the '00000000' up to the largest number, which I would have to somehow determine.  Any reccomendations on the best way to do this or how to download the file correctly?</p>\n\n<p>Thanks!</p>\n\n<p>EDIT 6/15/10</p>\n\n<p>Here is the completed script, it saves the files to any directory you choose.  For some odd reason, the files weren't downloading and they just did.  Any suggestions on how to clean it up would be much appreciated.  I'm currently working out how to find out many comics exist on the site so I can get just the latest one, rather than having the program quit after a certain number of exceptions are raised.</p>\n\n<pre><code>import urllib\nimport os\n\ncomicCounter=len(os.listdir('/file'))+1  # reads the number of files in the folder to start downloading at the next comic\nerrorCount=0\n\ndef download_comic(url,comicName):\n    \"\"\"\n    download a comic in the form of\n\n    url = http://www.example.com\n    comicName = '00000000.jpg'\n    \"\"\"\n    image=urllib.URLopener()\n    image.retrieve(url,comicName)  # download comicName at URL\n\nwhile comicCounter &lt;= 1000:  # not the most elegant solution\n    os.chdir('/file')  # set where files download to\n        try:\n        if comicCounter &lt; 10:  # needed to break into 10^n segments because comic names are a set of zeros followed by a number\n            comicNumber=str('0000000'+str(comicCounter))  # string containing the eight digit comic number\n            comicName=str(comicNumber+\".jpg\")  # string containing the file name\n            url=str(\"http://www.gunnerkrigg.com//comics/\"+comicName)  # creates the URL for the comic\n            comicCounter+=1  # increments the comic counter to go to the next comic, must be before the download in case the download raises an exception\n            download_comic(url,comicName)  # uses the function defined above to download the comic\n            print url\n        if 10 &lt;= comicCounter &lt; 100:\n            comicNumber=str('000000'+str(comicCounter))\n            comicName=str(comicNumber+\".jpg\")\n            url=str(\"http://www.gunnerkrigg.com//comics/\"+comicName)\n            comicCounter+=1\n            download_comic(url,comicName)\n            print url\n        if 100 &lt;= comicCounter &lt; 1000:\n            comicNumber=str('00000'+str(comicCounter))\n            comicName=str(comicNumber+\".jpg\")\n            url=str(\"http://www.gunnerkrigg.com//comics/\"+comicName)\n            comicCounter+=1\n            download_comic(url,comicName)\n            print url\n        else:  # quit the program if any number outside this range shows up\n            quit\n    except IOError:  # urllib raises an IOError for a 404 error, when the comic doesn't exist\n        errorCount+=1  # add one to the error count\n        if errorCount&gt;3:  # if more than three errors occur during downloading, quit the program\n            break\n        else:\n            print str(\"comic\"+ ' ' + str(comicCounter) + ' ' + \"does not exist\")  # otherwise say that the certain comic number doesn't exist\nprint \"all comics are up to date\"  # prints if all comics are downloaded\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Using <a href=\"https://docs.python.org/2/library/urllib.html\" rel=\"noreferrer\">urllib.urlretrieve</a>:</p>\n\n<pre><code>import urllib\nurllib.urlretrieve(\"http://www.gunnerkrigg.com//comics/00000001.jpg\", \"00000001.jpg\")\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm using a for loop to read a file, but I only want to read specific lines, say line #26 and #30. Is there any built-in feature to achieve this?</p>\n\n<p>Thanks</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If the file to read is big, and you don't want to read the whole file in memory at once:</p>\n\n<pre><code>fp = open(\"file\")\nfor i, line in enumerate(fp):\n    if i == 25:\n        # 26th line\n    elif i == 29:\n        # 30th line\n    elif i &gt; 29:\n        break\nfp.close()\n</code></pre>\n\n<p>Note that <code>i == n-1</code> for the <code>n</code>th line.</p>\n\n<hr>\n\n<p>In Python 2.6 or later:</p>\n\n<pre><code>with open(\"file\") as fp:\n    for i, line in enumerate(fp):\n        if i == 25:\n            # 26th line\n        elif i == 29:\n            # 30th line\n        elif i &gt; 29:\n            break\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Edit: Since it appears that there's either no solution, or I'm doing something so non-standard that nobody knows - I'll revise my question to also ask: What is the best way to accomplish logging when a python app is making a lot of system calls?</p>\n\n<p>My app has two modes.  In interactive mode, I want all output to go to the screen as well as to a log file, including output from any system calls.  In daemon mode, all output goes to the log.  Daemon mode works great using os.dup2().  I can't find a way to \"tee\" all output to a log in interactive mode, without modifying each and every system call.</p>\n\n<hr>\n\n<p>In other words, I want the functionality of the command line 'tee' for any output generated by a python app, <strong>including system call output</strong>.</p>\n\n<p>To clarify: </p>\n\n<p>To redirect all output I do something like this, and it works great:</p>\n\n<pre><code># open our log file\nso = se = open(\"%s.log\" % self.name, 'w', 0)\n\n# re-open stdout without buffering\nsys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)\n\n# redirect stdout and stderr to the log file opened above\nos.dup2(so.fileno(), sys.stdout.fileno())\nos.dup2(se.fileno(), sys.stderr.fileno())\n</code></pre>\n\n<p>The nice thing about this is that it requires no special print calls from the rest of the code.  The code also runs some shell commands, so it's nice not having to deal with each of their output individually as well.</p>\n\n<p>Simply, I want to do the same, except <em>duplicate</em> instead of redirect.</p>\n\n<p>At first blush, I thought that simply reversing the dup2's should work.  Why doesn't it?  Here's my test: </p>\n\n<pre><code>import os, sys\n\n### my broken solution:\nso = se = open(\"a.log\", 'w', 0)\nsys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)\n\nos.dup2(sys.stdout.fileno(), so.fileno())\nos.dup2(sys.stderr.fileno(), se.fileno())\n###\n\nprint \"kljhf sdf\"\n\nos.spawnve(\"P_WAIT\", \"/bin/ls\", [\"/bin/ls\"], {})\nos.execve(\"/bin/ls\", [\"/bin/ls\"], os.environ)\n</code></pre>\n\n<p>The file \"a.log\" should be identical to what was displayed on the screen.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Since you're comfortable spawning external processes from your code, you could use <code>tee</code> itself.  I don't know of any Unix system calls that do exactly what <code>tee</code> does.</p>\n\n<pre><code>import subprocess, os, sys\n\n# Unbuffer output\nsys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)\n\ntee = subprocess.Popen([\"tee\", \"log.txt\"], stdin=subprocess.PIPE)\nos.dup2(tee.stdin.fileno(), sys.stdout.fileno())\nos.dup2(tee.stdin.fileno(), sys.stderr.fileno())\n\nprint \"\\nstdout\"\nprint &gt;&gt;sys.stderr, \"stderr\"\nos.spawnve(\"P_WAIT\", \"/bin/ls\", [\"/bin/ls\"], {})\nos.execve(\"/bin/ls\", [\"/bin/ls\"], os.environ)\n</code></pre>\n\n<p>You could also emulate <code>tee</code> using the <a href=\"http://docs.python.org/dev/library/multiprocessing.html\" rel=\"noreferrer\">multiprocessing</a> package (or use <a href=\"http://pypi.python.org/pypi/processing\" rel=\"noreferrer\">processing</a> if you're using Python 2.5 or earlier).</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I did a simple test case:</p>\n\n<pre><code>def setUp(self):\n\n  self.testListNone = None\n\ndef testListSlicing(self):\n\n  self.assertRaises(TypeError, self.testListNone[:1])\n</code></pre>\n\n<p>and I am expecting test to pass, but I am getting exception:</p>\n\n<pre><code>Traceback (most recent call last):\n\n    self.assertRaises(TypeError, self.testListNone[:1])\n\nTypeError: 'NoneType' object is unsubscriptable\n</code></pre>\n\n<p><strong>I thought that assertRaises will pass since TypeError exception will\nbe raised?</strong></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you are using python2.7 or above you can use the ability of <a href=\"http://docs.python.org/library/unittest.html#unittest.TestCase.assertRaises\">assertRaises</a> to be use as a context manager and do:</p>\n\n<pre><code>with self.assertRaises(TypeError):\n    self.testListNone[:1]\n</code></pre>\n\n<p>If you are using python2.6 another way beside the one given until now is to use <a href=\"http://pypi.python.org/pypi/unittest2/0.5.1\">unittest2</a> which is a back port of unittest new feature to python2.6, and you can make it work using the code above.</p>\n\n<p>N.B: I'm a big fan of the new feature (SkipTest, test discovery ...) of unittest so I intend to use unittest2 as much as I can. I advise to do the same because there is a lot more than what unittest come with in python2.6 &lt;.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/3462784/check-if-a-string-matches-an-ip-address-pattern-in-python\" dir=\"ltr\">check if a string matches an IP address pattern in python?</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    12 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>What's the best way to validate that an IP entered by the user is valid?  It comes in as a string.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Don't parse it.  Just ask.</p>\n\n<pre><code>import socket\n\ntry:\n    socket.inet_aton(addr)\n    # legal\nexcept socket.error:\n    # Not legal\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have this code:</p>\n\n<pre><code>&gt;&gt;&gt; for i in xrange(20):\n...     print 'a',\n... \na a a a a a a a a a a a a a a a a a a a\n</code></pre>\n\n<p>I want to output <code>'a'</code>, without <code>' '</code> like this:</p>\n\n<pre><code>aaaaaaaaaaaaaaaaaaaa\n</code></pre>\n\n<p>Is it possible?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There are a number of ways of achieving your result. If you're just wanting a solution for your case, use <a href=\"http://docs.python.org/library/stdtypes.html#typesseq\" rel=\"nofollow noreferrer\">string multiplication</a> as <a href=\"https://stackoverflow.com/questions/4499073/print-python-whithout-n/4499087#4499087\">@Ant</a> mentions. This is only going to work if each of your <code>print</code> statements prints the same string. Note that it works for multiplication of any length string (e.g. <code>'foo' * 20</code> works).</p>\n\n<pre><code>&gt;&gt;&gt; print 'a' * 20\naaaaaaaaaaaaaaaaaaaa\n</code></pre>\n\n<p>If you want to do this in general, build up a string and then print it once. This will consume a bit of memory for the string, but only make a single call to <code>print</code>. Note that string concatenation using <code>+=</code> is now linear in the size of the string you're concatenating so this will be fast.</p>\n\n<pre><code>&gt;&gt;&gt; for i in xrange(20):\n...     s += 'a'\n... \n&gt;&gt;&gt; print s\naaaaaaaaaaaaaaaaaaaa\n</code></pre>\n\n<p>Or you can do it more directly using <a href=\"http://docs.python.org/library/sys.html#sys.stdout\" rel=\"nofollow noreferrer\">sys.stdout</a>.<a href=\"http://docs.python.org/library/stdtypes.html#file.write\" rel=\"nofollow noreferrer\">write()</a>, which <code>print</code> is a wrapper around. This will write only the raw string you give it, without any formatting. Note that no newline is printed even at the end of the 20 <code>a</code>s.</p>\n\n<pre><code>&gt;&gt;&gt; import sys\n&gt;&gt;&gt; for i in xrange(20):\n...     sys.stdout.write('a')\n... \naaaaaaaaaaaaaaaaaaaa&gt;&gt;&gt; \n</code></pre>\n\n<p>Python 3 changes the <code>print</code> statement into a <a href=\"http://docs.python.org/library/functions.html#print\" rel=\"nofollow noreferrer\">print() function</a>, which allows you to set an <code>end</code> parameter. You can use it in &gt;=2.6 by importing from <code>__future__</code>. I'd avoid this in any serious 2.x code though, as it will be a little confusing for those who have never used 3.x. However, it should give you a taste of some of the goodness 3.x brings.</p>\n\n<pre><code>&gt;&gt;&gt; from __future__ import print_function\n&gt;&gt;&gt; for i in xrange(20):\n...     print('a', end='')\n... \naaaaaaaaaaaaaaaaaaaa&gt;&gt;&gt; \n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is there any short way to achieve what the APT (<em>Advanced Package Tool</em>) command line interface does in Python?</p>\n\n<p>I mean, when the package manager prompts a yes/no question followed by <code>[Yes/no]</code>, the script accepts <code>YES/Y/yes/y</code> or <kbd>Enter</kbd> (defaults to <code>Yes</code> as hinted by the capital letter).</p>\n\n<p>The only thing I find in the official docs is <code>input</code> and <code>raw_input</code>...</p>\n\n<p>I know it's not that hard to emulate, but it's annoying to rewrite :|</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>As you mentioned, the easiest way is to use <code>raw_input()</code>. There is no built-in way to do this. From <a href=\"http://code.activestate.com/recipes/577058/\" rel=\"noreferrer\">Recipe 577058</a>:</p>\n\n<pre><code>import sys\n\ndef query_yes_no(question, default=\"yes\"):\n    \"\"\"Ask a yes/no question via raw_input() and return their answer.\n\n    \"question\" is a string that is presented to the user.\n    \"default\" is the presumed answer if the user just hits &lt;Enter&gt;.\n        It must be \"yes\" (the default), \"no\" or None (meaning\n        an answer is required of the user).\n\n    The \"answer\" return value is True for \"yes\" or False for \"no\".\n    \"\"\"\n    valid = {\"yes\": True, \"y\": True, \"ye\": True,\n             \"no\": False, \"n\": False}\n    if default is None:\n        prompt = \" [y/n] \"\n    elif default == \"yes\":\n        prompt = \" [Y/n] \"\n    elif default == \"no\":\n        prompt = \" [y/N] \"\n    else:\n        raise ValueError(\"invalid default answer: '%s'\" % default)\n\n    while True:\n        sys.stdout.write(question + prompt)\n        choice = raw_input().lower()\n        if default is not None and choice == '':\n            return valid[default]\n        elif choice in valid:\n            return valid[choice]\n        else:\n            sys.stdout.write(\"Please respond with 'yes' or 'no' \"\n                             \"(or 'y' or 'n').\\n\")\n</code></pre>\n\n<p>Usage example:</p>\n\n<pre><code>&gt;&gt;&gt; query_yes_no(\"Is cabbage yummier than cauliflower?\")\nIs cabbage yummier than cauliflower? [Y/n] oops\nPlease respond with 'yes' or 'no' (or 'y' or 'n').\nIs cabbage yummier than cauliflower? [Y/n] [ENTER]\n&gt;&gt;&gt; True\n\n&gt;&gt;&gt; query_yes_no(\"Is cabbage yummier than cauliflower?\", None)\nIs cabbage yummier than cauliflower? [y/n] [ENTER]\nPlease respond with 'yes' or 'no' (or 'y' or 'n').\nIs cabbage yummier than cauliflower? [y/n] y\n&gt;&gt;&gt; True\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What is an efficient way to repeat a string to a certain length? Eg: <code>repeat('abc', 7) -&gt; 'abcabca'</code></p>\n\n<p>Here is my current code:</p>\n\n<pre><code>def repeat(string, length):\n    cur, old = 1, string\n    while len(string) &lt; length:\n        string += old[cur-1]\n        cur = (cur+1)%len(old)\n    return string\n</code></pre>\n\n<p>Is there a better (more pythonic) way to do this? Maybe using list comprehension?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>def repeat_to_length(string_to_expand, length):\n   return (string_to_expand * ((length/len(string_to_expand))+1))[:length]\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In RStudio, you can run parts of code in the code editing window, and the results appear in the console.</p>\n\n<p>You can also do cool stuff like selecting whether you want everything up to the cursor to run, or everything after the cursor, or just the part that you selected, and so on. And there are hot keys for all that stuff. </p>\n\n<p>It's like a step above the interactive shell in Python -- there you can use readline to go back to previous individual lines, but it doesn't have any \"concept\" of what a function is, a section of code, etc. </p>\n\n<p>Is there a tool like that for Python? Or, do you have some sort of similar workaround that you use, say, in vim? </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>IPython Notebooks are awesome.  Here's another, newer browser-based tool I've recently discovered: <a href=\"https://github.com/yhat/rodeo\" rel=\"noreferrer\">Rodeo</a>.  My impression is that it seems to better support an RStudio-like workflow.</p>\n\n<p><img src=\"https://i.stack.imgur.com/oLiiI.png\" alt=\"Rodeo screenshot\"></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How can I get the parent class(es) of a Python class? </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use the following attribute:</p>\n\n<pre><code>cls.__bases__\n</code></pre>\n\n<p>From the <a href=\"http://docs.python.org/library/stdtypes.html#class.__bases__\" rel=\"noreferrer\">docs</a>:</p>\n\n<blockquote>\n  <p>The tuple of base classes of a class\n  object.</p>\n</blockquote>\n\n<p>Example:</p>\n\n<pre><code>&gt;&gt;&gt; str.__bases__\n(&lt;type 'basestring'&gt;,)\n</code></pre>\n\n<p>Another example:</p>\n\n<pre><code>&gt;&gt;&gt; class A(object):\n...   pass\n... \n&gt;&gt;&gt; class B(object):\n...   pass\n... \n&gt;&gt;&gt; class C(A, B):\n...   pass\n... \n&gt;&gt;&gt; C.__bases__\n(&lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In our team, we define most test cases like this:</p>\n\n<p>One \"framework\" class ourtcfw.py:</p>\n\n<pre><code>import unittest\n\nclass OurTcFw(unittest.TestCase):\n    def setUp:\n        # something\n\n    # other stuff that we want to use everywhere\n</code></pre>\n\n<p>and a lot of test cases like testMyCase.py:</p>\n\n<pre><code>import localweather\n\nclass MyCase(OurTcFw):\n\n    def testItIsSunny(self):\n        self.assertTrue(localweather.sunny)\n\n    def testItIsHot(self):\n        self.assertTrue(localweather.temperature &gt; 20)\n\nif __name__ == \"__main__\":\n    unittest.main()\n</code></pre>\n\n<p>When I'm writing new test code and want to run it often, and save time, what I do is that I put \"__\" in front of all other tests.  But it's cumbersome, distracts me from the code I 'm writing and the commit noise this creates is plain annoying.</p>\n\n<p>So e.g. when making changes to <code>testItIsHot()</code>, I want to be able to do this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ python testMyCase.py testItIsHot\n</code></pre>\n\n<p>and have <code>unittest</code> run <em>only</em> <code>testItIsHot()</code></p>\n\n<p>How can I achieve that?</p>\n\n<p>I tried to rewrite the <code>if __name__ == \"__main__\":</code> part, but since I'm new to Python, I'm feeling lost and keep bashing into everything else than the methods.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This works as you suggest - you just have to specify the class name as well:</p>\n\n<pre><code>python testMyCase.py MyCase.testItIsHot\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm trying to build a simple API using Flask, in which I now want to read some POSTed JSON. I do the post with the <a href=\"https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm\" rel=\"noreferrer\">PostMan Chrome extension</a>, and the JSON I post is simply <code>{\"text\":\"lalala\"}</code>. I try to read the JSON using the following method:</p>\n\n<pre><code>@app.route('/api/add_message/&lt;uuid&gt;', methods=['GET', 'POST'])\ndef add_message(uuid):\n    content = request.json\n    print content\n    return uuid\n</code></pre>\n\n<p>On the browser it correctly returns the uuid I put in the GET, but on the console, it just prints out <code>None</code> (where I expect it to print out the <code>{\"text\":\"lalala\"}</code>. Does anybody know how I can get the posted JSON from within the Flask method? </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You need to set the request content type to <code>application/json</code> for the <code>.json</code> property to work; it'll be <code>None</code> otherwise. See the <a href=\"https://flask.readthedocs.org/en/latest/api/#flask.Request.json\">Flask <code>Request</code> documentation</a>:</p>\n\n<blockquote>\n  <p>If the mimetype is <code>application/json</code> this will contain the parsed JSON data. Otherwise this will be <code>None</code>.</p>\n</blockquote>\n\n<p>Flask 0.10 added the <a href=\"http://flask.pocoo.org/docs/api/#flask.Request.get_json\"><code>request.get_json()</code> method</a>, and you should use that method instead of the <code>.json</code> property. You can tell the method to skip the content type requirement by setting <code>force=True</code>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm testing the tuple structure, and I found it's strange when I use the <code>==</code> operator like:</p>\n\n<pre><code>&gt;&gt;&gt;  (1,) == 1,\nOut: (False,)\n</code></pre>\n\n<p>When I assign these two expressions to a variable, the result is true:</p>\n\n<pre><code>&gt;&gt;&gt; a = (1,)\n&gt;&gt;&gt; b = 1,\n&gt;&gt;&gt; a==b\nOut: True\n</code></pre>\n\n<p>This questions is different from <a href=\"https://stackoverflow.com/questions/7992559/python-tuple-trailing-comma-syntax-rule\">Python tuple trailing comma syntax rule</a> in my view. I ask the group of expressions between <code>==</code> operator. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Other answers have already shown you that the behaviour is due to operator precedence, as documented <a href=\"https://docs.python.org/3/reference/expressions.html#operator-precedence\" rel=\"nofollow noreferrer\">here</a>.  </p>\n\n<p>I'm going to show you how to find the answer yourself next time you have a question similar to this.  You can deconstruct how the expression parses using the <a href=\"https://docs.python.org/3/library/ast.html\" rel=\"nofollow noreferrer\"><code>ast</code></a> module:</p>\n\n<pre><code>&gt;&gt;&gt; import ast\n&gt;&gt;&gt; source_code = '(1,) == 1,'\n&gt;&gt;&gt; print(ast.dump(ast.parse(source_code), annotate_fields=False))\nModule([Expr(Tuple([Compare(Tuple([Num(1)], Load()), [Eq()], [Num(1)])], Load()))])\n</code></pre>\n\n<p>From this we can see that the code gets parsed <a href=\"https://stackoverflow.com/a/37313506/674039\">as Tim Peters explained</a>: </p>\n\n<pre><code>Module([Expr(\n    Tuple([\n        Compare(\n            Tuple([Num(1)], Load()), \n            [Eq()], \n            [Num(1)]\n        )\n    ], Load())\n)])\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How can I test if the string is empty in Python?</p>\n\n<p>For example,</p>\n\n<p><code>\"&lt;space&gt;&lt;space&gt;&lt;space&gt;\"</code> is empty, so is</p>\n\n<p><code>\"&lt;space&gt;&lt;tab&gt;&lt;space&gt;&lt;newline&gt;&lt;space&gt;\"</code>, so is</p>\n\n<p><code>\"&lt;newline&gt;&lt;newline&gt;&lt;newline&gt;&lt;tab&gt;&lt;newline&gt;\"</code>, etc.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>yourString.isspace()\n</code></pre>\n\n<p>\"Return true if there are only whitespace characters in the string and there is at least one character, false otherwise.\"</p>\n\n<p>Combine that with a special case for handling the empty string.</p>\n\n<p>Alternatively, you could use</p>\n\n<pre><code>strippedString = yourString.strip()\n</code></pre>\n\n<p>And then check if strippedString is empty.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have form with one input for email and two submit buttons to subscribe and unsubscribe from newsletter:</p>\n\n<pre><code>&lt;form action=\"\" method=\"post\"&gt;\n{{ form_newsletter }}\n&lt;input type=\"submit\" name=\"newsletter_sub\" value=\"Subscribe\" /&gt;\n&lt;input type=\"submit\" name=\"newsletter_unsub\" value=\"Unsubscribe\" /&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>I have also class form:</p>\n\n<pre><code>class NewsletterForm(forms.ModelForm):\n    class Meta:\n        model = Newsletter\n        fields = ('email',)\n</code></pre>\n\n<p>I must write my own clean_email method and I need to know by which button was form submited. But the value of submit buttons aren't in <code>self.cleaned_data</code> dictionary.\nCould I get values of buttons otherwise?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use <code>self.data</code> in the <code>clean_email</code> method to access the POST data before validation. It should contain a key called <code>newsletter_sub</code> or <code>newsletter_unsub</code> depending on which button was pressed.</p>\n\n<pre><code># in the context of a django.forms form\n\ndef clean(self):\n    if 'newsletter_sub' in self.data:\n        # do subscribe\n    elif 'newsletter_unsub' in self.data:\n        # do unsubscribe\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a string that looks like <code>'%s in %s'</code> and I want to know how to seperate the arguments so that they are two different %s. My mind coming from Java came up with this: </p>\n\n<pre><code>'%s in %s' % unicode(self.author),  unicode(self.publication)\n</code></pre>\n\n<p>But this doesn't work so how does it look in Python?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Mark Cidade's answer is right - you need to supply a tuple.</p>\n\n<p>However from Python 2.6 onwards you can use <a href=\"http://docs.python.org/library/stdtypes.html#str.format\" rel=\"noreferrer\"><code>format</code></a> instead of <code>%</code>:</p>\n\n<pre><code>'{0} in {1}'.format(unicode(self.author,'utf-8'),  unicode(self.publication,'utf-8'))\n</code></pre>\n\n<p>Usage of <code>%</code> for formatting strings is no longer encouraged.</p>\n\n<blockquote>\n  <p>This method of string formatting is the new standard in Python 3.0, and should be preferred to the % formatting described in String Formatting Operations in new code.</p>\n</blockquote>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I haven\u2019t been able to find a good solution for this problem on the net (probably because switch, position, list and Python are all such overloaded words).</p>\n\n<p>It\u2019s rather simple \u2013\u00a0I have this list:</p>\n\n<pre><code>['title', 'email', 'password2', 'password1', 'first_name', 'last_name', 'next', 'newsletter']\n</code></pre>\n\n<p>I\u2019d like to switch position of <code>'password2'</code> and <code>'password1'</code> \u2013\u00a0not knowing their exact position, only that they\u2019re right next to one another and <code>password2</code> is first.</p>\n\n<p>I\u2019ve accomplished this with some rather long-winded list-subscripting, but I wondered its possible to come up with something a bit more elegant?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>    i = ['title', 'email', 'password2', 'password1', 'first_name', \n         'last_name', 'next', 'newsletter']\n    a, b = i.index('password2'), i.index('password1')\n    i[b], i[a] = i[a], i[b]\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I've looked <a href=\"http://www.sqlalchemy.org/docs/orm/query.html\" rel=\"noreferrer\">through the docs</a> and I cant seem to find out how to do an OR query in SQLAlchemy. I just want to do this query.</p>\n\n<pre><code>SELECT address FROM addressbook WHERE city='boston' AND (lastname='bulger' OR firstname='whitey')\n</code></pre>\n\n<p>Should be something like</p>\n\n<pre><code>addr = session.query(AddressBook).filter(City == \"boston\").filter(????)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>From the <a href=\"http://www.sqlalchemy.org/docs/orm/tutorial.html#common-filter-operators\">tutorial</a>:</p>\n\n<pre><code>from sqlalchemy import or_\nfilter(or_(User.name == 'ed', User.name == 'wendy'))\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am aware .capitalize() capitalizes the first letter of a string but what if the first character is a integer?</p>\n\n<p>this</p>\n\n<pre><code>1bob\n5sandy\n</code></pre>\n\n<p>to this</p>\n\n<pre><code>1Bob\n5Sandy\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If the first character is an integer, it will not capitalize the first letter.</p>\n\n<pre><code>&gt;&gt;&gt; '2s'.capitalize()\n'2s'\n</code></pre>\n\n<p>If you want the functionality, strip off the digits, you can use <code>'2'.isdigit()</code> to check for each character.</p>\n\n<pre><code>&gt;&gt;&gt; s = '123sa'\n&gt;&gt;&gt; for i, c in enumerate(s):\n...     if not c.isdigit():\n...         break\n... \n&gt;&gt;&gt; s[:i] + s[i:].capitalize()\n'123Sa'\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Given a string as user input to a python function, I'd like to get a class object out of it if there's a class with that name in the currently defined namespace. Essentially, I want the implementation for a function which will produce this kind of result:</p>\n\n<pre><code>class Foo:\n    pass\n\nstr_to_class(\"Foo\")\n==&gt; &lt;class __main__.Foo at 0x69ba0&gt;\n</code></pre>\n\n<p>Is this possible?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This seems simplest.</p>\n\n<pre><code>&gt;&gt;&gt; class Foo(object):\n...     pass\n... \n&gt;&gt;&gt; eval(\"Foo\")\n&lt;class '__main__.Foo'&gt;\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have this string: <code>Hello world !!</code> and I want to print it using Python as <code>48:65:6c:6c:6f:20:77:6f:72:6c:64:20:21:21</code>.</p>\n\n<p><code>hex()</code> works only for integers. </p>\n\n<p>How can it be done?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Your can transform your string to a int generator, apply hex formatting for each element and intercalate with separator:</p>\n\n<pre><code>&gt;&gt;&gt; s = \"Hello world !!\"\n&gt;&gt;&gt; \":\".join(\"{:02x}\".format(ord(c)) for c in s)\n'48:65:6c:6c:6f:20:77:6f:72:6c:64:20:21:21\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>This is a slightly.. vain question, but BuildBot's output isn't particularly nice to look at..</p>\n\n<p>For example, compared to..</p>\n\n<ul>\n<li><a href=\"http://phpundercontrol.org/about.html\" rel=\"noreferrer\">phpUnderControl</a></li>\n<li><a href=\"http://jenkins-ci.org/content/about-jenkins-ci\" rel=\"noreferrer\">Jenkins</a>\n\n<ul>\n<li><a href=\"http://blogs.oracle.com/arungupta/entry/top_10_features_of_hudson\" rel=\"noreferrer\">Hudson</a></li>\n</ul></li>\n<li><a href=\"http://cruisecontrolrb.thoughtworks.com/\" rel=\"noreferrer\">CruiseControl.rb</a></li>\n</ul>\n\n<p>..and others, <a href=\"http://buildbot.python.org/stable/\" rel=\"noreferrer\">BuildBot</a> looks rather.. archaic</p>\n\n<p>I'm currently playing with Hudson, but it is very Java-centric (although with <a href=\"http://redsolo.blogspot.com/2007/11/hudson-embraces-python.html\" rel=\"noreferrer\">this guide</a>, I found it easier to setup than BuildBot, and produced more info)</p>\n\n<p>Basically: is there any Continuous Integration systems aimed at python, that produce lots of shiny graphs and the likes?</p>\n\n<hr>\n\n<p><strong>Update:</strong> Since this time the Jenkins project has replaced Hudson as the community version of the package. The original authors have moved to this project as well. Jenkins is now a standard package on Ubuntu/Debian, RedHat/Fedora/CentOS, and others. The following update is still essentially correct. The starting point to do this with <a href=\"http://jenkins-ci.org\" rel=\"noreferrer\">Jenkins</a> is different.</p>\n\n<p><strong><em>Update:</em></strong> After trying a few alternatives, I think I'll stick with Hudson. <a href=\"http://integrityapp.com/\" rel=\"noreferrer\">Integrity</a> was nice and simple, but quite limited. I think <a href=\"http://buildbot.net/trac\" rel=\"noreferrer\">Buildbot</a> is better suited to having numerous build-slaves, rather than everything running on a single machine like I was using it.</p>\n\n<p>Setting Hudson up for a Python project was pretty simple:</p>\n\n<ul>\n<li>Download Hudson from <a href=\"http://hudson-ci.org/\" rel=\"noreferrer\">http://hudson-ci.org/</a></li>\n<li>Run it with <code>java -jar hudson.war</code></li>\n<li>Open the web interface on the default address of <code>http://localhost:8080</code></li>\n<li>Go to Manage Hudson, Plugins, click \"Update\" or similar</li>\n<li>Install the Git plugin (I had to set the <code>git</code> path in the Hudson global preferences)</li>\n<li>Create a new project, enter the repository, SCM polling intervals and so on</li>\n<li>Install <code>nosetests</code> via <code>easy_install</code> if it's not already</li>\n<li>In the a build step, add <code>nosetests --with-xunit --verbose</code></li>\n<li>Check \"Publish JUnit test result report\" and set \"Test report XMLs\" to <code>**/nosetests.xml</code></li>\n</ul>\n\n<p>That's all that's required. You can setup email notifications, and <a href=\"http://wiki.hudson-ci.org/display/HUDSON/Plugins\" rel=\"noreferrer\">the plugins</a> are worth a look. A few I'm currently using for Python projects:</p>\n\n<ul>\n<li><a href=\"http://wiki.hudson-ci.org/display/HUDSON/SLOCCount+Plugin\" rel=\"noreferrer\">SLOCCount plugin</a> to count lines of code (and graph it!) - you need to install <a href=\"http://www.dwheeler.com/sloccount/\" rel=\"noreferrer\">sloccount</a> separately</li>\n<li><a href=\"http://wiki.hudson-ci.org/display/HUDSON/Violations\" rel=\"noreferrer\">Violations</a> to parse the PyLint output (you can setup warning thresholds, graph the number of violations over each build)</li>\n<li><a href=\"http://wiki.hudson-ci.org/display/HUDSON/Cobertura+Plugin\" rel=\"noreferrer\">Cobertura</a> can parse the coverage.py output. Nosetest can gather coverage while running your tests, using <code>nosetests --with-coverage</code> (this writes the output to <code>**/coverage.xml</code>)</li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You might want to check out <a href=\"http://somethingaboutorange.com/mrl/projects/nose/\" rel=\"noreferrer\">Nose</a> and <a href=\"http://nose.readthedocs.org/en/latest/plugins/xunit.html\" rel=\"noreferrer\">the Xunit output plugin</a>.  You can have it run your unit tests, and coverage checks with this command:</p>\n\n<pre><code>nosetests --with-xunit --enable-cover\n</code></pre>\n\n<p>That'll be helpful if you want to go the Jenkins route, or if you want to use another CI server that has support for JUnit test reporting.</p>\n\n<p>Similarly you can capture the output of pylint using the <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Violations\" rel=\"noreferrer\">violations plugin for Jenkins</a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"https://stackoverflow.com/questions/89228/calling-an-external-command-in-python\">Calling an external command in Python</a>  </p>\n</blockquote>\n\n\n\n<p>I'm building a web application that will is going to manipulate (pad, mix, merge etc) sound files and I've found that <a href=\"http://sox.sourceforge.net/\" rel=\"noreferrer\">sox</a> does exactly what I want. Sox is a linux command line program and I'm feeling a little uncomfortable with having the python web app starting new sox processes on my server on a per request basis. </p>\n\n<p>Example:</p>\n\n<pre><code>import os\nos.system('sox input.wav -b 24 output.aiff rate -v -L -b 90 48k')\n</code></pre>\n\n<p>This whole setup seems a little unstable to me.</p>\n\n<p>So my question is, what's the best practice for running command line programs from within  a python (or any scripting language) web app?</p>\n\n<p>Message queues would be one thing to implement in order to get around the whole request response cycle. But is there other ways to make these things more elegant?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The <a href=\"http://docs.python.org/library/subprocess.html\" rel=\"noreferrer\"><code>subprocess</code></a> module is the preferred way of running other programs from Python -- much more flexible and nicer to use than <code>os.system</code>. </p>\n\n<pre><code>import subprocess\n#subprocess.check_output(['ls','-l']) #all that is technically needed...\nprint subprocess.check_output(['ls','-l'])\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In <a href=\"https://stackoverflow.com/questions/4087919/how-can-i-improve-my-paw-detection/4092160#4092160\">my previous question I got an excellent answer</a> that helped me detect where a paw hit a pressure plate, but now I'm struggling to link these results to their corresponding paws:</p>\n\n<p><img src=\"https://i.stack.imgur.com/1KbIz.png\" alt=\"alt text\"></p>\n\n<p>I manually annotated the paws (RF=right front, RH= right hind, LF=left front, LH=left hind).</p>\n\n<p>As you can see there's clearly a repeating pattern and it comes back in almost every measurement. <a href=\"https://docs.google.com/viewer?a=v&amp;pid=explorer&amp;chrome=true&amp;srcid=0B1W3cjBV_DpNYjNhYjFjYzctZjJjNi00ODVkLWExMjctYmQ5YWJhOWU3ZDg0&amp;hl=en&amp;authkey=CO6_lbIE\" rel=\"nofollow noreferrer\">Here's a link to a presentation of 6 trials that were manually annotated.</a></p>\n\n<p>My initial thought was to use heuristics to do the sorting, like:</p>\n\n<ul>\n<li>There's a ~60-40% ratio in weight bearing between the front and hind paws;</li>\n<li>The hind paws are generally smaller in surface;</li>\n<li>The paws are (often) spatially divided in left and right.</li>\n</ul>\n\n<p>However, I\u2019m a bit skeptical about my heuristics, as they would fail on me as soon as I encounter a variation I hadn\u2019t thought off. They also won\u2019t be able to cope with measurements from lame dogs, whom probably have rules of their own. </p>\n\n<p>Furthermore, the annotation suggested by Joe sometimes get's messed up and doesn't take into account what the paw actually looks like.</p>\n\n<p>Based on the answers I received <a href=\"https://stackoverflow.com/questions/3684484\">on my question about peak detection within the paw</a>, I\u2019m hoping there are more advanced solutions to sort the paws. Especially because the pressure distribution and the progression thereof are different for each separate paw, almost like a fingerprint. I hope there's a method that can use this to cluster my paws, rather than just sorting them in order of occurrence. </p>\n\n<p><img src=\"https://i.stack.imgur.com/hFmOn.png\" alt=\"alt text\"></p>\n\n<p><strong>So I'm looking for a better way to sort the results with their corresponding paw.</strong> </p>\n\n<p>For anyone up to the challenge, <a href=\"https://stackoverflow.com/questions/3685265/how-to-write-a-multidimensional-array-to-a-text-file/3685295#3685295\">I have pickled a dictionary</a> with <a href=\"http://dl.dropbox.com/u/5207386/walk_sliced_data\" rel=\"nofollow noreferrer\">all the sliced arrays that contain the pressure data of each paw</a> (bundled by measurement) and <a href=\"http://dl.dropbox.com/u/5207386/walk_data_slices\" rel=\"nofollow noreferrer\">the slice that describes their location</a> (location on the plate and in time). </p>\n\n<p>To clarfiy: walk_sliced_data is a dictionary that contains ['ser_3', 'ser_2', 'sel_1', 'sel_2', 'ser_1', 'sel_3'], which are the names of the measurements. Each measurement contains another dictionary, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] (example from 'sel_1') which represent the impacts that were extracted. </p>\n\n<p>Also note that 'false' impacts, such as where the paw is partially measured (in space or time) can be ignored. They are only useful because they can help recognizing a pattern, but \nwon't be analyzed. </p>\n\n<p>And for anyone interested, <a href=\"http://www.flipserd.com/blog\" rel=\"nofollow noreferrer\">I\u2019m keeping a blog with all the updates regarding the project!</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Alright! I've finally managed to get something working consistently! This problem pulled me in for several days... Fun stuff! Sorry for the length of this answer, but I need to elaborate a bit on some things... (Though I may set a record for the longest non-spam stackoverflow answer ever!)</p>\n\n<p>As a side note, I'm using the full dataset that Ivo <a href=\"http://cid-0e685da213fd5935.skydrive.live.com/redir.aspx?page=browse&amp;resid=E685DA213FD5935!148&amp;type=6&amp;authkey=WOUgehAzQ!o%24&amp;Bsrc=EMSHGM&amp;Bpub=SN.Notifications\" rel=\"nofollow noreferrer\">provided a link to</a> in his <a href=\"https://stackoverflow.com/questions/3684484/peak-detection-in-a-2d-array\">original question</a>.  It's a series of rar files (one-per-dog) each containing several different experiment runs stored as ascii arrays. Rather than try to copy-paste stand-alone code examples into this question, here's a <a href=\"https://bitbucket.org/joferkington/paw-analysis/overview\" rel=\"nofollow noreferrer\">bitbucket mercurial repository</a> with full, stand-alone code. You can clone it with </p>\n\n<p><code>hg clone https://joferkington@bitbucket.org/joferkington/paw-analysis</code></p>\n\n<hr>\n\n<p><strong>Overview</strong></p>\n\n<p>There are essentially two ways to approach the problem, as you noted in your question. I'm actually going to use both in different ways.</p>\n\n<ol>\n<li>Use the (temporal and spatial) order of the paw impacts to determine which paw is which.</li>\n<li>Try to identify the \"pawprint\" based purely on its shape.</li>\n</ol>\n\n<p>Basically, the first method works with the dog's paws follow the trapezoidal-like pattern shown in Ivo's question above, but fails whenever the paws don't follow that pattern. It's fairly easy to programatically detect when it doesn't work.  </p>\n\n<p>Therefore, we can use the measurements where it did work to build up a training dataset (of ~2000 paw impacts from ~30 different dogs) to recognize which paw is which, and the problem reduces to a supervised classification (With some additional wrinkles... Image recognition is a bit harder than a \"normal\" supervised classification problem).</p>\n\n<hr>\n\n<p><strong>Pattern Analysis</strong></p>\n\n<p>To elaborate on the first method, when a dog is walking (not running!) normally (which some of these dogs may not be), we expect paws to impact in the order of: Front Left, Hind Right, Front Right, Hind Left, Front Left, etc. The pattern may start with either the front left or front right paw.</p>\n\n<p>If this were always the case, we could simply sort the impacts by initial contact time and use a modulo 4 to group them by paw.  </p>\n\n<p><img src=\"https://i.stack.imgur.com/gLhbt.png\" alt=\"Normal Impact Sequence\"></p>\n\n<p>However, even when everything is \"normal\", this doesn't work.  This is due to the trapezoid-like shape of the pattern. A hind paw spatially falls behind the previous front paw.</p>\n\n<p>Therefore, the hind paw impact after the initial front paw impact often falls off the sensor plate, and isn't recorded.  Similarly, the last paw impact is often not the next paw in the sequence, as the paw impact before it occured off the sensor plate and wasn't recorded.</p>\n\n<p><img src=\"https://i.stack.imgur.com/th87Q.png\" alt=\"Missed Hind Paw\"></p>\n\n<p>Nonetheless, we can use the shape of the paw impact pattern to determine when this has happened, and whether we've started with a left or right front paw.  (I'm actually ignoring problems with the last impact here. It's not too hard to add it, though.)</p>\n\n<pre><code>def group_paws(data_slices, time):   \n    # Sort slices by initial contact time\n    data_slices.sort(key=lambda s: s[-1].start)\n\n    # Get the centroid for each paw impact...\n    paw_coords = []\n    for x,y,z in data_slices:\n        paw_coords.append([(item.stop + item.start) / 2.0 for item in (x,y)])\n    paw_coords = np.array(paw_coords)\n\n    # Make a vector between each sucessive impact...\n    dx, dy = np.diff(paw_coords, axis=0).T\n\n    #-- Group paws -------------------------------------------\n    paw_code = {0:'LF', 1:'RH', 2:'RF', 3:'LH'}\n    paw_number = np.arange(len(paw_coords))\n\n    # Did we miss the hind paw impact after the first \n    # front paw impact? If so, first dx will be positive...\n    if dx[0] &gt; 0: \n        paw_number[1:] += 1\n\n    # Are we starting with the left or right front paw...\n    # We assume we're starting with the left, and check dy[0].\n    # If dy[0] &gt; 0 (i.e. the next paw impacts to the left), then\n    # it's actually the right front paw, instead of the left.\n    if dy[0] &gt; 0: # Right front paw impact...\n        paw_number += 2\n\n    # Now we can determine the paw with a simple modulo 4..\n    paw_codes = paw_number % 4\n    paw_labels = [paw_code[code] for code in paw_codes]\n\n    return paw_labels\n</code></pre>\n\n<p>In spite of all of this, it frequently doesn't work correctly. Many of the dogs in the full dataset appear to be running, and the paw impacts don't follow the same temporal order as when the dog is walking. (Or perhaps the dog just has severe hip problems...)</p>\n\n<p><img src=\"https://i.stack.imgur.com/DwXZ5.png\" alt=\"Abnormal Impact Sequence\"></p>\n\n<p>Fortunately, we can still programatically detect whether or not the paw impacts follow our expected spatial pattern:</p>\n\n<pre><code>def paw_pattern_problems(paw_labels, dx, dy):\n    \"\"\"Check whether or not the label sequence \"paw_labels\" conforms to our\n    expected spatial pattern of paw impacts. \"paw_labels\" should be a sequence\n    of the strings: \"LH\", \"RH\", \"LF\", \"RF\" corresponding to the different paws\"\"\"\n    # Check for problems... (This could be written a _lot_ more cleanly...)\n    problems = False\n    last = paw_labels[0]\n    for paw, dy, dx in zip(paw_labels[1:], dy, dx):\n        # Going from a left paw to a right, dy should be negative\n        if last.startswith('L') and paw.startswith('R') and (dy &gt; 0):\n            problems = True\n            break\n        # Going from a right paw to a left, dy should be positive\n        if last.startswith('R') and paw.startswith('L') and (dy &lt; 0):\n            problems = True\n            break\n        # Going from a front paw to a hind paw, dx should be negative\n        if last.endswith('F') and paw.endswith('H') and (dx &gt; 0):\n            problems = True\n            break\n        # Going from a hind paw to a front paw, dx should be positive\n        if last.endswith('H') and paw.endswith('F') and (dx &lt; 0):\n            problems = True\n            break\n        last = paw\n    return problems\n</code></pre>\n\n<p>Therefore, even though the simple spatial classification doesn't work all of the time, we can determine when it does work with reasonable confidence.  </p>\n\n<p><strong>Training Dataset</strong></p>\n\n<p>From the pattern-based classifications where it worked correctly, we can build up a very large training dataset of correctly classified paws (~2400 paw impacts from 32 different dogs!).  </p>\n\n<p>We can now start to look at what an \"average\" front left, etc, paw looks like.</p>\n\n<p>To do this, we need some sort of \"paw metric\" that is the same dimensionality for any dog. (In the full dataset, there are both very large and very small dogs!)  A paw print from an Irish elkhound will be both much wider and much \"heavier\" than a paw print from a toy poodle.  We need to rescale each paw print so that a) they have the same number of pixels, and b) the pressure values are standardized.  To do this, I resampled each paw print onto a 20x20 grid and rescaled the pressure values based on the maximum, mininum, and mean pressure value for the paw impact. </p>\n\n<pre><code>def paw_image(paw):\n    from scipy.ndimage import map_coordinates\n    ny, nx = paw.shape\n\n    # Trim off any \"blank\" edges around the paw...\n    mask = paw &gt; 0.01 * paw.max()\n    y, x = np.mgrid[:ny, :nx]\n    ymin, ymax = y[mask].min(), y[mask].max()\n    xmin, xmax = x[mask].min(), x[mask].max()\n\n    # Make a 20x20 grid to resample the paw pressure values onto\n    numx, numy = 20, 20\n    xi = np.linspace(xmin, xmax, numx)\n    yi = np.linspace(ymin, ymax, numy)\n    xi, yi = np.meshgrid(xi, yi)  \n\n    # Resample the values onto the 20x20 grid\n    coords = np.vstack([yi.flatten(), xi.flatten()])\n    zi = map_coordinates(paw, coords)\n    zi = zi.reshape((numy, numx))\n\n    # Rescale the pressure values\n    zi -= zi.min()\n    zi /= zi.max()\n    zi -= zi.mean() #&lt;- Helps distinguish front from hind paws...\n    return zi\n</code></pre>\n\n<p>After all of this, we can finally take a look at what an average left front, hind right, etc paw looks like.  Note that this is averaged across &gt;30 dogs of greatly different sizes, and we seem to be getting consistent results!</p>\n\n<p><img src=\"https://i.stack.imgur.com/1rcSk.png\" alt=\"Average Paws\"></p>\n\n<p>However, before we do any analysis on these, we need to subtract the mean (the average paw for all legs of all dogs).</p>\n\n<p><img src=\"https://i.stack.imgur.com/y6sbC.png\" alt=\"Mean Paw\"></p>\n\n<p>Now we can analyize the differences from the mean, which are a bit easier to recognize:</p>\n\n<p><img src=\"https://i.stack.imgur.com/JkNR7.png\" alt=\"Differential Paws\"></p>\n\n<p><strong>Image-based Paw Recognition</strong></p>\n\n<p>Ok... We finally have a set of patterns that we can begin to try to match the paws against.  Each paw can be treated as a 400-dimensional vector (returned by the <code>paw_image</code> function) that can be compared to these four 400-dimensional vectors.  </p>\n\n<p>Unfortunately, if we just use a \"normal\" supervised classification algorithm (i.e. find which of the 4 patterns is closest to a particular paw print using a simple distance), it doesn't work consistently. In fact, it doesn't do much better than random chance on the training dataset.</p>\n\n<p>This is a common problem in image recognition. Due to the high dimensionality of the input data, and the somewhat \"fuzzy\" nature of images (i.e. adjacent pixels have a high covariance), simply looking at the difference of an image from a template image does not give a very good measure of the similarity of their shapes.  </p>\n\n<p><strong>Eigenpaws</strong></p>\n\n<p>To get around this we need to build a set of \"eigenpaws\" (just like \"eigenfaces\" in facial recognition), and describe each paw print as a combination of these eigenpaws.  This is identical to principal components analysis, and basically provides a way to reduce the dimensionality of our data, so that distance is a good measure of shape.</p>\n\n<p>Because we have more training images than dimensions (2400 vs 400), there's no need to do \"fancy\" linear algebra for speed. We can work directly with the covariance matrix of the training data set:</p>\n\n<pre><code>def make_eigenpaws(paw_data):\n    \"\"\"Creates a set of eigenpaws based on paw_data.\n    paw_data is a numdata by numdimensions matrix of all of the observations.\"\"\"\n    average_paw = paw_data.mean(axis=0)\n    paw_data -= average_paw\n\n    # Determine the eigenvectors of the covariance matrix of the data\n    cov = np.cov(paw_data.T)\n    eigvals, eigvecs = np.linalg.eig(cov)\n\n    # Sort the eigenvectors by ascending eigenvalue (largest is last)\n    eig_idx = np.argsort(eigvals)\n    sorted_eigvecs = eigvecs[:,eig_idx]\n    sorted_eigvals = eigvals[:,eig_idx]\n\n    # Now choose a cutoff number of eigenvectors to use \n    # (50 seems to work well, but it's arbirtrary...\n    num_basis_vecs = 50\n    basis_vecs = sorted_eigvecs[:,-num_basis_vecs:]\n\n    return basis_vecs\n</code></pre>\n\n<p>These <code>basis_vecs</code> are the \"eigenpaws\".</p>\n\n<p><img src=\"https://i.stack.imgur.com/NamaF.png\" alt=\"Eigenpaws\"></p>\n\n<p>To use these, we simply dot (i.e. matrix multiplication) each paw image (as a 400-dimensional vector, rather than a 20x20 image) with the basis vectors. This gives us a 50-dimensional vector (one element per basis vector) that we can use to classify the image. Instead of comparing a 20x20 image to the 20x20 image of each \"template\" paw, we compare the 50-dimensional, transformed image to each 50-dimensional transformed template paw.  This is much less sensitive to small variations in exactly how each toe is positioned, etc, and basically reduces the dimensionality of the problem to just the relevant dimensions.</p>\n\n<p><strong>Eigenpaw-based Paw Classification</strong></p>\n\n<p>Now we can simply use the distance between the 50-dimensional vectors and the \"template\" vectors for each leg to classify which paw is which:</p>\n\n<pre><code>codebook = np.load('codebook.npy') # Template vectors for each paw\naverage_paw = np.load('average_paw.npy')\nbasis_stds = np.load('basis_stds.npy') # Needed to \"whiten\" the dataset...\nbasis_vecs = np.load('basis_vecs.npy')\npaw_code = {0:'LF', 1:'RH', 2:'RF', 3:'LH'}\ndef classify(paw):\n    paw = paw.flatten()\n    paw -= average_paw\n    scores = paw.dot(basis_vecs) / basis_stds\n    diff = codebook - scores\n    diff *= diff\n    diff = np.sqrt(diff.sum(axis=1))\n    return paw_code[diff.argmin()]\n</code></pre>\n\n<p>Here are some of the results:\n<img src=\"https://i.stack.imgur.com/FS0vD.png\" alt=\"alt text\">\n<img src=\"https://i.stack.imgur.com/AtzDu.png\" alt=\"alt text\">\n<img src=\"https://i.stack.imgur.com/0Ref6.png\" alt=\"alt text\"></p>\n\n<p><strong>Remaining Problems</strong></p>\n\n<p>There are still some problems, particularly with dogs too small to make a clear pawprint... (It works best with large dogs, as the toes are more clearly seperated at the sensor's resolution.) Also, partial pawprints aren't recognized with this system, while they can be with the trapezoidal-pattern-based system. </p>\n\n<p>However, because the eigenpaw analysis inherently uses a distance metric, we can classify the paws both ways, and fall back to the trapezoidal-pattern-based system when the eigenpaw analysis's smallest distance from the \"codebook\" is over some threshold. I haven't implemented this yet, though.</p>\n\n<p>Phew... That was long! My hat is off to Ivo for having such a fun question!</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is it possible to determine if the current script is running inside a virtualenv environment?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>AFAIK the most reliable way to check for this (and the way that is used internally in virtualenv and in pip) is to check for the existence of <code>sys.real_prefix</code>:</p>\n\n<pre><code>import sys\n\nif hasattr(sys, 'real_prefix'):\n    #...\n</code></pre>\n\n<p>Inside a virtualenv, <code>sys.prefix</code> points to the virtualenv directory, and <code>sys.real_prefix</code> points to the \"real\" prefix of the system Python (often <code>/usr</code> or <code>/usr/local</code> or some such).</p>\n\n<p>Outside a virtualenv, <code>sys.real_prefix</code> should not exist.</p>\n\n<p>Using the <code>VIRTUAL_ENV</code> environment variable is not reliable. It is set by the virtualenv <code>activate</code> shell script, but a virtualenv can be used without activation by directly running an executable from the virtualenv's <code>bin/</code> (or <code>Scripts</code>) directory, in which case <code>$VIRTUAL_ENV</code> will not be set.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am using a simple unit test based test runner to test my Django application.</p>\n\n<p>My application itself is configured to use a basic logger in settings.py using:</p>\n\n<pre><code>logging.basicConfig(level=logging.DEBUG)\n</code></pre>\n\n<p>And in my application code using:</p>\n\n<pre><code>logger = logging.getLogger(__name__)\nlogger.setLevel(getattr(settings, 'LOG_LEVEL', logging.DEBUG))\n</code></pre>\n\n<p>However, when running unittests, I'd like to disable logging so that it doesn't clutter my test result output. Is there a simple way to turn off logging in a global way, so that the application specific loggers aren't writing stuff out to the console when I run tests?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>logging.disable(logging.CRITICAL)\n</code></pre>\n\n<p>will disable all logging calls with levels less severe than or equal to <code>CRITICAL</code>. Logging can be re-enabled with</p>\n\n<pre><code>logging.disable(logging.NOTSET)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"https://stackoverflow.com/questions/19339/a-transpose-unzip-function-in-python\">A Transpose/Unzip Function in Python</a>  </p>\n</blockquote>\n\n\n\n<p>I have a list of tuples, where I want to unzip this list into two independent lists. I'm looking for some standardized operation in Python. </p>\n\n<pre><code>&gt;&gt;&gt; l = [(1,2), (3,4), (8,9)]\n&gt;&gt;&gt; f_xxx (l)\n[ [1, 3, 8], [2, 4, 9] ] \n</code></pre>\n\n<p>I'm looking for a succinct and pythonic way to achieve this. </p>\n\n<p>Basically, I'm hunting for inverse operation of <a href=\"http://docs.python.org/library/functions.html?highlight=zip#zip\" rel=\"noreferrer\"><code>zip()</code></a> function. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use <code>zip(*list)</code>:</p>\n\n<pre><code>&gt;&gt;&gt; l = [(1,2), (3,4), (8,9)]\n&gt;&gt;&gt; zip(*l)\n[(1, 3, 8), (2, 4, 9)]\n</code></pre>\n\n<p>The <a href=\"https://docs.python.org/2/library/functions.html#zip\" rel=\"noreferrer\"><code>zip()</code> function</a> pairs up the elements from all inputs, starting with the first values, then the second, etc. By using <code>*l</code> you <a href=\"https://stackoverflow.com/questions/36901\">apply all tuples in <code>l</code> as <em>separate arguments</em> to the <code>zip()</code> function</a>, so <code>zip()</code> pairs up <code>1</code> with <code>3</code> with <code>8</code> first, then <code>2</code> with <code>4</code> and <code>9</code>. Those happen to correspond nicely with the columns, or the <em>transposition</em> of <code>l</code>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I would like to see what is best way to determine current script directory in python?</p>\n\n<p>I discovered that two to the many ways of calling python code, it is hard to find a good solution.</p>\n\n<p>Here are some problems:</p>\n\n<ul>\n<li><code>__file__</code> is not defined if the script is executed with <code>exec</code>, <code>execfile</code></li>\n<li><code>__module__</code> is defined only in modules</li>\n</ul>\n\n<p>Use cases: </p>\n\n<ul>\n<li><code>./myfile.py</code></li>\n<li><code>python myfile.py</code></li>\n<li><code>./somedir/myfile.py</code></li>\n<li><code>python somedir/myfile.py</code></li>\n<li><code>execfile('myfile.py')</code> (from another script, that can be located in another directory and that can have another current directory.</li>\n</ul>\n\n<p>I know that there is no perfect solution, because in some cases but I'm looking for the best approach that solved most of the cases.</p>\n\n<p>The most used approach is <code>os.path.dirname(os.path.abspath(__file__))</code> but this really doesn't work if you execute the script from another one with <code>exec()</code>.</p>\n\n<h2>Warning</h2>\n\n<p>Any solution that uses current directory will fail, this can be different based on the way the script is called or it can be changed inside the running script.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>os.path.dirname(os.path.abspath(__file__))\n</code></pre>\n\n<p>is indeed the best you're going to get.</p>\n\n<p>It's unusual to be executing a script with <code>exec</code>/<code>execfile</code>; normally you should be using the module infrastructure to load scripts. If you must use these methods, I suggest setting <code>__file__</code> in the <code>globals</code> you pass to the script so it can read that filename.</p>\n\n<p>There's no other way to get the filename in execed code: as you note, the CWD may be in a completely different place.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am trying to import Tkinter. However, I get an error stating that Tkinter has not been installed:</p>\n\n<blockquote>\n  <p>ImportError: No module named _tkinter, please install the python-tk package</p>\n</blockquote>\n\n<p>I could probably install it using synaptic manager (can I?), however, I would have to install it on every machine I program on. Would it be possible to add the Tkinter library into my workspace and reference it from there?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It is not very easy to install Tkinter locally to use with system-provided Python. You may build it from sources, but this is usually not the best idea with a binary package-based distro you're apparently running.</p>\n\n<p>It's safer to <code>apt-get install python-tk</code> on your machine(s).\n(Works on Debian-derived distributions like for Ubuntu; refer to your package manager and package list on other distributions.)</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have seen few py scripts which use this at the top of the script. In what cases one should use it?</p>\n\n<pre><code>import sys\nreload(sys)\nsys.setdefaultencoding(\"utf-8\")\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>As per the documentation: This allows you to switch from the default ASCII to other encodings such as UTF-8, which the Python runtime will use whenever it has to decode a string buffer to unicode.  </p>\n\n<p>This function is only available at Python start-up time, when Python scans the environment. It has to be called in a system-wide module, <code>sitecustomize.py</code>, After this module has been evaluated, the <code>setdefaultencoding()</code> function is removed from the <code>sys</code> module. </p>\n\n<p>The only way to actually use it is with a reload hack that brings the attribute back. </p>\n\n<p>Also, <strong>the use of <code>sys.setdefaultencoding()</code> has always been discouraged</strong>, and it has become a no-op in py3k. The encoding of py3k is hard-wired to \"utf-8\" and changing it raises an error.</p>\n\n<p>I suggest some pointers for reading:</p>\n\n<ul>\n<li><a href=\"http://blog.ianbicking.org/illusive-setdefaultencoding.html\" rel=\"noreferrer\">http://blog.ianbicking.org/illusive-setdefaultencoding.html</a></li>\n<li><a href=\"http://nedbatchelder.com/blog/200401/printing_unicode_from_python.html\" rel=\"noreferrer\">http://nedbatchelder.com/blog/200401/printing_unicode_from_python.html</a></li>\n<li><a href=\"http://www.diveintopython3.net/strings.html#one-ring-to-rule-them-all\" rel=\"noreferrer\">http://www.diveintopython3.net/strings.html#one-ring-to-rule-them-all</a></li>\n<li><a href=\"http://web.archive.org/web/20120722170929/http://boodebr.org/main/python/all-about-python-and-unicode\" rel=\"noreferrer\">http://boodebr.org/main/python/all-about-python-and-unicode</a></li>\n<li><a href=\"http://blog.notdot.net/2010/07/Getting-unicode-right-in-Python\" rel=\"noreferrer\">http://blog.notdot.net/2010/07/Getting-unicode-right-in-Python</a></li>\n</ul>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In Python, I want to write a multi-line dict in my code. There are a couple of ways one could format it. Here are a few that I could think of:</p>\n\n<ol>\n<li><pre><code>mydict = { \"key1\": 1,\n           \"key2\": 2,\n           \"key3\": 3, }\n</code></pre></li>\n<li><pre><code>mydict = { \"key1\": 1,\n           \"key2\": 2,\n           \"key3\": 3,\n         }\n</code></pre></li>\n<li><pre><code>mydict = {\n    \"key1\": 1,\n    \"key2\": 2,\n    \"key3\": 3,\n}\n</code></pre></li>\n</ol>\n\n<p>I know that any of the above is syntactically correct, but I assume that there is one preferred indentation and line-break style for Python dicts. What is it?</p>\n\n<p>Note: This is not an issue of syntax. All of the above are (as far as I know) valid Python statements and are equivalent to each other.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I use #3. Same for long lists, tuples, etc. It doesn't require adding any extra spaces beyond the indentations. As always, be consistent.</p>\n\n<pre><code>mydict = {\n    \"key1\": 1,\n    \"key2\": 2,\n    \"key3\": 3,\n}\n\nmylist = [\n    (1, 'hello'),\n    (2, 'world'),\n]\n\nnested = {\n    a: [\n        (1, 'a'),\n        (2, 'b'),\n    ],\n    b: [\n        (3, 'c'),\n        (4, 'd'),\n    ],\n}\n</code></pre>\n\n<p>Similarly, here's my preferred way of including large strings without introducing any whitespace (like you'd get if you used triple-quoted multi-line strings):</p>\n\n<pre><code>data = (\n    \"iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABG\"\n    \"l0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAEN\"\n    \"xBRpFYmctaKCfwrBSCrRLuL3iEW6+EEUG8XvIVjYWNgJdhFjIX\"\n    \"rz6pKtPB5e5rmq7tmxk+hqO34e1or0yXTGrj9sXGs1Ib73efh1\"\n    \"AAAABJRU5ErkJggg==\"\n)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I was following the guide here:</p>\n\n<p><a href=\"http://www.sqlalchemy.org/docs/orm/examples.html?highlight=versioning#versioned-objects\">http://www.sqlalchemy.org/docs/orm/examples.html?highlight=versioning#versioned-objects</a></p>\n\n<p>and have come across an issue. I have defined my relationships like:</p>\n\n<pre><code>generic_ticker = relation('MyClass', backref=backref(\"stuffs\"))\n</code></pre>\n\n<p>with strings so it doesn't care about the import order of my model modules. This all works fine normally, but when I use the versioning meta I get the following error:</p>\n\n<blockquote>\n  <p>sqlalchemy.exc.InvalidRequestError: When initializing mapper Mapper|MyClass|stuffs, expression 'Trader' failed to locate a name (\"name 'MyClass' is not defined\"). If this is a class name, consider adding this relationship() to the  class after both dependent classes have been defined.</p>\n</blockquote>\n\n<p>I tracked down the error to:</p>\n\n<pre><code>  File \"/home/nick/workspace/gm3/gm3/lib/history_meta.py\", line 90, in __init__\n    mapper = class_mapper(cls)\n  File \"/home/nick/venv/tg2env/lib/python2.6/site-packages/sqlalchemy/orm/util.py\", line 622, in class_mapper\n    mapper = mapper.compile()\n</code></pre>\n\n<hr>\n\n<pre><code>class VersionedMeta(DeclarativeMeta):\n    def __init__(cls, classname, bases, dict_):\n        DeclarativeMeta.__init__(cls, classname, bases, dict_)\n\n        try:\n            mapper = class_mapper(cls)\n            _history_mapper(mapper)\n        except UnmappedClassError:\n            pass\n</code></pre>\n\n<p>I fixed the problem by putting the try: except stuff in a lambda and running them all after all the imports have happened. This works but seems a bit rubbish, any ideas of how to fix this is a better way?</p>\n\n<p>Thanks!</p>\n\n<p><strong>Update</strong></p>\n\n<p>The problem is not actually about import order. The versioning example is designed such that mapper requires compilation in costructor of each versioned class. And compilation fails when related classes are not yet defined. In case of circular relations there is no way to make it working by changing definition order of mapped classes.</p>\n\n<p><strong>Update 2</strong></p>\n\n<p>As the above update states (I didn't know you could edit other people's posts on here :)) this is likely due to circular references. In which case may be someone will find my hack useful (I'm using it with turbogears) (Replace VersionedMeta and add in create_mappers global in history_meta)</p>\n\n<pre><code>create_mappers = []\nclass VersionedMeta(DeclarativeMeta):\n    def __init__(cls, classname, bases, dict_):\n        DeclarativeMeta.__init__(cls, classname, bases, dict_)\n        #I added this code in as it was crashing otherwise\n        def make_mapper():\n            try:\n                mapper = class_mapper(cls)\n                _history_mapper(mapper)\n            except UnmappedClassError:\n                pass\n\n        create_mappers.append(lambda: make_mapper())\n</code></pre>\n\n<p>Then you can do something like the following in your models __init__.py</p>\n\n<pre><code># Import your model modules here.\nfrom myproj.lib.history_meta import create_mappers\n\nfrom myproj.model.misc import *\nfrom myproj.model.actor import *\nfrom myproj.model.stuff1 import *\nfrom myproj.model.instrument import *\nfrom myproj.model.stuff import *\n\n#setup the history\n[func() for func in create_mappers]\n</code></pre>\n\n<p>That way it create the mappers only after all the classes have been defined.</p>\n\n<p><strong>Update 3</strong>\nSlightly unrelated but I came across a duplicate primary key error in some circumstances (committing 2 changes to the same object in one go). My workaround has been to add a new primary auto-incrementing key. Of course you can't have more than 1 with mysql so I had to de-primary key the existing stuff used to create the history table. Check out my overall code (including a hist_id and getting rid of the foreign key constraint):</p>\n\n<pre><code>\"\"\"Stolen from the offical sqlalchemy recpies\n\"\"\"\nfrom sqlalchemy.ext.declarative import DeclarativeMeta\nfrom sqlalchemy.orm import mapper, class_mapper, attributes, object_mapper\nfrom sqlalchemy.orm.exc import UnmappedClassError, UnmappedColumnError\nfrom sqlalchemy import Table, Column, ForeignKeyConstraint, Integer\nfrom sqlalchemy.orm.interfaces import SessionExtension\nfrom sqlalchemy.orm.properties import RelationshipProperty\nfrom sqlalchemy.types import DateTime\nimport datetime\nfrom sqlalchemy.orm.session import Session\n\ndef col_references_table(col, table):\n    for fk in col.foreign_keys:\n        if fk.references(table):\n            return True\n    return False\n\ndef _history_mapper(local_mapper):\n    cls = local_mapper.class_\n\n    # set the \"active_history\" flag\n    # on on column-mapped attributes so that the old version\n    # of the info is always loaded (currently sets it on all attributes)\n    for prop in local_mapper.iterate_properties:\n        getattr(local_mapper.class_, prop.key).impl.active_history = True\n\n    super_mapper = local_mapper.inherits\n    super_history_mapper = getattr(cls, '__history_mapper__', None)\n\n    polymorphic_on = None\n    super_fks = []\n    if not super_mapper or local_mapper.local_table is not super_mapper.local_table:\n        cols = []\n        for column in local_mapper.local_table.c:\n            if column.name == 'version':\n                continue\n\n            col = column.copy()\n            col.unique = False\n\n            #don't auto increment stuff from the normal db\n            if col.autoincrement:\n                col.autoincrement = False\n            #sqllite falls over with auto incrementing keys if we have a composite key\n            if col.primary_key:\n                col.primary_key = False\n\n            if super_mapper and col_references_table(column, super_mapper.local_table):\n                super_fks.append((col.key, list(super_history_mapper.base_mapper.local_table.primary_key)[0]))\n\n            cols.append(col)\n\n            if column is local_mapper.polymorphic_on:\n                polymorphic_on = col\n\n        #if super_mapper:\n        #    super_fks.append(('version', super_history_mapper.base_mapper.local_table.c.version))\n\n        cols.append(Column('hist_id', Integer, primary_key=True, autoincrement=True))\n        cols.append(Column('version', Integer))\n        cols.append(Column('changed', DateTime, default=datetime.datetime.now))\n\n        if super_fks:\n            cols.append(ForeignKeyConstraint(*zip(*super_fks)))\n\n        table = Table(local_mapper.local_table.name + '_history', local_mapper.local_table.metadata,\n                      *cols, mysql_engine='InnoDB')\n    else:\n        # single table inheritance.  take any additional columns that may have\n        # been added and add them to the history table.\n        for column in local_mapper.local_table.c:\n            if column.key not in super_history_mapper.local_table.c:\n                col = column.copy()\n                super_history_mapper.local_table.append_column(col)\n        table = None\n\n    if super_history_mapper:\n        bases = (super_history_mapper.class_,)\n    else:\n        bases = local_mapper.base_mapper.class_.__bases__\n    versioned_cls = type.__new__(type, \"%sHistory\" % cls.__name__, bases, {})\n\n    m = mapper(\n            versioned_cls, \n            table, \n            inherits=super_history_mapper, \n            polymorphic_on=polymorphic_on,\n            polymorphic_identity=local_mapper.polymorphic_identity\n            )\n    cls.__history_mapper__ = m\n\n    if not super_history_mapper:\n        cls.version = Column('version', Integer, default=1, nullable=False)\n\ncreate_mappers = []\n\nclass VersionedMeta(DeclarativeMeta):\n    def __init__(cls, classname, bases, dict_):\n        DeclarativeMeta.__init__(cls, classname, bases, dict_)\n        #I added this code in as it was crashing otherwise\n        def make_mapper():\n            try:\n                mapper = class_mapper(cls)\n                _history_mapper(mapper)\n            except UnmappedClassError:\n                pass\n\n        create_mappers.append(lambda: make_mapper())\n\ndef versioned_objects(iter):\n    for obj in iter:\n        if hasattr(obj, '__history_mapper__'):\n            yield obj\n\ndef create_version(obj, session, deleted = False):\n    obj_mapper = object_mapper(obj)\n    history_mapper = obj.__history_mapper__\n    history_cls = history_mapper.class_\n\n    obj_state = attributes.instance_state(obj)\n\n    attr = {}\n\n    obj_changed = False\n\n    for om, hm in zip(obj_mapper.iterate_to_root(), history_mapper.iterate_to_root()):\n        if hm.single:\n            continue\n\n        for hist_col in hm.local_table.c:\n            if hist_col.key == 'version' or hist_col.key == 'changed' or hist_col.key == 'hist_id':\n                continue\n\n            obj_col = om.local_table.c[hist_col.key]\n\n            # get the value of the\n            # attribute based on the MapperProperty related to the\n            # mapped column.  this will allow usage of MapperProperties\n            # that have a different keyname than that of the mapped column.\n            try:\n                prop = obj_mapper.get_property_by_column(obj_col)\n            except UnmappedColumnError:\n                # in the case of single table inheritance, there may be \n                # columns on the mapped table intended for the subclass only.\n                # the \"unmapped\" status of the subclass column on the \n                # base class is a feature of the declarative module as of sqla 0.5.2.\n                continue\n\n            # expired object attributes and also deferred cols might not be in the\n            # dict.  force it to load no matter what by using getattr().\n            if prop.key not in obj_state.dict:\n                getattr(obj, prop.key)\n\n            a, u, d = attributes.get_history(obj, prop.key)\n\n            if d:\n                attr[hist_col.key] = d[0]\n                obj_changed = True\n            elif u:\n                attr[hist_col.key] = u[0]\n            else:\n                # if the attribute had no value.\n                attr[hist_col.key] = a[0]\n                obj_changed = True\n\n    if not obj_changed:\n        # not changed, but we have relationships.  OK\n        # check those too\n        for prop in obj_mapper.iterate_properties:\n            if isinstance(prop, RelationshipProperty) and \\\n                attributes.get_history(obj, prop.key).has_changes():\n                obj_changed = True\n                break\n\n    if not obj_changed and not deleted:\n        return\n\n    attr['version'] = obj.version\n    hist = history_cls()\n    for key, value in attr.iteritems():\n        setattr(hist, key, value)\n\n    obj.version += 1\n    session.add(hist)\n\nclass VersionedListener(SessionExtension):\n    def before_flush(self, session, flush_context, instances):\n        for obj in versioned_objects(session.dirty):\n            create_version(obj, session)\n        for obj in versioned_objects(session.deleted):\n            create_version(obj, session, deleted = True)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<blockquote>\n  <p>I fixed the problem by putting the try: except stuff in a lambda and\n  running them all after all the imports have happened. </p>\n</blockquote>\n\n<p>Great!</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am writing a program that stores data in a dictionary object, but this data needs to be saved at some point during the program execution and loaded back into the dictionary object when the program is run again.\nHow would I convert a dictionary object into a string that can be written to a file and loaded back into a dictionary object? This will hopefully support dictionaries containing dictionaries.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>json module is a good solution here, and has the advantage over pickle that it only produces plain text output, and is cross-platform and cross-version.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I want to use a WSDL SOAP based web service in Python. I have looked at the <a href=\"http://diveintopython.net/soap_web_services/\" rel=\"noreferrer\">Dive Into Python</a> code but the SOAPpy module does not work under Python 2.5.</p>\n\n<p>I have tried using <a href=\"https://fedorahosted.org/suds\" rel=\"noreferrer\">suds</a> which works partly, but breaks with certain types (suds.TypeNotFound: Type not found: 'item').</p>\n\n<p>I have also looked at <a href=\"http://trac.optio.webfactional.com/wiki\" rel=\"noreferrer\">Client</a> but this does not appear to support WSDL.</p>\n\n<p>And I have looked at <a href=\"http://pywebsvcs.sourceforge.net/zsi.html\" rel=\"noreferrer\">ZSI</a> but it looks very complex. Does anyone have any sample code for it?</p>\n\n<p>The WSDL is <a href=\"https://ws.pingdom.com/soap/PingdomAPI.wsdl\" rel=\"noreferrer\">https://ws.pingdom.com/soap/PingdomAPI.wsdl</a> and works fine with the PHP 5 SOAP client.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I know this is an old thread but it was showing up at the top of Google's results so I wanted to share a more current discussion on Python and SOAP.</p>\n\n<p>See: <a href=\"http://www.diveintopython.net/soap_web_services/index.html\" rel=\"noreferrer\">http://www.diveintopython.net/soap_web_services/index.html</a></p>\n    </div>"]}
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Long story short: <code>pythonw.exe</code> does nothing, <code>python.exe</code> accepts nothing (which one should I use?)</p>\n\n<p>test.py:</p>\n\n<pre><code>print \"a\"\n</code></pre>\n\n<p>CMD window:</p>\n\n<pre><code>C:\\path&gt;pythonw.exe test.py\n&lt;BLANK LINE&gt;\nC:\\path&gt;\n\nC:\\path&gt;python.exe test.py\n  File \"C:\\path\\test.py\", line 7\n    print \"a\"\n            ^\nSyntaxError: invalid syntax\n\nC:\\path&gt;\n</code></pre>\n\n<p>Please tell me what I'm doing terrible wrong.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you don't want a terminal window to pop up when you run your program use <code>pythonw.exe</code>;<br>\nOtherwise, use <code>python.exe</code></p>\n\n<p>Regarding the syntax error: <code>print</code> <a href=\"http://www.python.org/dev/peps/pep-3105/\" rel=\"noreferrer\">is now a function in 3.x</a><br>\nSo use instead: </p>\n\n<pre><code>print(\"a\")\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I get some error that I can't figure out. Any clue what is wrong with my sample code?</p>\n\n<pre><code>class B:\n    def meth(self, arg):\n        print arg\n\nclass C(B):\n    def meth(self, arg):\n        super(C, self).meth(arg)\n\nprint C().meth(1)\n</code></pre>\n\n<p>I got the sample test code from help of 'super' built-in method. The class \"C\" is the </p>\n\n<p>Here is the error:</p>\n\n<pre><code>Traceback (most recent call last):\n  File \"./test.py\", line 10, in ?\n    print C().meth(1)\n  File \"./test.py\", line 8, in meth\n    super(C, self).meth(arg)\nTypeError: super() argument 1 must be type, not classobj\n</code></pre>\n\n<p>FYI, here is the help(super) from python itself:</p>\n\n<pre><code>Help on class super in module __builtin__:\n\nclass super(object)\n |  super(type) -&gt; unbound super object\n |  super(type, obj) -&gt; bound super object; requires isinstance(obj, type)\n |  super(type, type2) -&gt; bound super object; requires issubclass(type2, type)\n |  Typical use to call a cooperative superclass method:\n |  class C(B):\n |      def meth(self, arg):\n |          super(C, self).meth(arg)\n |\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Your problem is that class B is not declared as a \"new-style\" class.  Change it like so:</p>\n\n<pre><code>class B(object):\n</code></pre>\n\n<p>and it will work.</p>\n\n<p><code>super()</code> and all subclass/superclass stuff only works with new-style classes.  I recommend you get in the habit of always typing that <code>(object)</code> on any class definition to make sure it is a new-style class.</p>\n\n<p>Old-style classes (also known as \"classic\" classes) are always of type <code>classobj</code>; new-style classes are of type <code>type</code>.  This is why you got the error message you saw:</p>\n\n<p><code>TypeError: super() argument 1 must be type, not classobj</code></p>\n\n<p>Try this to see for yourself:</p>\n\n<pre><code>class OldStyle:\n    pass\n\nclass NewStyle(object):\n    pass\n\nprint type(OldStyle)  # prints: &lt;type 'classobj'&gt;\n\nprint type(NewStyle) # prints &lt;type 'type'&gt;\n</code></pre>\n\n<p>Note that in Python 3.x, all classes are new-style. You can still use the syntax from the old-style classes but you get a new-style class. So, in Python 3.x you won't have this problem.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Alright, I'm toying around with converting a PIL image object back and forth to a numpy array so I can do some faster pixel by pixel transformations than PIL's PixelAccess object would allow.  I've figured out how to place the pixel information in a useful 3D numpy array by way of:</p>\n\n<pre><code>pic = Image.open(\"foo.jpg\")\npix = numpy.array(pic.getdata()).reshape(pic.size[0], pic.size[1], 3)\n</code></pre>\n\n<p>But I can't seem to figure out how to load it back into the PIL object after I've done all my awesome transforms.  I'm aware of the <strong>putdata()</strong> method, but can't quite seem to get it to behave.</p>\n\n<p>Any thoughts?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You're not saying how exactly <code>putdata()</code> is not behaving. I'm assuming you're doing </p>\n\n<pre><code>&gt;&gt;&gt; pic.putdata(a)\nTraceback (most recent call last):\n  File \"...blablabla.../PIL/Image.py\", line 1185, in putdata\n    self.im.putdata(data, scale, offset)\nSystemError: new style getargs format but argument is not a tuple\n</code></pre>\n\n<p>This is because <code>putdata</code> expects a sequence of tuples and you're giving it a numpy array. This</p>\n\n<pre><code>&gt;&gt;&gt; data = list(tuple(pixel) for pixel in pix)\n&gt;&gt;&gt; pic.putdata(data)\n</code></pre>\n\n<p>will work but it is very slow. </p>\n\n<p>As of PIL 1.1.6, the <a href=\"http://effbot.org/zone/pil-changes-116.htm\" rel=\"noreferrer\">\"proper\" way to convert between images and numpy arrays</a> is simply</p>\n\n<pre><code>&gt;&gt;&gt; pix = numpy.array(pic)\n</code></pre>\n\n<p>although the resulting array is in a different format than yours (3-d array or rows/columns/rgb in this case).</p>\n\n<p>Then, after you make your changes to the array, you should be able to do either <code>pic.putdata(pix)</code> or create a new image with <code>Image.fromarray(pix)</code>. </p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How to get the code of the headers through urllib?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The getcode() method (Added in python2.6) returns the HTTP status code that was sent with the response, or None if the URL is no HTTP URL.</p>\n\n<pre><code>&gt;&gt;&gt; a=urllib.urlopen('http://www.google.com/asdfsf')\n&gt;&gt;&gt; a.getcode()\n404\n&gt;&gt;&gt; a=urllib.urlopen('http://www.google.com/')\n&gt;&gt;&gt; a.getcode()\n200\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Python provides a nice method for getting length of an eager iterable, <code>len(x)</code> that is. But I couldn't find anything similar for lazy iterables represented by generator comprehensions and functions. Of course, it is not hard to write something like:</p>\n\n<pre><code>def iterlen(x):\n  n = 0\n  try:\n    while True:\n      next(x)\n      n += 1\n  except StopIteration: pass\n  return n\n</code></pre>\n\n<p>But I can't get rid of a feeling that I'm reimplementing a bicycle.</p>\n\n<p>(While I was typing the function, a thought struck my mind: maybe there really is no such function, because it \"destroys\" its argument. Not an issue for my case, though).</p>\n\n<p>P.S.: concerning the first answers - yes, something like <code>len(list(x))</code> would work too, but that drastically increases the usage of memory.</p>\n\n<p>P.P.S.: re-checked... Disregard the P.S., seems I made a mistake while trying that, it works fine. Sorry for the trouble.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There isn't one because you can't do it in the general case - what if you have a lazy infinite generator?  For example:</p>\n\n<pre><code>def fib():\n    a, b = 0, 1\n    while True:\n        a, b = b, a + b\n        yield a\n</code></pre>\n\n<p>This never terminates but will generate the Fibonacci numbers.  You can get as many Fibonacci numbers as you want by calling <code>next()</code>.</p>\n\n<p>If you really need to know the number of items there are, then you can't iterate through them linearly one time anyway, so just use a different data structure such as a regular list.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/16523789/naming-conflict-with-built-in-function\" dir=\"ltr\">Naming conflict with built-in function</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    7 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>So I tried the \"evil\" thing Ned Deily mentioned in his answer <a href=\"https://stackoverflow.com/questions/12765833/counting-the-number-of-true-booleans-in-a-python-list/12766000#12766000\">here</a>. Now I have that the type True is now always False. How would I reverse this within the interactive window?</p>\n\n<p>Thing to not do:</p>\n\n<pre><code>True = False\n</code></pre>\n\n<p>Since True has now been completely overridden with False, there doesn't seem to be an obvious way to back-track. Is there a module that True comes from that I can do something like:</p>\n\n<pre><code>True = &lt;'module'&gt;.True\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can simply <a href=\"https://docs.python.org/2/reference/simple_stmts.html#grammar-token-del_stmt\" rel=\"noreferrer\"><code>del</code></a> your custom name to set it back to the default:</p>\n\n<pre><code>&gt;&gt;&gt; True = False\n&gt;&gt;&gt; True\nFalse\n&gt;&gt;&gt; del True\n&gt;&gt;&gt; True\nTrue\n&gt;&gt;&gt;\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/8247605/configuring-so-that-pip-install-can-work-from-github\" dir=\"ltr\">Configuring so that pip install can work from github</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    4 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>I want to use a new feature of httpie. This feature is in the github repo <a href=\"https://github.com/jkbr/httpie\" rel=\"noreferrer\">https://github.com/jkbr/httpie</a> but not in the release on the python package index <a href=\"https://pypi.python.org/pypi/httpie\" rel=\"noreferrer\">https://pypi.python.org/pypi/httpie</a> </p>\n\n<p>How can I install the httpie package from the github repo? I tried</p>\n\n<pre><code>pip install https://github.com/jkbr/httpie\n</code></pre>\n\n<p>But I got  an error 'could not unpack'</p>\n\n<hr>\n\n<p>In Nodejs, I can install packages from github like this</p>\n\n<pre><code>npm install git+https://github.com/substack/node-optimist.git\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You need to use the proper git URL:</p>\n\n<pre><code>pip install git+git://github.com/jkbr/httpie.git\n</code></pre>\n\n<p>or</p>\n\n<pre><code>pip install git+https://github.com/jkbr/httpie.git\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/826948/syntax-error-on-print-with-python-3\" dir=\"ltr\">Syntax error on print with Python 3 [duplicate]</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    10 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>I'm learning Python and can't even write the first example:</p>\n\n<pre><code>print 2 ** 100\n</code></pre>\n\n<p>this gives <code>SyntaxError: invalid syntax</code></p>\n\n<p>pointing at the 2.</p>\n\n<p>Why is this? I'm using version 3.1</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>That is because in Python 3, they have replaced the <code>print</code> <em>statement</em> with the <code>print</code> <em>function</em>.</p>\n\n<p>The syntax is now more or less the same as before, but it requires parens:</p>\n\n<p>From the \"<a href=\"http://docs.python.org/3.0/whatsnew/3.0.html\" rel=\"noreferrer\">what's new in python 3</a>\" docs:</p>\n\n<pre><code>Old: print \"The answer is\", 2*2\nNew: print(\"The answer is\", 2*2)\n\nOld: print x,           # Trailing comma suppresses newline\nNew: print(x, end=\" \")  # Appends a space instead of a newline\n\nOld: print              # Prints a newline\nNew: print()            # You must call the function!\n\nOld: print &gt;&gt;sys.stderr, \"fatal error\"\nNew: print(\"fatal error\", file=sys.stderr)\n\nOld: print (x, y)       # prints repr((x, y))\nNew: print((x, y))      # Not the same as print(x, y)!\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a JSON file that I want to covert to a CSV file. How can I do this with Python?</p>\n\n<p>I tried:</p>\n\n<pre><code>import json\nimport csv\n\nf = open('data.json')\ndata = json.load(f)\nf.close()\nf = open('data.csv')\ncsv_file = csv.writer(f)\nfor item in data:\n    f.writerow(item)\n\nf.close()\n</code></pre>\n\n<p>However, it did not work. I am using Django and the error I received is:</p>\n\n<pre><code>file' object has no attribute 'writerow'\n</code></pre>\n\n<p>So, then I tried the following:</p>\n\n<pre><code>import json\nimport csv\n\nf = open('data.json')\ndata = json.load(f)\nf.close()\n\nf = open('data.csv')\ncsv_file = csv.writer(f)\nfor item in data:\n    csv_file.writerow(item)\n\nf.close()\n</code></pre>\n\n<p>I then get the error:</p>\n\n<pre><code>sequence expected\n</code></pre>\n\n<p>Sample json file:</p>\n\n<pre class=\"lang-json prettyprint-override\"><code>[\n  {\n    \"pk\": 22,\n    \"model\": \"auth.permission\",\n    \"fields\": {\n      \"codename\": \"add_logentry\",\n      \"name\": \"Can add log entry\",\n      \"content_type\": 8\n    }\n  },\n  {\n    \"pk\": 23,\n    \"model\": \"auth.permission\",\n    \"fields\": {\n      \"codename\": \"change_logentry\",\n      \"name\": \"Can change log entry\",\n      \"content_type\": 8\n    }\n  },\n  {\n    \"pk\": 24,\n    \"model\": \"auth.permission\",\n    \"fields\": {\n      \"codename\": \"delete_logentry\",\n      \"name\": \"Can delete log entry\",\n      \"content_type\": 8\n    }\n  },\n  {\n    \"pk\": 4,\n    \"model\": \"auth.permission\",\n    \"fields\": {\n      \"codename\": \"add_group\",\n      \"name\": \"Can add group\",\n      \"content_type\": 2\n    }\n  },\n  {\n    \"pk\": 10,\n    \"model\": \"auth.permission\",\n    \"fields\": {\n      \"codename\": \"add_message\",\n      \"name\": \"Can add message\",\n      \"content_type\": 4\n    }\n  }\n]\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I am not sure this question is solved already or not, but let me paste what I have done for reference.</p>\n\n<p>First, your JSON has nested objects, so it normally cannot be directly converted to CSV.\nYou need to change that to something like this:</p>\n\n<pre><code>{\n    \"pk\": 22,\n    \"model\": \"auth.permission\",\n    \"codename\": \"add_logentry\",\n    \"content_type\": 8,\n    \"name\": \"Can add log entry\"\n},\n......]\n</code></pre>\n\n<p>Here is my code to generate CSV from that:</p>\n\n<pre><code>import csv\nimport json\n\nx = \"\"\"[\n    {\n        \"pk\": 22,\n        \"model\": \"auth.permission\",\n        \"fields\": {\n            \"codename\": \"add_logentry\",\n            \"name\": \"Can add log entry\",\n            \"content_type\": 8\n        }\n    },\n    {\n        \"pk\": 23,\n        \"model\": \"auth.permission\",\n        \"fields\": {\n            \"codename\": \"change_logentry\",\n            \"name\": \"Can change log entry\",\n            \"content_type\": 8\n        }\n    },\n    {\n        \"pk\": 24,\n        \"model\": \"auth.permission\",\n        \"fields\": {\n            \"codename\": \"delete_logentry\",\n            \"name\": \"Can delete log entry\",\n            \"content_type\": 8\n        }\n    }\n]\"\"\"\n\nx = json.loads(x)\n\nf = csv.writer(open(\"test.csv\", \"wb+\"))\n\n# Write CSV Header, If you dont need that, remove this line\nf.writerow([\"pk\", \"model\", \"codename\", \"name\", \"content_type\"])\n\nfor x in x:\n    f.writerow([x[\"pk\"],\n                x[\"model\"],\n                x[\"fields\"][\"codename\"],\n                x[\"fields\"][\"name\"],\n                x[\"fields\"][\"content_type\"]])\n</code></pre>\n\n<p>You will get output as:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>pk,model,codename,name,content_type\n22,auth.permission,add_logentry,Can add log entry,8\n23,auth.permission,change_logentry,Can change log entry,8\n24,auth.permission,delete_logentry,Can delete log entry,8\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I hate wasting people's time. This is my first post here and it is really only a last resort after days of searching extensively for an answer. I'm really having a difficult time grasping the concept of Django's content types. It feels very hackish and, ultimately, against how Python tends to do things.  That being said, if I'm going to use Django then I have to work within the confines of the framework.</p>\n\n<p>So I'm coming here wondering if anyone can give a practical real world example of how a content type works and how you would implement it. Almost all the tutorials (mostly on blogs) I have reviewed don't do a great job really covering the concept. They seem to pick up where the Django documentation left off (what seems like nowhere).</p>\n\n<p>I appreciate what you guys do here and I'm really anxious to see what you have to say.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<h2>So you want to use the Content Types framework on your work?</h2>\n\n<p>Start by asking yourself this question: \"Do any of these models need to be related in the same way to other models and/or will I be reusing these relationships in unforseen ways later down the road?\" The reason why we ask this question is because this is what the Content Types framework does best: it creates generic relations between models. Blah blah, let's dive into some code and see what I mean.</p>\n\n<pre><code># ourapp.models\nfrom django.conf import settings\nfrom django.db import models\n\n# Assign the User model in case it has been \"swapped\"\nUser = settings.AUTH_USER_MODEL\n\n# Create your models here\nclass Post(models.Model):\n  author = models.ForeignKey(User)\n  title = models.CharField(max_length=75)\n  slug = models.SlugField(unique=True)\n  body = models.TextField(blank=True)\n\nclass Picture(models.Model):\n  author = models.ForeignKey(User)\n  image = models.ImageField()\n  caption = models.TextField(blank=True)\n\nclass Comment(models.Model):\n  author = models.ForeignKey(User)\n  body = models.TextField(blank=True)\n  post = models.ForeignKey(Post)\n  picture = models.ForeignKey(Picture)\n</code></pre>\n\n<p>Okay, so we do have a way to theoretically create this relationship. However, as a Python programmer, your superior intellect is telling you this sucks and you can do better. High five!</p>\n\n<h2>Enter the Content Types framework!</h2>\n\n<p>Well, now we're going to take a close look at our models and rework them to be more \"reusable\"  and intuitive. Let's start by getting rid of the two foreign keys on our <code>Comment</code> model and replace them with a <code>GenericForeignKey</code>.</p>\n\n<pre><code># ourapp.models\nfrom django.contrib.contenttypes.fields import GenericForeignKey\nfrom django.contrib.contenttypes.models import ContentType\n\n...\n\nclass Comment(models.Model):\n  author = models.ForeignKey(User)\n  body = models.TextField(blank=True)\n  content_type = models.ForeignKey(ContentType)\n  object_id = models.PositiveIntegerField()\n  content_object = GenericForeignKey()\n</code></pre>\n\n<p>So, what happened? Well, we went in and added the necessary code to allow for a generic relation to other models. Notice how there is more than just a <code>GenericForeignKey</code>, but also a  <code>ForeignKey</code> to <code>ContentType</code> and a <code>PositiveIntegerField</code> for the <code>object_id</code>.  These fields are for telling Django what type of object this is related to and what the id is for that object. In reality, this makes sense because Django will need both to lookup these related objects.</p>\n\n<h2>Well, that's not very Python-like... its kinda ugly!</h2>\n\n<p>You are probably looking for air-tight, spotless, intuitive code that would make <a href=\"http://en.wikipedia.org/wiki/Guido_van_rossum\" rel=\"noreferrer\">Guido van Rossum</a> proud. I get you. Let's look at the <code>GenericRelation</code> field so we can put a pretty bow on this.</p>\n\n<pre><code># ourapp.models\nfrom django.contrib.contenttypes.fields import GenericRelation\n\n...\n\nclass Post(models.Model):\n  author = models.ForeignKey(User)\n  title = models.CharField(max_length=75)\n  slug = models.SlugField(unique=True)\n  body = models.TextField(blank=True)\n  comments = GenericRelation('Comment')\n\nclass Picture(models.Model):\n  author = models.ForeignKey(User)\n  image = models.ImageField()\n  caption = models.TextField(blank=True)\n  comments = GenericRelation('Comment')\n</code></pre>\n\n<p>Bam! Just like that you can work with the Comments for these two models. In fact, let's go ahead and do that in our shell (type <code>python manage.py shell</code> from your Django project directory).</p>\n\n<pre><code>&gt;&gt;&gt; from django.contrib.auth import get_user_model\n&gt;&gt;&gt; from ourapp.models import Picture\n\n# We use get_user_model() since we are referencing directly\nUser = get_user_model()\n\n# Grab our own User object\n&gt;&gt;&gt; me = User.objects.get(username='myusername')\n\n# Grab the first of our own pictures so we can comment on it\n&gt;&gt;&gt; pic = Picture.objects.get(author=me)\n\n# Let's start making a comment for our own picture\n&gt;&gt;&gt; pic.comments.create(author=me, body=\"Man, I'm cool!\")\n\n# Let's go ahead and retrieve the comments for this picture now\n&gt;&gt;&gt; pic.comments.all()\n[&lt;Comment: \"Man, I'm cool!\"&gt;]\n</code></pre>\n\n<p>It's that simple.</p>\n\n<h2>What are the other practical implications of these \"generic\" relations?</h2>\n\n<p>Generic foreign keys allow for less intrusive relations between various applications. For example, let's say we pulled the Comment model out into it's own app named <code>chatterly</code>. Now we want to create another application named <code>noise_nimbus</code> where people store their music to share with others.</p>\n\n<p>What if we want to add comments to those songs? Well, we can just draw a generic relation:</p>\n\n<pre><code># noise_nimbus.models\nfrom django.conf import settings\nfrom django.contrib.contenttypes.fields import GenericRelation\nfrom django.db import models\n\nfrom chatterly.models import Comment\n\n# For a third time, we take the time to ensure custom Auth isn't overlooked\nUser = settings.AUTH_USER_MODEL\n\n# Create your models here\nclass Song(models.Model):\n  '''\n  A song which can be commented on.\n  '''\n  file = models.FileField()\n  author = models.ForeignKey(User)\n  title = models.CharField(max_length=75)\n  slug = models.SlugField(unique=True)\n  description = models.TextField(blank=True)\n  comments = GenericRelation(Comment)\n</code></pre>\n\n<p>I hope you guys found this helpful as I would have loved to have come across something that showed me the more realistic application of <code>GenericForeignKey</code> and <code>GenericRelation</code> fields.</p>\n\n<h2>Is this too good to be true?</h2>\n\n<p>As with anything in life, there are pros and cons. Anytime you add more code and more abstraction, the underlying processes becomes heavier and a bit slower. Adding generic relations can add a little bit of a performance dampener despite the fact it will try and smart cache its results. All in all, it comes down to whether the cleanliness and simplicity outweighs the small performance gains. For me, the answer is a million times yes.</p>\n\n<p>There is more to the Content Types framework than I have displayed here. There is a whole level of granularity and more verbose usage, but for the average individual, this is how you will be using it 9 out of 10 times in my opinion.</p>\n\n<h2>Generic relationizers(?) beware!</h2>\n\n<p>A rather large <strong>caveat</strong> is that when you use a <code>GenericRelation</code>, if the model which has the <code>GenericRelation</code> applied (<code>Picture</code>) is deleted, all related (<code>Comment</code>) objects will also be deleted. Or at least as of the time of this writing.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>My model -&gt;</p>\n\n<pre><code>class Sample(models.Model):\n     users = models.ManyToManyField(User)\n</code></pre>\n\n<p>I want to do this (save users, user1 and user2 in this model ) -&gt;</p>\n\n<pre><code>user1 = User.objects.get(pk=1)\nuser2 = User.objects.get(pk=2)\nsample_object = Sample( users = user1, users=user2 )\nsample_object.save()\n</code></pre>\n\n<p>I know that's wrong : D, but I'm sure you get what I want to do...so how would you do it ?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You cannot create m2m relations from unsaved objects. If you have the pks, try this:</p>\n\n<pre><code>sample_object = Sample()\nsample_object.save()\nsample_object.users.add(1,2)\n</code></pre>\n\n<p><strong>Update:</strong> After reading the <a href=\"https://stackoverflow.com/questions/6996176/how-to-create-an-object-for-a-django-model-with-a-many-to-many-field/6999006#6999006\">saverio's answer</a>, I decided to investigate the issue a bit more in depth. Here are my findings.</p>\n\n<p>This was my original suggestion. It works, but isn't optimal. (Note: I'm using <code>Bar</code>s and a <code>Foo</code> instead of <code>User</code>s and a <code>Sample</code>, but you get the idea).</p>\n\n<pre><code>bar1 = Bar.objects.get(pk=1)\nbar2 = Bar.objects.get(pk=2)\nfoo = Foo()\nfoo.save()\nfoo.bars.add(bar1)\nfoo.bars.add(bar2)\n</code></pre>\n\n<p>It generates a whopping total of 7 queries:</p>\n\n<pre><code>SELECT \"app_bar\".\"id\", \"app_bar\".\"name\" FROM \"app_bar\" WHERE \"app_bar\".\"id\" = 1\nSELECT \"app_bar\".\"id\", \"app_bar\".\"name\" FROM \"app_bar\" WHERE \"app_bar\".\"id\" = 2\nINSERT INTO \"app_foo\" (\"name\") VALUES ()\nSELECT \"app_foo_bars\".\"bar_id\" FROM \"app_foo_bars\" WHERE (\"app_foo_bars\".\"foo_id\" = 1  AND \"app_foo_bars\".\"bar_id\" IN (1))\nINSERT INTO \"app_foo_bars\" (\"foo_id\", \"bar_id\") VALUES (1, 1)\nSELECT \"app_foo_bars\".\"bar_id\" FROM \"app_foo_bars\" WHERE (\"app_foo_bars\".\"foo_id\" = 1  AND \"app_foo_bars\".\"bar_id\" IN (2))\nINSERT INTO \"app_foo_bars\" (\"foo_id\", \"bar_id\") VALUES (1, 2)\n</code></pre>\n\n<p>I'm sure we can do better. You can pass multiple objects to the <code>add()</code> method:</p>\n\n<pre><code>bar1 = Bar.objects.get(pk=1)\nbar2 = Bar.objects.get(pk=2)\nfoo = Foo()\nfoo.save()\nfoo.bars.add(bar1, bar2)\n</code></pre>\n\n<p>As we can see, passing multiple objects saves one <code>SELECT</code>:</p>\n\n<pre><code>SELECT \"app_bar\".\"id\", \"app_bar\".\"name\" FROM \"app_bar\" WHERE \"app_bar\".\"id\" = 1\nSELECT \"app_bar\".\"id\", \"app_bar\".\"name\" FROM \"app_bar\" WHERE \"app_bar\".\"id\" = 2\nINSERT INTO \"app_foo\" (\"name\") VALUES ()\nSELECT \"app_foo_bars\".\"bar_id\" FROM \"app_foo_bars\" WHERE (\"app_foo_bars\".\"foo_id\" = 1  AND \"app_foo_bars\".\"bar_id\" IN (1, 2))\nINSERT INTO \"app_foo_bars\" (\"foo_id\", \"bar_id\") VALUES (1, 1)\nINSERT INTO \"app_foo_bars\" (\"foo_id\", \"bar_id\") VALUES (1, 2)\n</code></pre>\n\n<p>I wasn't aware that you can also assign a list of objects:</p>\n\n<pre><code>bar1 = Bar.objects.get(pk=1)\nbar2 = Bar.objects.get(pk=2)\nfoo = Foo()\nfoo.save()\nfoo.bars = [bar1, bar2]\n</code></pre>\n\n<p>Unfortunately, that creates one additional <code>SELECT</code>:</p>\n\n<pre><code>SELECT \"app_bar\".\"id\", \"app_bar\".\"name\" FROM \"app_bar\" WHERE \"app_bar\".\"id\" = 1\nSELECT \"app_bar\".\"id\", \"app_bar\".\"name\" FROM \"app_bar\" WHERE \"app_bar\".\"id\" = 2\nINSERT INTO \"app_foo\" (\"name\") VALUES ()\nSELECT \"app_foo_bars\".\"id\", \"app_foo_bars\".\"foo_id\", \"app_foo_bars\".\"bar_id\" FROM \"app_foo_bars\" WHERE \"app_foo_bars\".\"foo_id\" = 1\nSELECT \"app_foo_bars\".\"bar_id\" FROM \"app_foo_bars\" WHERE (\"app_foo_bars\".\"foo_id\" = 1  AND \"app_foo_bars\".\"bar_id\" IN (1, 2))\nINSERT INTO \"app_foo_bars\" (\"foo_id\", \"bar_id\") VALUES (1, 1)\nINSERT INTO \"app_foo_bars\" (\"foo_id\", \"bar_id\") VALUES (1, 2)\n</code></pre>\n\n<p>Let's try to assign a list of `pk's, as saverio suggested:</p>\n\n<pre><code>foo = Foo()\nfoo.save()\nfoo.bars = [1,2]\n</code></pre>\n\n<p>As we don't fetch the two <code>Bar</code>s, we save two <code>SELECT</code> statements, resulting in a total of 5:</p>\n\n<pre><code>INSERT INTO \"app_foo\" (\"name\") VALUES ()\nSELECT \"app_foo_bars\".\"id\", \"app_foo_bars\".\"foo_id\", \"app_foo_bars\".\"bar_id\" FROM \"app_foo_bars\" WHERE \"app_foo_bars\".\"foo_id\" = 1\nSELECT \"app_foo_bars\".\"bar_id\" FROM \"app_foo_bars\" WHERE (\"app_foo_bars\".\"foo_id\" = 1  AND \"app_foo_bars\".\"bar_id\" IN (1, 2))\nINSERT INTO \"app_foo_bars\" (\"foo_id\", \"bar_id\") VALUES (1, 1)\nINSERT INTO \"app_foo_bars\" (\"foo_id\", \"bar_id\") VALUES (1, 2)\n</code></pre>\n\n<p>And the winner is:</p>\n\n<pre><code>foo = Foo()\nfoo.save()\nfoo.bars.add(1,2)\n</code></pre>\n\n<p>Passing <code>pk</code>s to add() gives us a total of 4 queries:</p>\n\n<pre><code>INSERT INTO \"app_foo\" (\"name\") VALUES ()\nSELECT \"app_foo_bars\".\"bar_id\" FROM \"app_foo_bars\" WHERE (\"app_foo_bars\".\"foo_id\" = 1  AND \"app_foo_bars\".\"bar_id\" IN (1, 2))\nINSERT INTO \"app_foo_bars\" (\"foo_id\", \"bar_id\") VALUES (1, 1)\nINSERT INTO \"app_foo_bars\" (\"foo_id\", \"bar_id\") VALUES (1, 2)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am using jinja2, and I want to call a python function as a helper, using a similar syntax as if I were calling a macro. jinja2 seems intent on preventing me from making a function call, and insists I repeat myself by copying the function into a template as a macro.    </p>\n\n<p>Is there any straightforward way to do this?  And, is there any way to import a whole set of python functions and have them accessible from jinja2, without going through a whole lot of rigamarole (such as writing an extension)?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>For those using Flask, put this in your <code>__init__.py</code>:</p>\n\n<pre><code>def clever_function():\n    return u'HELLO'\n\napp.jinja_env.globals.update(clever_function=clever_function)\n</code></pre>\n\n<p>and in your template call it with <code>{{ clever_function() }}</code></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/176918/finding-the-index-of-an-item-given-a-list-containing-it-in-python\" dir=\"ltr\">Finding the index of an item given a list containing it in Python</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    21 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>What is a good way to find the index of an element in an array in python? \nNote that the array may not be sorted.\nIs there a way to specify what comparison operator to use?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The best way is probably to use the list method .index. </p>\n\n<p>For the objects in the list, you can do something like:</p>\n\n<pre><code>def __eq__(self, other):\n    return self.Value == other.Value\n</code></pre>\n\n<p>with any special processing you need.</p>\n\n<p>You can also use a for/in statement with enumerate(arr)</p>\n\n<p>Example of finding the index of an item that has value &gt; 100.</p>\n\n<pre><code>for index, item in enumerate(arr):\n    if item &gt; 100:\n        return index, item\n</code></pre>\n\n<p><a href=\"http://www.daniweb.com/forums/thread174502.html\" rel=\"noreferrer\">Source</a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Python's standard library has modules for <strong>configuration file parsing</strong> (<a href=\"http://docs.python.org/3/library/configparser.html\">configparser</a>), <strong>environment variable reading</strong> (<a href=\"http://docs.python.org/3/library/os.html#os.environ\">os.environ</a>), and <strong>command-line argument parsing</strong> (<a href=\"http://docs.python.org/3/library/argparse.html\">argparse</a>). I want to write a program that does all those, and also:</p>\n\n<ul>\n<li><p>Has a <strong>cascade of option values</strong>:</p>\n\n<ul>\n<li>default option values, overridden by</li>\n<li>config file options, overridden by</li>\n<li>environment variables, overridden by</li>\n<li>command-line options.</li>\n</ul></li>\n<li><p>Allows one or more <strong>configuration file locations specified on the command line</strong> with e.g. <code>--config-file foo.conf</code>, and reads that (either instead of, or additional to, the usual configuration file). This must still obey the above cascade.</p></li>\n<li><p>Allows <strong>option definitions in a single place</strong> to determine the parsing behaviour for configuration files and the command line.</p></li>\n<li><p>Unifies the parsed options into a <strong>single collection of option values</strong> for the rest of the program to access without caring where they came from.</p></li>\n</ul>\n\n<p>Everything I need is apparently in the Python standard library, but they don't work together smoothly.</p>\n\n<p>How can I achieve this with minimum deviation from the Python standard library?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The argparse module makes this not nuts, as long as you're happy with a config file that looks like command line. (I think this is an advantage, because users will only have to learn one syntax.) Setting <a href=\"http://docs.python.org/library/argparse.html#fromfile-prefix-chars\">fromfile_prefix_chars</a> to, for example, <code>@</code>, makes it so that,</p>\n\n<pre><code>my_prog --foo=bar\n</code></pre>\n\n<p>is equivalent to </p>\n\n<pre><code>my_prog @baz.conf\n</code></pre>\n\n<p>if <code>@baz.conf</code> is,</p>\n\n<pre><code>--foo\nbar\n</code></pre>\n\n<p>You can even have your code look for <code>foo.conf</code> automatically by modifying <code>argv</code></p>\n\n<pre><code>if os.path.exists('foo.conf'):\n    argv = ['@foo.conf'] + argv\nargs = argparser.parse_args(argv)\n</code></pre>\n\n<p>The format of these configuration files is modifiable by making a subclass of ArgumentParser and adding a <a href=\"http://docs.python.org/library/argparse.html#customizing-file-parsing\">convert_arg_line_to_args</a> method.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What is the best way to retrieve mp3 metadata in python?  I've seen a couple frameworks out there, but I'm unsure as to which would be the best to use.... Any ideas?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I used <a href=\"http://eyed3.nicfit.net/\" rel=\"noreferrer\">eyeD3</a> the other day with a lot of success.  I found that it could add artwork to the ID3 tag which the other modules I looked at couldn't.  You'll have to download the tar and execute <code>python setup.py install</code> from the source folder.  </p>\n\n<p>Relevant examples from the website are below.</p>\n\n<p>Reading the contents of an mp3 file containing either v1 or v2 tag info:</p>\n\n<pre><code> import eyeD3\n tag = eyeD3.Tag()\n tag.link(\"/some/file.mp3\")\n print tag.getArtist()\n print tag.getAlbum()\n print tag.getTitle()\n</code></pre>\n\n<p>Read an mp3 file (track length, bitrate, etc.) and access it's tag:</p>\n\n<pre><code>if eyeD3.isMp3File(f):\n     audioFile = eyeD3.Mp3AudioFile(f)\n     tag = audioFile.getTag()\n</code></pre>\n\n<p>Specific tag versions can be selected:</p>\n\n<pre><code> tag.link(\"/some/file.mp3\", eyeD3.ID3_V2)\n tag.link(\"/some/file.mp3\", eyeD3.ID3_V1)\n tag.link(\"/some/file.mp3\", eyeD3.ID3_ANY_VERSION)  # The default.\n</code></pre>\n\n<p>Or you can iterate over the raw frames:</p>\n\n<pre><code> tag = eyeD3.Tag()\n tag.link(\"/some/file.mp3\")\n for frame in tag.frames:\n    print frame\n</code></pre>\n\n<p>Once a tag is linked to a file it can be modified and saved:</p>\n\n<pre><code> tag.setArtist(u\"Cro-Mags\")\n tag.setAlbum(u\"Age of Quarrel\")\n tag.update()\n</code></pre>\n\n<p>If the tag linked in was v2 and you'd like to save it as v1:</p>\n\n<pre><code> tag.update(eyeD3.ID3_V1_1)\n</code></pre>\n\n<p>Read in a tag and remove it from the file:</p>\n\n<pre><code> tag.link(\"/some/file.mp3\")\n tag.remove()\n tag.update()\n</code></pre>\n\n<p>Add a new tag:</p>\n\n<pre><code> tag = eyeD3.Tag()\n tag.link('/some/file.mp3')    # no tag in this file, link returned False\n tag.header.setVersion(eyeD3.ID3_V2_3)\n tag.setArtist('Fugazi')\n tag.update()\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I need to check if some number of years have been since some date. Currently I've got <code>timedelta</code> from <code>datetime</code> module and I don't know how to convert it to years.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You need more than a <code>timedelta</code> to tell how many years have passed; you also need to know the beginning (or ending) date.  (It's a leap year thing.)  </p>\n\n<p>Your best bet is to use the <code>dateutil.relativedelta</code> <a href=\"http://labix.org/python-dateutil\" rel=\"noreferrer\">object</a>, but that's a 3rd party module.  If you want to know the <code>datetime</code> that was <code>n</code> years from some date (defaulting to right now), you can do the following::</p>\n\n<pre><code>from dateutil.relativedelta import relativedelta\n\ndef yearsago(years, from_date=None):\n    if from_date is None:\n        from_date = datetime.now()\n    return from_date - relativedelta(years=years)\n</code></pre>\n\n<p>If you'd rather stick with the standard library, the answer is a little more complex::</p>\n\n<pre><code>from datetime import datetime\ndef yearsago(years, from_date=None):\n    if from_date is None:\n        from_date = datetime.now()\n    try:\n        return from_date.replace(year=from_date.year - years)\n    except ValueError:\n        # Must be 2/29!\n        assert from_date.month == 2 and from_date.day == 29 # can be removed\n        return from_date.replace(month=2, day=28,\n                                 year=from_date.year-years)\n</code></pre>\n\n<p>If it's 2/29, and 18 years ago there was no 2/29, this function will return 2/28.  If you'd rather return 3/1, just change the last <code>return</code> statement to read::</p>\n\n<pre><code>    return from_date.replace(month=3, day=1,\n                             year=from_date.year-years)\n</code></pre>\n\n<p>Your question originally said you wanted to know how many years it's been since some date.  Assuming you want an integer number of years, you can guess based on 365.25 days per year and then check using either of the <code>yearsago</code> functions defined above::</p>\n\n<pre><code>def num_years(begin, end=None):\n    if end is None:\n        end = datetime.now()\n    num_years = int((end - begin).days / 365.25)\n    if begin &gt; yearsago(num_years, end):\n        return num_years - 1\n    else:\n        return num_years\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I run this snippet twice, in the Ubuntu terminal (encoding set to utf-8), once with <code>./test.py</code> and then with <code>./test.py &gt;out.txt</code>:</p>\n\n<pre><code>uni = u\"\\u001A\\u0BC3\\u1451\\U0001D10C\"\nprint uni\n</code></pre>\n\n<p>Without redirection it prints garbage. With redirection I get a UnicodeDecodeError. Can someone explain why I get the error only in the second case, or even better give a detailed explanation of what's going on behind the curtain in both cases?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The whole key to such encoding problems is to understand that there are in principle <strong>two distinct concepts of \"string\"</strong>: (1) string of <em>characters</em>, and (2) string/array of <em>bytes</em>. This distinction has been mostly ignored for a long time because of the historic ubiquity of encodings with no more than 256 characters (ASCII, Latin-1, Windows-1252, Mac OS Roman,\u2026): these encodings map a set of common characters to numbers between 0 and 255 (i.e. bytes); the relatively limited exchange of files before the advent of the web made this situation of incompatible encodings tolerable, as most programs could ignore the fact that there were multiple encodings as long as they produced text that remained on the same operating system: such programs would simply treat text as bytes (through the encoding used by the operating system). The correct, modern view properly separates these two string concepts, based on the following two points:</p>\n\n<ol>\n<li><p><strong>Characters</strong> are mostly <em>unrelated to computers</em>: one can draw them on a chalk board, etc., like for instance \u0628\u0627\u064a\u062b\u0648\u0646, \u4e2d\u87d2 and \ud83d\udc0d.  \"Characters\" for machines also include \"drawing instructions\" like for example spaces, carriage return, instructions to set the writing direction (for Arabic, etc.), accents, etc. A <a href=\"http://en.wikipedia.org/wiki/List_of_unicode_characters\" rel=\"noreferrer\">very large character list</a> is included in the <a href=\"http://en.wikipedia.org/wiki/Unicode\" rel=\"noreferrer\">Unicode</a> standard; it covers most of the known characters.</p></li>\n<li><p>On the other hand, computers do need to represent abstract characters in some way: for this, they use <strong>arrays of bytes</strong> (numbers between 0 and 255 included), because their memory comes in byte chunks. The necessary process that converts characters to bytes is called <em>encoding</em>.  Thus, a computer <em>requires</em> an encoding in order to represent characters.  Any text present on your computer is encoded (until it is displayed), whether it be sent to a terminal (which expects characters encoded in a specific way), or saved in a file.  In order to be displayed or properly \"understood\" (by, say, the Python interpreter), streams of bytes are <em>decoded</em> into characters. <a href=\"http://en.wikipedia.org/wiki/Unicode#Mapping_and_encodings\" rel=\"noreferrer\">A few encodings</a> (UTF-8, UTF-16,\u2026) are defined by Unicode for its list of characters (Unicode thus defines both a list of characters and encodings for these characters\u2014there are still places where one sees the expression \"Unicode encoding\" as a way to refer to the ubiquitous UTF-8, but this is incorrect terminology, as Unicode provides <em>multiple</em> encodings).</p></li>\n</ol>\n\n<p>In summary, <strong>computers need to internally represent characters with bytes</strong>, and they do so through two operations:</p>\n\n<blockquote>\n  <p><strong>Encoding</strong>: characters \u2192 bytes</p>\n  \n  <p><strong>Decoding</strong>: bytes \u2192 characters</p>\n</blockquote>\n\n<p>Some encodings cannot encode all characters (e.g., ASCII), while (some) Unicode encodings allow you to encode all Unicode characters. <em>The encoding is also not necessarily unique</em>, because some characters can be represented either directly or as a <em>combination</em> (e.g. of a base character and of accents).</p>\n\n<p>Note that the concept of <strong>newline</strong> <a href=\"https://en.wikipedia.org/wiki/Newline\" rel=\"noreferrer\">adds a layer of complication</a>, since it can be represented by different (control) characters that depend on the operating system (this is the reason for Python's <a href=\"https://docs.python.org/2/library/functions.html#open\" rel=\"noreferrer\">universal newline file reading mode</a>).</p>\n\n<p>Now, what I have called \"character\" above is what Unicode calls a \"<strong>user-perceived character</strong>\". A single user-perceived character can sometimes be represented in Unicode by combining character parts (base character, accents,\u2026) found at different <a href=\"http://en.wikipedia.org/wiki/List_of_unicode_characters\" rel=\"noreferrer\">indexes</a> in the Unicode list, which are called \"<strong><a href=\"http://unicode.org/glossary/\" rel=\"noreferrer\">code points</a></strong>\"\u2014these codes points can be combined together to form a \"grapheme cluster\". \nUnicode thus leads to a third concept of string, made of a sequence of Unicode code points, that sits between byte and character strings, and which is closer to the latter. I will call them \"<strong>Unicode strings</strong>\" (like in Python\u00a02).</p>\n\n<p>While Python can <em>print</em> strings of (user-perceived) characters, <strong>Python non-byte strings are actually sequences of Unicode code points</strong>, not of user-perceived characters. The code point values are the ones used in Python's <code>\\u</code> and <code>\\U</code> Unicode string syntax.  They should not be confused with the encoding of a character (and do not have to bear any relationship with it: Unicode code points can be encoded in various ways). </p>\n\n<p>Concretely, this implies that <strong>the length of a Python (Unicode) string is <em>not</em> always its number of user-perceived characters</strong>: thus <code>s = \"\\u1100\\u1161\\u11a8\"; print(s, \"len\", len(s))</code> (Python\u00a03) gives <code>\uac01 len 3</code> despite <code>s</code> having a single user-perceived (Korean) character (because it is represented with 3 code points\u2014even if it does not have to, as <code>print(\"\\uac01\")</code> shows). However, in many practical circumstances, the length of a string is its number of user-perceived characters, because many characters are typically stored by Python as a single Unicode code point.</p>\n\n<p>In <strong>Python 2</strong>, Unicode strings are called\u2026 \"Unicode strings\" (<code>unicode</code> type, literal form <code>u\"\u2026\"</code>), while byte arrays are \"strings\" (<code>str</code> type, where the array of bytes can for instance be constructed with string literals <code>\"\u2026\"</code>).  In <strong>Python 3</strong>, Unicode strings are simply called \"strings\" (<code>str</code> type, literal form <code>\"\u2026\"</code>), while byte arrays are\u00a0\"bytes\" (<code>bytes</code> type, literal form <code>b\"\u2026\"</code>).</p>\n\n<p>With these few key points, you should be able to understand most encoding related questions!</p>\n\n<hr>\n\n<p>Normally, when you <strong>print</strong> <code>u\"\u2026\"</code> <strong>to a terminal</strong>, you should not get garbage: Python knows the encoding of your terminal.  In fact, you can check what encoding the terminal expects:</p>\n\n<pre><code>% python\nPython 2.7.6 (default, Nov 15 2013, 15:20:37) \n[GCC 4.2.1 Compatible Apple LLVM 5.0 (clang-500.2.79)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import sys\n&gt;&gt;&gt; print sys.stdout.encoding\nUTF-8\n</code></pre>\n\n<p>If your input characters can be encoded with the terminal's encoding, Python will do so and will send the corresponding bytes to your terminal without complaining. The terminal will then do its best to display the characters after decoding the input bytes (at worst the terminal font does not have some of the characters and will print some kind of blank instead).</p>\n\n<p>If your input characters cannot be encoded with the terminal's encoding, then it means that the terminal is not configured for displaying these characters. Python will complain (in Python with a <code>UnicodeEncodeError</code> since the character string cannot be encoded in a way that suits your terminal). The only possible solution is to use a terminal that can display the characters (either by configuring the terminal so that it accepts an encoding that can represent your characters, or by using a different terminal program). This is important when you distribute programs that can be used in different environments: messages that you print should be representable in the user's terminal. Sometimes it is thus best to stick to strings that only contain ASCII characters.</p>\n\n<p>However, when you <strong>redirect or pipe the output</strong> of your program, then it is generally not possible to know what the input encoding of the receiving program is, and the above code returns some default encoding: None (Python 2.7) or UTF-8 (Python 3):</p>\n\n<pre><code>% python2.7 -c \"import sys; print sys.stdout.encoding\" | cat\nNone\n% python3.4 -c \"import sys; print(sys.stdout.encoding)\" | cat\nUTF-8\n</code></pre>\n\n<p>The encoding of stdin, stdout and stderr can however be <a href=\"https://docs.python.org/2/using/cmdline.html#envvar-PYTHONIOENCODING\" rel=\"noreferrer\">set</a> through the <code>PYTHONIOENCODING</code> environment variable, if needed:</p>\n\n<pre><code>% PYTHONIOENCODING=UTF-8 python2.7 -c \"import sys; print sys.stdout.encoding\" | cat\nUTF-8\n</code></pre>\n\n<hr>\n\n<p>If the printing to a terminal does not produce what you expect, you can check the UTF-8 encoding that you put manually in is correct; for instance, your first character (<code>\\u001A</code>) is not printable, <a href=\"http://www.tamasoft.co.jp/en/general-info/unicode.html\" rel=\"noreferrer\">if I'm not mistaken</a>.</p>\n\n<p>For more info: <a href=\"http://wiki.python.org/moin/PrintFails\" rel=\"noreferrer\">http://wiki.python.org/moin/PrintFails</a>.  From this link you can find a solution like this, for Python 2.x:</p>\n\n<pre><code>import codecs\nimport locale\nimport sys\n\n# Wrap sys.stdout into a StreamWriter to allow writing unicode.\nsys.stdout = codecs.getwriter(locale.getpreferredencoding())(sys.stdout) \n\nuni = u\"\\u001A\\u0BC3\\u1451\\U0001D10C\"\nprint uni\n</code></pre>\n\n<p>For Python 3, you can check <a href=\"https://stackoverflow.com/questions/4374455/how-to-set-sys-stdout-encoding-in-python-3\">one of the questions asked previously</a> on StackOverflow.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>When trying to load the <code>punkt</code> tokenizer...</p>\n\n<pre><code>import nltk.data\ntokenizer = nltk.data.load('nltk:tokenizers/punkt/english.pickle')\n</code></pre>\n\n<p>...a <code>LookupError</code> was raised:</p>\n\n<pre><code>&gt; LookupError: \n&gt;     *********************************************************************   \n&gt; Resource 'tokenizers/punkt/english.pickle' not found.  Please use the NLTK Downloader to obtain the resource: nltk.download().   Searched in:\n&gt;         - 'C:\\\\Users\\\\Martinos/nltk_data'\n&gt;         - 'C:\\\\nltk_data'\n&gt;         - 'D:\\\\nltk_data'\n&gt;         - 'E:\\\\nltk_data'\n&gt;         - 'E:\\\\Python26\\\\nltk_data'\n&gt;         - 'E:\\\\Python26\\\\lib\\\\nltk_data'\n&gt;         - 'C:\\\\Users\\\\Martinos\\\\AppData\\\\Roaming\\\\nltk_data'\n&gt;     **********************************************************************\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I had this same problem. Go into a python shell and type:</p>\n\n<pre><code>&gt;&gt;&gt; import nltk\n&gt;&gt;&gt; nltk.download()\n</code></pre>\n\n<p>Then an installation window appears. Go to the 'Models' tab and select 'punkt' from under the 'Identifier' column. Then click Download and it will install the necessary files. Then it should work!</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/1663807/how-to-iterate-through-two-lists-in-parallel\" dir=\"ltr\">How to iterate through two lists in parallel?</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    6 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>I have a list of Latitudes and one of Longitudes and need to iterate over the latitude and longitude pairs.</p>\n\n<p>Is it better to:</p>\n\n<ul>\n<li><p>A. Assume that the lists are of equal lengths:</p>\n\n<pre><code>for i in range(len(Latitudes):\n    Lat,Long=(Latitudes[i],Longitudes[i])\n</code></pre></li>\n<li><p>B. Or:</p>\n\n<pre><code>for Lat,Long in [(x,y) for x in Latitudes for y in Longitudes]:\n</code></pre></li>\n</ul>\n\n<p>(Note that B is incorrect. This gives me all the pairs, equivalent to <code>itertools.product()</code>)</p>\n\n<p>Any thoughts on the relative merits of each, or which is more pythonic?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This is as pythonic as you can get:</p>\n\n<pre><code>for lat, long in zip(Latitudes, Longitudes):\n    print lat, long\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/1301346/what-is-the-meaning-of-a-single-and-a-double-underscore-before-an-object-name\" dir=\"ltr\">What is the meaning of a single- and a double-underscore before an object name?</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    11 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>Somebody was nice enough to explain to me that __method() mangles but instead of bothering him further since there are a lot of other people who need help I was wondering if somebody could elaborate the differences further.</p>\n\n<p>For example I don't need mangling but does _ stay private so somebody couldn't do instance._method()? Or does it just keep it from overwriting another variable by making it unique?  I don't need my internal methods \"hidden\" but since they are specific to use I don't want them being used outside of the class.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>From <a href=\"http://www.python.org/dev/peps/pep-0008/\" rel=\"noreferrer\">PEP 8</a>:</p>\n\n<blockquote>\n  <ul>\n  <li><p><code>_single_leading_underscore</code>: weak \"internal use\" indicator.  E.g.</p>\n  \n  <p><code>from M import *</code></p>\n  \n  <p>does not import objects whose name starts with an underscore.</p></li>\n  <li><p><code>single_trailing_underscore_</code>: used by convention to avoid conflicts with Python keyword, e.g.</p>\n  \n  <p><code>Tkinter.Toplevel(master, class_='ClassName')</code></p></li>\n  <li><p><code>__double_leading_underscore</code>: when naming a class attribute, invokes name\n    mangling (inside class <code>FooBar</code>, <code>__boo</code> becomes <code>_FooBar__boo</code>; see below).</p></li>\n  <li><code>__double_leading_and_trailing_underscore__</code>: \"magic\" objects or\n    attributes that live in user-controlled namespaces.  E.g. <code>__init__</code>,\n    <code>__import__</code> or <code>__file__</code>.  Never invent such names; only use them\n    as documented.</li>\n  </ul>\n</blockquote>\n\n<p>Also, from David Goodger's <a href=\"http://python.net/~goodger/projects/pycon/2007/idiomatic/presentation.html\" rel=\"noreferrer\">Code Like a Pythonista</a>:</p>\n\n<blockquote>\n  <p>Attributes: <code>interface</code>, <code>_internal</code>, <code>__private</code></p>\n  \n  <p>But try to avoid the <code>__private</code> form. I never use it. Trust me. If you\n  use it, you WILL regret it later.</p>\n  \n  <p>Explanation:</p>\n  \n  <p>People coming from a C++/Java background are especially prone to\n  overusing/misusing this \"feature\". But <code>__private</code> names don't work the\n  same way as in Java or C++. They just trigger a name mangling whose\n  purpose is to prevent accidental namespace collisions in subclasses:\n  <code>MyClass.__private</code> just becomes <code>MyClass._MyClass__private</code>. (Note that\n  even this breaks down for subclasses with the same name as the\n  superclass, e.g. subclasses in different modules.) It is possible to\n  access <code>__private</code> names from outside their class, just inconvenient and\n  fragile (it adds a dependency on the exact name of the superclass).</p>\n  \n  <p>The problem is that the author of a class may legitimately think \"this\n  attribute/method name should be private, only accessible from within\n  this class definition\" and use the <code>__private</code> convention. But later on,\n  a user of that class may make a subclass that legitimately needs\n  access to that name. So either the superclass has to be modified\n  (which may be difficult or impossible), or the subclass code has to\n  use manually mangled names (which is ugly and fragile at best).</p>\n  \n  <p>There's a concept in Python: \"we're all consenting adults here\". If\n  you use the <code>__private</code> form, who are you protecting the attribute from?\n  It's the responsibility of subclasses to use attributes from\n  superclasses properly, and it's the responsibility of superclasses to\n  document their attributes properly.</p>\n  \n  <p>It's better to use the single-leading-underscore convention,\n  <code>_internal</code>. \"This isn't name mangled at all; it just indicates to\n  others to \"be careful with this, it's an internal implementation\n  detail; don't touch it if you don't fully understand it\". It's only a\n  convention though.</p>\n</blockquote>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>There has to be an easier way to do this. I have objects that want to be refreshed every so often, so I want to record when they were created, check against the current timestamp, and refresh as necessary. </p>\n\n<p>datetime.datetime has proven to be difficult, and I don't want to dive into the ctime library. Is there anything easier for this sort of thing? </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>if you want to compute differences between two known dates, use <code>total_seconds</code> like this:</p>\n\n<pre><code>import datetime as dt\n\na = dt.datetime(2013,12,30,23,59,59)\nb = dt.datetime(2013,12,31,23,59,59)\n\n(b-a).total_seconds()\n</code></pre>\n\n<p>86400.0</p>\n\n<pre><code>#note that seconds doesn't give you what you want:\n(b-a).seconds\n</code></pre>\n\n<p>0</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In python, How do I do something like:</p>\n\n<pre><code>for car in cars:\n   # Skip first and last, do work for rest\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The other answers only work for a sequence.</p>\n\n<p>For any iterable, to skip the first item:</p>\n\n<pre><code>itercars = iter(cars)\nnext(itercars)\nfor car in itercars:\n    # do work\n</code></pre>\n\n<p>If you want to skip the last, you could do:</p>\n\n<pre><code>itercars = iter(cars)\n# add 'next(itercars)' here if you also want to skip the first\nprev = next(itercars)\nfor car in itercars:\n    # do work on 'prev' not 'car'\n    # at end of loop:\n    prev = car\n# now you can do whatever you want to do to the last one on 'prev'\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What is the most idiomatic way to do the following?</p>\n\n<pre><code>def xstr(s):\n    if s is None:\n        return ''\n    else:\n        return s\n\ns = xstr(a) + xstr(b)\n</code></pre>\n\n<p><strong>update:</strong> I'm incorporating Tryptich's suggestion to use str(s), which makes this routine work for other types besides strings.  I'm awfully impressed by Vinay Sajip's lambda suggestion, but I want to keep my code relatively simple.</p>\n\n<pre><code>def xstr(s):\n    if s is None:\n        return ''\n    else:\n        return str(s)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you actually want your function to behave like the <code>str()</code> built-in, but return an empty string when the argument is None, do this:</p>\n\n<pre><code>def xstr(s):\n    if s is None:\n        return ''\n    return str(s)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I need to know if a python module exists, without importing it.</p>\n\n<p>Importing something that might not exist (not what I want):</p>\n\n<pre><code>try:\n    import eggs\nexcept ImportError:\n    pass\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<h2>Python2</h2>\n\n<p>To check if import can find something in python2, using <code>imp</code></p>\n\n<pre><code>import imp\ntry:\n    imp.find_module('eggs')\n    found = True\nexcept ImportError:\n    found = False\n</code></pre>\n\n<p>To find dotted imports, you need to do more:</p>\n\n<pre><code>import imp\ntry:\n    spam_info = imp.find_module('spam')\n    spam = imp.load_module('spam', *spam_info)\n    imp.find_module('eggs', spam.__path__) # __path__ is already a list\n    found = True\nexcept ImportError:\n    found = False\n</code></pre>\n\n<p>You can also use <code>pkgutil.find_loader</code> (more or less the same as the python3 part</p>\n\n<pre><code>import pkgutil\neggs_loader = pkgutil.find_loader('eggs')\nfound = eggs_loader is not None\n</code></pre>\n\n<h2>Python3</h2>\n\n<h3>Python3 &lt;= 3.3</h3>\n\n<p>You should use <code>importlib</code>, How I went about doing this was:</p>\n\n<pre><code>import importlib\nspam_loader = importlib.find_loader('spam')\nfound = spam_loader is not None\n</code></pre>\n\n<p>My expectation being, if you can find a loader for it, then it exists.  You can also be a bit more smart about it, like filtering out what loaders you will accept.  For example</p>\n\n<pre><code>import importlib\nspam_loader = importlib.find_loader('spam')\n# only accept it as valid if there is a source file for the module - no bytecode only.\nfound = issubclass(type(spam_loader), importlib.machinery.SourceFileLoader)\n</code></pre>\n\n<h3>Python3 &gt;= 3.4</h3>\n\n<p>In Python3.4 <code>importlib.find_loader</code> <a href=\"https://docs.python.org/3/library/importlib.html#importlib.find_loader\" rel=\"noreferrer\">python docs</a> was deprecated in favour of <code>importlib.util.find_spec</code>. Really, you need to choose any concrete\nimplementation, recomended is the <code>importlib.util.find_spec</code> one.  There\nare others like <code>importlib.machinery.FileFinder</code>, which is useful\nif you're after a specific file to load.  Figuring out how to use\nthem is beyond the scope of this.</p>\n\n<pre><code>import importlib\nspam_spec = importlib.util.find_spec(\"spam\")\nfound = spam_spec is not None\n</code></pre>\n\n<p>This also works with relative imports but you must supply the starting\npackage, so you could also do:</p>\n\n<pre><code>import importlib\nspam_spec = importlib.util.find_spec(\"..spam\", package=\"eggs.bar\")\nfound = spam_spec is not None\nspam_spec.name == \"eggs.spam\"\n</code></pre>\n\n<p>While I'm sure there exists a reason for doing this - I'm not sure what it would be.</p>\n\n<h3>WARNING</h3>\n\n<p>When trying to find a submodule, it will import\nthe parent module (for <em>all</em> of the above methods)!</p>\n\n<pre><code>food\\\n|- __init__.py\n\\- eggs.py\n\n## __init__.py\nprint(\"module food loaded\")\n\n## eggs.py\nprint(\"module eggs\")\n\nwere you then to run\n&gt;&gt;&gt; import importlib\n&gt;&gt;&gt; spam_spec = importlib.find_spec(\"food.eggs\")\nmodule food loaded\nModuleSpec(name='food.eggs', loader=&lt;_frozen_importlib.SourceFileLoader object at 0x10221df28&gt;, origin='/home/user/food/eggs.py')\n</code></pre>\n\n<p><em>comments welcome on getting around this</em></p>\n\n<h2>Acknowledgements</h2>\n\n<ul>\n<li>@rvighne for importlib</li>\n<li>@lucas-guido for python3.3+ depricating <code>find_loader</code></li>\n<li>@enpenax for pkgutils.find_loader behaviour in python2.7</li>\n</ul>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>From my understanding:</p>\n\n<p>An <strong>interpreted</strong> language is a high-level language run and executed by an interpreter (a program which converts the high-level language to machine code and then executing) on the go; it processes the program a little at a time.</p>\n\n<p>A <strong>compiled</strong> language is a high-level language whose code is first converted to machine-code by a compiler (a program which converts the high-level language to machine code) and then executed by an executor (another program for running the code).</p>\n\n<p>Correct me if my definitions are wrong.</p>\n\n<p>Now coming back to Python, I am bit confused about this. Everywhere you learn that Python is an interpreted language, but it's interpreted to some intermediate code (like byte-code or IL) and <em>not</em> to the machine code. So which program then executes the IM code? Please help me understand how a Python script is handled and run.  </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>First off, interpreted/compiled is not a property of the language but a property of the implementation. For most languages, most if not all implementations fall in one category, so one might save a few words saying the language is interpreted/compiled too, but it's still an important distinction, both because it aids understanding and because there are quite a few languages with usable implementations of both kinds (mostly in the realm of functional languages, see Haskell and ML). In addition, there are C interpreters and projects that attempt to compile a subset of Python to C or C++ code (and subsequently to machine code).</p>\n\n<p>Second, compilation is not restricted to ahead-of-time compilation to native machine code. A compiler is, more generally, a program that converts a program in one programming language into a program in another programming language (arguably, you can even have a compiler with the same input and output language if significant transformations are applied). And JIT compilers compile to native machine code <em>at runtime</em>, which can give speed very close to or even better than ahead of time compilation (depending on the benchmark and the quality of the implementations compared).</p>\n\n<p>But to stop nitpicking and answer the question you meant to ask: Practically (read: using a somewhat popular and mature implementation), Python is <strong>compiled</strong>. Not compiled to machine code ahead of time (i.e. \"compiled\" by the restricted and wrong, but alas common definition), \"only\" compiled to <a href=\"http://en.wikipedia.org/wiki/Bytecode\" rel=\"noreferrer\">bytecode</a>, but it's still compilation with at least some of the benefits. For example, the statement <code>a = b.c()</code> is compiled to a byte stream which, when \"disassembled\", looks somewhat like <code>load 0 (b); load_str 'c'; get_attr; call_function 0; store 1 (a)</code>. This is a simplification, it's actually less readable and a bit more low-level -  you can experiment with the standard library <a href=\"http://docs.python.org/library/dis.html\" rel=\"noreferrer\"><code>dis</code> module</a> and see what the real deal looks like. Interpreting this is faster than interpreting from a higher-level representation.</p>\n\n<p>That bytecode is either interpreted (note that there's a difference, both in theory and in practical performance, between interpreting directly and first compiling to some intermediate representation and interpret that), as with the reference implementation (CPython), or both interpreted and compiled to optimized machine code at runtime, as with <a href=\"http://pypy.org/\" rel=\"noreferrer\">PyPy</a>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Recently I wrote a function to generate certain sequences with nontrivial constraints. The problem came with a natural recursive solution. Now it happens that, even for relatively small input, the sequences are several thousands, thus I would prefer to use my algorithm as a generator instead of using it to fill a list with all the sequences.</p>\n\n<p>Here is an example. Suppose we want to compute all the permutations of a string with a recursive function. The following naive algorithm takes an extra argument 'storage' and appends a permutation to it whenever it finds one:</p>\n\n<pre><code>def getPermutations(string, storage, prefix=\"\"):\n   if len(string) == 1:\n      storage.append(prefix + string)   # &lt;-----\n   else:\n      for i in range(len(string)):\n         getPermutations(string[:i]+string[i+1:], storage, prefix+string[i])\n\nstorage = []\ngetPermutations(\"abcd\", storage)\nfor permutation in storage: print permutation\n</code></pre>\n\n<p>(Please don't care about inefficiency, this is only an example.)</p>\n\n<p>Now I want to turn my function into a generator, i.e. to yield a permutation instead of appending it to the storage list:</p>\n\n<pre><code>def getPermutations(string, prefix=\"\"):\n   if len(string) == 1:\n      yield prefix + string             # &lt;-----\n   else:\n      for i in range(len(string)):\n         getPermutations(string[:i]+string[i+1:], prefix+string[i])\n\nfor permutation in getPermutations(\"abcd\"):\n   print permutation\n</code></pre>\n\n<p>This code does <em>not</em> work (the function behaves like an empty generator).</p>\n\n<p>Am I missing something?\nIs there a way to turn the above recursive algorithm into a generator <em>without replacing it with an iterative one</em>?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>def getPermutations(string, prefix=\"\"):\n    if len(string) == 1:\n        yield prefix + string\n    else:\n        for i in xrange(len(string)):\n            for perm in getPermutations(string[:i] + string[i+1:], prefix+string[i]):\n                yield perm\n</code></pre>\n\n<p>Or without an accumulator:</p>\n\n<pre><code>def getPermutations(string):\n    if len(string) == 1:\n        yield string\n    else:\n        for i in xrange(len(string)):\n            for perm in getPermutations(string[:i] + string[i+1:]):\n                yield string[i] + perm\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I don't understand the following from <a href=\"http://www.python.org/dev/peps/pep-0404/\" rel=\"noreferrer\">pep-0404</a></p>\n\n<blockquote>\n  <p>In Python 3, implicit relative imports within packages are no longer\n  available - only absolute imports and explicit relative imports are\n  supported. In addition, star imports (e.g. from x import *) are only\n  permitted in module level code.</p>\n</blockquote>\n\n<p>What is a relative import?\nIn what other places star import was allowed in python2?\nPlease explain with examples.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Relative import happens whenever you are importing a package relative to the current script/package.</p>\n\n<p>Consider the following tree for example:</p>\n\n<pre><code>mypkg\n\u251c\u2500\u2500 base.py\n\u2514\u2500\u2500 derived.py\n</code></pre>\n\n<p>Now, your <code>derived.py</code> requires something from <code>base.py</code>. In Python 2, you could do it like this (in <code>derived.py</code>):</p>\n\n<pre><code>from base import BaseThing\n</code></pre>\n\n<p>Python 3 no longer supports that since it's not explicit whether you want the 'relative' or 'absolute' <code>base</code>. In other words, if there was a Python package named <code>base</code> installed in the system, you'd get the wrong one.</p>\n\n<p>Instead it requires you to use <em>explicit imports</em> which explicitly specify location of a module on a path-alike basis. Your <code>derived.py</code> would look like:</p>\n\n<pre><code>from .base import BaseThing\n</code></pre>\n\n<p>The leading <code>.</code> says 'import <code>base</code> from module directory'; in other words, <code>.base</code> maps to <code>./base.py</code>.</p>\n\n<p>Similarly, there is <code>..</code> prefix which goes up the directory hierarchy like <code>../</code> (with <code>..mod</code> mapping to <code>../mod.py</code>), and then <code>...</code> which goes two levels up (<code>../../mod.py</code>) and so on.</p>\n\n<p>Please however note that the relative paths listed above were relative to directory where current module (<code>derived.py</code>) resides in, <em>not</em> the current working directory.</p>\n\n<hr>\n\n<p><em>@BrenBarn</em> has already explained the star import case. For completeness, I will have to say the same ;).</p>\n\n<p>For example, you need to use a few <code>math</code> functions but you use them only in a single function. In Python 2 you were permitted to be semi-lazy:</p>\n\n<pre><code>def sin_degrees(x):\n    from math import *\n    return sin(degrees(x))\n</code></pre>\n\n<p>Note that it already triggers a warning in Python 2:</p>\n\n<pre><code>a.py:1: SyntaxWarning: import * only allowed at module level\n  def sin_degrees(x):\n</code></pre>\n\n<p>In modern Python 2 code you should and in Python 3 you have to do either:</p>\n\n<pre><code>def sin_degrees(x):\n    from math import sin, degrees\n    return sin(degrees(x))\n</code></pre>\n\n<p>or:</p>\n\n<pre><code>from math import *\n\ndef sin_degrees(x):\n    return sin(degrees(x))\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In Python, how do I create a numpy array of arbitrary shape filled with all True or all False?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>numpy already allows the creation of arrays of all ones or all zeros very easily:</p>\n\n<p>e.g. <code>np.ones((2, 2))</code> or <code>np.zeros((2, 2))</code></p>\n\n<p>Since <code>True</code> and <code>False</code> are represented in Python as <code>1</code> and <code>0</code>, respectively, we have only to cast this array as boolean using the optional <code>dtype</code> parameter and we are done.</p>\n\n<p><code>np.ones((2, 2), dtype=bool)</code></p>\n\n<p>returns:</p>\n\n<pre><code>array([[ True,  True],\n       [ True,  True]], dtype=bool)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have an environment called <code>doors</code> and I would like to rename it to <code>django</code> for the <a href=\"http://www.doughellmann.com/projects/virtualenvwrapper/\" rel=\"noreferrer\">virtualenvwrapper</a>.</p>\n\n<p>I've noticed that if I just rename the folder <code>~/.virtualenvs/doors</code> to <code>django</code>, I can now call <code>workon django</code>, but the environment still says <code>(doors)hobbes3@hobbes3</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use:</p>\n\n<pre><code>cpvirtualenv oldenv newenv\nrmvirtualenv oldenv\n</code></pre>\n\n<p>So in your case:</p>\n\n<pre><code>cpvirtualenv doors django\nrmvirtualenv doors\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I notice that it is often suggested to use queues with multiple treads, instead of lists and .pop(). Is this because lists are not thread-safe, or for some other reason?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Lists themselves are thread-safe. In CPython the GIL protects against concurrent accesses to them, and other implementations take care to use a fine-grained lock or a synchronized datatype for their list implementations. However, while lists <em>themselves</em> can't go corrupt by attempts to concurrently access, the lists's <em>data</em> is not protected. For example:</p>\n\n<pre><code>L[0] += 1\n</code></pre>\n\n<p>is not guaranteed to actually increase L[0] by one if another thread does the same thing, because <code>+=</code> is not an atomic operation. (Very, very few operations in Python are actually atomic, because most of them can cause arbitrary Python code to be called.) You should use Queues because if you just use an unprotected list, you may get or delete <em>the wrong item</em> because of race conditions.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>So I am running a Python script within which I am calling Python's debugger, PDB by writing:</p>\n\n<pre><code>import ipdb; ipdb.set_trace()\n</code></pre>\n\n<p>(iPython's version of PDB, though for the matter I don't think it makes a difference; I use it for the colored output only).</p>\n\n<p>Now, when I get to the debugger I want to execute a multi-line statement such as an if clause or a for loop but as soon as I type</p>\n\n<pre><code>if condition:\n</code></pre>\n\n<p>and hit the return key, I get the error message <code>*** SyntaxError: invalid syntax (&lt;stdin&gt;, line 1)</code></p>\n\n<p>How can one execute multi-line statements within PDB? If not possible is there a way around this to still executing an if clause or a for loop?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You could do this while in pdb to launch a temporary interactive Python session with all the local variables available:</p>\n\n<pre><code>(pdb) !import code; code.interact(local=vars())\nPython 2.6.5 (r265:79063, Apr 16 2010, 13:57:41) \n[GCC 4.4.3] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n(InteractiveConsole)\n&gt;&gt;&gt; \n</code></pre>\n\n<p>When you're done, use Ctrl-D to return to the regular pdb prompt.</p>\n\n<p>Just don't hit Ctrl-C, that will terminate the entire pdb session.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am interested in enabling code folding in Vim for Python code. I have noticed multiple ways to do so.</p>\n\n<p>Does anyone have a preferred way to do Python code folding in Vim? I.e, </p>\n\n<ul>\n<li>Do you have a particular Vim plugin that you use and like?</li>\n<li>Do you use manual folding or do you place markers in comments?</li>\n<li>Any other recommended ways to do code folding for Python in Vim?</li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Personally I can't convince myself to litter my code with the markers. I've become pretty used to (and efficient) at using indent-folding. Together with my mapping of space bar (see below) to open/close folds and the zR and zM commands, I'm right at home. Perfect for Python!</p>\n\n<blockquote>\n  <p><code>nnoremap &lt;space&gt; za</code></p>\n  \n  <p><code>vnoremap &lt;space&gt; zf</code></p>\n</blockquote>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm currently working on a map editor for a game in pygame, using tile maps.\nThe level is built up out of blocks in the following structure(though much larger):</p>\n\n<pre><code>level1 = (\n         (1,1,1,1,1,1)\n         (1,0,0,0,0,1)\n         (1,0,0,0,0,1)\n         (1,0,0,0,0,1)\n         (1,0,0,0,0,1)\n         (1,1,1,1,1,1))\n</code></pre>\n\n<p>where \"1\" is a block that's a wall and \"0\" is a block that's empty air.</p>\n\n<p>The following code is basically the one handling the change of block type:</p>\n\n<pre><code>clicked = pygame.mouse.get_pressed()\nif clicked[0] == 1:\n    currLevel[((mousey+cameraY)/60)][((mousex+cameraX)/60)] = 1\n</code></pre>\n\n<p>But since the level is stored in a tuple, I'm unable to change the values of the different blocks. How do I go about changing the different values in the level in an easy manner?</p>\n\n<p>Edit: Solved! Thank you guys</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Convert tuple to list:</p>\n\n<pre><code>&gt;&gt;&gt; t = ('my', 'name', 'is', 'mr', 'tuple')\n&gt;&gt;&gt; t\n('my', 'name', 'is', 'mr', 'tuple')\n&gt;&gt;&gt; list(t)\n['my', 'name', 'is', 'mr', 'tuple']\n</code></pre>\n\n<p>Convert list to tuple:</p>\n\n<pre><code>&gt;&gt;&gt; l = ['my', 'name', 'is', 'mr', 'list']\n&gt;&gt;&gt; l\n['my', 'name', 'is', 'mr', 'list']\n&gt;&gt;&gt; tuple(l)\n('my', 'name', 'is', 'mr', 'list')\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm trying to understand how the <code>any()</code> and <code>all()</code> Python built-in functions work. </p>\n\n<p>I'm trying to compare the tuples so that if any value is different then it will return <code>True</code> and if they are all the same it will return <code>False</code>. How are they working in this case to return [False, False, False]?</p>\n\n<p><code>d</code> is a <code>defaultdict(list)</code>.</p>\n\n<pre><code>print d['Drd2']\n# [[1, 5, 0], [1, 6, 0]]\nprint list(zip(*d['Drd2']))\n# [(1, 1), (5, 6), (0, 0)]\nprint [any(x) and not all(x) for x in zip(*d['Drd2'])]\n# [False, False, False]\n</code></pre>\n\n<p>To my knowledge, this should output </p>\n\n<pre><code># [False, True, False]\n</code></pre>\n\n<p>since (1,1) are the same, (5,6) are different, and (0,0) are the same. </p>\n\n<p><strong>Why is it evaluating to False for all tuples?</strong> </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can roughly think of <code>any</code> and <code>all</code> as series of logical <code>or</code> and <code>and</code> operators, respectively.</p>\n\n<p><strong>any</strong></p>\n\n<p><code>any</code> will return <code>True</code> when <strong>at least one of the elements</strong> is Truthy. Read about <a href=\"http://docs.python.org/2/library/stdtypes.html#truth-value-testing\" rel=\"noreferrer\">Truth Value Testing.</a></p>\n\n<p><strong>all</strong></p>\n\n<p><code>all</code> will return <code>True</code> only when <strong>all the elements</strong> are Truthy.</p>\n\n<p><strong>Truth table</strong> </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>+-----------------------------------------+---------+---------+\n|                                         |   any   |   all   |\n+-----------------------------------------+---------+---------+\n| All Truthy values                       |  True   |  True   |\n+-----------------------------------------+---------+---------+\n| All Falsy values                        |  False  |  False  |\n+-----------------------------------------+---------+---------+\n| One Truthy value (all others are Falsy) |  True   |  False  |\n+-----------------------------------------+---------+---------+\n| One Falsy value (all others are Truthy) |  True   |  False  |\n+-----------------------------------------+---------+---------+\n| Empty Iterable                          |  False  |  True   |\n+-----------------------------------------+---------+---------+\n</code></pre>\n\n<p><strong>Note 1:</strong> The empty iterable case is explained in the official documentation, like this</p>\n\n<p><a href=\"https://docs.python.org/2/library/functions.html#any\" rel=\"noreferrer\"><strong><code>any</code></strong></a></p>\n\n<blockquote>\n  <p>Return <code>True</code> if any element of the iterable is true. <strong>If the iterable is empty, return <code>False</code></strong></p>\n</blockquote>\n\n<p>Since none of the elements is true, it returns <code>False</code> in this case. </p>\n\n<p><a href=\"https://docs.python.org/2/library/functions.html#all\" rel=\"noreferrer\"><strong><code>all</code></strong></a></p>\n\n<blockquote>\n  <p>Return <code>True</code> if all elements of the iterable are true (<strong>or if the iterable is empty</strong>).</p>\n</blockquote>\n\n<p>Since none of the elements is false, it returns <code>True</code> in this case. </p>\n\n<hr>\n\n<p><strong>Note 2:</strong></p>\n\n<p>Another important thing to know about <code>any</code> and <code>all</code> is, it will short-circuit the execution, the moment they know the result. The advantage is, entire iterable need not be consumed. For example,</p>\n\n<pre><code>&gt;&gt;&gt; multiples_of_6 = (not (i % 6) for i in range(1, 10))\n&gt;&gt;&gt; any(multiples_of_6)\nTrue\n&gt;&gt;&gt; list(multiples_of_6)\n[False, False, False]\n</code></pre>\n\n<p>Here, <code>(not (i % 6) for i in range(1, 10))</code> is a generator expression which returns <code>True</code> if the current number within 1 and 9 is a multiple of 6. <code>any</code> iterates the <code>multiples_of_6</code> and when it meets <code>6</code>, it finds a Truthy value, so it immediately returns <code>True</code>, and rest of the <code>multiples_of_6</code> is not iterated. That is what we see when we print <code>list(multiples_of_6)</code>, the result of <code>7</code>, <code>8</code> and <code>9</code>.</p>\n\n<p>This excellent thing is used very cleverly in <a href=\"https://stackoverflow.com/a/16801605/1903116\">this answer</a>.</p>\n\n<hr>\n\n<p>With this basic understanding, if we look at your code, you do </p>\n\n<pre><code>any(x) and not all(x)\n</code></pre>\n\n<p>which makes sure that, atleast one of the values is Truthy but not all of them. That is why it is returning <code>[False, False, False]</code>. If you really wanted to check if both the numbers are not the same,</p>\n\n<pre><code>print [x[0] != x[1] for x in zip(*d['Drd2'])]\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I want to make a scatterplot (using matplotlib) where the points are shaded according to a third variable. I've got very close with this:</p>\n\n<pre><code>plt.scatter(w, M, c=p, marker='s')\n</code></pre>\n\n<p>where w and M are the datapoints and p is the variable I want to shade with respect to.<br>\nHowever I want to do it in greyscale rather than colour. Can anyone help?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There's no need to manually set the colors. Instead, specify a grayscale colormap...</p>\n\n<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n\n# Generate data...\nx = np.random.random(10)\ny = np.random.random(10)\n\n# Plot...\nplt.scatter(x, y, c=y, s=500)\nplt.gray()\n\nplt.show()\n</code></pre>\n\n<p><img src=\"https://i.stack.imgur.com/IoMzl.png\" alt=\"enter image description here\"></p>\n\n<p>Or, if you'd prefer a <a href=\"http://matplotlib.org/examples/color/colormaps_reference.html\" rel=\"noreferrer\">wider range of colormaps</a>, you can also specify the <code>cmap</code> kwarg to <code>scatter</code>.  To use the reversed version of any of these, just specify the \"<code>_r</code>\" version of any of them. E.g. <code>gray_r</code> instead of <code>gray</code>.  There are several different grayscale colormaps pre-made (e.g. <code>gray</code>, <code>gist_yarg</code>, <code>binary</code>, etc).  </p>\n\n<pre><code>import matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate data...\nx = np.random.random(10)\ny = np.random.random(10)\n\nplt.scatter(x, y, c=y, s=500, cmap='gray')\nplt.show()\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Could you tell me why <code>'?\\\\\\?'=='?\\\\\\\\?'</code> gives <code>True</code>? That drives me crazy and I can't find a reasonable answer...</p>\n\n<pre><code>&gt;&gt;&gt; list('?\\\\\\?')\n['?', '\\\\', '\\\\', '?']\n&gt;&gt;&gt; list('?\\\\\\\\?')\n['?', '\\\\', '\\\\', '?']\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Basically, because python is slightly lenient in backslash processing. Quoting from <a href=\"https://docs.python.org/2.0/ref/strings.html\">https://docs.python.org/2.0/ref/strings.html</a> :</p>\n\n<blockquote>\n  <p>Unlike Standard C, all unrecognized escape sequences are left in the string unchanged, i.e., <em>the backslash is left in the string</em>.</p>\n</blockquote>\n\n<p>(Emphasis in the original)</p>\n\n<p>Therefore, in python, it isn't that three backslashes are equal to four, it's that when you follow backslash with a character like <code>?</code>, the two together come through as two characters, because <code>\\?</code> is not a recognized escape sequence.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How does one convert a django Model object to a dict with <strong>all</strong> of its fields?  All ideally includes foreign keys and fields with editable=False.</p>\n\n<p>Let me elaborate.  Let's say I have a django model like the following:</p>\n\n<pre><code>from django.db import models\n\nclass OtherModel(models.Model): pass\n\nclass SomeModel(models.Model):\n    value = models.IntegerField()\n    value2 = models.IntegerField(editable=False)\n    created = models.DateTimeField(auto_now_add=True)\n    reference1 = models.ForeignKey(OtherModel, related_name=\"ref1\")\n    reference2 = models.ManyToManyField(OtherModel, related_name=\"ref2\")\n</code></pre>\n\n<p>In the terminal, I have done the following:</p>\n\n<pre><code>other_model = OtherModel()\nother_model.save()\ninstance = SomeModel()\ninstance.value = 1\ninstance.value2 = 2\ninstance.reference1 = other_model\ninstance.save()\ninstance.reference2.add(other_model)\ninstance.save()\n</code></pre>\n\n<p>I want to convert this to the following dictionary:</p>\n\n<pre><code>{'created': datetime.datetime(2015, 3, 16, 21, 34, 14, 926738, tzinfo=&lt;UTC&gt;),\n u'id': 1,\n 'reference1': 1,\n 'reference2': [1],\n 'value': 1,\n 'value2': 2}\n</code></pre>\n\n<hr>\n\n<p>Questions with unsatisfactory answers:</p>\n\n<p><a href=\"https://stackoverflow.com/questions/1123337/django-converting-an-entire-set-of-a-models-objects-into-a-single-dictionary\">Django: Converting an entire set of a Model's objects into a single dictionary</a></p>\n\n<p><a href=\"https://stackoverflow.com/questions/12382546/how-can-i-turn-django-model-objects-into-a-dictionary-and-still-have-their-forei\">How can I turn Django Model objects into a dictionary and still have their foreign keys?</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There are many ways to convert instance to a dictionary, with varying degrees of corner case handling and closeness to the desired result.</p>\n\n<hr>\n\n<h2>1. <code>instance.__dict__</code></h2>\n\n<pre><code>instance.__dict__\n</code></pre>\n\n<p>which returns</p>\n\n<pre><code>{'_reference1_cache': &lt;OtherModel: OtherModel object&gt;,\n '_state': &lt;django.db.models.base.ModelState at 0x1f63310&gt;,\n 'created': datetime.datetime(2014, 2, 21, 4, 38, 51, 844795, tzinfo=&lt;UTC&gt;),\n 'id': 1L,\n 'reference1_id': 1L,\n 'value': 1,\n 'value2': 2}\n</code></pre>\n\n<p>This is by far the simplest, but is missing reference2, reference1 is misnamed, and it has two extra things in it.</p>\n\n<hr>\n\n<h2>2. model_to_dict</h2>\n\n<pre><code>from django.forms.models import model_to_dict\nmodel_to_dict(instance)\n</code></pre>\n\n<p>which returns</p>\n\n<pre><code>{u'id': 1L, 'reference1': 1L, 'reference2': [1L], 'value': 1}\n</code></pre>\n\n<p>This is the only one with reference2, but is missing the uneditable fields.</p>\n\n<hr>\n\n<h2>3. model_to_dict with fields</h2>\n\n<pre><code>from django.forms.models import model_to_dict\nmodel_to_dict(instance, fields=[field.name for field in instance._meta.fields])\n</code></pre>\n\n<p>which returns</p>\n\n<pre><code>{u'id': 1L, 'reference1': 1L, 'value': 1}\n</code></pre>\n\n<p>This is strictly worse than the standard model_to_dict invocation.</p>\n\n<hr>\n\n<h2>4. query_set.values()</h2>\n\n<pre><code>SomeModel.objects.filter(id=instance.id).values()[0]\n</code></pre>\n\n<p>which returns</p>\n\n<pre><code>{'created': datetime.datetime(2014, 2, 21, 4, 38, 51, tzinfo=&lt;UTC&gt;),\n u'id': 1L,\n 'reference1_id': 1L,\n 'value': 1L,\n 'value2': 2L}\n</code></pre>\n\n<p>This is the same output as <code>instance.__dict__</code> but without the extra fields.</p>\n\n<hr>\n\n<h2>5. Custom Function</h2>\n\n<p>The code for django's model_to_dict had most of the answer.  It explicitly removed non-editable fields, so removing that check results in the following code which behaves as desired:</p>\n\n<pre><code>from django.db.models.fields.related import ManyToManyField\n\ndef to_dict(instance):\n    opts = instance._meta\n    data = {}\n    for f in opts.concrete_fields + opts.many_to_many:\n        if isinstance(f, ManyToManyField):\n            if instance.pk is None:\n                data[f.name] = []\n            else:\n                data[f.name] = list(f.value_from_object(instance).values_list('pk', flat=True))\n        else:\n            data[f.name] = f.value_from_object(instance)\n    return data\n</code></pre>\n\n<p>While this is the most complicated option, calling <code>to_dict(instance)</code> gives us exactly the desired result:</p>\n\n<pre><code>{'created': datetime.datetime(2015, 3, 16, 21, 34, 14, 926738, tzinfo=&lt;UTC&gt;),\n u'id': 1,\n 'reference1': 1,\n 'reference2': [1],\n 'value': 1,\n 'value2': 2}\n</code></pre>\n\n<hr>\n\n<h2>Bonus Round</h2>\n\n<p>If you want a django model that has a better python command-line display, have your models child class the following:</p>\n\n<pre><code>from django.db import models\nfrom django.db.models.fields.related import ManyToManyField\n\nclass PrintableModel(models.Model):\n    def __repr__(self):\n        return str(self.to_dict())\n\n    def to_dict(self):\n        opts = self._meta\n        data = {}\n        for f in opts.concrete_fields + opts.many_to_many:\n            if isinstance(f, ManyToManyField):\n                if self.pk is None:\n                    data[f.name] = []\n                else:\n                    data[f.name] = list(f.value_from_object(self).values_list('pk', flat=True))\n            else:\n                data[f.name] = f.value_from_object(self)\n        return data\n\n    class Meta:\n        abstract = True\n</code></pre>\n\n<p>So, for example, if we define our models as such:</p>\n\n<pre><code>class OtherModel(PrintableModel): pass\n\nclass SomeModel(PrintableModel):\n    value = models.IntegerField()\n    value2 = models.IntegerField(editable=False)\n    created = models.DateTimeField(auto_now_add=True)\n    reference1 = models.ForeignKey(OtherModel, related_name=\"ref1\")\n    reference2 = models.ManyToManyField(OtherModel, related_name=\"ref2\")\n</code></pre>\n\n<p>Calling <code>SomeModel.objects.first()</code> now gives output like this:</p>\n\n<pre><code>{'created': datetime.datetime(2015, 3, 16, 21, 34, 14, 926738, tzinfo=&lt;UTC&gt;),\n'value': 1, 'value2': 2, 'reference1': 1, u'id': 1, 'reference2': [1]}\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>A little background:</p>\n\n<ul>\n<li><a href=\"http://www.python.org/dev/peps/pep-0008/\" rel=\"noreferrer\">PEP 8</a> is the <em>Style Guide for Python Code</em>. It contains the conventions all python programmers should follow.</li>\n<li><a href=\"http://pypi.python.org/pypi/pep8\" rel=\"noreferrer\">pep8.py</a> is a (very useful) script that checks the code formating of a given python script, according to PEP 8.</li>\n<li><a href=\"http://www.eclipse.org/\" rel=\"noreferrer\">Eclipse</a> is a great IDE. With the <a href=\"http://pydev.sourceforge.net/\" rel=\"noreferrer\">Pydev</a> extension, it that can be used to develop Python</li>\n</ul>\n\n<p>I run pep8.py manually when I'm scripting, but with bigger projects I prefer to use Eclipse.\nIt would be really useful to integrate pep8.py in Eclipse/Pydev, so it can be run automatically in all the files in the project, and point to the lines containing the warnings.\nMaybe there is an obvious way to do it, but I haven't found it yet.</p>\n\n<p>Question is: <strong>How to integrate pep8.py in Eclipse?</strong></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>As of PyDev 2.3.0, <code>pep8</code> is integrated in PyDev by default, even shipping with a default version of it.</p>\n\n<p>Open Window &gt; Preferences</p>\n\n<p>It must be enabled in PyDev &gt; Editor &gt; Code Analysis &gt; pep8.py</p>\n\n<p>Errors/Warnings should be shown as markers (as other things in the regular code analysis).</p>\n\n<p>In the event a file is not analyzed, see <a href=\"https://stackoverflow.com/a/31001619/832230\">https://stackoverflow.com/a/31001619/832230</a>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have recently applied <a href=\"https://stackoverflow.com/questions/30379311/fast-way-to-take-average-of-every-n-rows-in-a-npy-array\">this</a> solution for averaging every N rows of matrix.\nAlthough the solution works in general I had problems when applied to a 7x1 array. I have noticed that the problem is when using the <code>-=</code> operator.\nTo make a small example:</p>\n\n<pre><code>import numpy as np\n\na = np.array([1,2,3])\nb = np.copy(a)\n\na[1:] -= a[:-1]\nb[1:] = b[1:] - b[:-1]\n\nprint a\nprint b\n</code></pre>\n\n<p>which outputs:</p>\n\n<pre><code>[1 1 2]\n[1 1 1]\n</code></pre>\n\n<p>So, in the case of an array <code>a -= b</code> produces a different result than <code>a = a - b</code>. I thought until now that these two ways are exactly the same. What is the difference?</p>\n\n<p>How come the method I am mentioning for summing every N rows in a matrix is working e.g. for a 7x4 matrix but not for a 7x1 array?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><em>Note: using in-place operations on NumPy arrays that share memory in no longer a problem in version 1.13.0 onward (see details <a href=\"https://github.com/numpy/numpy/pull/8043\" rel=\"nofollow noreferrer\">here</a>). The two operation will produce the same result. This answer only applies to earlier versions of NumPy.</em></p>\n\n<hr>\n\n<p>Mutating arrays while they're being used in computations can lead to unexpected results!</p>\n\n<p>In the example in the question, subtraction with <code>-=</code> modifies the second element of <code>a</code> and then immediately uses that <em>modified</em> second element in the operation on the third element of <code>a</code>.</p>\n\n<p>Here is what happens with <code>a[1:] -= a[:-1]</code> step by step:</p>\n\n<ul>\n<li><p><code>a</code> is the array with the data <code>[1, 2, 3]</code>.</p></li>\n<li><p>We have two views onto this data: <code>a[1:]</code> is <code>[2, 3]</code>, and <code>a[:-1]</code> is <code>[1, 2]</code>.</p></li>\n<li><p>The in-place subtraction <code>-=</code> begins. The first element of <code>a[:-1]</code>, 1, is subtracted from the first element of <code>a[1:]</code>. This has modified <code>a</code> to be <code>[1, 1, 3]</code>. Now we have that <code>a[1:]</code> is a view of the data <code>[1, 3]</code>, and <code>a[:-1]</code> is a view of the data <code>[1, 1]</code> (the second element of array <code>a</code> has been changed).</p></li>\n<li><p><code>a[:-1]</code> is now <code>[1, 1]</code> and NumPy must now subtract its second element <em>which is 1</em> (not 2 anymore!) from the second element of <code>a[1:]</code>. This makes <code>a[1:]</code> a view of the values <code>[1, 2]</code>.</p></li>\n<li><p><code>a</code> is now an array with the values <code>[1, 1, 2]</code>.</p></li>\n</ul>\n\n<p><code>b[1:] = b[1:] - b[:-1]</code> does not have this problem because <code>b[1:] - b[:-1]</code> creates a <em>new</em> array first and then assigns the values in this array to <code>b[1:]</code>. It does not modify <code>b</code> itself during the subtraction, so the views <code>b[1:]</code> and <code>b[:-1]</code> do not change.</p>\n\n<hr>\n\n<p>The general advice is to avoid modifying one view inplace with another if they overlap. This includes the operators <code>-=</code>, <code>*=</code>, etc. and using the <code>out</code> parameter in universal functions (like <code>np.subtract</code> and <code>np.multiply</code>) to write back to one of the arrays.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm using <code>json.dumps</code> to convert into json like</p>\n\n<pre><code>countries.append({\"id\":row.id,\"name\":row.name,\"timezone\":row.timezone})\nprint json.dumps(countries)\n</code></pre>\n\n<p>The result i have is:</p>\n\n<pre><code>[\n   {\"timezone\": 4, \"id\": 1, \"name\": \"Mauritius\"}, \n   {\"timezone\": 2, \"id\": 2, \"name\": \"France\"}, \n   {\"timezone\": 1, \"id\": 3, \"name\": \"England\"}, \n   {\"timezone\": -4, \"id\": 4, \"name\": \"USA\"}\n]\n</code></pre>\n\n<p>I want to have the keys in the following order: id, name, timezone - but instead I have timezone, id, name.</p>\n\n<p>How should I fix this? </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Both Python <code>dict</code> and JSON object are unordered collections. You could pass <code>sort_keys</code> parameter, to sort the keys:</p>\n\n<pre><code>&gt;&gt;&gt; import json\n&gt;&gt;&gt; json.dumps({'a': 1, 'b': 2})\n'{\"b\": 2, \"a\": 1}'\n&gt;&gt;&gt; json.dumps({'a': 1, 'b': 2}, sort_keys=True)\n'{\"a\": 1, \"b\": 2}'\n</code></pre>\n\n<p>If you need a particular order; you could <a href=\"https://docs.python.org/library/collections.html#collections.OrderedDict\" rel=\"noreferrer\">use <code>collections.OrderedDict</code></a>:</p>\n\n<pre><code>&gt;&gt;&gt; from collections import OrderedDict\n&gt;&gt;&gt; json.dumps(OrderedDict([(\"a\", 1), (\"b\", 2)]))\n'{\"a\": 1, \"b\": 2}'\n&gt;&gt;&gt; json.dumps(OrderedDict([(\"b\", 2), (\"a\", 1)]))\n'{\"b\": 2, \"a\": 1}'\n</code></pre>\n\n<p><a href=\"https://docs.python.org/3.6/whatsnew/3.6.html#pep-468-preserving-keyword-argument-order\" rel=\"noreferrer\">Since Python 3.6</a>, the keyword argument order is preserved and the above can be rewritten using a nicer syntax:</p>\n\n<pre><code>&gt;&gt;&gt; json.dumps(OrderedDict(a=1, b=2))\n'{\"a\": 1, \"b\": 2}'\n&gt;&gt;&gt; json.dumps(OrderedDict(b=2, a=1))\n'{\"b\": 2, \"a\": 1}'\n</code></pre>\n\n<p>See <a href=\"https://www.python.org/dev/peps/pep-0468/\" rel=\"noreferrer\">PEP 468 \u2013 Preserving Keyword Argument Order</a>.</p>\n\n<p>If your input is given as JSON then to preserve the order (to get <code>OrderedDict</code>), you could pass <code>object_pair_hook</code>,  <a href=\"https://stackoverflow.com/questions/10844064/items-in-json-object-are-out-of-order-using-json-dumps/23820416#comment62431021_23820416\">as suggested by @Fred Yankowski</a>:</p>\n\n<pre><code>&gt;&gt;&gt; json.loads('{\"a\": 1, \"b\": 2}', object_pairs_hook=OrderedDict)\nOrderedDict([('a', 1), ('b', 2)])\n&gt;&gt;&gt; json.loads('{\"b\": 2, \"a\": 1}', object_pairs_hook=OrderedDict)\nOrderedDict([('b', 2), ('a', 1)])\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a NumPy array 'boolarr' of boolean type. I want to count the number of elements whose values are <code>True</code>. Is there a NumPy or Python routine dedicated for this task? Or, do I need to iterate over the elements in my script?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You have multiple options. Two options are the following.</p>\n\n<pre><code>numpy.sum(boolarr)\nnumpy.count_nonzero(boolarr)\n</code></pre>\n\n<p>Here's an example:</p>\n\n<pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; boolarr = np.array([[0, 0, 1], [1, 0, 1], [1, 0, 1]], dtype=np.bool)\n&gt;&gt;&gt; boolarr\narray([[False, False,  True],\n       [ True, False,  True],\n       [ True, False,  True]], dtype=bool)\n\n&gt;&gt;&gt; np.sum(boolarr)\n5\n</code></pre>\n\n<p>Of course, that is a <code>bool</code>-specific answer. More generally, you can use <code>numpy.count_nonzero</code>.</p>\n\n<pre><code>&gt;&gt;&gt; np.count_nonzero(boolarr)\n5\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In shells like the interactive python shell, you can usually use the arrow keys to move around in the current line or get previous commands (with arrow-up) etc.</p>\n\n<p>But after I ssh into another machine and start <code>python</code> there, I get sessions like:</p>\n\n<pre><code>&gt;&gt;&gt; import os \n&gt;&gt;&gt; ^[[A    \n</code></pre>\n\n<p>where the last character comes from arrow-up. Or, using arrow-left:</p>\n\n<pre><code>&gt;&gt;&gt; impor^[[D\n</code></pre>\n\n<p>How can I fix this?</p>\n\n<p>In the regular bash, arrow keys work fine. The weird behavior is just in the interactive python (or perl etc.) shell.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Looks like readline is not enabled. Check if <code>PYTHONSTARTUP</code> variable is defined, for me it points to <code>/etc/pythonstart</code> and that file is executed by the python process before going interactive, which setups readline/history handling.</p>\n\n<p>Thanks to @chown here is the docs on this: <a href=\"http://docs.python.org/2/tutorial/interactive.html\" rel=\"nofollow noreferrer\">http://docs.python.org/2/tutorial/interactive.html</a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In Python, the <code>(?P&lt;group_name&gt;\u2026)</code> <a href=\"http://docs.python.org/library/re.html#regular-expression-syntax\" rel=\"noreferrer\">syntax</a> allows one to refer to the matched string through its name:</p>\n\n<pre><code>&gt;&gt;&gt; import re\n&gt;&gt;&gt; match = re.search('(?P&lt;name&gt;.*) (?P&lt;phone&gt;.*)', 'John 123456')\n&gt;&gt;&gt; match.group('name')\n'John'\n</code></pre>\n\n<p>What does \"P\" stand for?  I could not find any hint in the <a href=\"http://docs.python.org/library/re.html#regular-expression-syntax\" rel=\"noreferrer\">official documentation</a>.</p>\n\n<p>I would love to get ideas about how to help my students remember this syntax. Knowing what \"P\" does stand for (or might stand for) would be useful.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Since we're all guessing, I might as well give mine: I've always thought it stood for Python.  That may sound pretty stupid -- what, P for Python?! -- but in my defense, I vaguely remembered <a href=\"http://markmail.org/message/oyezhwvefvotacc3\">this thread</a> [emphasis mine]:</p>\n\n<blockquote>\n  <p>Subject:  Claiming (?P...) regex syntax extensions</p>\n  \n  <p>From: Guido van Rossum (gui...@CNRI.Reston.Va.US)</p>\n  \n  <p>Date: Dec 10, 1997 3:36:19 pm</p>\n  \n  <p>I have an unusual request for the Perl developers (those that develop\n  the Perl language).  I hope this (perl5-porters) is the right list.  I\n  am cc'ing the Python string-sig because it is the origin of most of\n  the work I'm discussing here.</p>\n  \n  <p>You are probably aware of Python.  I am Python's creator; I am\n  planning to release a next \"major\" version, Python 1.5, by the end of\n  this year.  I hope that Python and Perl can co-exist in years to come;\n  cross-pollination can be good for both languages.  (I believe Larry\n  had a good look at Python when he added objects to Perl 5; O'Reilly\n  publishes books about both languages.)</p>\n  \n  <p>As you may know, Python 1.5 adds a new regular expression module that\n  more closely matches Perl's syntax.  We've tried to be as close to the\n  Perl syntax as possible within Python's syntax.  However, the regex\n  syntax has some Python-specific extensions, which all begin with (?P .\n  Currently there are two of them:</p>\n  \n  <p><code>(?P&lt;foo&gt;...)</code> Similar to regular grouping parentheses, but the text<br>\n  matched by the group is accessible after the match has been performed,\n  via the symbolic group name \"foo\".</p>\n  \n  <p><code>(?P=foo)</code> Matches the same string as that matched by the group named \n  \"foo\".  Equivalent to \\1, \\2, etc. except that the group is referred<br>\n  to by name, not number.</p>\n  \n  <p>I hope that this Python-specific extension won't conflict with any\n  future Perl extensions to the Perl regex syntax.  If you have plans to\n  use (?P, please let us know as soon as possible so we can resolve the\n  conflict.  <strong>Otherwise, it would be nice if the (?P syntax could be\n  permanently reserved for Python-specific syntax extensions.</strong>  (Is\n  there  some kind of registry of extensions?)</p>\n</blockquote>\n\n<p>to which Larry Wall replied:</p>\n\n<blockquote>\n  <p>[...]   There's no registry as of now--yours is the first request from\n  outside perl5-porters, so it's a pretty low-bandwidth activity. \n  (Sorry it was even lower last week--I was off in New York at Internet\n  World.)</p>\n  \n  <p>Anyway, as far as I'm concerned, you may certainly have 'P' with my\n  blessing. (Obviously Perl doesn't need the 'P' at this point. :-) [...]</p>\n</blockquote>\n\n<p>So I don't know what the original choice of P was motivated by -- pattern? placeholder? penguins? -- but you can understand why I've always associated it with Python.  Which considering that (1) I don't like regular expressions and avoid them wherever possible, and (2) this thread happened fifteen years ago, is kind of odd.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>When calling</p>\n\n<pre><code>df = pd.read_csv('somefile.csv')\n</code></pre>\n\n<p>I get:</p>\n\n<blockquote>\n  <p>/Users/josh/anaconda/envs/py27/lib/python2.7/site-packages/pandas/io/parsers.py:1130:\n  DtypeWarning: Columns (4,5,7,16) have mixed types.  Specify dtype\n  option on import or set low_memory=False.</p>\n</blockquote>\n\n<p>Why is the <code>dtype</code> option related to <code>low_memory</code>, and why would making it <code>False</code> help with this problem?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<h1>The deprecated low_memory option</h1>\n\n<p>The <code>low_memory</code> option is not properly deprecated, but it should be, since it does not actually do anything differently[<a href=\"https://github.com/pydata/pandas/issues/5888\" rel=\"noreferrer\">source</a>]</p>\n\n<p>The reason you get this <code>low_memory</code> warning is because guessing dtypes for each column is very memory demanding. Pandas tries to determine what dtype to set by analyzing the data in each column.</p>\n\n<h1>Dtype Guessing (very bad)</h1>\n\n<p>Pandas can only determine what dtype a column should have once the whole file is read. This means nothing can really be parsed before the whole file is read unless you risk having to change the dtype of that column when you read the last value.</p>\n\n<p>Consider the example of one file which has a column called user_id.\nIt contains 10 million rows where the user_id is always numbers.\nSince pandas cannot know it is only numbers, it will probably keep it as the original strings until it has read the whole file.</p>\n\n<h1>Specifying dtypes (should always be done)</h1>\n\n<p>adding</p>\n\n<pre><code>dtype={'user_id': int}\n</code></pre>\n\n<p>to the <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html\" rel=\"noreferrer\"><code>pd.read_csv()</code></a> call will make pandas know when it starts reading the file, that this is only integers.</p>\n\n<p>Also worth noting is that if the last line in the file would have <code>\"foobar\"</code> written in the <code>user_id</code> column, the loading would crash if the above dtype was specified.</p>\n\n<h3>Example of broken data that breaks when dtypes are defined</h3>\n\n<pre><code>import pandas as pd\nfrom StringIO import StringIO\n\n\ncsvdata = \"\"\"user_id,username\n1,Alice\n3,Bob\nfoobar,Caesar\"\"\"\nsio = StringIO(csvdata)\npd.read_csv(sio, dtype={\"user_id\": int, \"username\": object})\n\nValueError: invalid literal for long() with base 10: 'foobar'\n</code></pre>\n\n<p>dtypes are typically a numpy thing, read more about them here:\n<a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.dtype.html\" rel=\"noreferrer\">http://docs.scipy.org/doc/numpy/reference/generated/numpy.dtype.html</a></p>\n\n<h1>Gotchas, caveats, notes</h1>\n\n<p>Setting <code>dtype=object</code> will silence the above warning, but will not make it more memory efficient, only process efficient if anything.</p>\n\n<p>Setting <code>dtype=unicode</code> will not do anything, since to numpy, a <code>unicode</code> is represented as <code>object</code>.</p>\n\n<h3>Usage of converters</h3>\n\n<p>@sparrow correctly points out the usage of converters to avoid pandas blowing up when encountering <code>'foobar'</code> in a column specified as <code>int</code>. I would like to add that converters are really heavy and inefficient to use in pandas and should be used as a last resort. This is because the read_csv process is a single process.</p>\n\n<p>CSV files can be processed line by line and thus can be processed by multiple converters in parallel more efficiently by simply cutting the file into segments and running multiple processes, something that pandas does not support. But this is a different story.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm building a support ticket tracking app and have a few models I'd like to create from one page. Tickets belong to a Customer via a ForeignKey. Notes belong to Tickets via a ForeignKey as well. I'd like to have the option of selecting a Customer (that's a whole separate project) OR creating a new Customer, then creating a Ticket and finally creating a Note assigned to the new ticket.</p>\n\n<p>Since I'm fairly new to Django, I tend to work iteratively, trying out new features each time. I've played with ModelForms but I want to hide some of the fields and do some complex validation. It seems like the level of control I'm looking for either requires formsets or doing everything by hand, complete with a tedious, hand-coded template page, which I'm trying to avoid.</p>\n\n<p>Is there some lovely feature I'm missing? Does someone have a good reference or example for using formsets? I spent a whole weekend on the API docs for them and I'm still clueless. Is it a design issue if I break down and hand-code everything?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This really isn't too hard to implement with <a href=\"http://docs.djangoproject.com/en/dev/topics/forms/modelforms/#topics-forms-modelforms\" rel=\"noreferrer\">ModelForms</a>. So lets say you have Forms A, B, and C. You print out each of the forms and the page and now you need to handle the POST.</p>\n\n<pre><code>if request.POST():\n    a_valid = formA.is_valid()\n    b_valid = formB.is_valid()\n    c_valid = formC.is_valid()\n    # we do this since 'and' short circuits and we want to check to whole page for form errors\n    if a_valid and b_valid and c_valid:\n        a = formA.save()\n        b = formB.save(commit=False)\n        c = formC.save(commit=False)\n        b.foreignkeytoA = a\n        b.save()\n        c.foreignkeytoB = b\n        c.save()\n</code></pre>\n\n<p><a href=\"http://docs.djangoproject.com/en/dev/ref/forms/validation/#ref-forms-validation\" rel=\"noreferrer\">Here</a> are the docs for custom validation.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I come from OOP background and trying to learn python.\nI am using the <code>max</code> function which uses a lambda expression to return the instance of type <code>Player</code> having maximum <code>totalScore</code> among the list <code>players</code>.</p>\n\n<pre><code>def winner():\n    w = max(players, key=lambda p: p.totalScore)\n</code></pre>\n\n<p>The function correctly returns instance of type <code>Player</code> having maximum <code>totalScore</code>.\nI am confused about the following three things:</p>\n\n<ol>\n<li>How does the <code>max</code> function work? What are the arguments it is taking? I looked at the documentation but failed to understand.</li>\n<li>What is use of the keyword <code>key</code> in max function? I know it is also used in context of <code>sort</code> function</li>\n<li>Meaning of the lambda expression? How to read them? How do they work?</li>\n</ol>\n\n<p>These are all very noobish conceptual questions but will help me understand the language. It would help if you could give examples to explain.\nThanks</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>lambda</code> is an anonymous function, it is equivalent to:</p>\n\n<pre><code>def func(p):\n   return p.totalScore     \n</code></pre>\n\n<p>Now <code>max</code> becomes:</p>\n\n<pre><code>max(players, key=func)\n</code></pre>\n\n<p>But as <code>def</code> statements are compound statements they can't be used where an expression is required, that's why sometimes <code>lambda</code>'s are used. </p>\n\n<p>Note that lambda is equivalent to what you'd put in a return statement of a <code>def</code>. Thus, you can't use statements inside a <code>lambda</code>, only expressions are allowed.</p>\n\n<hr>\n\n<p>What does max do?</p>\n\n<blockquote>\n  <p>max(a, b, c, ...[, key=func]) -&gt; value</p>\n  \n  <p>With a single iterable argument, return its largest item. With two or\n  more arguments, return the largest argument.</p>\n</blockquote>\n\n<p>So, it simply returns the object that is largest.</p>\n\n<hr>\n\n<pre><code>How `key` works?\n</code></pre>\n\n<p>By default in Python 2 key compares items based on a <a href=\"http://docs.python.org/2/reference/expressions.html#not-in\" rel=\"noreferrer\">set of rules</a> based on the type of the objects(for example a string is always greater than an integer).</p>\n\n<p>To modify the object before comparison or to compare based on a particular attribute/index you've to use the <code>key</code> argument. </p>\n\n<p>Example 1:</p>\n\n<p>A simple example, suppose you've a list of numbers in string form, but you want to compare those items by their integer value.</p>\n\n<pre><code>&gt;&gt;&gt; lis = ['1','100','111','2']\n</code></pre>\n\n<p>Here <code>max</code> compares the items using their original values(strings are compared lexicographically so you'd get <code>'2'</code> as output) :</p>\n\n<pre><code>&gt;&gt;&gt; max(lis)\n'2'\n</code></pre>\n\n<p>To compare the items by their integer value use key with a simple <code>lambda</code>:</p>\n\n<pre><code>&gt;&gt;&gt; max(lis, key=lambda x:int(x))  #compare `int` version of each item\n'111'\n</code></pre>\n\n<p>Example 2: Applying <code>max</code> to a list of lists.</p>\n\n<pre><code>&gt;&gt;&gt; lis = [(1,'a'),(3,'c'), (4,'e'), (-1,'z')]\n</code></pre>\n\n<p>By default max will will compare the items by the first index, if the first index is same then it'd compare the second index. As in my example all items have unique first index so, you'd get this as the answer:</p>\n\n<pre><code>&gt;&gt;&gt; max(lis)\n(4, 'e')\n</code></pre>\n\n<p>But, what if you wanted to compare each item by the value at index 1? Simple, use <code>lambda</code>:</p>\n\n<pre><code>&gt;&gt;&gt; max(lis, key = lambda x: x[1])\n(-1, 'z')\n</code></pre>\n\n<hr>\n\n<p><strong>Comparing items in an iterable that contains objects of different type</strong>:</p>\n\n<p>List with mixed items:</p>\n\n<pre><code>&gt;&gt;&gt; lis = ['1','100','111','2', 2, 2.57]\n</code></pre>\n\n<p><a href=\"http://docs.python.org/2/reference/expressions.html#not-in\" rel=\"noreferrer\">In Python 2 it is possible to compare items of two different types</a>:</p>\n\n<pre><code>&gt;&gt;&gt; max(lis) # works in Python 2\n'2'\n&gt;&gt;&gt; max(lis, key=lambda x: int(x)) #compare integer version of each item\n'111'\n</code></pre>\n\n<p><a href=\"http://docs.python.org/3.0/whatsnew/3.0.html#ordering-comparisons\" rel=\"noreferrer\">But in Python 3 you can't do that any more</a>:</p>\n\n<pre><code>&gt;&gt;&gt; lis = ['1','100','111','2', 2, 2.57]\n&gt;&gt;&gt; max(lis)\nTraceback (most recent call last):\n  File \"&lt;ipython-input-2-0ce0a02693e4&gt;\", line 1, in &lt;module&gt;\n    max(lis)\nTypeError: unorderable types: int() &gt; str()\n</code></pre>\n\n<p>But this works, as we are comparing integer version of each object:</p>\n\n<pre><code>&gt;&gt;&gt; max(lis, key=lambda x: int(x)) # or simply `max(lis, key=int)`\n'111'\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have generator object returned by multiple yield. Preparation to call this generator is rather time-consuming operation. That is why I want to reuse generator several times.</p>\n\n<pre><code>y = FunctionWithYield()\nfor x in y: print(x)\n#here must be something to reset 'y'\nfor x in y: print(x)\n</code></pre>\n\n<p>Of course, I'm taking in mind copying content into simple list. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Another option is to use the <code>itertools.tee()</code> function to create a second version of your generator:</p>\n\n<pre><code>y = FunctionWithYield()\ny, y_backup = tee(y)\nfor x in y:\n    print(x)\nfor x in y_backup:\n    print(x)\n</code></pre>\n\n<p>This could be beneficial from memory usage point of view if the original iteration might not process all the items.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Lets suppose I have a list like this:</p>\n\n<pre><code>mylist = [\"a\",\"b\",\"c\",\"d\"]\n</code></pre>\n\n<p>To get the values printed along with their index I can use Python's <code>enumerate</code> function like this</p>\n\n<pre><code>&gt;&gt;&gt; for i,j in enumerate(mylist):\n...     print i,j\n...\n0 a\n1 b\n2 c\n3 d\n&gt;&gt;&gt;\n</code></pre>\n\n<p>Now, when I try to use it inside a <code>list comprehension</code> it gives me this error</p>\n\n<pre><code>&gt;&gt;&gt; [i,j for i,j in enumerate(mylist)]\n  File \"&lt;stdin&gt;\", line 1\n    [i,j for i,j in enumerate(mylist)]\n           ^\nSyntaxError: invalid syntax\n</code></pre>\n\n<p>So, my question is: what is the correct way of using enumerate inside list comprehension?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Try this:</p>\n\n<pre><code>[(i, j) for i, j in enumerate(mylist)]\n</code></pre>\n\n<p>You need to put <code>i,j</code> inside a tuple for the list comprehension to work. Alternatively, given that <code>enumerate()</code> <em>already</em> returns a tuple, you can return it directly without unpacking it first:</p>\n\n<pre><code>[pair for pair in enumerate(mylist)]\n</code></pre>\n\n<p>Either way, the result that gets returned is as expected:</p>\n\n<pre><code>&gt; [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'd')]\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am using numpy. I have a matrix with 1 column and N rows and I want to get an array from with N elements.</p>\n\n<p>For example, if i have <code>M = matrix([[1], [2], [3], [4]])</code>, I want to get <code>A = array([1,2,3,4])</code>.</p>\n\n<p>To achieve it, I use <code>A = np.array(M.T)[0]</code>. Does anyone know a more elegant way to get the same result?</p>\n\n<p>Thanks!</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you'd like something a bit more readable, you can do this:</p>\n\n<pre><code>A = np.squeeze(np.asarray(M))\n</code></pre>\n\n<p>Equivalently, you could also do: <code>A = np.asarray(M).reshape(-1)</code>, but that's a bit less easy to read.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm using the following method to send mail from Python using SMTP. Is it the right method to use or are there gotchas I'm missing ?</p>\n\n<pre><code>from smtplib import SMTP\nimport datetime\n\ndebuglevel = 0\n\nsmtp = SMTP()\nsmtp.set_debuglevel(debuglevel)\nsmtp.connect('YOUR.MAIL.SERVER', 26)\nsmtp.login('USERNAME@DOMAIN', 'PASSWORD')\n\nfrom_addr = \"John Doe &lt;john@doe.net&gt;\"\nto_addr = \"foo@bar.com\"\n\nsubj = \"hello\"\ndate = datetime.datetime.now().strftime( \"%d/%m/%Y %H:%M\" )\n\nmessage_text = \"Hello\\nThis is a mail from your server\\n\\nBye\\n\"\n\nmsg = \"From: %s\\nTo: %s\\nSubject: %s\\nDate: %s\\n\\n%s\" \n        % ( from_addr, to_addr, subj, date, message_text )\n\nsmtp.sendmail(from_addr, to_addr, msg)\nsmtp.quit()\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The script I use is quite similar; I post it here as an example of how to use the email.* modules to generate MIME messages; so this script can be easily modified to attach pictures, etc.</p>\n\n<p>I rely on my ISP to add the date time header.</p>\n\n<p>My ISP requires me to use a secure smtp connection to send mail, I rely on the ssmtplib module (downloadable at <a href=\"http://www1.cs.columbia.edu/~db2501/ssmtplib.py\" rel=\"noreferrer\">http://www1.cs.columbia.edu/~db2501/ssmtplib.py</a>)</p>\n\n<p>As in your script, the username and password, (given dummy values below), used to authenticate on the SMTP server, are in plain text in the source. This is a security weakness; but the best alternative depends on how careful you need (want?) to be about protecting these.</p>\n\n<p>=======================================</p>\n\n<pre><code>#! /usr/local/bin/python\n\n\nSMTPserver = 'smtp.att.yahoo.com'\nsender =     'me@my_email_domain.net'\ndestination = ['recipient@her_email_domain.com']\n\nUSERNAME = \"USER_NAME_FOR_INTERNET_SERVICE_PROVIDER\"\nPASSWORD = \"PASSWORD_INTERNET_SERVICE_PROVIDER\"\n\n# typical values for text_subtype are plain, html, xml\ntext_subtype = 'plain'\n\n\ncontent=\"\"\"\\\nTest message\n\"\"\"\n\nsubject=\"Sent from Python\"\n\nimport sys\nimport os\nimport re\n\nfrom smtplib import SMTP_SSL as SMTP       # this invokes the secure SMTP protocol (port 465, uses SSL)\n# from smtplib import SMTP                  # use this for standard SMTP protocol   (port 25, no encryption)\n\n# old version\n# from email.MIMEText import MIMEText\nfrom email.mime.text import MIMEText\n\ntry:\n    msg = MIMEText(content, text_subtype)\n    msg['Subject']=       subject\n    msg['From']   = sender # some SMTP servers will do this automatically, not all\n\n    conn = SMTP(SMTPserver)\n    conn.set_debuglevel(False)\n    conn.login(USERNAME, PASSWORD)\n    try:\n        conn.sendmail(sender, destination, msg.as_string())\n    finally:\n        conn.quit()\n\nexcept Exception, exc:\n    sys.exit( \"mail failed; %s\" % str(exc) ) # give a error message\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a numerical list:</p>\n\n<pre><code>myList = [1, 2, 3, 100, 5]\n</code></pre>\n\n<p>Now if I sort this list to obtain <code>[1, 2, 3, 5, 100]</code>. \nWhat I want is the indices of the elements from the \noriginal list in the sorted order i.e. <code>[0, 1, 2, 4, 3]</code> \n--- ala MATLAB's sort function that returns both \nvalues and indices. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Something like next:</p>\n\n<pre><code>&gt;&gt;&gt; myList = [1, 2, 3, 100, 5]\n&gt;&gt;&gt; [i[0] for i in sorted(enumerate(myList), key=lambda x:x[1])]\n[0, 1, 2, 4, 3]\n</code></pre>\n\n<p><code>enumerate(myList)</code> gives you a list containing tuples of (index, value):</p>\n\n<pre><code>[(0, 1), (1, 2), (2, 3), (3, 100), (4, 5)]\n</code></pre>\n\n<p>You sort the list by passing it to <code>sorted</code> and specifying a function to extract the sort key (the second element of each tuple; that's what the <code>lambda</code> is for. Finally, the original index of each <em>sorted</em> element is extracted using the <code>[i[0] for i in ...]</code> list comprehension.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I've been searching for quite a while with no success. My project isn't using Django, is there a simple way to serialize App Engine models (google.appengine.ext.db.Model) into JSON or do I need to write my own serializer?  </p>\n\n<p><strong>Model:</strong></p>\n\n<pre><code>class Photo(db.Model):\n    filename = db.StringProperty()\n    title = db.StringProperty()\n    description = db.StringProperty(multiline=True)\n    date_taken = db.DateTimeProperty()\n    date_uploaded = db.DateTimeProperty(auto_now_add=True)\n    album = db.ReferenceProperty(Album, collection_name='photo')\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>A simple recursive function can be used to convert an entity (and any referents) to a nested dictionary that can be passed to <code>simplejson</code>:</p>\n\n<pre><code>import datetime\nimport time\n\nSIMPLE_TYPES = (int, long, float, bool, dict, basestring, list)\n\ndef to_dict(model):\n    output = {}\n\n    for key, prop in model.properties().iteritems():\n        value = getattr(model, key)\n\n        if value is None or isinstance(value, SIMPLE_TYPES):\n            output[key] = value\n        elif isinstance(value, datetime.date):\n            # Convert date/datetime to MILLISECONDS-since-epoch (JS \"new Date()\").\n            ms = time.mktime(value.utctimetuple()) * 1000\n            ms += getattr(value, 'microseconds', 0) / 1000\n            output[key] = int(ms)\n        elif isinstance(value, db.GeoPt):\n            output[key] = {'lat': value.lat, 'lon': value.lon}\n        elif isinstance(value, db.Model):\n            output[key] = to_dict(value)\n        else:\n            raise ValueError('cannot encode ' + repr(prop))\n\n    return output\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How can I find the row for which the value of a specific column is <strong>maximal</strong>?</p>\n\n<p><code>df.max()</code> will give me the maximal value for each column, I don't know how to get the corresponding row.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You just need the <code>argmax()</code> (<em>now called <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.idxmax.html\" rel=\"noreferrer\"><code>idxmax</code></a></em>) function. It's straightforward:</p>\n\n<pre><code>&gt;&gt;&gt; import pandas\n&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; df = pandas.DataFrame(np.random.randn(5,3),columns=['A','B','C'])\n&gt;&gt;&gt; df\n          A         B         C\n0  1.232853 -1.979459 -0.573626\n1  0.140767  0.394940  1.068890\n2  0.742023  1.343977 -0.579745\n3  2.125299 -0.649328 -0.211692\n4 -0.187253  1.908618 -1.862934\n&gt;&gt;&gt; df['A'].argmax()\n3\n&gt;&gt;&gt; df['B'].argmax()\n4\n&gt;&gt;&gt; df['C'].argmax()\n1\n</code></pre>\n\n<p>This function was updated to the name <code>idxmax</code> in the Pandas API, though as of Pandas 0.16, <code>argmax</code> still exists and performs the same function (though appears to run more slowly than <code>idxmax</code>).</p>\n\n<p>You can also just use <code>numpy.argmax</code>, such as <code>numpy.argmax(df['A'])</code> -- it provides the same thing as either of the two <code>pandas</code> functions, and appears at least as fast as <code>idxmax</code> in cursory observations.</p>\n\n<p>Previously (as noted in the comments) it appeared that <code>argmax</code> would exist as a separate function which provided the <em>integer position</em> within the index of the row location of the maximum element. For example, if you have string values as your index labels, like rows 'a' through 'e', you might want to know that the max occurs in row 4 (not row 'd'). However, in pandas 0.16, all of the listed methods above only provide the <em>label</em> from the <code>Index</code> for the row in question, and if you want the position integer of that label within the <code>Index</code> you have to get it manually (which can be tricky now that duplicate row labels are allowed).</p>\n\n<p>In general, I think the move to <code>idxmax</code>-like behavior for all three of the approaches (<code>argmax</code>, which still exists, <code>idxmax</code>, and <code>numpy.argmax</code>) is a bad thing, since it is very common to require the positional integer location of a maximum, perhaps even more common than desiring the <em>label</em> of that positional location within some index, especially in applications where duplicate row labels are common.</p>\n\n<p>For example, consider this toy <code>DataFrame</code> with a duplicate row label:</p>\n\n<pre><code>In [19]: dfrm\nOut[19]: \n          A         B         C\na  0.143693  0.653810  0.586007\nb  0.623582  0.312903  0.919076\nc  0.165438  0.889809  0.000967\nd  0.308245  0.787776  0.571195\ne  0.870068  0.935626  0.606911\nf  0.037602  0.855193  0.728495\ng  0.605366  0.338105  0.696460\nh  0.000000  0.090814  0.963927\ni  0.688343  0.188468  0.352213\ni  0.879000  0.105039  0.900260\n\nIn [20]: dfrm['A'].idxmax()\nOut[20]: 'i'\n\nIn [21]: dfrm.ix[dfrm['A'].idxmax()]\nOut[21]: \n          A         B         C\ni  0.688343  0.188468  0.352213\ni  0.879000  0.105039  0.900260\n</code></pre>\n\n<p>So here a naive use of <code>idxmax</code> is not sufficient, whereas the old form of <code>argmax</code> would correctly provide the <em>positional</em> location of the max row (in this case, position 9).</p>\n\n<p>This is exactly one of those nasty kinds of bug-prone behaviors in dynamically typed languages that makes this sort of thing so unfortunate, and worth beating a dead horse over. If you are writing systems code and your system suddenly gets used on some data sets that are not cleaned properly before being joined, it's very easy to end up with duplicate row labels, especially string labels like a CUSIP or SEDOL identifier for financial assets. You can't easily use the type system to help you out, and you may not be able to enforce uniqueness on the index without running into unexpectedly missing data. </p>\n\n<p>So you're left with hoping that your unit tests covered everything (they didn't, or more likely no one wrote any tests) -- otherwise (most likely) you're just left waiting to see if you happen to smack into this error at runtime, in which case you probably have to go drop many hours worth of work from the database you were outputting results to, bang your head against the wall in IPython trying to manually reproduce the problem, finally figuring out that it's because <code>idxmax</code> can <em>only</em> report the <em>label</em> of the max row, and then being disappointed that no standard function automatically gets the <em>positions</em> of the max row for you, writing a buggy implementation yourself, editing the code, and praying you don't run into the problem again.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>UNIX absolute path starts with '/', whereas Windows starts with alphabet 'C:' or '\\'.\nDoes python has a standard function to check if a path is absolute or relative? </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>os.path.isabs</code> returns <code>True</code> if the path is absolute, <code>False</code> if not. <a href=\"http://docs.python.org/library/os.path.html\" rel=\"noreferrer\">The documentation</a> says it works in windows (I can confirm it works in Linux personally).</p>\n\n<pre><code>os.path.isabs(my_path)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a few related questions regarding memory usage in the following example.</p>\n\n<ol>\n<li><p>If I run in the interpreter,</p>\n\n<pre><code>foo = ['bar' for _ in xrange(10000000)]\n</code></pre>\n\n<p>the real memory used on my machine goes up to <code>80.9mb</code>. I then,</p>\n\n<pre><code>del foo\n</code></pre>\n\n<p>real memory goes down, but only to <code>30.4mb</code>. The interpreter uses <code>4.4mb</code> baseline so what is the advantage in not releasing <code>26mb</code> of memory to the OS? Is it because Python is \"planning ahead\", thinking that you may use that much memory again?</p></li>\n<li><p>Why does it release <code>50.5mb</code> in particular - what is the amount that is released based on?</p></li>\n<li><p>Is there a way to force Python to release all the memory that was used (if you know you won't be using that much memory again)?</p></li>\n</ol>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Memory allocated on the heap can be subject to high-water marks. This is complicated by Python's internal optimizations for allocating small objects (<code>PyObject_Malloc</code>) in 4 KiB pools, classed for allocation sizes at multiples of 8 bytes -- up to 256 bytes (512 bytes in 3.3). The pools themselves are in 256 KiB arenas, so if just one block in one pool is used, the entire 256 KiB arena will not be released. In Python 3.3 the small object allocator was switched to using anonymous memory maps instead of the heap, so it should perform better at releasing memory.</p>\n\n<p>Additionally, the built-in types maintain freelists of previously allocated objects that may or may not use the small object allocator. The <code>int</code> type maintains a freelist with its own allocated memory, and clearing it requires calling <code>PyInt_ClearFreeList()</code>. This can be called indirectly by doing a full <code>gc.collect</code>. </p>\n\n<p>Try it like this, and tell me what you get. Here's the link for <a href=\"http://code.google.com/p/psutil/\" rel=\"noreferrer\">psutil</a>.</p>\n\n<pre><code>import os\nimport gc\nimport psutil\n\nproc = psutil.Process(os.getpid())\ngc.collect()\nmem0 = proc.get_memory_info().rss\n\n# create approx. 10**7 int objects and pointers\nfoo = ['abc' for x in range(10**7)]\nmem1 = proc.get_memory_info().rss\n\n# unreference, including x == 9999999\ndel foo, x\nmem2 = proc.get_memory_info().rss\n\n# collect() calls PyInt_ClearFreeList()\n# or use ctypes: pythonapi.PyInt_ClearFreeList()\ngc.collect()\nmem3 = proc.get_memory_info().rss\n\npd = lambda x2, x1: 100.0 * (x2 - x1) / mem0\nprint \"Allocation: %0.2f%%\" % pd(mem1, mem0)\nprint \"Unreference: %0.2f%%\" % pd(mem2, mem1)\nprint \"Collect: %0.2f%%\" % pd(mem3, mem2)\nprint \"Overall: %0.2f%%\" % pd(mem3, mem0)\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>Allocation: 3034.36%\nUnreference: -752.39%\nCollect: -2279.74%\nOverall: 2.23%\n</code></pre>\n\n<p>Edit:</p>\n\n<p>I switched to measuring relative to the process VM size to eliminate the effects of other processes in the system.</p>\n\n<p>The C runtime (e.g. glibc, msvcrt) shrinks the heap when contiguous free space at the top reaches a constant, dynamic, or configurable threshold. With glibc you can tune this with <a href=\"http://man7.org/linux/man-pages/man3/mallopt.3.html\" rel=\"noreferrer\"><code>mallopt</code></a> (M_TRIM_THRESHOLD). Given this, it isn't surprising if the heap shrinks by more -- even a lot more -- than the block that you <code>free</code>. </p>\n\n<p>In 3.x <code>range</code> doesn't create a list, so the test above won't create 10 million <code>int</code> objects. Even if it did, the <code>int</code> type in 3.x is basically a 2.x <code>long</code>, which doesn't implement a freelist.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I've been using the request/application context for some time without fully understanding how it works or why it was designed the way it was. What is the purpose of the \"stack\" when it comes to the request or application context? Are these two separate stacks, or are they both part of one stack? Is the request context pushed onto a stack, or is it a stack itself? Am I able to push/pop multiple contexts on top of eachother? If so, why would I want to do that?</p>\n\n<p>Sorry for all the questions, but I'm still confused after reading the documentation for Request Context and Application Context.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<h1>Multiple Apps</h1>\n\n<p>The application context (and its purpose) is indeed confusing until you realize that Flask can have multiple apps. Imagine the situation where you want to have a single WSGI Python interpreter run multiple Flask application. We're not talking Blueprints here, we're talking entirely different Flask applications.</p>\n\n<p>You might set this up similar to the <a href=\"http://flask.pocoo.org/docs/patterns/appdispatch/\" rel=\"noreferrer\">Flask documentation section on \"Application Dispatching\"</a> example:</p>\n\n<pre><code>from werkzeug.wsgi import DispatcherMiddleware\nfrom frontend_app import application as frontend\nfrom backend_app import application as backend\n\napplication = DispatcherMiddleware(frontend, {\n    '/backend':     backend\n})\n</code></pre>\n\n<p>Notice that there are two completely different Flask applications being created \"frontend\" and \"backend\". In other words, the <code>Flask(...)</code> application constructor has been called twice, creating two instances of a Flask application.</p>\n\n<h1>Contexts</h1>\n\n<p>When you are working with Flask, you often end up using global variables to access various functionality. For example, you probably have code that reads...</p>\n\n<pre><code>from flask import request\n</code></pre>\n\n<p>Then, during a view, you might use <code>request</code> to access the information of the current request. Obviously, <code>request</code> is not a normal global variable; in actuality, it is a <a href=\"http://flask.pocoo.org/docs/reqcontext/#diving-into-context-locals\" rel=\"noreferrer\">context local</a> value. In other words, there is some magic behind the scenes that says \"when I call <code>request.path</code>, get the <code>path</code> attribute from the <code>request</code> object of the CURRENT request.\" Two different requests will have a different results for <code>request.path</code>.</p>\n\n<p>In fact, even if you run Flask with multiple threads, Flask is smart enough to keep the request objects isolated. In doing so, it becomes possible for two threads, each handling a different request, to simultaneously call <code>request.path</code> and get the correct information for their respective requests.</p>\n\n<h1>Putting it Together</h1>\n\n<p>So we've already seen that Flask can handle multiple applications in the same interpreter, and also that because of the way that Flask allows you to use \"context local\" globals there must be some mechanism to determine what the \"current\" <em>request</em> is (in order to do things such as <code>request.path</code>).</p>\n\n<p>Putting these ideas together, it should also make sense that Flask must have some way to determine what the \"current\" application is!</p>\n\n<p>You probably also have code similar to the following:</p>\n\n<pre><code>from flask import url_for\n</code></pre>\n\n<p>Like our <code>request</code> example, the <code>url_for</code> function has logic that is dependent on the current environment. In this case, however, it is clear to see that the logic is heavily dependent on which app is considered the \"current\" app. In the frontend/backend example shown above, both the \"frontend\" and \"backend\" apps could have a \"/login\" route, and so <code>url_for('/login')</code> should return something different depending on if the view is handling the request for the frontend or backend app.</p>\n\n<h1>To answer your questions...</h1>\n\n<blockquote>\n  <p>What is the purpose of the \"stack\" when it comes to the request or\n  application context?</p>\n</blockquote>\n\n<p>From the Request Context docs:</p>\n\n<blockquote>\n  <p>Because the request context is internally maintained as a stack you\n  can push and pop multiple times. This is very handy to implement\n  things like internal redirects.</p>\n</blockquote>\n\n<p>In other words, even though you typically will have 0 or 1 items on these stack of \"current\" requests or \"current\" applications, it is possible that you could have more.</p>\n\n<p>The example given is where you would have your request return the results of an \"internal redirect\". Let's say a user requests A, but you want to return to the user B. In most cases, you issue a redirect to the user, and point the user to resource B, meaning the user will run a second request to fetch B. A slightly different way of handling this would be to do an internal redirect, which means that while processing A, Flask will make a new request to itself for resource B, and use the results of this second request as the results of the user's original request.</p>\n\n<blockquote>\n  <p>Are these two separate stacks, or are they both part of one stack?</p>\n</blockquote>\n\n<p>They are <a href=\"https://github.com/mitsuhiko/flask/blob/41b5d77e29e6158f7a67e9f9872efb323f1be18f/flask/globals.py#L55-L57\" rel=\"noreferrer\">two separate stacks</a>. However, this is an implementation detail. What's more important is not so much that there is a stack, but the fact that at any time you can get the \"current\" app or request (top of the stack).</p>\n\n<blockquote>\n  <p>Is the request context pushed onto a stack, or is it a stack itself?</p>\n</blockquote>\n\n<p>A \"request context\" is one item of the \"request context stack\". Similarly with the \"app context\" and \"app context stack\".</p>\n\n<blockquote>\n  <p>Am I able to push/pop multiple contexts on top of eachother? If so,\n  why would I want to do that?</p>\n</blockquote>\n\n<p>In a Flask application, you typically would not do this. One example of where you might want to is for an internal redirect (described above). Even in that case, however, you would probably end up having Flask handle a new request, and so Flask would do all of the pushing/popping for you.</p>\n\n<p>However, there are some cases where you'd want to manipulate the stack yourself.</p>\n\n<h2>Running code outside of a request</h2>\n\n<p>One typical problem people have is that they use the Flask-SQLAlchemy extension to set up a SQL database and model definition using code something like what is shown below...</p>\n\n<pre><code>app = Flask(__name__)\ndb = SQLAlchemy() # Initialize the Flask-SQLAlchemy extension object\ndb.init_app(app)\n</code></pre>\n\n<p>Then they use the <code>app</code> and <code>db</code> values in a script that should be run from the shell. For example, a \"setup_tables.py\" script...</p>\n\n<pre><code>from myapp import app, db\n\n# Set up models\ndb.create_all()\n</code></pre>\n\n<p>In this case, the Flask-SQLAlchemy extension knows about the <code>app</code> application, but during <code>create_all()</code> it will throw an error complaining about there not being an application context. This error is justified; you never told Flask what application it should be dealing with when running the <code>create_all</code> method.</p>\n\n<p>You might be wondering why you don't end up needing this <code>with app.app_context()</code> call when you run similar functions in your views. The reason is that Flask already handles the management of the application context for you when it is handling actual web requests. The problem really only comes up outside of these view functions (or other such callbacks), such as when using your models in a one-off script.</p>\n\n<p>The resolution is to push the application context yourself, which can be done by doing...</p>\n\n<pre><code>from myapp import app, db\n\n# Set up models\nwith app.app_context():\n    db.create_all()\n</code></pre>\n\n<p>This will push a new application context (using the application of <code>app</code>, remember there could be more than one application).</p>\n\n<h2>Testing</h2>\n\n<p>Another case where you would want to manipulate the stack is for testing. You could create a unit test that handles a request and you check the results:</p>\n\n<pre><code>import unittest\nfrom flask import request\n\nclass MyTest(unittest.TestCase):\n    def test_thing(self):\n        with app.test_request_context('/?next=http://example.com/') as ctx:\n            # You can now view attributes on request context stack by using `request`.\n\n        # Now the request context stack is empty\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am using <code>pyplot</code>. I have 4 subplots. How to set a single, main title above all the subplots? <code>title()</code> sets it above the last subplot.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use <a href=\"http://matplotlib.sourceforge.net/api/figure_api.html#matplotlib.figure.Figure.suptitle\" rel=\"noreferrer\">plt.suptitle</a>:</p>\n\n<pre><code>import matplotlib.pyplot as plt\nimport numpy as np\n\nfig=plt.figure()\ndata=np.arange(900).reshape((30,30))\nfor i in range(1,5):\n    ax=fig.add_subplot(2,2,i)        \n    ax.imshow(data)\n\nplt.suptitle('Main title')\nplt.show()    \n</code></pre>\n\n<p>yields</p>\n\n<p><img src=\"https://i.stack.imgur.com/Kq15V.png\" alt=\"enter image description here\"></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Can I use:</p>\n\n<pre><code>if A:\n</code></pre>\n\n<p>instead of </p>\n\n<pre><code>if A is not None:\n</code></pre>\n\n<p>The latter seems so verbose. Is there a difference?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The statement</p>\n\n<pre><code>if A:\n</code></pre>\n\n<p>will call <code>A.__nonzero__()</code> (see <a href=\"http://docs.python.org/reference/datamodel.html#object.__nonzero__\" rel=\"noreferrer\">Special method names</a> documentation) and use the return value of that function. Here's the summary:</p>\n\n<blockquote>\n  <h3><code>object.__nonzero__(self)</code></h3>\n  \n  <p>Called to implement truth value testing and the built-in operation <code>bool()</code>; should return <code>False</code> or <code>True</code>, or their integer equivalents <code>0</code> or <code>1</code>. When this method is not defined, <code>__len__()</code> is called, if it is defined, and the object is considered true if its result is nonzero. If a class defines neither <code>__len__()</code> nor <code>__nonzero__()</code>, all its instances are considered true.</p>\n</blockquote>\n\n<p>On the other hand,</p>\n\n<pre><code>if A is not None:\n</code></pre>\n\n<p>compares <em>only</em> the reference <code>A</code> with <code>None</code> to see whether it is the same or not.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm new to Python and Flask and I'm trying to do the equivalent of <code>Response.redirect</code> as in <code>C#</code> - ie: redirect to a specific URL - how do I go about this?</p>\n\n<p>Here is my code:</p>\n\n<pre><code>import os\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    return 'Hello World!'\n\nif __name__ == '__main__':\n    # Bind to PORT if defined, otherwise default to 5000.\n    port = int(os.environ.get('PORT', 5000))\n    app.run(host='0.0.0.0', port=port)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>you have to return a redirect</p>\n\n<pre><code>import os\nfrom flask import Flask,redirect\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello():\n    return redirect(\"http://www.example.com\", code=302)\n\nif __name__ == '__main__':\n    # Bind to PORT if defined, otherwise default to 5000.\n    port = int(os.environ.get('PORT', 5000))\n    app.run(host='0.0.0.0', port=port)\n</code></pre>\n\n<p>see <a href=\"http://flask.pocoo.org/docs/0.10/api/#flask.redirect\" rel=\"noreferrer\">the documentation on flask docs</a>.</p>\n\n<p>default value for code is 302 so <code>code=302</code> can be omitted or replaced by other redirect code (one in 301, 302, 303, 305, and 307)</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is there a way in Python to list all installed packages and their versions?</p>\n\n<p>I know I can go inside <code>python/Lib/site-packages</code> and see what files and directories exist, but I find this very awkward. What I'm looking for something that is similar to <code>npm list</code> <a href=\"https://npmjs.org/doc/list.html\">[1]</a>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you have pip install and you want to see what packages have been installed with your installer tools you can simply call this:</p>\n\n<pre><code>pip freeze\n</code></pre>\n\n<p>It will also include version numbers for the installed packages.</p>\n\n<p><strong>Update</strong></p>\n\n<p>pip has been updated to also produce the same output as <code>pip freeze</code> by calling:</p>\n\n<pre><code>pip list\n</code></pre>\n\n<p><strong>Note</strong></p>\n\n<p>The output from <code>pip list</code> is formatted differently, so if you have some shell script that parses the output (maybe to grab the version number) of <code>freeze</code> and want to change your script to call <code>list</code>, you'll need to change your parsing code.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a text string that starts with a number of spaces, varying between 2 &amp; 4.</p>\n\n<p>What is the simplest way to remove the leading whitespace? (ie. remove everything before a certain character?)</p>\n\n<pre><code>\"  Example\"   -&gt; \"Example\"\n\"  Example  \" -&gt; \"Example  \"\n\"    Example\" -&gt; \"Example\"\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The <a href=\"http://docs.python.org/library/stdtypes.html#str.lstrip\" rel=\"nofollow noreferrer\"><code>lstrip()</code></a> method will remove leading whitespaces, newline and tab characters on a string beginning:</p>\n\n<pre><code>&gt;&gt;&gt; '     hello world!'.lstrip()\n'hello world!'\n</code></pre>\n\n<p><strong>Edit</strong></p>\n\n<p><a href=\"https://stackoverflow.com/questions/959215/removing-starting-spaces-in-python#comment768038_959216\">As balpha pointed out in the comments</a>, in order to remove <em>only</em> spaces from the beginning of the string, <code>lstrip(' ')</code> should be used:</p>\n\n<pre><code>&gt;&gt;&gt; '   hello world with 2 spaces and a tab!'.lstrip(' ')\n'\\thello world with 2 spaces and a tab!'\n</code></pre>\n\n<p>Related question:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/761804/trimming-a-string-in-python\">Trimming a string in Python</a></li>\n</ul>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Can you add new statements (like <code>print</code>, <code>raise</code>, <code>with</code>) to Python's syntax?</p>\n\n<p>Say, to allow..</p>\n\n<pre><code>mystatement \"Something\"\n</code></pre>\n\n<p>Or,</p>\n\n<pre><code>new_if True:\n    print \"example\"\n</code></pre>\n\n<p>Not so much if you <em>should</em>, but rather if it's possible (short of modifying the python interpreters code)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You may find this useful - <a href=\"http://eli.thegreenplace.net/2010/06/30/python-internals-adding-a-new-statement-to-python/\" rel=\"noreferrer\">Python internals: adding a new statement to Python</a>, quoted here:</p>\n\n<hr>\n\n<p>This article is an attempt to better understand how the front-end of Python works. Just reading documentation and source code may be a bit boring, so I'm taking a hands-on approach here: I'm going to add an <code>until</code> statement to Python.</p>\n\n<p>All the coding for this article was done against the cutting-edge Py3k branch in the <a href=\"http://code.python.org/hg/branches/py3k/\" rel=\"noreferrer\">Python Mercurial repository mirror</a>.</p>\n\n<h3>The <code>until</code> statement</h3>\n\n<p>Some languages, like Ruby, have an <code>until</code> statement, which is the complement to <code>while</code> (<code>until num == 0</code> is equivalent to <code>while num != 0</code>). In Ruby, I can write:</p>\n\n<pre><code>num = 3\nuntil num == 0 do\n  puts num\n  num -= 1\nend\n</code></pre>\n\n<p>And it will print:</p>\n\n<pre><code>3\n2\n1\n</code></pre>\n\n<p>So, I want to add a similar capability to Python. That is, being able to write:</p>\n\n<pre><code>num = 3\nuntil num == 0:\n  print(num)\n  num -= 1\n</code></pre>\n\n<h3>A language-advocacy digression</h3>\n\n<p>This article doesn't attempt to suggest the addition of an <code>until</code> statement to Python. Although I think such a statement would make some code clearer, and this article displays how easy it is to add, I completely respect Python's philosophy of minimalism. All I'm trying to do here, really, is gain some insight into the inner workings of Python.</p>\n\n<h3>Modifying the grammar</h3>\n\n<p>Python uses a custom parser generator named <code>pgen</code>. This is a LL(1) parser that converts Python source code into a parse tree. The input to the parser generator is the file <code>Grammar/Grammar</code><strong>[1]</strong>. This is a simple text file that specifies the grammar of Python.</p>\n\n<p><strong>[1]</strong>: From here on, references to files in the Python source are given relatively to the root of the source tree, which is the directory where you run configure and make to build Python.</p>\n\n<p>Two modifications have to be made to the grammar file. The first is to add a definition for the <code>until</code> statement. I found where the <code>while</code> statement was defined (<code>while_stmt</code>), and added <code>until_stmt</code> below <strong>[2]</strong>:</p>\n\n<pre><code>compound_stmt: if_stmt | while_stmt | until_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated\nif_stmt: 'if' test ':' suite ('elif' test ':' suite)* ['else' ':' suite]\nwhile_stmt: 'while' test ':' suite ['else' ':' suite]\nuntil_stmt: 'until' test ':' suite\n</code></pre>\n\n<p><strong>[2]</strong>: This demonstrates a common technique I use when modifying source code I\u2019m not familiar with: <em>work by similarity</em>. This principle won\u2019t solve all your problems, but it can definitely ease the process. Since everything that has to be done for <code>while</code> also has to be done for <code>until</code>, it serves as a pretty good guideline.</p>\n\n<p>Note that I've decided to exclude the <code>else</code> clause from my definition of <code>until</code>, just to make it a little bit different (and because frankly I dislike the <code>else</code> clause of loops and don't think it fits well with the Zen of Python).</p>\n\n<p>The second change is to modify the rule for <code>compound_stmt</code> to include <code>until_stmt</code>, as you can see in the snippet above. It's right after <code>while_stmt</code>, again.</p>\n\n<p>When you run <code>make</code> after modifying <code>Grammar/Grammar</code>, notice that the <code>pgen</code> program is run to re-generate <code>Include/graminit.h</code> and <code>Python/graminit.c</code>, and then several files get re-compiled.</p>\n\n<h3>Modifying the AST generation code</h3>\n\n<p>After the Python parser has created a parse tree, this tree is converted into an AST, since ASTs are <a href=\"http://eli.thegreenplace.net/2009/02/16/abstract-vs-concrete-syntax-trees/\" rel=\"noreferrer\">much simpler to work with</a> in subsequent stages of the compilation process.</p>\n\n<p>So, we're going to visit <code>Parser/Python.asdl</code> which defines the structure of Python's ASTs and add an AST node for our new <code>until</code> statement, again right below the <code>while</code>:</p>\n\n<pre><code>| While(expr test, stmt* body, stmt* orelse)\n| Until(expr test, stmt* body)\n</code></pre>\n\n<p>If you now run <code>make</code>, notice that before compiling a bunch of files, <code>Parser/asdl_c.py</code> is run to generate C code from the AST definition file. This (like <code>Grammar/Grammar</code>) is another example of the Python source-code using a mini-language (in other words, a DSL) to simplify programming. Also note that since <code>Parser/asdl_c.py</code> is a Python script, this is a kind of <a href=\"http://en.wikipedia.org/wiki/Bootstrapping_%28compilers%29\" rel=\"noreferrer\">bootstrapping</a> - to build Python from scratch, Python already has to be available.</p>\n\n<p>While <code>Parser/asdl_c.py</code> generated the code to manage our newly defined AST node (into the files <code>Include/Python-ast.h</code> and <code>Python/Python-ast.c</code>), we still have to write the code that converts a relevant parse-tree node into it by hand. This is done in the file <code>Python/ast.c</code>. There, a function named <code>ast_for_stmt</code> converts parse tree nodes for statements into AST nodes. Again, guided by our old friend <code>while</code>, we jump right into the big <code>switch</code> for handling compound statements and add a clause for <code>until_stmt</code>:</p>\n\n<pre><code>case while_stmt:\n    return ast_for_while_stmt(c, ch);\ncase until_stmt:\n    return ast_for_until_stmt(c, ch);\n</code></pre>\n\n<p>Now we should implement <code>ast_for_until_stmt</code>. Here it is:</p>\n\n<pre><code>static stmt_ty\nast_for_until_stmt(struct compiling *c, const node *n)\n{\n    /* until_stmt: 'until' test ':' suite */\n    REQ(n, until_stmt);\n\n    if (NCH(n) == 4) {\n        expr_ty expression;\n        asdl_seq *suite_seq;\n\n        expression = ast_for_expr(c, CHILD(n, 1));\n        if (!expression)\n            return NULL;\n        suite_seq = ast_for_suite(c, CHILD(n, 3));\n        if (!suite_seq)\n            return NULL;\n        return Until(expression, suite_seq, LINENO(n), n-&gt;n_col_offset, c-&gt;c_arena);\n    }\n\n    PyErr_Format(PyExc_SystemError,\n                 \"wrong number of tokens for 'until' statement: %d\",\n                 NCH(n));\n    return NULL;\n}\n</code></pre>\n\n<p>Again, this was coded while closely looking at the equivalent <code>ast_for_while_stmt</code>, with the difference that for <code>until</code> I've decided not to support the <code>else</code> clause. As expected, the AST is created recursively, using other AST creating functions like <code>ast_for_expr</code> for the condition expression and <code>ast_for_suite</code> for the body of the <code>until</code> statement. Finally, a new node named <code>Until</code> is returned.</p>\n\n<p>Note that we access the parse-tree node <code>n</code> using some macros like <code>NCH</code> and <code>CHILD</code>. These are worth understanding - their code is in <code>Include/node.h</code>.</p>\n\n<h3>Digression: AST composition</h3>\n\n<p>I chose to create a new type of AST for the <code>until</code> statement, but actually this isn't necessary. I could've saved some work and implemented the new functionality using composition of existing AST nodes, since:</p>\n\n<pre><code>until condition:\n   # do stuff\n</code></pre>\n\n<p>Is functionally equivalent to:</p>\n\n<pre><code>while not condition:\n  # do stuff\n</code></pre>\n\n<p>Instead of creating the <code>Until</code> node in <code>ast_for_until_stmt</code>, I could have created a <code>Not</code> node with an <code>While</code> node as a child. Since the AST compiler already knows how to handle these nodes, the next steps of the process could be skipped.</p>\n\n<h3>Compiling ASTs into bytecode</h3>\n\n<p>The next step is compiling the AST into Python bytecode. The compilation has an intermediate result which is a CFG (Control Flow Graph), but since the same code handles it I will ignore this detail for now and leave it for another article.</p>\n\n<p>The code we will look at next is <code>Python/compile.c</code>. Following the lead of <code>while</code>, we find the function <code>compiler_visit_stmt</code>, which is responsible for compiling statements into bytecode. We add a clause for <code>Until</code>:</p>\n\n<pre><code>case While_kind:\n    return compiler_while(c, s);\ncase Until_kind:\n    return compiler_until(c, s);\n</code></pre>\n\n<p>If you wonder what <code>Until_kind</code> is, it's a constant (actually a value of the <code>_stmt_kind</code> enumeration) automatically generated from the AST definition file into <code>Include/Python-ast.h</code>. Anyway, we call <code>compiler_until</code> which, of course, still doesn't exist. I'll get to it an a moment.</p>\n\n<p>If you're curious like me, you'll notice that <code>compiler_visit_stmt</code> is peculiar. No amount of <code>grep</code>-ping the source tree reveals where it is called. When this is the case, only one option remains - C macro-fu. Indeed, a short investigation leads us to the <code>VISIT</code> macro defined in <code>Python/compile.c</code>:</p>\n\n<pre><code>#define VISIT(C, TYPE, V) {\\\n    if (!compiler_visit_ ## TYPE((C), (V))) \\\n        return 0; \\\n</code></pre>\n\n<p>It's used to invoke <code>compiler_visit_stmt</code> in <code>compiler_body</code>. Back to our business, however...</p>\n\n<p>As promised, here's <code>compiler_until</code>:</p>\n\n<pre><code>static int\ncompiler_until(struct compiler *c, stmt_ty s)\n{\n    basicblock *loop, *end, *anchor = NULL;\n    int constant = expr_constant(s-&gt;v.Until.test);\n\n    if (constant == 1) {\n        return 1;\n    }\n    loop = compiler_new_block(c);\n    end = compiler_new_block(c);\n    if (constant == -1) {\n        anchor = compiler_new_block(c);\n        if (anchor == NULL)\n            return 0;\n    }\n    if (loop == NULL || end == NULL)\n        return 0;\n\n    ADDOP_JREL(c, SETUP_LOOP, end);\n    compiler_use_next_block(c, loop);\n    if (!compiler_push_fblock(c, LOOP, loop))\n        return 0;\n    if (constant == -1) {\n        VISIT(c, expr, s-&gt;v.Until.test);\n        ADDOP_JABS(c, POP_JUMP_IF_TRUE, anchor);\n    }\n    VISIT_SEQ(c, stmt, s-&gt;v.Until.body);\n    ADDOP_JABS(c, JUMP_ABSOLUTE, loop);\n\n    if (constant == -1) {\n        compiler_use_next_block(c, anchor);\n        ADDOP(c, POP_BLOCK);\n    }\n    compiler_pop_fblock(c, LOOP, loop);\n    compiler_use_next_block(c, end);\n\n    return 1;\n}\n</code></pre>\n\n<p>I have a confession to make: this code wasn't written based on a deep understanding of Python bytecode. Like the rest of the article, it was done in imitation of the kin <code>compiler_while</code> function. By reading it carefully, however, keeping in mind that the Python VM is stack-based, and glancing into the documentation of the <code>dis</code> module, which has <a href=\"http://docs.python.org/py3k/library/dis.html\" rel=\"noreferrer\">a list of Python bytecodes</a> with descriptions, it's possible to understand what's going on.</p>\n\n<h3>That's it, we're done... Aren't we?</h3>\n\n<p>After making all the changes and running <code>make</code>, we can run the newly compiled Python and try our new <code>until</code> statement:</p>\n\n<pre><code>&gt;&gt;&gt; until num == 0:\n...   print(num)\n...   num -= 1\n...\n3\n2\n1\n</code></pre>\n\n<p>Voila, it works! Let's see the bytecode created for the new statement by using the <code>dis</code> module as follows:</p>\n\n<pre><code>import dis\n\ndef myfoo(num):\n    until num == 0:\n        print(num)\n        num -= 1\n\ndis.dis(myfoo)\n</code></pre>\n\n<p>Here's the result:</p>\n\n<pre><code>4           0 SETUP_LOOP              36 (to 39)\n      &gt;&gt;    3 LOAD_FAST                0 (num)\n            6 LOAD_CONST               1 (0)\n            9 COMPARE_OP               2 (==)\n           12 POP_JUMP_IF_TRUE        38\n\n5          15 LOAD_NAME                0 (print)\n           18 LOAD_FAST                0 (num)\n           21 CALL_FUNCTION            1\n           24 POP_TOP\n\n6          25 LOAD_FAST                0 (num)\n           28 LOAD_CONST               2 (1)\n           31 INPLACE_SUBTRACT\n           32 STORE_FAST               0 (num)\n           35 JUMP_ABSOLUTE            3\n      &gt;&gt;   38 POP_BLOCK\n      &gt;&gt;   39 LOAD_CONST               0 (None)\n           42 RETURN_VALUE\n</code></pre>\n\n<p>The most interesting operation is number 12: if the condition is true, we jump to after the loop. This is correct semantics for <code>until</code>. If the jump isn't executed, the loop body keeps running until it jumps back to the condition at operation 35.</p>\n\n<p>Feeling good about my change, I then tried running the function (executing <code>myfoo(3)</code>) instead of showing its bytecode. The result was less than encouraging:</p>\n\n<pre><code>Traceback (most recent call last):\n  File \"zy.py\", line 9, in\n    myfoo(3)\n  File \"zy.py\", line 5, in myfoo\n    print(num)\nSystemError: no locals when loading 'print'\n</code></pre>\n\n<p>Whoa... this can't be good. So what went wrong?</p>\n\n<h3>The case of the missing symbol table</h3>\n\n<p>One of the steps the Python compiler performs when compiling the AST is create a symbol table for the code it compiles. The call to <code>PySymtable_Build</code> in <code>PyAST_Compile</code> calls into the symbol table module (<code>Python/symtable.c</code>), which walks the AST in a manner similar to the code generation functions. Having a symbol table for each scope helps the compiler figure out some key information, such as which variables are global and which are local to a scope.</p>\n\n<p>To fix the problem, we have to modify the <code>symtable_visit_stmt</code> function in <code>Python/symtable.c</code>, adding code for handling <code>until</code> statements, after the similar code for <code>while</code> statements <strong>[3]</strong>:</p>\n\n<pre><code>case While_kind:\n    VISIT(st, expr, s-&gt;v.While.test);\n    VISIT_SEQ(st, stmt, s-&gt;v.While.body);\n    if (s-&gt;v.While.orelse)\n        VISIT_SEQ(st, stmt, s-&gt;v.While.orelse);\n    break;\ncase Until_kind:\n    VISIT(st, expr, s-&gt;v.Until.test);\n    VISIT_SEQ(st, stmt, s-&gt;v.Until.body);\n    break;\n</code></pre>\n\n<p><strong>[3]</strong>: By the way, without this code there\u2019s a compiler warning for <code>Python/symtable.c</code>. The compiler notices that the <code>Until_kind</code> enumeration value isn\u2019t handled in the switch statement of <code>symtable_visit_stmt</code> and complains. It\u2019s always important to check for compiler warnings!</p>\n\n<p>And now we really are done. Compiling the source after this change makes the execution of <code>myfoo(3)</code> work as expected.</p>\n\n<h3>Conclusion</h3>\n\n<p>In this article I've demonstrated how to add a new statement to Python. Albeit requiring quite a bit of tinkering in the code of the Python compiler, the change wasn't difficult to implement, because I used a similar and existing statement as a guideline.</p>\n\n<p>The Python compiler is a sophisticated chunk of software, and I don't claim being an expert in it. However, I am really interested in the internals of Python, and particularly its front-end. Therefore, I found this exercise a very useful companion to theoretical study of the compiler's principles and source code. It will serve as a base for future articles that will get deeper into the compiler.</p>\n\n<h3>References</h3>\n\n<p>I used a few excellent references for the construction of this article. Here they are, in no particular order:</p>\n\n<ul>\n<li><a href=\"http://www.python.org/dev/peps/pep-0339/\" rel=\"noreferrer\">PEP 339: Design of the CPython compiler</a> - probably the most important and comprehensive piece of <em>official</em> documentation for the Python compiler. Being very short, it painfully displays the scarcity of good documentation of the internals of Python.</li>\n<li>\"Python Compiler Internals\" - an article by Thomas Lee</li>\n<li>\"Python: Design and Implementation\" - a presentation by Guido van Rossum</li>\n<li>Python (2.5) Virtual Machine, A guided tour - a presentation by Peter Tr\u00f6ger</li>\n</ul>\n\n<p><a href=\"http://eli.thegreenplace.net/2010/06/30/python-internals-adding-a-new-statement-to-python/\" rel=\"noreferrer\">original source</a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In <code>django.utils.functional.py</code>:</p>\n\n<pre><code>for t in type(res).mro():  # &lt;----- this\n    if t in self.__dispatch:\n        return self.__dispatch[t][funcname](res, *args, **kw)\n</code></pre>\n\n<p>I don't understand <code>mro()</code>. What does it do and what does \"mro\" mean?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Follow along...:</p>\n\n<pre><code>&gt;&gt;&gt; class A(object): pass\n... \n&gt;&gt;&gt; A.__mro__\n(&lt;class '__main__.A'&gt;, &lt;type 'object'&gt;)\n&gt;&gt;&gt; class B(A): pass\n... \n&gt;&gt;&gt; B.__mro__\n(&lt;class '__main__.B'&gt;, &lt;class '__main__.A'&gt;, &lt;type 'object'&gt;)\n&gt;&gt;&gt; class C(A): pass\n... \n&gt;&gt;&gt; C.__mro__\n(&lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;type 'object'&gt;)\n&gt;&gt;&gt; \n</code></pre>\n\n<p>As long as we have single inheritance, <code>__mro__</code> is just the tuple of: the class, its base, its base's base, and so on up to <code>object</code> (only works for new-style classes of course).</p>\n\n<p>Now, with <em>multiple</em> inheritance...:</p>\n\n<pre><code>&gt;&gt;&gt; class D(B, C): pass\n... \n&gt;&gt;&gt; D.__mro__\n(&lt;class '__main__.D'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;type 'object'&gt;)\n</code></pre>\n\n<p>...you also get the assurance that, in <code>__mro__</code>, no class is duplicated, and no class comes after its ancestors, save that classes that first enter at the same level of multiple inheritance (like B and C in this example) are in the <code>__mro__</code> left to right.</p>\n\n<p>Every attribute you get on a class's instance, not just methods, is conceptually looked up along the <code>__mro__</code>, so, if more than one class among the ancestors defines that name, this tells you where the attribute will be found -- in the first class in the <code>__mro__</code> that defines that name.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm currently primarily a D programmer and am looking to add another language to my toolbox, preferably one that supports the metaprogramming hacks that just can't be done in a statically compiled language like D.  I've read up on Lisp a little and I would love to find a language that allows some of the cool stuff that Lisp does, but without the strange syntax, etc. of Lisp.  I don't want to start a language flame war, and I'm sure both Ruby and Python have their tradeoffs, so I'll list what's important to me personally.  Please tell me whether Ruby, Python, or some other language would be best for me.</p>\n\n<p>Important:</p>\n\n<ol>\n<li>Good metaprogramming.  Ability to create classes, methods, functions, etc. at runtime.  Preferably, minimal distinction between code and data, Lisp style.</li>\n<li>Nice, clean, sane syntax and consistent, intuitive semantics.  Basically a well thought-out, fun to use, modern language.</li>\n<li>Multiple paradigms.  No one paradigm is right for every project, or even every small subproblem within a project.</li>\n<li>An interesting language that actually affects the way one thinks about programming.</li>\n</ol>\n\n<p>Somewhat important:</p>\n\n<ol>\n<li>Performance.  It would be nice if performance was decent, but when performance is a real priority, I'll use D instead.</li>\n<li>Well-documented.  </li>\n</ol>\n\n<p>Not important:</p>\n\n<ol>\n<li>Community size, library availability, etc.  None of these are characteristics of the language itself, and all can change very quickly.</li>\n<li>Job availability.  I am not a full-time, professional programmer.  I am a grad student and programming is tangentially relevant to my research.</li>\n<li>Any features that are primarily designed with very large projects worked on by a million code monkeys in mind.</li>\n</ol>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There's not really a huge difference between python and ruby at least at an ideological level.  For the most part, they're just different flavors of the same thing.  Thus, I would recommend seeing which one matches your programming style more.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/2241891/how-to-initialize-a-dict-with-keys-from-a-list-and-empty-value-in-python\" dir=\"ltr\">How to initialize a dict with keys from a list and empty value in Python?</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    6 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>I have <code>a = [1,2,3,4]</code> and I want <code>d = {1:0, 2:0, 3:0, 4:0}</code></p>\n\n<pre><code>d = dict(zip(q,[0 for x in range(0,len(q))]))\n</code></pre>\n\n<p>works but is ugly. What's a cleaner way?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>dict((el,0) for el in a)</code> will work well. </p>\n\n<p>Python 2.7 and above also support dict comprehensions. That syntax is <code>{el:0 for el in a}</code>. </p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Assume I have a pandas DataFrame with two columns, A and B. I'd like to modify this DataFrame (or create a copy) so that B is always NaN whenever A is 0. How would I achieve that?</p>\n\n<p>I tried the following</p>\n\n<pre><code>df['A'==0]['B'] = np.nan\n</code></pre>\n\n<p>and</p>\n\n<pre><code>df['A'==0]['B'].values.fill(np.nan)\n</code></pre>\n\n<p>without success.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Try this:</p>\n\n<pre><code>df.ix[df.A==0, 'B'] = np.nan\n</code></pre>\n\n<p>the <code>df.A==0</code> expression creates a boolean series that indexes the rows, <code>'B'</code> selects the column. You can also use this to transform a subset of a column, e.g.:</p>\n\n<pre><code>df.ix[df.A==0, 'B'] = df.ix[df.A==0, 'B'] / 2\n</code></pre>\n\n<p>I don't know enough about pandas internals to know exactly why that works, but the basic issue is that sometimes indexing into a DataFrame returns a copy of the result, and sometimes it returns a view on the original object. According to documentation <a href=\"http://pandas.pydata.org/pandas-docs/stable/indexing.html#advanced-indexing-with-labels\" rel=\"noreferrer\">here</a>, this behavior depends on the underlying numpy behavior. I've found that accessing everything in one operation (rather than [one][two]) is more likely to work for setting. </p>\n\n<hr>\n\n<p>Update</p>\n\n<p><code>ix</code> is deprecated, use <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.loc.html\" rel=\"noreferrer\"><code>.loc</code></a> for label based indexing</p>\n\n<pre><code>df.loc[df.A==0, 'B'] = np.nan\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am writing some python code and I am receiving the error message as in the title, from searching this has to do with the character set. </p>\n\n<p>Here is the line that causes the error</p>\n\n<pre><code>hc = HealthCheck(\"instance_health\", interval=15, target808=\"HTTP:8080/index.html\")\n</code></pre>\n\n<p>I cannot figure out what character is not in the ANSI ASCII set? Furthermore searching \"\\xe2\" does not give anymore information as to what character that appears as. Which character in that line is causing the issue? </p>\n\n<p>I have also seen a few fixes for this issue but I am not sure which to use. Could someone clarify what the issue is (python doesn't interpret unicode unless told to do so?), and how I would clear it up properly?</p>\n\n<p>EDIT:\nHere are all the lines near the one that errors</p>\n\n<pre><code>def createLoadBalancer():\n    conn = ELBConnection(creds.awsAccessKey, creds.awsSecretKey)\n    hc = HealthCheck(\"instance_health\", interval=15, target808=\"HTTP:8080/index.html\")\n    lb = conn.create_load_balancer('my_lb', ['us-east-1a', 'us-east-1b'],[(80, 8080, 'http'), (443, 8443, 'tcp')])\n    lb.configure_health_check(hc)\n    return lb\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You've got a stray byte floating around.  You can find it by running</p>\n\n<pre><code>with open(\"x.py\") as fp:\n    for i, line in enumerate(fp):\n        if \"\\xe2\" in line:\n            print i, repr(line)\n</code></pre>\n\n<p>where you should replace <code>\"x.py\"</code> by the name of your program.  You'll see the line number and the offending line(s).  For example, after inserting that byte arbitrarily, I got:</p>\n\n<pre><code>4 \"\\xe2        lb = conn.create_load_balancer('my_lb', ['us-east-1a', 'us-east-1b'],[(80, 8080, 'http'), (443, 8443, 'tcp')])\\n\"\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p><a href=\"https://code.visualstudio.com/\" rel=\"noreferrer\">Visual Studio Code</a> was recently released and I liked the look of it and the features it offered, so I figured I would give it a go. </p>\n\n<p>I downloaded the application from the <a href=\"https://code.visualstudio.com/Download\" rel=\"noreferrer\">downloads page</a>\n fired it up, messed around a bit with some of the features ... and then realized I had no idea how to actually execute any of my Python code!</p>\n\n<p>I really like the look and feel/usability/features of Visual Studio Code, but I can't seem to find out how to run my Python code, a real killer because that's what I program primarily in.</p>\n\n<p>Does anyone know if there is a way to execute Python code in Visual Studio Code?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can <a href=\"https://www.stevefenton.co.uk/Content/Blog/Date/201505/Blog/Custom-Tasks-In-Visual-Studio-Code/\">add a custom task</a> to do this. Here is a basic custom task for Python.</p>\n\n<pre><code>{\n    \"version\": \"0.1.0\",\n    \"command\": \"c:\\\\Python34\\\\python\",\n    \"args\": [\"app.py\"],\n    \"problemMatcher\": {\n        \"fileLocation\": [\"relative\", \"${workspaceRoot}\"],\n        \"pattern\": {\n            \"regexp\": \"^(.*)+s$\",\n            \"message\": 1\n        }\n    }\n}\n</code></pre>\n\n<p>You add this to <code>tasks.json</code> and press <code>CTRL</code> + <code>SHIFT</code> + <code>B</code> to run it.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm writing a Django Middleware class that I want to execute only once at startup, to initialise some other arbritary code. I've followed the very nice solution posted by sdolan <a href=\"https://stackoverflow.com/questions/3495964/in-django-how-do-i-call-the-subcommand-syncdb-from-the-initialization-script\">here</a>, but the \"Hello\" message is output to the terminal <em>twice</em>. E.g.</p>\n\n<pre><code>from django.core.exceptions import MiddlewareNotUsed\nfrom django.conf import settings\n\nclass StartupMiddleware(object):\n    def __init__(self):\n        print \"Hello world\"\n        raise MiddlewareNotUsed('Startup complete')\n</code></pre>\n\n<p>and in my Django settings file, I've got the class included in the <code>MIDDLEWARE_CLASSES</code> list.</p>\n\n<p>But when I run Django using runserver and request a page, I get in the terminal</p>\n\n<pre><code>Django version 1.3, using settings 'config.server'\nDevelopment server is running at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\nHello world\n[22/Jul/2011 15:54:36] \"GET / HTTP/1.1\" 200 698\nHello world\n[22/Jul/2011 15:54:36] \"GET /static/css/base.css HTTP/1.1\" 200 0\n</code></pre>\n\n<p>Any ideas why \"Hello world\" is printed twice? Thanks.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Update from Pykler's answer below: Django 1.7 now has a <a href=\"https://docs.djangoproject.com/en/dev/ref/applications/#django.apps.AppConfig.ready\" rel=\"nofollow noreferrer\">hook for this</a></p>\n\n<hr>\n\n<p>Don't do it this way.</p>\n\n<p>You don't want \"middleware\" for a one-time startup thing.</p>\n\n<p>You want to execute code in the top-level <code>urls.py</code>.  That module is imported and executed once.</p>\n\n<p><code>urls.py</code></p>\n\n<pre><code>from django.confs.urls.defaults import *\nfrom my_app import one_time_startup\n\nurlpatterns = ...\n\none_time_startup()\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a Python dictionary like the following:</p>\n\n<pre><code>{u'2012-06-08': 388,\n u'2012-06-09': 388,\n u'2012-06-10': 388,\n u'2012-06-11': 389,\n u'2012-06-12': 389,\n u'2012-06-13': 389,\n u'2012-06-14': 389,\n u'2012-06-15': 389,\n u'2012-06-16': 389,\n u'2012-06-17': 389,\n u'2012-06-18': 390,\n u'2012-06-19': 390,\n u'2012-06-20': 390,\n u'2012-06-21': 390,\n u'2012-06-22': 390,\n u'2012-06-23': 390,\n u'2012-06-24': 390,\n u'2012-06-25': 391,\n u'2012-06-26': 391,\n u'2012-06-27': 391,\n u'2012-06-28': 391,\n u'2012-06-29': 391,\n u'2012-06-30': 391,\n u'2012-07-01': 391,\n u'2012-07-02': 392,\n u'2012-07-03': 392,\n u'2012-07-04': 392,\n u'2012-07-05': 392,\n u'2012-07-06': 392}\n</code></pre>\n\n<p>The keys are <a href=\"http://en.wikipedia.org/wiki/Unicode\" rel=\"noreferrer\">Unicode</a> dates and the values are integers. I would like to convert this into a pandas dataframe by having the dates and their corresponding values as two separate columns. Example: col1: Dates col2: DateValue (the dates are still Unicode and datevalues are still integers)</p>\n\n<pre><code>     Date         DateValue\n0    2012-07-01    391\n1    2012-07-02    392\n2    2012-07-03    392\n.    2012-07-04    392\n.    ...           ...\n.    ...           ...\n</code></pre>\n\n<p>Any help in this direction would be much appreciated. I am unable to find resources on the pandas docs to help me with this.</p>\n\n<p>I know one solution might be to convert each key-value pair in this dict, into a dict so the entire structure becomes a dict of dicts, and then we can add each row individually to the dataframe. But I want to know if there is an easier way and a more direct way to do this.</p>\n\n<p>So far I have tried converting the dict into a series object but this doesn't seem to maintain the relationship between the columns:</p>\n\n<pre><code>s  = Series(my_dict,index=my_dict.keys())\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The error here, is since calling the DataFrame constructor with scalar values (where it expects values to be a list/dict/... i.e. have multiple columns):</p>\n\n<pre><code>pd.DataFrame(d)\nValueError: If using all scalar values, you must must pass an index\n</code></pre>\n\n<p>You could take the items from the dictionary (i.e. the key-value pairs):</p>\n\n<pre><code>In [11]: pd.DataFrame(d.items())  # or list(d.items()) in python 3\nOut[11]:\n             0    1\n0   2012-07-02  392\n1   2012-07-06  392\n2   2012-06-29  391\n3   2012-06-28  391\n...\n\nIn [12]: pd.DataFrame(d.items(), columns=['Date', 'DateValue'])\nOut[12]:\n          Date  DateValue\n0   2012-07-02        392\n1   2012-07-06        392\n2   2012-06-29        391\n</code></pre>\n\n<p>But I think it makes more sense to pass the Series constructor:</p>\n\n<pre><code>In [21]: s = pd.Series(d, name='DateValue')\nOut[21]:\n2012-06-08    388\n2012-06-09    388\n2012-06-10    388\n\nIn [22]: s.index.name = 'Date'\n\nIn [23]: s.reset_index()\nOut[23]:\n          Date  DateValue\n0   2012-06-08        388\n1   2012-06-09        388\n2   2012-06-10        388\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I need to write a function that takes\na <strong>list</strong> of numbers and <strong>multiplies</strong> them together. Example:\n<code>[1,2,3,4,5,6]</code> will give me <code>1*2*3*4*5*6</code>. I could really use your help.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you're using Python 2, use <code>reduce</code>:</p>\n\n<pre><code>&gt;&gt;&gt; reduce(lambda x, y: x*y, [1,2,3,4,5,6])\n720\n</code></pre>\n\n<p><em>Note: <code>reduce</code> was <a href=\"https://docs.python.org/3.0/whatsnew/3.0.html#builtins\" rel=\"nofollow noreferrer\">removed from Python 3</a> as a built-in</em></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Given a URL like the following, how can I parse the value of the query parameters? For example, in this case I want the value of <code>def</code>.</p>\n\n<pre><code>/abc?def='ghi'\n</code></pre>\n\n<p>I am using Django in my environment; is there a method on the <code>request</code> object that could help me?</p>\n\n<p>I tried using <code>self.request.get('def')</code> but it is not returning the value <code>ghi</code> as I had hoped.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Try with something like this:</p>\n\n<pre><code>import urlparse\nurl = 'http://foo.appspot.com/abc?def=ghi'\nparsed = urlparse.urlparse(url)\nprint urlparse.parse_qs(parsed.query)['def']\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is there any Django function which will let me get an object form the database, or None if nothing matches?</p>\n\n<p>Right now I'm using something like:</p>\n\n<pre><code>foo = Foo.objects.filter(bar=baz)\nfoo = len(foo) &gt; 0 and foo.get() or None\n</code></pre>\n\n<p>But that's not very clear, and it's messy to have everywhere.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In Django <strong>1.6</strong> you can use the <code>first()</code> Queryset method. It returns the first object matched by the queryset, or None if there is no matching object.</p>\n\n<p>Usage:</p>\n\n<pre><code>p = Article.objects.order_by('title', 'pub_date').first()\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Given a list of integers, I want to find which number is the closest to a number I give in input:</p>\n\n<pre><code>&gt;&gt;&gt; myList = [4, 1, 88, 44, 3]\n&gt;&gt;&gt; myNumber = 5\n&gt;&gt;&gt; takeClosest(myList, myNumber)\n...\n4\n</code></pre>\n\n<p>Is there any quick way to do this?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If we are not sure that the list is sorted, we could use the <a href=\"http://docs.python.org/library/functions.html?highlight=min#min\" rel=\"noreferrer\">built-in <code>min()</code> function</a>, to find the element which has the minimum distance from the specified number.</p>\n\n<pre><code>&gt;&gt;&gt; min(myList, key=lambda x:abs(x-myNumber))\n4\n</code></pre>\n\n<p>Note that it also works with dicts with int keys, like <code>{1: \"a\", 2: \"b\"}</code>. This method takes O(n) time.</p>\n\n<hr>\n\n<p>If the list is already sorted, or you could pay the price of sorting the array once only, use the bisection method illustrated in <a href=\"https://stackoverflow.com/a/12141511/224671\">@Lauritz's answer</a> which only takes O(log n) time (note however checking if a list is already sorted is O(n) and sorting is O(n log n).)</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have found that both of the following work:</p>\n\n<pre><code>class Foo():\n    def a(self):\n        print \"hello\"\n\nclass Foo(object):\n    def a(self):\n        print \"hello\"\n</code></pre>\n\n<p>Should all Python classes extend object? Are there any potential problems with not extending object?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In Python 2, not inheriting from <code>object</code> will create an old-style class, which, amongst other effects, causes <code>type</code> to give different results:</p>\n\n<pre><code>&gt;&gt;&gt; class Foo: pass\n... \n&gt;&gt;&gt; type(Foo())\n&lt;type 'instance'&gt;\n</code></pre>\n\n<p>vs.</p>\n\n<pre><code>&gt;&gt;&gt; class Bar(object): pass\n... \n&gt;&gt;&gt; type(Bar())\n&lt;class '__main__.Bar'&gt;\n</code></pre>\n\n<p>Also the rules for multiple inheritance are <a href=\"http://www.python.org/download/releases/2.2.3/descrintro/\">different</a> in ways that I won't even try to summarize here. All good documentation that I've seen about MI describes new-style classes.</p>\n\n<p>Finally, old-style classes have disappeared in Python 3, and inheritance from <code>object</code> has become implicit. So, always prefer new style classes unless you need backward compat with old software.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>While using the <a href=\"http://requests.readthedocs.org/en/latest/\" rel=\"noreferrer\"><code>requests</code> module</a>, is there any way to print the raw HTTP request? </p>\n\n<p>I don't want just the headers, I want the request line, headers, and content printout. Is it possible to see what ultimately is constructed from HTTP request?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"http://docs.python-requests.org/en/v1.2.3/user/advanced/#prepared-requests\" rel=\"noreferrer\">Since v1.2.3</a> Requests added the PreparedRequest object. As per the documentation \"it contains the exact bytes that will be sent to the server\".</p>\n\n<p>One can use this to pretty print a request, like so:</p>\n\n<pre><code>import requests\n\nreq = requests.Request('POST','http://stackoverflow.com',headers={'X-Custom':'Test'},data='a=1&amp;b=2')\nprepared = req.prepare()\n\ndef pretty_print_POST(req):\n    \"\"\"\n    At this point it is completely built and ready\n    to be fired; it is \"prepared\".\n\n    However pay attention at the formatting used in \n    this function because it is programmed to be pretty \n    printed and may differ from the actual request.\n    \"\"\"\n    print('{}\\n{}\\n{}\\n\\n{}'.format(\n        '-----------START-----------',\n        req.method + ' ' + req.url,\n        '\\n'.join('{}: {}'.format(k, v) for k, v in req.headers.items()),\n        req.body,\n    ))\n\npretty_print_POST(prepared)\n</code></pre>\n\n<p>which produces:</p>\n\n<pre><code>-----------START-----------\nPOST http://stackoverflow.com/\nContent-Length: 7\nX-Custom: Test\n\na=1&amp;b=2\n</code></pre>\n\n<p>Then you can send the actual request with this:</p>\n\n<pre><code>s = requests.Session()\ns.send(prepared)\n</code></pre>\n\n<p>These links are to the latest documentation available, so they might change in content:\n<a href=\"http://docs.python-requests.org/en/latest/user/advanced/#prepared-requests\" rel=\"noreferrer\">Advanced - Prepared requests</a> and <a href=\"http://docs.python-requests.org/en/latest/api/#lower-level-classes\" rel=\"noreferrer\">API - Lower level classes</a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/2849286/python-matplotlib-subplot-how-to-set-the-axis-range\" dir=\"ltr\">Python, Matplotlib, subplot: How to set the axis range?</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    3 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>I would like to limit the X and Y axis in matplotlib but for a speific subplot. As I can see\nsubplot figure itself doesn't have any axis property. I want for example to change only the limits for the second plot!</p>\n\n<pre><code>import matplotlib.pyplot as plt\nfig=plt.subplot(131)\nplt.scatter([1,2],[3,4])\nfig=plt.subplot(132)\nplt.scatter([10,20],[30,40])\nfig=plt.subplot(133)\nplt.scatter([15,23],[35,43])\nplt.show()\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You should learn a bit of the OO interface to matplotlib, not just the state machine interface.  Almost all of the <code>plt.*</code> function are thin wrappers that basically do <code>gca().*</code>.</p>\n\n<p><code>plt.subplot</code> (<a href=\"http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.subplot\">doc</a>) return an <code>axes</code> (<a href=\"http://matplotlib.org/api/axes_api.html\">doc</a>) object.  Once you have a referance to the axes object you can plot directly to it, change it's limits, etc.</p>\n\n<pre><code>import matplotlib.pyplot as plt\n\nax1 = plt.subplot(131)\nax1.scatter([1, 2], [3, 4])\nax1.set_xlim([0, 5])\nax1.set_ylim([0, 5])\n\n\nax2 = plt.subplot(132)\nax2.scatter([1, 2],[3, 4])\nax2.set_xlim([0, 5])\nax2.set_ylim([0, 5])\n</code></pre>\n\n<p>and so on for as many axes as you want.</p>\n\n<p>or better, wrap it all up in a loop:</p>\n\n<pre><code>import matplotlib.pyplot as plt\n\nDATA_x = ([1, 2],\n          [2, 3],\n          [3, 4])\n\nDATA_y = DATA_x[::-1]\n\nXLIMS = [[0, 10]] * 3\nYLIMS = [[0, 10]] * 3\n\nfor j, (x, y, xlim, ylim) in enumerate(zip(DATA_x, DATA_y, XLIMS, YLIMS)):\n    ax = plt.subplot(1, 3, j + 1)\n    ax.scatter(x, y)\n    ax.set_xlim(xlim)\n    ax.set_ylim(ylim)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>When researching Google App Engine (GAE), it's clear that using Django is wildly popular for developing in Python on GAE.  I've been scouring the web to find information on the costs and benefits of using Django, to find out <em>why</em> it's so popular.  While I've been able to find a wide variety of sources on <em>how</em> to run Django on GAE and the various methods of doing so, I haven't found any comparative analysis on <em>why</em> Django is preferable to using the webapp framework provided by Google.</p>\n\n<p>To be clear, it's immediately apparent why using Django on GAE is useful for developers with an existing skillset in Django (a majority of Python web developers, no doubt) or existing code in Django (where using GAE is more of a porting exercise).  My team, however, is evaluating GAE for use on an all-new project and our existing experience is with TurboGears, not Django.</p>\n\n<p>It's been quite difficult to determine why Django is beneficial to a development team when the BigTable libraries have replaced Django's ORM, sessions and authentication are necessarily changed, and Django's templating (if desirable) is available without using the entire Django stack.</p>\n\n<p>Finally, it's clear that using Django does have the advantage of providing an \"exit strategy\" if we later wanted to move away from GAE and need a platform to target for the exodus.</p>\n\n<p>I'd be extremely appreciative for help in pointing out <em>why</em> using Django is better than using webapp on GAE.  I'm also completely inexperienced with Django, so elaboration on smaller features and/or conveniences that work on GAE are also valuable to me.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>We use django on our appengine instances mostly when we have to serve actual websites to the user. It has a great template engine, url routing and all the request/response/error handling built in. So even while we can't use the magic orm/admin stuff it has a lot going for it.</p>\n\n<p>For api services we built something very simple on top of <a href=\"http://webob.org/\" rel=\"nofollow noreferrer\"><code>webob</code></a>. It's far more lightweight because it doesn't need everything that django offers, and therefore a little quicker in some situations.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a relatively straightforward question, today.  I have a pandas <code>Series</code> object containing boolean values. How can I get a series containing the logical <code>NOT</code> of each value?</p>\n\n<p>For example, consider a series containing:</p>\n\n<pre><code>True\nTrue\nTrue\nFalse\n</code></pre>\n\n<p>The series I'd like to get would contain:</p>\n\n<pre><code>False\nFalse\nFalse\nTrue\n</code></pre>\n\n<p>This seems like it should be reasonably simple, but apparently I've misplaced my mojo today =(</p>\n\n<p>Thanks!</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>To invert a boolean Series, <a href=\"http://pandas.pydata.org/pandas-docs/stable/indexing.html#boolean-indexing\">use <code>~s</code></a>:</p>\n\n<pre><code>In [7]: s = pd.Series([True, True, False, True])\n\nIn [8]: ~s\nOut[8]: \n0    False\n1    False\n2     True\n3    False\ndtype: bool\n</code></pre>\n\n<p>Using Python2.7, NumPy 1.8.0, Pandas 0.13.1:</p>\n\n<pre><code>In [119]: s = pd.Series([True, True, False, True]*10000)\n\nIn [10]:  %timeit np.invert(s)\n10000 loops, best of 3: 91.8 \u00b5s per loop\n\nIn [11]: %timeit ~s\n10000 loops, best of 3: 73.5 \u00b5s per loop\n\nIn [12]: %timeit (-s)\n10000 loops, best of 3: 73.5 \u00b5s per loop\n</code></pre>\n\n<p>As of Pandas 0.13.0, Series are no longer subclasses of <code>numpy.ndarray</code>; they are now subclasses of <code>pd.NDFrame</code>. This might have something to do with why <code>np.invert(s)</code> is no longer as fast as <code>~s</code> or <code>-s</code>.</p>\n\n<p>Caveat: <code>timeit</code> results may vary depending on many factors including hardware, compiler, OS, Python, NumPy and Pandas versions. </p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>It's really irritating that every time I type <code>exit()</code>, I get prompted with a confirmation to exit; of course I want to exit! Otherwise, I would not have written <code>exit()</code>!!!</p>\n\n<p>Is there a way to override IPython's default behaviour to make it exit without a prompt?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you also want <code>Ctrl-D</code> to exit without confirmation, in IPython 0.11, add <code>c.TerminalInteractiveShell.confirm_exit = False</code> to your config file *.</p>\n\n<p>If you don't have a config file yet, run <code>ipython profile create</code> to create one.</p>\n\n<p>Note <a href=\"https://code.djangoproject.com/ticket/17078\" rel=\"nofollow noreferrer\">this ticket</a> if you're working within the Django shell.</p>\n\n<hr>\n\n<p>* The config file is located at: <code>$HOME/.ipython/profile_default/ipython_config.py</code></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What's the usage of the tilde operator in Python?</p>\n\n<p>One thing I can think about is do something in both sides of a string or list, such as check if a string is palindromic or not:</p>\n\n<pre><code>def is_palindromic(s):\n    return all(s[i] == s[~i] for i in range(len(s) / 2)) \n</code></pre>\n\n<p>Any other good usage?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It is a unary operator (taking a single argument) that is borrowed from C, where all data types are just different ways of interpreting bytes.  It is the \"invert\" or \"complement\" operation, in which all the bits of the input data are reversed.</p>\n\n<p>In Python, for integers, the bits of the <a href=\"http://en.wikipedia.org/wiki/Two%27s_complement\" rel=\"noreferrer\">twos-complement representation</a> of the integer are reversed (as in <code>b &lt;- b XOR 1</code> for each individual bit), and the result interpreted again as a twos-complement integer.  So for integers, <code>~x</code> is equivalent to <code>(-x) - 1</code>.</p>\n\n<p>The reified form of the <code>~</code> operator is provided as <code>operator.invert</code>.  To support this operator in your own class, give it an <code>__invert__(self)</code> method.</p>\n\n<pre><code>&gt;&gt;&gt; import operator\n&gt;&gt;&gt; class Foo:\n...   def __invert__(self):\n...     print 'invert'\n...\n&gt;&gt;&gt; x = Foo()\n&gt;&gt;&gt; operator.invert(x)\ninvert\n&gt;&gt;&gt; ~x\ninvert\n</code></pre>\n\n<p>Any class in which it is meaningful to have a \"complement\" or \"inverse\" of an instance that is also an instance of the same class is a possible candidate for the invert operator.  However, operator overloading can lead to confusion if misused, so be sure that it really makes sense to do so before supplying an <code>__invert__</code> method to your class.  (Note that byte-strings [ex: <code>'\\xff'</code>] do not support this operator, even though it is meaningful to invert all the bits of a byte-string.)</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/3394835/args-and-kwargs\" dir=\"ltr\">*args and **kwargs? [duplicate]</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    11 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>Is there syntax that allows you to expand a list into the arguments of a function call?</p>\n\n<p>Example:</p>\n\n<pre><code># Trivial example function, not meant to do anything useful.\ndef foo(x,y,z):\n   return \"%d, %d, %d\" %(x,y,z)\n\n# List of values that I want to pass into foo.\nvalues = [1,2,3]\n\n# I want to do something like this, and get the result \"1, 2, 3\":\nfoo( values.howDoYouExpandMe() )\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It exists, but it's hard to search for. I think most people call it the \"<a href=\"https://stackoverflow.com/questions/2322355/proper-name-for-python-operator\">splat</a>\" operator.</p>\n\n<p>It's in the documentation as \"<a href=\"http://docs.python.org/tutorial/controlflow.html#unpacking-argument-lists\" rel=\"noreferrer\">Unpacking argument lists</a>\".</p>\n\n<p>You'd use it like this: <code>foo(*values)</code>. There's also one for dictionaries:</p>\n\n<pre><code>d = {'a': 1, 'b': 2}\ndef foo(a, b):\n    pass\nfoo(**d)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is it possible to refresh the state of a django object from database? I mean behavior roughly equivalent to:</p>\n\n<pre><code>new_self = self.__class__.objects.get(pk=self.pk)\nfor each field of the record:\n    setattr(self, field, getattr(new_self, field))\n</code></pre>\n\n<p><strong>UPD:</strong> Found a reopen/wontfix war in the tracker: <a href=\"http://code.djangoproject.com/ticket/901\" rel=\"noreferrer\">http://code.djangoproject.com/ticket/901</a>.\nStill don't understand why the maintainers don't like this.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>As of Django 1.8 refreshing objects is built in. <a href=\"https://docs.djangoproject.com/en/1.8/ref/models/instances/#refreshing-objects-from-database\">Link to docs</a>.</p>\n\n<pre class=\"lang-python prettyprint-override\"><code>def test_update_result(self):\n    obj = MyModel.objects.create(val=1)\n    MyModel.objects.filter(pk=obj.pk).update(val=F('val') + 1)\n    # At this point obj.val is still 1, but the value in the database\n    # was updated to 2. The object's updated value needs to be reloaded\n    # from the database.\n    obj.refresh_from_db()\n    self.assertEqual(obj.val, 2)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How to split this string where $$TEXT$$ is the delimiter.</p>\n\n<pre><code>  1.MATCHES$$TEXT$$STRING  \n  2.MATCHES $$TEXT$$ STRING   \n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><code>string.split('$$TEXT$$')</code> ?</p>\n\n<pre><code>&gt;&gt;&gt; a=\"1.MATCHES$$TEXT$$STRING\"\n&gt;&gt;&gt; a.split(\"$$TEXT$$\")\n['1.MATCHES', 'STRING']\n\n&gt;&gt;&gt; a=\"2.MATCHES $$TEXT$$ STRING\"\n&gt;&gt;&gt; a.split(\"$$TEXT$$\")\n['2.MATCHES ', ' STRING']\n</code></pre>\n\n<p>and:</p>\n\n<pre><code>&gt;&gt;&gt; [x.strip() for x in \"2.MATCHES $$TEXT$$ STRING\".split(\"$$TEXT$$\")]\n['2.MATCHES', 'STRING']\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>While reading up on numpy, I encountered the function <a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.histogram.html\"><code>numpy.histogram()</code></a>.</p>\n\n<p>What is it for and <strong>how does it work?</strong> In the docs they mention <strong>bins</strong>: What are they?</p>\n\n<p>Some googling led me to the <a href=\"http://en.wikipedia.org/wiki/Histogram\">definition of Histograms in general</a>. I get that. But unfortunately I can't link this knowledge to the examples given in the docs.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>A bin is range that represents the width of a single bar of the histogram along the X-axis. You could also call this the interval. (Wikipedia defines them more formally as \"disjoint categories\".)</p>\n\n<p>The Numpy <code>histogram</code> function doesn't draw the histogram, but it computes the occurrences of input data that fall within each bin, which in turns determines the area (not necessarily the height if the bins aren't of equal width) of each bar.</p>\n\n<p>In this example:</p>\n\n<pre><code> np.histogram([1, 2, 1], bins=[0, 1, 2, 3])\n</code></pre>\n\n<p>There are 3 bins, for values ranging from 0 to 1 (excl 1.), 1 to 2 (excl. 2) and 2 to 3 (incl. 3), respectively. The way Numpy defines these bins if by giving a list of delimiters (<code>[0, 1, 2, 3]</code>) in this example, although it also returns the bins in the results, since it can choose them automatically from the input, if none are specified. If <code>bins=5</code>, for example, it will use 5 bins of equal width spread between the minimum input value and the maximum input value.</p>\n\n<p>The input values are 1, 2 and 1. Therefore, bin \"1 to 2\" contains two occurrences (the two <code>1</code> values), and bin \"2 to 3\" contains one occurrence (the <code>2</code>). These results are in the first item in the returned tuple: <code>array([0, 2, 1])</code>.</p>\n\n<p>Since the bins here are of equal width, you can use the number of occurrences for the height of each bar. When drawn, you would have:</p>\n\n<ul>\n<li>a bar of height 0 for range/bin [0,1] on the X-axis,</li>\n<li>a bar of height 2 for range/bin [1,2],</li>\n<li>a bar of height 1 for range/bin [2,3].</li>\n</ul>\n\n<hr>\n\n<p>You can plot this directly with Matplotlib (its <code>hist</code> function also returns the bins and the values):</p>\n\n<pre><code>&gt;&gt;&gt; import matplotlib.pyplot as plt\n&gt;&gt;&gt; plt.hist([1, 2, 1], bins=[0, 1, 2, 3])\n(array([0, 2, 1]), array([0, 1, 2, 3]), &lt;a list of 3 Patch objects&gt;)\n&gt;&gt;&gt; plt.show()\n</code></pre>\n\n<p><img src=\"https://i.stack.imgur.com/AhBUY.png\" alt=\"enter image description here\"></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>On bash or Window's Command Prompt, we can press the up arrow on keyboard to get the last command, and edit it, and press ENTER again to see the result.</p>\n\n<p>But in Python's IDLE 2.6.5 or 3.1.2, it seems if our statement prints out 25 lines, we need to press the up arrow 25 times to that last command, and press ENTER for it to be copied?</p>\n\n<p>Or use the mouse to pinpoint that line and click there, and press ENTER to copy?  Is there a faster way?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I think you are looking for the <code>history-previous</code> action, which is bound to <kbd>alt</kbd>+<kbd>p</kbd> by default.</p>\n\n<p>You can remap it in Options-&gt;Configure IDLE-&gt;Keys</p>\n\n<p>Incidentally, why don't you try a better (less ugly, for starters) shell like <a href=\"http://bpython-interpreter.org/\" rel=\"noreferrer\" title=\"bpython\">bpython</a> or <a href=\"http://ipython.org/\" rel=\"noreferrer\" title=\"ipython\">ipython</a>?</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am attempting to filter users by a custom field in each users profile called profile. This field is called level and is an integer between 0-3.</p>\n\n<p>If I filter using equals, I get a list of users with the chosen level as expected:</p>\n\n<pre><code>user_list = User.objects.filter(userprofile__level = 0)\n</code></pre>\n\n<p>When I try to filter using less than:</p>\n\n<pre><code>user_list = User.objects.filter(userprofile__level &lt; 3)\n</code></pre>\n\n<p>I get the error:</p>\n\n<blockquote>\n  <p>global name 'userprofile__level' is not defined</p>\n</blockquote>\n\n<p>Is there away to filter by &lt; or &gt;, or am I barking up the wrong tree.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Less than or equal:</p>\n\n<pre><code>User.objects.filter(userprofile__level__lte=0)\n</code></pre>\n\n<p>Greater than or equal:</p>\n\n<pre><code>User.objects.filter(userprofile__level__gte=0)\n</code></pre>\n\n<p>Likewise, <code>lt</code> for less than and <code>gt</code> for greater than. You can find them all <a href=\"https://docs.djangoproject.com/en/dev/ref/models/querysets/\" rel=\"noreferrer\">in the documentation</a>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>this code is get the templates/blog1/page.html  in b.py:</p>\n\n<pre><code>path = os.path.join(os.path.dirname(__file__), os.path.join('templates', 'blog1/page.html'))\n</code></pre>\n\n<p>but i want to get the parent dir location:</p>\n\n<pre><code>aParent\n   |--a\n   |  |---b.py\n   |      |---templates\n   |              |--------blog1\n   |                         |-------page.html\n   |--templates\n          |--------blog1\n                     |-------page.html\n</code></pre>\n\n<p>and  how to get the aParent location</p>\n\n<p>thanks</p>\n\n<p><strong>updated:</strong></p>\n\n<p>this is right:</p>\n\n<pre><code>dirname=os.path.dirname\npath = os.path.join(dirname(dirname(__file__)), os.path.join('templates', 'blog1/page.html'))\n</code></pre>\n\n<p>or </p>\n\n<pre><code>path = os.path.abspath(os.path.join(os.path.dirname(__file__),\"..\"))\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can apply dirname repeatedly to climb higher: <code>dirname(dirname(file))</code>. This can only go as far as the root package, however. If this is a problem, use <code>os.path.abspath</code>: <code>dirname(dirname(abspath(file)))</code>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am new to Python. I need to write some data from my program to a spreadsheet. I've searched online and there seems to be many packages available (xlwt, XlsXcessive, openpyxl). Others suggest to write to a csv file (never used csv &amp; don't really understand what it is).</p>\n\n<p>The program is very simple. I have two lists (float) and three variables (strings). I don't know the lengths of the two lists and they probably won't be the same length.</p>\n\n<p>I want the layout to be as in the picture below:</p>\n\n<p><img src=\"https://i.stack.imgur.com/Ih3fa.png\" alt=\"enter image description here\"></p>\n\n<p>The pink column will have the values of the first list and the green column will have the values of the second list.</p>\n\n<p>So what's the best way to do this? Thanks.</p>\n\n<p>P.S. I am running Windows 7 but I won't necessarily have Office installed on the computers running this program.</p>\n\n<p><strong>EDIT</strong></p>\n\n<pre><code>import xlwt\n\nx=1\ny=2\nz=3\n\nlist1=[2.34,4.346,4.234]\n\nbook = xlwt.Workbook(encoding=\"utf-8\")\n\nsheet1 = book.add_sheet(\"Sheet 1\")\n\nsheet1.write(0, 0, \"Display\")\nsheet1.write(1, 0, \"Dominance\")\nsheet1.write(2, 0, \"Test\")\n\nsheet1.write(0, 1, x)\nsheet1.write(1, 1, y)\nsheet1.write(2, 1, z)\n\nsheet1.write(4, 0, \"Stimulus Time\")\nsheet1.write(4, 1, \"Reaction Time\")\n\ni=4\n\nfor n in list1:\n    i = i+1\n    sheet1.write(i, 0, n)\n\n\n\nbook.save(\"trial.xls\")\n</code></pre>\n\n<p>I wrote this using all your suggestions. It gets the job done but it can be slightly improved. How do I format the cells created in the for loop (list1 values) as scientific or number? I do not want to truncate the values. The actual values used in the program would have around 10 digits after the decimal.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>import xlwt\n\ndef output(filename, sheet, list1, list2, x, y, z):\n    book = xlwt.Workbook()\n    sh = book.add_sheet(sheet)\n\n    variables = [x, y, z]\n    x_desc = 'Display'\n    y_desc = 'Dominance'\n    z_desc = 'Test'\n    desc = [x_desc, y_desc, z_desc]\n\n    col1_name = 'Stimulus Time'\n    col2_name = 'Reaction Time'\n\n    #You may need to group the variables together\n    #for n, (v_desc, v) in enumerate(zip(desc, variables)):\n    for n, v_desc, v in enumerate(zip(desc, variables)):\n        sh.write(n, 0, v_desc)\n        sh.write(n, 1, v)\n\n    n+=1\n\n    sh.write(n, 0, col1_name)\n    sh.write(n, 1, col2_name)\n\n    for m, e1 in enumerate(list1, n+1):\n        sh.write(m, 0, e1)\n\n    for m, e2 in enumerate(list2, n+1):\n        sh.write(m, 1, e2)\n\n    book.save(filename)\n</code></pre>\n\n<p>for more explanation:\n    <a href=\"https://github.com/python-excel\" rel=\"noreferrer\">https://github.com/python-excel</a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Consider the following:</p>\n\n<pre><code>@property\ndef name(self):\n\n    if not hasattr(self, '_name'):\n\n        # expensive calculation\n        self._name = 1 + 1\n\n    return self._name\n</code></pre>\n\n<p>I'm new, but I think the caching could be factored out into a decorator. Only I didn't find one like it ;)</p>\n\n<p>PS the real calculation doesn't depend on mutable values</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Starting from Python 3.2 there is a built-in decorator:</p>\n\n<p><a href=\"http://docs.python.org/dev/library/functools.html#functools.lru_cache\" rel=\"noreferrer\"><code>@functools.lru_cache(maxsize=100, typed=False)</code></a></p>\n\n<blockquote>\nDecorator to wrap a function with a memoizing callable that saves up to the maxsize most recent calls. It can save time when an expensive or I/O bound function is periodically called with the same arguments.\n</blockquote>\n\n<p>Example of an LRU cache for computing <a href=\"http://en.wikipedia.org/wiki/Fibonacci_number\" rel=\"noreferrer\">Fibonacci numbers</a>:</p>\n\n<pre><code>@lru_cache(maxsize=None)\ndef fib(n):\n    if n &lt; 2:\n        return n\n    return fib(n-1) + fib(n-2)\n\n&gt;&gt;&gt; print([fib(n) for n in range(16)])\n[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n\n&gt;&gt;&gt; print(fib.cache_info())\nCacheInfo(hits=28, misses=16, maxsize=None, currsize=16)\n</code></pre>\n\n<hr>\n\n<p>If you are stuck with Python 2.x, here's a list of other compatible memoization libraries:</p>\n\n<ul>\n<li><code>functools32</code> | <a href=\"https://pypi.python.org/pypi/functools32\" rel=\"noreferrer\">PyPI</a> | <a href=\"https://github.com/MiCHiLU/python-functools32\" rel=\"noreferrer\">Source code</a></li>\n<li><code>repoze.lru</code> | <a href=\"https://pypi.python.org/pypi/repoze.lru/\" rel=\"noreferrer\">PyPI</a> | <a href=\"https://github.com/repoze/repoze.lru\" rel=\"noreferrer\">Source code</a></li>\n<li><code>pylru</code> | <a href=\"https://pypi.python.org/pypi/pylru/\" rel=\"noreferrer\">PyPI</a> | <a href=\"https://github.com/jlhutch/pylru\" rel=\"noreferrer\">Source code</a></li>\n<li><code>backports.functools_lru_cache</code> | <a href=\"https://pypi.python.org/pypi/backports.functools_lru_cache\" rel=\"noreferrer\">PyPI</a> | <a href=\"https://github.com/jaraco/backports.functools_lru_cache\" rel=\"noreferrer\">Source code</a></li>\n</ul>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In Python, is there a way to check if a string is valid JSON before trying to parse it?  </p>\n\n<p>For example working with things like the Facebook Graph API, sometimes it returns JSON, sometimes it could return an image file.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can try to do <code>json.loads()</code>, which will throw a <code>ValueError</code> if the string you pass can't be decoded as JSON.</p>\n\n<p>In general, the \"<a href=\"https://docs.python.org/2/glossary.html#term-pythonic\" rel=\"nofollow noreferrer\">Pythonic</a>\" philosophy for this kind of situation is called <a href=\"https://docs.python.org/2/glossary.html#term-eafp\" rel=\"nofollow noreferrer\">EAFP</a>, for <em>Easier to Ask for Forgiveness than Permission</em>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In Java, for example, the @Override annotation not only provides compile-time checking of an override but makes for excellent self-documenting code. I'm just looking for documentation (although if it's an indicator to some checker like pylint, that's a bonus). I can add a comment or docstring somewhere, but what is the idiomatic way to indicate an override in Python?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>UPDATE (23.05.2015): Based on this and fwc:s answer I created a pip installable package <a href=\"https://github.com/mkorpela/overrides\">https://github.com/mkorpela/overrides</a></strong></p>\n\n<p>From time to time I end up here looking at this question.\nMainly this happens after (again) seeing the same bug in our code base: Someone has forgotten some \"interface\" implementing class while renaming a method in the \"interface\"..</p>\n\n<p>Well Python ain't Java but Python has power -- and explicit is better than implicit -- and there are real concrete cases in the real world where this thing would have helped me.</p>\n\n<p>So here is a sketch of overrides decorator. This will check that the class given as a parameter has the same method (or something) name as the method being decorated.</p>\n\n<p>If you can think of a better solution please post it here!</p>\n\n<pre><code>def overrides(interface_class):\n    def overrider(method):\n        assert(method.__name__ in dir(interface_class))\n        return method\n    return overrider\n</code></pre>\n\n<p>It works as follows:</p>\n\n<pre><code>class MySuperInterface(object):\n    def my_method(self):\n        print 'hello world!'\n\n\nclass ConcreteImplementer(MySuperInterface):\n    @overrides(MySuperInterface)\n    def my_method(self):\n        print 'hello kitty!'\n</code></pre>\n\n<p>and if you do a faulty version it will raise an assertion error during class loading:</p>\n\n<pre><code>class ConcreteFaultyImplementer(MySuperInterface):\n    @overrides(MySuperInterface)\n    def your_method(self):\n        print 'bye bye!'\n\n&gt;&gt; AssertionError!!!!!!!\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In Python, is there a way to ping a server through ICMP and return TRUE if the server responds, or FALSE if there is no response?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you don't need to support Windows, here's a really concise way to do it:</p>\n\n<pre><code>import os\nhostname = \"google.com\" #example\nresponse = os.system(\"ping -c 1 \" + hostname)\n\n#and then check the response...\nif response == 0:\n  print hostname, 'is up!'\nelse:\n  print hostname, 'is down!'\n</code></pre>\n\n<p>This works because ping returns a non-zero value if the connection fails. (The return value actually differs depending on the network error.) You could also change the ping timeout (in seconds) using the '-t' option.  Note, this will output text to the console.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have something like this:</p>\n\n<pre><code>extensionsToCheck = ['.pdf', '.doc', '.xls']\n\nfor extension in extensionsToCheck:\n    if extension in url_string:\n        print(url_string)\n</code></pre>\n\n<p>I am wondering what would be the more elegant way to do this in python (without using the for loop)? I was thinking of something like this (like from c/c++), but it didn't work:</p>\n\n<pre><code>if ('.pdf' or '.doc' or '.xls') in url_string:\n    print(url_string)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use a generator together with <code>any</code>, which short-circuits on the first True:</p>\n\n<pre><code>if any(ext in url_string for ext in extensionsToCheck):\n    print(url_string)\n</code></pre>\n\n<p><strong>EDIT:</strong> I see this answer has been accepted by OP. Though my solution may be \"good enough\" solution to his particular problem, and is a good general way to check if any strings in a list are found in another string, keep in mind that this is all that this solution does. It does not care <em>where</em> the string is found. If this is important, as is often the case with urls, you should look to the answer of @Wladimir Palant, or you risk getting false positives.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a list 'a'</p>\n\n<pre><code>a= [(1,2),(1,4),(3,5),(5,7)]\n</code></pre>\n\n<p>I need to find all the tuples for a particular number. say for 1 it will be</p>\n\n<pre><code>result = [(1,2),(1,4)]\n</code></pre>\n\n<p>How do I do that?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you just want the first number to match you can do it like this:</p>\n\n<pre><code>[item for item in a if item[0] == 1]\n</code></pre>\n\n<p>If you are just searching for tuples with 1 in them:</p>\n\n<pre><code>[item for item in a if 1 in item]\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>So I have a little problem. I have a data set in scipy that is already in the histogram format, so I have the center of the bins and the number of events per bin. How can I now plot is as a histogram. I tried just doing </p>\n\n<pre><code>bins, n=hist()\n</code></pre>\n\n<p>but it didn't like that. Any recommendations?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>import matplotlib.pyplot as plt\nimport numpy as np\n\nmu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\nhist, bins = np.histogram(x, bins=50)\nwidth = 0.7 * (bins[1] - bins[0])\ncenter = (bins[:-1] + bins[1:]) / 2\nplt.bar(center, hist, align='center', width=width)\nplt.show()\n</code></pre>\n\n<p><img src=\"https://i.stack.imgur.com/EDxOG.png\" alt=\"enter image description here\"></p>\n\n<p>The object-oriented interface is also straightforward:</p>\n\n<pre><code>fig, ax = plt.subplots()\nax.bar(center, hist, align='center', width=width)\nfig.savefig(\"1.png\")\n</code></pre>\n\n<hr>\n\n<p>If you are using custom (non-constant) bins, you can pass compute the widths using <code>np.diff</code>, pass the widths to <code>ax.bar</code> and use <code>ax.set_xticks</code> to label the bin edges:</p>\n\n<pre><code>import matplotlib.pyplot as plt\nimport numpy as np\n\nmu, sigma = 100, 15\nx = mu + sigma * np.random.randn(10000)\nbins = [0, 40, 60, 75, 90, 110, 125, 140, 160, 200]\nhist, bins = np.histogram(x, bins=bins)\nwidth = np.diff(bins)\ncenter = (bins[:-1] + bins[1:]) / 2\n\nfig, ax = plt.subplots(figsize=(8,3))\nax.bar(center, hist, align='center', width=width)\nax.set_xticks(bins)\nfig.savefig(\"/tmp/out.png\")\n\nplt.show()\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/tdVmV.png\"><img src=\"https://i.stack.imgur.com/tdVmV.png\" alt=\"enter image description here\"></a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a shell that runs CentOS.</p>\n\n<p>For a project I'm doing, I need python 2.5+, but centOS is pretty dependent on 2.4.</p>\n\n<p>From what I've read, a number of things will break if you upgrade to 2.5.</p>\n\n<p>I want to install 2.5 separately from 2.4, but I'm not sure how to do it. So far I've downloaded the source tarball, untarred it, and did a <code>./configure --prefix=/opt</code> which is where I want it to end up. Can I now just <code>make, make install</code> ? Or is there more?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You could also use the <a href=\"http://fedoraproject.org/wiki/EPEL\" rel=\"noreferrer\">EPEL-repository</a>, and then do <code>sudo yum install python26</code> to install python 2.6</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>By default <code>logging.Formatter('%(asctime)s')</code> prints with the following format:</p>\n\n<pre><code>2011-06-09 10:54:40,638\n</code></pre>\n\n<p>where 638 is the millisecond. I need to change the comma to a dot:</p>\n\n<pre><code>2011-06-09 10:54:40.638\n</code></pre>\n\n<p>To format the time I can use:</p>\n\n<pre><code>logging.Formatter(fmt='%(asctime)s',datestr=date_format_str)\n</code></pre>\n\n<p>however the <a href=\"http://docs.python.org/library/time.html#time.strftime\" rel=\"nofollow noreferrer\">documentation</a> doesn't specify how to format milliseconds. I've found <a href=\"https://stackoverflow.com/questions/698223/how-can-i-parse-a-time-string-containing-milliseconds-in-it-with-python\">this SO question</a> which talks about microseconds, but a) I would prefer milliseconds and b) the following doesn't work on Python 2.6 (which I'm working on) due to the <code>%f</code>:</p>\n\n<pre><code>logging.Formatter(fmt='%(asctime)s',datefmt='%Y-%m-%d,%H:%M:%S.%f')\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>Please note <a href=\"https://stackoverflow.com/a/7517430/190597\">Craig McDaniel's solution</a> is clearly better.</strong></p>\n\n<hr>\n\n<p>logging.Formatter's <code>formatTime</code> method looks like this:</p>\n\n<pre><code>def formatTime(self, record, datefmt=None):\n    ct = self.converter(record.created)\n    if datefmt:\n        s = time.strftime(datefmt, ct)\n    else:\n        t = time.strftime(\"%Y-%m-%d %H:%M:%S\", ct)\n        s = \"%s,%03d\" % (t, record.msecs)\n    return s\n</code></pre>\n\n<p>Notice the comma in <code>\"%s,%03d\"</code>. This can not be fixed by specifying a <code>datefmt</code> because <code>ct</code> is a <code>time.struct_time</code> and these objects do not record milliseconds. </p>\n\n<p>If we change the definition of <code>ct</code> to make it a <code>datetime</code> object instead of a <code>struct_time</code>, then (at least with modern versions of Python) we can call <code>ct.strftime</code> and then we can use <code>%f</code> to format microseconds:</p>\n\n<pre><code>import logging\nimport datetime as dt\n\nclass MyFormatter(logging.Formatter):\n    converter=dt.datetime.fromtimestamp\n    def formatTime(self, record, datefmt=None):\n        ct = self.converter(record.created)\n        if datefmt:\n            s = ct.strftime(datefmt)\n        else:\n            t = ct.strftime(\"%Y-%m-%d %H:%M:%S\")\n            s = \"%s,%03d\" % (t, record.msecs)\n        return s\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\nconsole = logging.StreamHandler()\nlogger.addHandler(console)\n\nformatter = MyFormatter(fmt='%(asctime)s %(message)s',datefmt='%Y-%m-%d,%H:%M:%S.%f')\nconsole.setFormatter(formatter)\n\nlogger.debug('Jackdaws love my big sphinx of quartz.')\n# 2011-06-09,07:12:36.553554 Jackdaws love my big sphinx of quartz.\n</code></pre>\n\n<hr>\n\n<p>Or, to get milliseconds, change the comma to a decimal point, and omit the <code>datefmt</code> argument:</p>\n\n<pre><code>class MyFormatter(logging.Formatter):\n    converter=dt.datetime.fromtimestamp\n    def formatTime(self, record, datefmt=None):\n        ct = self.converter(record.created)\n        if datefmt:\n            s = ct.strftime(datefmt)\n        else:\n            t = ct.strftime(\"%Y-%m-%d %H:%M:%S\")\n            s = \"%s.%03d\" % (t, record.msecs)\n        return s\n\n...\nformatter = MyFormatter(fmt='%(asctime)s %(message)s')\n...\nlogger.debug('Jackdaws love my big sphinx of quartz.')\n# 2011-06-09 08:14:38.343 Jackdaws love my big sphinx of quartz.\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I've got some Python code that runs through a list of strings and converts them to integers or floating point numbers if possible.  Doing this for integers is pretty easy</p>\n\n<pre><code>if element.isdigit():\n  newelement = int(element)\n</code></pre>\n\n<p>Floating point numbers are more difficult. Right now I'm using <code>partition('.')</code> to split the string and checking to make sure that one or both sides are digits.</p>\n\n<pre><code>partition = element.partition('.')\nif (partition[0].isdigit() and partition[1] == '.' and partition[2].isdigit()) \n    or (partition[0] == '' and partition[1] == '.' and partition[2].isdigit()) \n    or (partition[0].isdigit() and partition[1] == '.' and partition[2] == ''):\n  newelement = float(element)\n</code></pre>\n\n<p>This works, but obviously the if statement for that is a bit of a bear.  The other solution I considered is to just wrap the conversion in a try/catch block and see if it succeeds, as described in <a href=\"https://stackoverflow.com/questions/354038/checking-if-string-is-a-number-python\">this question</a>.</p>\n\n<p>Anyone have any other ideas? Opinions on the relative merits of the partition and try/catch approaches?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I would just use..</p>\n\n<pre><code>try:\n    float(element)\nexcept ValueError:\n    print \"Not a float\"\n</code></pre>\n\n<p>..it's simple, and it works</p>\n\n<p>Another option would be a regular expression:</p>\n\n<pre><code>import re\nif re.match(\"^\\d+?\\.\\d+?$\", element) is None:\n    print \"Not float\"\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>For some reason I can't find a way to get the equivalents of sqlite's interactive shell commands:</p>\n\n<pre><code>.tables\n.dump\n</code></pre>\n\n<p>using the Python sqlite3 API. </p>\n\n<p>Is there anything like that?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can fetch the list of tables and schemata by querying the SQLITE_MASTER table:</p>\n\n<pre><code>sqlite&gt; .tab\njob         snmptarget  t1          t2          t3        \nsqlite&gt; select name from sqlite_master where type = 'table';\njob\nt1\nt2\nsnmptarget\nt3\n\nsqlite&gt; .schema job\nCREATE TABLE job (\n    id INTEGER PRIMARY KEY,\n    data VARCHAR\n);\nsqlite&gt; select sql from sqlite_master where type = 'table' and name = 'job';\nCREATE TABLE job (\n    id INTEGER PRIMARY KEY,\n    data VARCHAR\n)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm trying to write a simple Python script that will copy a index.tpl to index.html in all of the subdirectories (with a few exceptions). </p>\n\n<p>I'm getting bogged down by trying to get the list of subdirectories.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>import os\ndef get_immediate_subdirectories(a_dir):\n    return [name for name in os.listdir(a_dir)\n            if os.path.isdir(os.path.join(a_dir, name))]\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How do you configure fabric to connect to remote hosts using SSH keyfiles (for example, Amazon EC2 instances)?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Also worth mentioning here that you can use the command line args for this:</p>\n\n<pre><code>fab command -i /path/to/key.pem [-H [user@]host[:port]]\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>So it's a new millennium; Apple has waved their hand; it's now legal to include a Python interpreter in an iPhone (App Store) app.</p>\n\n<p>How does one go about doing this? All the existing discussion (unsurprisingly) refers to jailbreaking. (Older question: <a href=\"https://stackoverflow.com/questions/43315/can-i-write-native-iphone-apps-using-python\">Can I write native iPhone apps using Python</a>)</p>\n\n<p>My goal here isn't to write a PyObjC app, but to write a regular ObjC app that runs Python as an embedded library. The Python code will then call back to native Cocoa code. It's the \"control logic is Python code\" pattern.</p>\n\n<p>Is there a guide to getting Python built in XCode, so that my iPhone app can link it? Preferably a stripped-down Python, since I won't need 90% of the standard library.</p>\n\n<p>I can probably figure out the threading and Python-extension API; I've done that on MacOS. But only using command-line compilers, not XCode.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It doesn't really matter how you build Python -- you don't need to build it in Xcode, for example -- but what does matter is the product of that build.</p>\n\n<p>Namely, you are going to need to build something like libPython.a that can be statically linked into your application.  Once you have a .a, that can be added to the Xcode project for your application(s) and, from there, it'll be linked and signed just like the rest of your app.</p>\n\n<p>IIRC (it has been a while since I've built python by hand) the out-of-the-box python will build a libPython.a (and a bunch of other libraries), if you configure it correctly.</p>\n\n<p>Of course, your second issue is going to be cross-compiling python for ARM from your <em>86</em> box.  Python is an autoconf based project and autoconf is a pain in the butt for cross-compilation.</p>\n\n<p>As you correctly state, making it small will be critical.</p>\n\n<p>Not surprising, either, is that you aren't the first person to want to do this, but not for iOS.   Python has been squeezed into devices much less capable than those that run iOS.  I found a thread with a bunch of links when googling about;  it <a href=\"http://bytes.com/topic/python/answers/512131-python-embedded-systems\" rel=\"noreferrer\">might be useful</a>.</p>\n\n<p>Also, you might want to join the <a href=\"https://lists.sourceforge.net/lists/listinfo/pyobjc-dev\" rel=\"noreferrer\">pyobjc-dev</a> list.   While you aren't targeting a PyObjC based application (which, btw, is a good idea -- PyObjC has a long way to go before it'll be iOS friendly), the PyObjC community has been discussing this and Ronald, of anyone, is probably the most knowledgeable person in this particular area.  Note that PyObjC will have to solve the embedded Python on iOS problem prior to porting PyObjC.  Their prerequisite is your requirement, as it were.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What is the most idiomatic way to achieve something like the following, in Haskell:</p>\n\n<pre><code>foldl (+) 0 [1,2,3,4,5]\n--&gt; 15\n</code></pre>\n\n<p>Or its equivalent in Ruby:</p>\n\n<pre><code>[1,2,3,4,5].inject(0) {|m,x| m + x}\n#&gt; 15\n</code></pre>\n\n<p>Obviously, Python provides the <code>reduce</code> function, which is an implementation of fold, exactly as above, however, I was told that the 'pythonic' way of programming was to avoid <code>lambda</code> terms and higher-order functions, preferring list-comprehensions where possible. Therefore, is there a preferred way of folding a list, or list-like structure in Python that isn't the <code>reduce</code> function, or is <code>reduce</code> the idiomatic way of achieving this?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The Pythonic way of summing an array is <code>sum</code>. For other purposes, you can sometimes use some combination of <code>reduce</code> and the <code>operator</code> module, e.g.</p>\n\n<pre><code>def product(xs):\n    return reduce(operator.mul, xs, 1)\n</code></pre>\n\n<p>Be aware that <code>reduce</code> is actually a <code>foldl</code>, in Haskell terms. There is no special syntax to perform folds, there's no builtin <code>foldr</code>, and actually using <code>reduce</code> with non-associative operators is considered bad style.</p>\n\n<p>Using higher-order functions is quite pythonic; it makes good use of Python's principle that everything is an object, including functions and classes. You are right that lambdas are frowned upon by some Pythonistas, but mostly because they tend not to be very readable when they get complex.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am using python <a href=\"http://docs.python.org/library/logging.html\" rel=\"nofollow noreferrer\">logging</a> module and I want to disable the console logging for some time but it doesn't work.</p>\n\n<pre><code>\n  #!/usr/bin/python\n  import logging\n\n  logger = logging.getLogger() # this gets the root logger\n  # ... here I add my own handlers \n  #logger.removeHandler(sys.stdout)\n  #logger.removeHandler(sys.stderr)\n\n  print logging.handlers \n  # this will print [&lt;logging.StreamHandler instance at ...&gt;]\n  # but I may have other handlers there that I want to keep\n\n  logger.debug(\"bla bla\")\n</code></pre>\n\n<p>The above code displays the \"bla bla\" on stdout and I don't know how can I safely disable the console handler. How can I be sure that I temporarily remove the console streamhandler and not another one?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I found a solution for this:</p>\n\n<pre><code>logger = logging.getLogger('my-logger')\nlogger.propagate = False\n# now if you use logger it will not log to console.\n</code></pre>\n\n<p>This will prevent logging from being send to the upper logger that includes the console logging.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Given a <a href=\"http://en.wikipedia.org/wiki/NumPy\" rel=\"noreferrer\">NumPy</a> array <em>A</em>, what is the fastest/most efficient way to apply the <strong>same</strong> function, <em>f</em>, to <strong>every</strong> cell?</p>\n\n<ol>\n<li><p>Suppose that we will assign to <em>A(i,j)</em> the <em>f(A(i,j))</em>.</p></li>\n<li><p>The function, <em>f</em>, doesn't have a binary output, thus the mask(ing) operations won't help.</p></li>\n</ol>\n\n<p>Is the \"obvious\" double loop iteration (through every cell) the optimal solution?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You could just <a href=\"http://docs.scipy.org/doc/numpy/reference/generated/numpy.vectorize.html\">vectorize</a> the function and then apply it directly to a Numpy array each time you need it:</p>\n\n<pre><code>import numpy as np\n\ndef f(x):\n    return x * x + 3 * x - 2 if x &gt; 0 else x * 5 + 8\n\nf = np.vectorize(f)  # or use a different name if you want to keep the original f\n\nresult_array = f(A)  # if A is your Numpy array\n</code></pre>\n\n<p>It's probably better to specify an explicit output type directly when vectorizing:</p>\n\n<pre><code>f = np.vectorize(f, otypes=[np.float])\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I was just re-reading <a href=\"http://docs.python.org/py3k/whatsnew/3.0.html\" rel=\"noreferrer\">What\u2019s New In Python 3.0</a> and it states:</p>\n\n<blockquote>\n  <p>The round() function rounding strategy and return type have changed.\n  Exact halfway cases are now rounded to the nearest even result instead\n  of away from zero. (For example, round(2.5) now returns 2 rather than\n  3.)</p>\n</blockquote>\n\n<p>and\nthe documentation for <a href=\"http://docs.python.org/release/3.1.5/library/functions.html#round\" rel=\"noreferrer\">round</a>:</p>\n\n<blockquote>\n  <p>For the built-in types supporting round(), values are rounded to the\n  closest multiple of 10 to the power minus n; if two multiples are\n  equally close, rounding is done toward the even choice</p>\n</blockquote>\n\n<p>So, under <strong>v2.7.3</strong>:</p>\n\n<pre><code>In [85]: round(2.5)\nOut[85]: 3.0\n\nIn [86]: round(3.5)\nOut[86]: 4.0\n</code></pre>\n\n<p>as I'd have expected. However, now under <strong>v3.2.3</strong>:</p>\n\n<pre><code>In [32]: round(2.5)\nOut[32]: 2\n\nIn [33]: round(3.5)\nOut[33]: 4\n</code></pre>\n\n<p>This seems counter-intuitive and contrary to what I understand about\nrounding (and bound to trip up people). English isn't my native language but\nuntil I read this I thought I knew what rounding meant :-/  I am sure\nat the time v3 was introduced there must have been some discussion of\nthis, but I was unable to find a good reason in my search.</p>\n\n<ol>\n<li>Does anyone have insight into why this was changed to this?</li>\n<li>Are there any other mainstream programming languages (e.g., <em>C, C++, Java, Perl,</em> ..) that do this sort of (to  me inconsistent) rounding?</li>\n</ol>\n\n<p>What am I missing here?</p>\n\n<p>UPDATE: @Li-aungYip's comment re \"Banker's rounding\" gave me the right search term/keywords to search for and I found this SO question: <a href=\"https://stackoverflow.com/questions/311696/why-does-net-use-bankers-rounding-as-default\">Why does .NET use banker's rounding as default?</a>, so I will be reading that carefully.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Python 3.0's way is considered the standard rounding method these days, though some language implementations aren't on the bus yet.</p>\n\n<p>The simple \"always round 0.5 up\" technique results in a slight bias toward the higher number. With large numbers of calculations, this can be significant. The Python 3.0 approach eliminates this issue.</p>\n\n<p>There is more than one method of rounding in common use. IEEE 754, the international standard for floating-point math, defines <a href=\"http://en.wikipedia.org/wiki/IEEE_754-2008#Rounding_rules\" rel=\"noreferrer\">five different rounding methods</a> (the one used by Python 3.0 is the default). And there are others.</p>\n\n<p>This behavior is not as widely known as it ought to be. AppleScript was, if I remember correctly, an early adopter of this rounding method. The <code>round</code> command in AppleScript actually does offer several options, but round-toward-even is the default as it is in IEEE 754. Apparently the engineer who implemented the <code>round</code> command got so fed up with all the requests to \"make it work like I learned in school\" that he implemented just that: <code>round 2.5 rounding as taught in school</code> is a valid AppleScript command.  :-)</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Copying a shuffled <code>range(10**6)</code> list ten times takes me about 0.18 seconds: (these are five runs)</p>\n\n<pre><code>0.175597017661\n0.173731403198\n0.178601711594\n0.180330912952\n0.180811964451\n</code></pre>\n\n<p>Copying the unshuffled list ten times takes me about 0.05 seconds:</p>\n\n<pre><code>0.058402235973\n0.0505464636856\n0.0509734306934\n0.0526022752744\n0.0513324916184\n</code></pre>\n\n<p>Here's my testing code:</p>\n\n<pre><code>from timeit import timeit\nimport random\n\na = range(10**6)\nrandom.shuffle(a)    # Remove this for the second test.\na = list(a)          # Just an attempt to \"normalize\" the list.\nfor _ in range(5):\n    print timeit(lambda: list(a), number=10)\n</code></pre>\n\n<p>I also tried copying with <code>a[:]</code>, the results were similar (i.e., big speed difference)</p>\n\n<p>Why the big speed difference? I know and understand the speed difference in the famous <a href=\"https://stackoverflow.com/q/11227809/1672429\">Why is it faster to process a sorted array than an unsorted array?</a> example, but here my processing has no decisions. It's just blindly copying the references inside the list, no?</p>\n\n<p>I'm using Python 2.7.12 on Windows 10.</p>\n\n<p><strong>Edit:</strong> Tried Python 3.5.2 as well now, the results were almost the same (shuffled consistently around 0.17 seconds, unshuffled consistently around 0.05 seconds). Here's the code for that:</p>\n\n<pre><code>a = list(range(10**6))\nrandom.shuffle(a)\na = list(a)\nfor _ in range(5):\n    print(timeit(lambda: list(a), number=10))\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The interesting bit is that it depends on the order in which the integers are <strong>first</strong> created. For example instead of <code>shuffle</code> create a random sequence with <code>random.randint</code>:</p>\n\n<pre><code>from timeit import timeit\nimport random\n\na = [random.randint(0, 10**6) for _ in range(10**6)]\nfor _ in range(5):\n    print(timeit(lambda: list(a), number=10))\n</code></pre>\n\n<p>This is as fast as copying your <code>list(range(10**6))</code> (first and fast example).</p>\n\n<p>However when you shuffle - then your integers aren't in the order they were first created anymore, that's what makes it slow. </p>\n\n<p>A quick intermezzo:</p>\n\n<ul>\n<li>All Python objects are on the heap, so every object is a pointer.</li>\n<li>Copying a list is a shallow operation.</li>\n<li>However Python uses reference counting so when an object is put in a new container it's reference count must be incremented (<a href=\"https://github.com/python/cpython/blob/403ccddb9598bac6e0e6db4ba5aa2fe494512a98/Objects/listobject.c#L454\" rel=\"nofollow noreferrer\"><code>Py_INCREF</code> in <code>list_slice</code></a>), so Python really needs to go to where the object is. It can't just copy the reference.</li>\n</ul>\n\n<p>So when you copy your list you get each item of that list and put it \"as is\" in the new list. When your next item was created shortly after the current one there is a good chance (no guarantee!) that it's saved next to it on the heap. </p>\n\n<p>Let's assume that whenever your computer loads an item in the cache it also loads the <code>x</code> next-in-memory items (cache locality). Then your computer can perform the reference count increment for <code>x+1</code> items on the same cache!</p>\n\n<p>With the shuffled sequence it still loads the next-in-memory items but these aren't the ones next-in-list. So it can't perform the reference-count increment without \"really\" looking for the next item.</p>\n\n<p><strong>TL;DR:</strong> The actual speed depends on what happened before the copy: in what order were these items created and in what order are these in the list.</p>\n\n<hr>\n\n<p>You can verify this by looking at the <a href=\"https://docs.python.org/3/library/functions.html#id\" rel=\"nofollow noreferrer\"><code>id</code></a>:</p>\n\n<blockquote>\n  <p>CPython implementation detail: This is the address of the object in memory.</p>\n</blockquote>\n\n<pre><code>a = list(range(10**6, 10**6+100))\nfor item in a:\n    print(id(item))\n</code></pre>\n\n<p>Just to show a short excerpt:</p>\n\n<pre><code>1496489995888\n1496489995920  # +32\n1496489995952  # +32\n1496489995984  # +32\n1496489996016  # +32\n1496489996048  # +32\n1496489996080  # +32\n1496489996112\n1496489996144\n1496489996176\n1496489996208\n1496489996240\n1496507297840\n1496507297872\n1496507297904\n1496507297936\n1496507297968\n1496507298000\n1496507298032\n1496507298064\n1496507298096\n1496507298128\n1496507298160\n1496507298192\n</code></pre>\n\n<p>So these objects are really \"next to each other on the heap\". With <code>shuffle</code> they aren't:</p>\n\n<pre><code>import random\na = list(range(10**6, 100+10**6))\nrandom.shuffle(a)\nlast = None\nfor item in a:\n    if last is not None:\n        print('diff', id(item) - id(last))\n    last = item\n</code></pre>\n\n<p>Which shows these are not really next to each other in memory:</p>\n\n<pre><code>diff 736\ndiff -64\ndiff -17291008\ndiff -128\ndiff 288\ndiff -224\ndiff 17292032\ndiff -1312\ndiff 1088\ndiff -17292384\ndiff 17291072\ndiff 608\ndiff -17290848\ndiff 17289856\ndiff 928\ndiff -672\ndiff 864\ndiff -17290816\ndiff -128\ndiff -96\ndiff 17291552\ndiff -192\ndiff 96\ndiff -17291904\ndiff 17291680\ndiff -1152\ndiff 896\ndiff -17290528\ndiff 17290816\ndiff -992\ndiff 448\n</code></pre>\n\n<hr>\n\n<p><strong>Important note:</strong></p>\n\n<p>I haven't thought this up myself. Most of the informations can be found in the <a href=\"https://rickystewart.wordpress.com/2013/09/03/why-sorting-an-array-makes-a-python-loop-faster/\" rel=\"nofollow noreferrer\">blogpost of Ricky Stewart</a>.</p>\n\n<p>This answer is based on the \"official\" CPython implementation of Python. The details in other implementations (Jython, PyPy, IronPython, ...) may be different. Thanks @J\u00f6rgWMittag <a href=\"https://stackoverflow.com/questions/42107442/why-is-copying-a-shuffled-list-much-slower/42108043#comment71388367_42108043\">for pointing this out</a>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have recently updated my model, added a BooleanField to it however when I do <code>python manage.py syncdb</code>, it doesn't add the new field to the database for the model. How can I fix this ?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<h2>From Django 1.7 onwards</h2>\n\n<p>Django has built in support for migrations - take a look at <a href=\"https://docs.djangoproject.com/en/dev/topics/migrations/\" rel=\"noreferrer\">the documentation</a>.</p>\n\n<h2>For Django 1.6 and earlier</h2>\n\n<p>Django doesn't support migrations out of the box. There is a pluggable app for Django that does exactly that though, and it works great. It's called <a href=\"http://south.aeracode.org\" rel=\"noreferrer\">South</a>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Python sorts by byte value by default, which means \u00e9 comes after z and other equally funny things. What is the best way to sort alphabetically in Python?</p>\n\n<p>Is there a library for this? I couldn't find anything. Preferrably sorting should have language support so it understands that \u00e5\u00e4\u00f6 should be sorted after z in Swedish, but that \u00fc should be sorted by u, etc. Unicode support is thereby pretty much a requirement.</p>\n\n<p>If there is no library for it, what is the best way to do this? Just make a mapping from letter to a integer value and map the string to a integer list with that?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>IBM's <a href=\"http://site.icu-project.org/\" rel=\"noreferrer\">ICU</a> library does that (and a lot more). It has Python bindings: <a href=\"http://pypi.python.org/pypi/PyICU\" rel=\"noreferrer\">PyICU</a>. </p>\n\n<p><strong>Update</strong>: The core difference in sorting between ICU and <code>locale.strcoll</code> is that ICU uses the full <a href=\"http://unicode.org/reports/tr10/\" rel=\"noreferrer\">Unicode Collation Algorithm</a> while <code>strcoll</code> uses <a href=\"http://en.wikipedia.org/wiki/ISO_14651\" rel=\"noreferrer\">ISO 14651</a>.</p>\n\n<p>The differences between those two algorithms are briefly summarized here: <a href=\"http://unicode.org/faq/collation.html#13\" rel=\"noreferrer\">http://unicode.org/faq/collation.html#13</a>. These are rather exotic special cases, which should rarely matter in practice.</p>\n\n<pre><code>&gt;&gt;&gt; import icu # pip install PyICU\n&gt;&gt;&gt; sorted(['a','b','c','\u00e4'])\n['a', 'b', 'c', '\u00e4']\n&gt;&gt;&gt; collator = icu.Collator.createInstance(icu.Locale('de_DE.UTF-8'))\n&gt;&gt;&gt; sorted(['a','b','c','\u00e4'], key=collator.getSortKey)\n['a', '\u00e4', 'b', 'c']\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I just finished writing code to make a plot using <a href=\"https://en.wikipedia.org/wiki/Matplotlib#Comparison_with_MATLAB\">pylab</a> in Python and now I would like to superimpose a grid of 10x10 onto the scatter plot. How do I do that?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You want to use <code>pyplot.grid</code>:</p>\n\n<pre><code>x = numpy.arange(0, 1, 0.05)\ny = numpy.power(x, 2)\n\nfig = plt.figure()\nax = fig.gca()\nax.set_xticks(numpy.arange(0, 1, 0.1))\nax.set_yticks(numpy.arange(0, 1., 0.1))\nplt.scatter(x, y)\nplt.grid()\nplt.show()\n</code></pre>\n\n<p><code>ax.xaxis.grid</code> and <code>ax.yaxis.grid</code> can control grid lines properties.</p>\n\n<p><img src=\"https://i.stack.imgur.com/7in5d.png\" alt=\"Enter image description here\"></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In <em>PyCharm</em>, I've added the Python environment <code>/usr/bin/python</code>. However,</p>\n\n<pre><code>from gnuradio import gr\n</code></pre>\n\n<p>fails as an <em>undefined reference</em>. However, it works fine in the Python interpreter from the command line. </p>\n\n<p>GNURadio works fine with python outside of Pycharm. Everything is installed and configured how I want it.</p>\n\n<p>Gnuradio is located at <code>/usr/local/lib/python2.7/site-packages/gnuradio</code></p>\n\n<p>Also:</p>\n\n<blockquote>\n  <p>PYTHONPATH=/usr/local/lib/python2.7/site-packages:/usr/local/lib/python2.7/site-packages/gnuradio</p>\n</blockquote>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<h2>Adding a Path</h2>\n\n<p>Go into Settings -&gt; Project Settings -&gt; Project Interpreter.</p>\n\n<p>Then press configure interpreter, and navigate to the \"Paths\" tab.</p>\n\n<p><img src=\"https://i.imgur.com/Q5pcWDX.jpg\" alt=\"pycharm path tab\"></p>\n\n<p>Press the + button in the Paths area.  You can put the path to the module you'd like it to recognize. </p>\n\n<h3>But I don't know the path..</h3>\n\n<p>Open the python interpreter where you can import the module.</p>\n\n<pre><code>&gt;&gt; import gnuradio\n&gt;&gt; gnuradio.__file__\n\"path/to/gnuradio\"\n</code></pre>\n\n<p>Most commonly you'll have a folder structure like this:</p>\n\n<pre><code>foobarbaz/\n  gnuradio/\n    __init__.py\n    other_file.py\n</code></pre>\n\n<p>You want to add foobarbaz to the path here.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a matplotlib figure which I am plotting data that is always referred to as nanoseconds (1e-9).  On the y-axis, if I have data that is tens of nanoseconds, ie. 44e-9, the value on the axis shows as 4.4 with a +1e-8 as an offset.  Is there anyway to force the axis to show 44 with a +1e-9 offset?</p>\n\n<p>The same goes for my x-axis where the axis is showing +5.54478e4, where I would rather it show an offset of +55447 (whole number, no decimal - the value here is in days).</p>\n\n<p>I've tried a couple things like this:</p>\n\n<pre><code>p = axes.plot(x,y)\np.ticklabel_format(style='plain')\n</code></pre>\n\n<p>for the x-axis, but this doesn't work, though I'm probably using it incorrectly or misinterpreting something from the docs, can someone point me in the correct direction?</p>\n\n<p>Thanks,\nJonathan</p>\n\n<p><img src=\"https://i.stack.imgur.com/Gg00z.png\" alt=\"Problem illustration\"></p>\n\n<hr>\n\n<p>I tried doing something with formatters but haven't found any solution yet...:</p>\n\n<pre><code>myyfmt = ScalarFormatter(useOffset=True)\nmyyfmt._set_offset(1e9)\naxes.get_yaxis().set_major_formatter(myyfmt)\n</code></pre>\n\n<p>and</p>\n\n<pre><code>myxfmt = ScalarFormatter(useOffset=True)\nmyxfmt.set_portlimits((-9,5))\naxes.get_xaxis().set_major_formatter(myxfmt)\n</code></pre>\n\n<p>On a side note, I'm actually confused as to where the 'offset number' object actually resides...is it part of the major/minor ticks?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I had exactly the same problem, and these two lines fixed the problem:</p>\n\n<pre><code>y_formatter = matplotlib.ticker.ScalarFormatter(useOffset=False)\nax.yaxis.set_major_formatter(y_formatter)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm having trouble understanding <code>__file__</code>. From what I understand, <code>__file__</code> returns the absolute path from which the module was loaded. </p>\n\n<p>I'm having problem producing this: I have a <code>abc.py</code> with one statement <code>print __file__</code>, running from <code>/d/projects/</code> <code>python abc.py</code> returns <code>abc.py</code>. running from <code>/d/</code> returns <code>projects/abc.py</code>. Any reasons why?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<blockquote>\n  <p><code>__file__</code> is the pathname of the file from which the module was loaded, if it was loaded from a file. The <code>__file__</code> attribute is not present for C modules that are statically linked into the interpreter; for extension modules loaded dynamically from a shared library, it is the pathname of the shared library file.</p>\n</blockquote>\n\n<p>From the <a href=\"http://mail.python.org/pipermail/python-dev/2010-February/097461.html\" rel=\"noreferrer\">mailing list thread</a> linked by @kindall in a comment to the question:</p>\n\n<blockquote>\n  <p>I haven't tried to repro this particular example, but the reason is\n  that we don't want to have to call getpwd() on every import nor do we\n  want to have some kind of in-process variable to cache the current\n  directory. (getpwd() is relatively slow and can sometimes fail\n  outright, and trying to cache it has a certain risk of being wrong.)</p>\n  \n  <p>What we do instead, is code in site.py that walks over the elements of\n  sys.path and turns them into absolute paths. However this code runs\n  before '' is inserted in the front of sys.path, so that the initial\n  value of sys.path is ''.</p>\n</blockquote>\n\n<p>For the rest of this, consider <code>sys.path</code> not to include <code>''</code>.</p>\n\n<p>So, if you aren't inside the part of <code>sys.path</code> that contains the module, you'll get an <strong>absolute path</strong>. If you are inside the part of <code>sys.path</code> that contains the module, you'll get a <strong>relative path</strong>.</p>\n\n<p>If you load a module in the current directory, and the current directory <strong>isn't</strong> in <code>sys.path</code>, you'll get an absolute path.</p>\n\n<p>If you load a module in the current directory, and the current directory <strong>is</strong> in <code>sys.path</code>, you'll get a relative path.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>For example I can point the <code>url '^/accounts/password/reset/$'</code> to <code>django.contrib.auth.views.password_reset</code> with my template filename in the context but I think need to send more context details.</p>\n\n<p>I need to  know exactly what context to add for each of the password reset and change views.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you take a look at the sources for <a href=\"http://code.djangoproject.com/browser/django/trunk/django/contrib/auth/views.py\" rel=\"noreferrer\">django.contrib.auth.views.password_reset</a> you'll see that it uses <a href=\"http://code.djangoproject.com/browser/django/trunk/django/template/__init__.py\" rel=\"noreferrer\"><code>RequestContext</code></a>. The upshot is, you can use Context Processors to modify the context which may allow you to inject the information that you need.</p>\n\n<p>The b-list has a good <a href=\"http://www.b-list.org/weblog/2006/jun/14/django-tips-template-context-processors/\" rel=\"noreferrer\">introduction to context processors</a>.</p>\n\n<p>Edit (I seem to have been confused about what the actual question was):</p>\n\n<p>You'll notice that <code>password_reset</code> takes a named parameter called <code>template_name</code>:</p>\n\n<pre><code>def password_reset(request, is_admin_site=False, \n            template_name='registration/password_reset_form.html',\n            email_template_name='registration/password_reset_email.html',\n            password_reset_form=PasswordResetForm, \n            token_generator=default_token_generator,\n            post_reset_redirect=None):\n</code></pre>\n\n<p>Check <a href=\"https://docs.djangoproject.com/en/1.9/topics/auth/default/#django.contrib.auth.views.password_reset\" rel=\"noreferrer\">password_reset</a> for more information.</p>\n\n<p>... thus, with a urls.py like:</p>\n\n<pre><code>from django.conf.urls.defaults import *\nfrom django.contrib.auth.views import password_reset\n\nurlpatterns = patterns('',\n     (r'^/accounts/password/reset/$', password_reset, {'template_name': 'my_templates/password_reset.html'}),\n     ...\n)\n</code></pre>\n\n<p><code>django.contrib.auth.views.password_reset</code> will be called for URLs matching <code>'/accounts/password/reset'</code> with the keyword argument <code>template_name = 'my_templates/password_reset.html'</code>.</p>\n\n<p>Otherwise, you don't need to provide any context as the <code>password_reset</code> view takes care of itself. If you want to see what context you have available, you can trigger a <code>TemplateSyntax</code> error and look through the stack trace find the frame with a local variable named <code>context</code>. If you want to modify the context then what I said above about context processors is probably the way to go.</p>\n\n<p>In summary: what do you need to do to use your own template? Provide a <code>template_name</code> keyword argument to the view when it is called. You can supply keyword arguments to views by including a dictionary as the third member of a URL pattern tuple.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I need to verify if a list is a subset of another - a boolean return is all I seek.<br>\nIs testing equality on the smaller list after an intersection the fastest way to do this?<br>\nPerformance is of utmost importance given the amount of datasets that need to be compared.<br>\nAdding further facts based on discussions:  </p>\n\n<ol>\n<li>Will either of the lists be the same for many tests?<br>\nIt does as one of them is a static lookup table   </li>\n<li>Does it need to be a list?<br>\nIt does not - the static lookup table can be anything that performs best.<br>\nThe dynamic one is a dict from which we extract the keys to perform a static lookup on.     </li>\n</ol>\n\n<p>What would be the optimum solution given the scenario?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The performant function Python provides for this is <a href=\"http://docs.python.org/2/library/stdtypes.html#set.issubset\" rel=\"noreferrer\">set.issubset</a>. It does have a few restrictions that make it unclear if it's the answer to your question, however.</p>\n\n<p>A list may contain items multiple times and has a specific order. A set does not. To achieve high performance sets work on <a href=\"http://docs.python.org/2/glossary.html#term-hashable\" rel=\"noreferrer\">hashable</a> objects only. </p>\n\n<p>Are you asking about subset or subsequence (which means you'll want a string search algorithm)? Will either of the lists be the same for many tests? What are the datatypes contained in the list? And for that matter, does it need to be a list? </p>\n\n<p>Your other post <a href=\"https://stackoverflow.com/questions/16577499/python-intersect-a-dict-and-list\">intersect a dict and list</a> made the types clearer and did get a recommendation to use dictionary key views for their set-like funcitonality. In that case it was known to work because dictionary keys behave like a set (so much so that before we had sets in Python we used dictionaries). One wonders how the issue got less specific in three hours. </p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I need to pass  a file path name to a module which creates a report document as pdf,html etc.How do I build the file path name from a directory name,base file name and a fileformat string ?</p>\n\n<p>The directory may or may not exist at the time of call</p>\n\n<p>for example</p>\n\n<pre><code>dir_name='/home/me/dev/my_reports'\nbase_filename='daily_report'\nformat = 'pdf'\n</code></pre>\n\n<p>I need to create a string <code>'/home/me/dev/my_reports/daily_report.pdf'</code> </p>\n\n<p>concatenating the pieces manually didn't seem to be a good way.\nI tried os.path.join</p>\n\n<pre><code>join(dir_name,base_filename,format)\n</code></pre>\n\n<p>but it gives</p>\n\n<pre><code>'/home/me/dev/my_reports/daily_report/pdf'\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>This works fine:</p>\n\n<pre><code>os.path.join(dir_name, base_filename + \".\" + filename_suffix)\n</code></pre>\n\n<p>Keep in mind that <code>os.path.join()</code> exists to smooth over the different path separator characters used by different operating systems, so your code doesn't have to special-case each one.  File name \"extensions\" only have significant meaning on one major operating system (they're simply part of the file name on non-Windows systems), and their separator is always a dot.  There's no need for a function to join them, but if using one makes you feel better, you can do this:</p>\n\n<pre><code>os.path.join(dir_name, '.'.join((base_filename, filename_suffix)))\n</code></pre>\n\n<p>Or, if you want to keep your code really clean, simply include the dot in the suffix:</p>\n\n<pre><code>suffix = '.pdf'\nos.path.join(dir_name, base_filename + suffix)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>My little brother is just getting into programming, and for his Science Fair project, he's doing a simulation of a flock of birds in the sky. He's gotten most of his code written, and it works nicely, but the birds need to move <em>every moment</em>.</p>\n\n<p>Tkinter, however, hogs the time for its own event loop, and so his code won't run. Doing <code>root.mainloop()</code> runs, runs, and keeps running, and the only thing it runs is the event handlers.</p>\n\n<p>Is there a way to have his code run alongside the mainloop (without multithreading, it's confusing and this should be kept simple), and if so, what is it?</p>\n\n<p>Right now, he came up with an ugly hack, tying his <code>move()</code> function to <code>&lt;b1-motion&gt;</code>, so that as long as he holds the button down and wiggles the mouse, it works. But there's got to be a better way.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use the <code>after</code> method on the <code>Tk</code> object:</p>\n\n<pre><code>from tkinter import *\n\nroot = Tk()\n\ndef task():\n    print(\"hello\")\n    root.after(2000, task)  # reschedule event in 2 seconds\n\nroot.after(2000, task)\nroot.mainloop()\n</code></pre>\n\n<p>Here's the declaration and documentation for the <code>after</code> method:</p>\n\n<pre><code>def after(self, ms, func=None, *args):\n    \"\"\"Call function once after given time.\n\n    MS specifies the time in milliseconds. FUNC gives the\n    function which shall be called. Additional parameters\n    are given as parameters to the function call.  Return\n    identifier to cancel scheduling with after_cancel.\"\"\"\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What does <code>sys.stdout.flush()</code> do?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Python's standard out is buffered (meaning that it collects some of the data \"written\" to standard out before it writes it to the terminal). Calling <code>sys.stdout.flush()</code> forces it to \"flush\" the buffer, meaning that it will write everything in the buffer to the terminal, even if normally it would wait before doing so.  </p>\n\n<p>Here's some good information about (un)buffered I/O and why it's useful:<br>\n<a href=\"http://en.wikipedia.org/wiki/Data_buffer\" rel=\"noreferrer\">http://en.wikipedia.org/wiki/Data_buffer</a><br>\n<a href=\"https://stackoverflow.com/questions/1450551/buffered-i-o-vs-unbuffered-io\">Buffered vs unbuffered IO</a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is it this, which people seem to recommend most often:</p>\n\n<pre><code>$ sudo apt-get install python-setuptools\n$ sudo easy_install pip\n$ sudo pip install virtualenv\n</code></pre>\n\n<p>Or this, which I got from <a href=\"http://www.pip-installer.org/en/latest/installing.html\">http://www.pip-installer.org/en/latest/installing.html</a>:</p>\n\n<pre><code>$ curl -O https://github.com/pypa/virtualenv/raw/master/virtualenv.py\n$ python virtualenv.py my_new_env\n$ . my_new_env/bin/activate\n(my_new_env)$ pip install ...\n</code></pre>\n\n<p>Or something entirely different?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you can install the latest Python (2.7.9 and up) Pip is now bundled with it. \nSee: <a href=\"https://docs.python.org/2.7//installing/index.html\" rel=\"nofollow noreferrer\">https://docs.python.org/2.7//installing/index.html</a><br>\nIf not :<br>\n<strong>Update (from the release notes):</strong></p>\n\n<blockquote>\n  <p>Beginning with v1.5.1, pip does not require setuptools prior to running get-pip.py. Additionally, if setuptools (or distribute) is not already installed, get-pip.py will install setuptools for you.</p>\n</blockquote>\n\n<p>I now run the regular:</p>\n\n<pre><code>curl --silent --show-error --retry 5 https://bootstrap.pypa.io/get-pip.py | sudo python\n</code></pre>\n\n<p>Here are the official installation instructions:\n<a href=\"http://pip.readthedocs.org/en/latest/installing.html#install-pip\" rel=\"nofollow noreferrer\">http://pip.readthedocs.org/en/latest/installing.html#install-pip</a></p>\n\n<p><strong>EDIT 25-Jul-2013:</strong><br>\nChanged URL for setuptools install.  </p>\n\n<p><strong>EDIT 10-Feb-2014:</strong><br>\nRemoved setuptools install (thanks @Ciantic)</p>\n\n<p><strong>EDIT 26-Jun-2014:</strong><br>\nUpdated URL again (thanks @LarsH)</p>\n\n<p><strong>EDIT 1-Mar-2015:</strong><br>\nPip is now bundled with Python </p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I've seen people say that <code>set</code> objects in python have O(1) membership-checking. How are they implemented internally to allow this? What sort of data structure does it use? What other implications does that implementation have?</p>\n\n<p>Every answer here was really enlightening, but I can only accept one, so I'll go with the closest answer to my original question. Thanks all for the info!</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>According to <a href=\"http://groups.google.com/group/comp.lang.python/browse_thread/thread/e3e9dfdb5cbe33c8/83361c0f975add77?lnk=raot&amp;pli=1\" rel=\"noreferrer\">this thread</a>:</p>\n\n<blockquote>\n  <p>Indeed, CPython's sets are implemented as something like dictionaries \n  with dummy values (the keys being the members of the set), with some \n  optimization(s) that exploit this lack of values</p>\n</blockquote>\n\n<p>So basically a <code>set</code> uses a hashtable as its underlying data structure. This explains the O(1) membership checking, since looking up an item in a hashtable is an O(1) operation, on average.</p>\n\n<p>If you are so inclined you can even browse the <a href=\"https://hg.python.org/releasing/3.6/file/tip/Objects/setobject.c\" rel=\"noreferrer\">CPython source code for set</a> which, according to <a href=\"http://markmail.org/message/ktzomp4uwrmnzao6\" rel=\"noreferrer\">Achim Domma</a>, is mostly a cut-and-paste from the <code>dict</code> implementation.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>If I have the following python code:</p>\n\n<pre><code>class Foo(object):\n    bar = 1\n    def bah(self):\n\n        print bar\n\nf = Foo()\nf.bah()\n</code></pre>\n\n<p>It complains </p>\n\n<pre><code>NameError: global name 'bar' is not defined\n</code></pre>\n\n<p>How can I access class/static variable 'bar' within method 'bah'?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Instead of <code>bar</code> use <code>self.bar</code> or <code>Foo.bar</code>. Assigning to <code>Foo.bar</code> will create a static variable, and assigning to <code>self.bar</code> will create an instance variable.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am new to Python and trying to learn and advance. I am interested in TRIEs and DAWGs and I have been reading a lot about it but I don't understand what should the output TRIE or DAWG file look like.</p>\n\n<ul>\n<li>Should a TRIE be an object of nested dictionaries? Where each letter\nis divided in to letters and so on?</li>\n<li>Would a look up performed on such a dictionary be fast if there are 100k or 500k entries?</li>\n<li>How to implement word-blocks consisting of more than one word separated with - or space?</li>\n<li>How to link prefix or suffix of a word to another part in the structure? [for DAWG]</li>\n</ul>\n\n<p>I want to understand the best <strong>output structure</strong> in order to figure out how to create and use one.</p>\n\n<p>I would also appreciate what should be the <strong>output of a DAWG</strong> along with <strong>TRIE</strong>.</p>\n\n<p>I do not want to see graphical representations with bubbles linked to each other, I saw them plenty whilst reading.</p>\n\n<p>I would like to know the output object once a set of words are turned into TRIEs or DAWGs.</p>\n\n<p>Thank you. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"https://stackoverflow.com/a/11015381/577088\">Unwind</a> is essentially correct that there are many different ways to implement a trie; and for a large, scalable trie, nested dictionaries might become cumbersome -- or at least space inefficient. But since you're just getting started, I think that's the easiest approach; you could code up a simple <code>trie</code> in just a few lines. First, a function to construct the trie:</p>\n\n<pre><code>&gt;&gt;&gt; _end = '_end_'\n&gt;&gt;&gt; \n&gt;&gt;&gt; def make_trie(*words):\n...     root = dict()\n...     for word in words:\n...         current_dict = root\n...         for letter in word:\n...             current_dict = current_dict.setdefault(letter, {})\n...         current_dict[_end] = _end\n...     return root\n... \n&gt;&gt;&gt; make_trie('foo', 'bar', 'baz', 'barz')\n{'b': {'a': {'r': {'_end_': '_end_', 'z': {'_end_': '_end_'}}, \n             'z': {'_end_': '_end_'}}}, \n 'f': {'o': {'o': {'_end_': '_end_'}}}}\n</code></pre>\n\n<p>If you're not familiar with <code>setdefault</code>, it simply looks up a key in the dictionary (here, <code>letter</code> or <code>_end</code>). If the key is present, it returns the associated value; if not, it assigns a default value to that key and returns the value (<code>{}</code> or <code>_end</code>). (It's like a version of <code>get</code> that also updates the dictionary.) </p>\n\n<p>Next, a function to test whether the word is in the trie. This could be more terse, but I'm leaving it verbose so that the logic is clear:</p>\n\n<pre><code>&gt;&gt;&gt; def in_trie(trie, word):\n...     current_dict = trie\n...     for letter in word:\n...         if letter in current_dict:\n...             current_dict = current_dict[letter]\n...         else:\n...             return False\n...     else:\n...         if _end in current_dict:\n...             return True\n...         else:\n...             return False\n... \n&gt;&gt;&gt; in_trie(make_trie('foo', 'bar', 'baz', 'barz'), 'baz')\nTrue\n&gt;&gt;&gt; in_trie(make_trie('foo', 'bar', 'baz', 'barz'), 'barz')\nTrue\n&gt;&gt;&gt; in_trie(make_trie('foo', 'bar', 'baz', 'barz'), 'barzz')\nFalse\n&gt;&gt;&gt; in_trie(make_trie('foo', 'bar', 'baz', 'barz'), 'bart')\nFalse\n&gt;&gt;&gt; in_trie(make_trie('foo', 'bar', 'baz', 'barz'), 'ba')\nFalse\n</code></pre>\n\n<p>I'll leave insertion and removal to you as an exercise.</p>\n\n<p>Of course, Unwind's suggestion wouldn't be much harder. There might be a slight speed disadvantage in that finding the correct sub-node would require a linear search. But the search would be limited to the number of possible characters -- 27 if we include <code>_end</code>. Also, there's nothing to be gained by creating a massive list of nodes and accessing them by index as he suggests; you might as well just nest the lists.</p>\n\n<p>Finally, I'll add that creating a DAWG would be a bit more complex, because you have to detect situations in which your current word shares a suffix with another word in the structure. In fact, this can get rather complex, depending on how you want to structure the DAWG! You may have to learn some stuff about <a href=\"http://en.wikipedia.org/wiki/Levenshtein_distance\" rel=\"noreferrer\">Levenshtein</a> <a href=\"https://stackoverflow.com/q/10638597/577088\">distance</a> to get it right. </p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What's the best way to set a creation date for an object automatically, and also a field that will record when the object was last updated?</p>\n\n<p>In my model I have:</p>\n\n<pre><code>created_at = models.DateTimeField(False, True, editable=False)\nupdated_at = models.DateTimeField(True, True, editable=False)\n</code></pre>\n\n<p>and in my view:</p>\n\n<pre><code>if request.method == 'POST':\n    form = MyForm(request.POST)\n    if form.is_valid():\n        obj = form.save(commit=False)\n        obj.user = request.user\n        obj.save()\n        return HttpResponseRedirect('obj_list')\n</code></pre>\n\n<p>I get the error:</p>\n\n<pre><code>objects_object.created_at may not be NULL\n</code></pre>\n\n<p>Do I have to manually set this value myself? I thought that was the point of the parameters passed to the DateTimeFields (or are they just defaults, and since I've set 'editable=False' they don't get displayed on the form, hence don't get submitted in the request, and therefore don't get put into the form?).</p>\n\n<p>What's the best way of doing this? An <strong>init</strong> method? </p>\n\n<p>Thanks</p>\n\n<p>ps - I'm a django and Python newbie...</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use the <a href=\"http://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.DateField.auto_now\" rel=\"noreferrer\"><code>auto_now</code></a> and <a href=\"http://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.DateField.auto_now_add\" rel=\"noreferrer\"><code>auto_now_add</code></a> options for <code>updated_at</code> and <code>created_at</code> respectively.</p>\n\n<pre><code>class MyModel(models.Model):\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Let's assume an iteration in which we call a function without a return value. The way I think my program should behave is explained in this pseudocode:</p>\n\n<pre><code>for element in some_list:\n    foo(element)\n\ndef foo(element):\n    do something\n    if check is true:\n        do more (because check was succesful)\n    else:\n        return None\n    do much much more...\n</code></pre>\n\n<p>If I implement this in python, it bothers me, that the function returns a <code>None</code>. Is there a better way for \"exiting a function, that has no return value, if a check fails in the body of the function\"?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You could simply use</p>\n\n<pre><code>return\n</code></pre>\n\n<p>which does exactly the same as</p>\n\n<pre><code>return None\n</code></pre>\n\n<p>Your function will also return <code>None</code> if execution reaches the end of the function body without hitting a <code>return</code> statement.  Returning nothing is the same as returning <code>None</code> in Python.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have yet to find a way of setting up Python logging with Django that I'm happy with. My requirements are fairly simple:</p>\n\n<ul>\n<li>Different log handlers for different events - that is, I want to be able to log to different files</li>\n<li>Easy access to loggers in my modules. The module should be able to find its logger with little effort.</li>\n<li>Should be easily applicable to command-line modules. Parts of the system are stand-alone command line or daemon processes. Logging should be easily usable with these modules.</li>\n</ul>\n\n<p>My current setup is to use a <code>logging.conf</code> file and setup logging in each module I log from. It doesn't feel right. </p>\n\n<p>Do you have a logging setup that you like? Please detail it: how do you setup the configuration (do you use <code>logging.conf</code> or set it up in code), where/when do you initiate the loggers, and how do you get access to them in your modules, etc.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The best way I've found so far is to initialize logging setup in settings.py - nowhere else. You can either use a configuration file or do it programmatically step-by-step - it just depends on your requirements. The key thing is that I usually add the handlers I want to the root logger, using levels and sometimes logging.Filters to get the events I want to the appropriate files, console, syslogs etc. You can of course add handlers to any other loggers too, but there isn't commonly a need for this in my experience.</p>\n\n<p>In each module, I define a logger using</p>\n\n<pre><code>logger = logging.getLogger(__name__)\n</code></pre>\n\n<p>and use that for logging events in the module (and, if I want to differentiate further) use a logger which is a child of the logger created above.</p>\n\n<p>If my app is going to be potentially used in a site which doesn't configure logging in settings.py, I define a NullHandler somewhere as follows:</p>\n\n<pre><code>#someutils.py\n\nclass NullHandler(logging.Handler):\n    def emit(self, record):\n        pass\n\nnull_handler = NullHandler()\n</code></pre>\n\n<p>and ensure that an instance of it is added to all loggers created in the modules in my apps which use logging. (Note: NullHandler is already in the logging package for Python 3.1, and will be in Python 2.7.) So:</p>\n\n<pre><code>logger = logging.getLogger(__name__)\nlogger.addHandler(someutils.null_handler)\n</code></pre>\n\n<p>This is done to ensure that your modules play nicely in a site which doesn't configure logging in settings.py, and that you don't get any annoying \"No handlers could be found for logger X.Y.Z\" messages (which are warnings about potentially misconfigured logging).</p>\n\n<p>Doing it this way meets your stated requirements:</p>\n\n<ul>\n<li>You can set up different log handlers for different events, as you currently do.</li>\n<li>Easy access to loggers in your modules - use <code>getLogger(__name__)</code>.</li>\n<li>Easily applicable to command-line modules - they also import <code>settings.py</code>.</li>\n</ul>\n\n<p><strong>Update:</strong> Note that as of version 1.3, Django now incorporates <a href=\"https://docs.djangoproject.com/en/dev/topics/logging/\" rel=\"noreferrer\">support for logging</a>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am trying to plot two separate quantities on the same graph using twiny as follows:</p>\n\n<pre><code>fig = figure()\nax = fig.add_subplot(111)\nax.plot(T, r, 'b-', T, R, 'r-', T, r_geo, 'g-')\nax.set_yscale('log')\nax.annotate('Approx. sea level', xy=(Planet.T_day*1.3,(Planet.R)/1000), xytext=(Planet.T_day*1.3, Planet.R/1000))\nax.annotate('Geostat. orbit', xy=(Planet.T_day*1.3, r_geo[0]), xytext=(Planet.T_day*1.3, r_geo[0]))\nax.set_xlabel('Rotational period (hrs)')\nax.set_ylabel('Orbital radius (km), logarithmic')\nax.set_title('Orbital charts for ' + Planet.N, horizontalalignment='center', verticalalignment='top')\n\n\nax2 = ax.twiny()\nax2.plot(v,r,'k-')\nax2.set_xlabel('Linear speed (ms-1)')\n\nshow()\n</code></pre>\n\n<p>and the data is presented fine, but I am having the problem that the figure title is overlapping with the axes labels on the secondary x axis so that it's barely legible (I wanted to post a picture example here, but I don't have a high enough rep yet).</p>\n\n<p>I'd like to know if there's a straightforward way to just shift the title directly up a few tens of pixels, so that the chart looks prettier.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I'm not sure whether it is a new feature in later versions of matplotlib, but at least for 1.3.1, this is simply:</p>\n\n<pre><code>plt.title(figure_title, y=1.08)\n</code></pre>\n\n<p>This also works for <code>plt.suptitle()</code>, but not (yet) for <code>plt.xlabel()</code>, etc.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm reading and parsing an Amazon XML file and while the XML file shows a ' , when I try to print it I get the following error:</p>\n\n<pre><code>'ascii' codec can't encode character u'\\u2019' in position 16: ordinal not in range(128) \n</code></pre>\n\n<p>From what I've read online thus far, the error is coming from the fact that the XML file is in UTF-8, but Python wants to handle it as an ASCII encoded character. Is there a simple way to make the error go away and have my program print the XML as it reads?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Likely, your problem is that you parsed it okay, and now you're trying to print the contents of the XML and you can't because theres some foreign Unicode characters.  Try to encode your unicode string as ascii first:</p>\n\n<pre><code>unicodeData.encode('ascii', 'ignore')\n</code></pre>\n\n<p>the 'ignore' part will tell it to just skip those characters.  From the python docs:</p>\n\n<pre><code>&gt;&gt;&gt; u = unichr(40960) + u'abcd' + unichr(1972)\n&gt;&gt;&gt; u.encode('utf-8')\n'\\xea\\x80\\x80abcd\\xde\\xb4'\n&gt;&gt;&gt; u.encode('ascii')\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in ?\nUnicodeEncodeError: 'ascii' codec can't encode character '\\ua000' in position 0: ordinal not in range(128)\n&gt;&gt;&gt; u.encode('ascii', 'ignore')\n'abcd'\n&gt;&gt;&gt; u.encode('ascii', 'replace')\n'?abcd?'\n&gt;&gt;&gt; u.encode('ascii', 'xmlcharrefreplace')\n'&amp;#40960;abcd&amp;#1972;'\n</code></pre>\n\n<p>You might want to read this article: <a href=\"http://www.joelonsoftware.com/articles/Unicode.html\" rel=\"noreferrer\">http://www.joelonsoftware.com/articles/Unicode.html</a>, which I found very useful as a basic tutorial on what's going on.  After the read, you'll stop feeling like you're just guessing what commands to use (or at least that happened to me).</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I would like to create a string buffer to do lots of processing, format and finally write the buffer in a text file using a C-style <code>sprintf</code> functionality in Python. Because of conditional statements, I can\u2019t write them directly to the file.</p>\n\n<p>e.g pseudo code:</p>\n\n<pre><code>sprintf(buf,\"A = %d\\n , B= %s\\n\",A,B)\n/* some processing */\nsprint(buf,\"C=%d\\n\",c)\n....\n...\nfprintf(file,buf)\n</code></pre>\n\n<p>So in the output file we have this kind of o/p:</p>\n\n<pre><code>A= foo B= bar\nC= ded\netc...\n</code></pre>\n\n<p><strong>Edit, to clarify my question:</strong><br>\n<code>buf</code> is a big buffer contains all these strings which have formatted using sprintf.\nGoing by your examples, <code>buf</code> will only contain current values, not older ones.\ne.g first in <code>buf</code> I wrote <code>A= something ,B= something</code> later <code>C= something</code> was appended in the same <code>buf</code>, but in your Python answers <code>buf</code> contains only last value, which is not I want - I want <code>buf</code> to have all the <code>printf</code>s I have done since the beginning, like in <code>C</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Python has a <code>%</code> operator for this.</p>\n\n<pre><code>&gt;&gt;&gt; a = 5\n&gt;&gt;&gt; b = \"hello\"\n&gt;&gt;&gt; buf = \"A = %d\\n , B = %s\\n\" % (a, b)\n&gt;&gt;&gt; print buf\nA = 5\n , B = hello\n\n&gt;&gt;&gt; c = 10\n&gt;&gt;&gt; buf = \"C = %d\\n\" % c\n&gt;&gt;&gt; print buf\nC = 10\n</code></pre>\n\n<p>See this <a href=\"http://docs.python.org/2/library/stdtypes.html#string-formatting-operations\" rel=\"noreferrer\">reference</a> for all supported format specifiers.</p>\n\n<p>You could as well use <a href=\"http://docs.python.org/2/library/string.html#formatstrings\" rel=\"noreferrer\"><code>format</code></a>:</p>\n\n<pre><code>&gt;&gt;&gt; print \"This is the {}th tome of {}\".format(5, \"knowledge\")\nThis is the 5th tome of knowledge\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is there some way in Python to capture <code>KeyboardInterrupt</code> event without putting all the code inside a <code>try</code>-<code>except</code> statement?\nI want to cleanly exit without trace if user presses <kbd>ctrl</kbd>-<kbd>c</kbd>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Yes, you can install an interrupt handler using the <a href=\"https://docs.python.org/3/library/signal.html\" rel=\"noreferrer\">signal module</a>.</p>\n\n<pre><code>import signal\nimport sys\nimport time\n\ndef signal_handler(signal, frame):\n    print 'You pressed Ctrl+C!'\n    sys.exit(0)\n\nsignal.signal(signal.SIGINT, signal_handler)\nprint 'Press Ctrl+C'\nwhile True:\n    time.sleep(1)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I can't seem to find any python libraries that do multiple regression. The only things I find only do simple regression. I need to regress my dependent variable (y) against several independent variables (x1, x2, x3, etc.).</p>\n\n<p>For example, with this data:</p>\n\n<pre><code>print 'y        x1      x2       x3       x4      x5     x6       x7'\nfor t in texts:\n    print \"{:&gt;7.1f}{:&gt;10.2f}{:&gt;9.2f}{:&gt;9.2f}{:&gt;10.2f}{:&gt;7.2f}{:&gt;7.2f}{:&gt;9.2f}\" /\n   .format(t.y,t.x1,t.x2,t.x3,t.x4,t.x5,t.x6,t.x7)\n</code></pre>\n\n<p>(output for above:)</p>\n\n<pre><code>      y        x1       x2       x3        x4     x5     x6       x7\n   -6.0     -4.95    -5.87    -0.76     14.73   4.02   0.20     0.45\n   -5.0     -4.55    -4.52    -0.71     13.74   4.47   0.16     0.50\n  -10.0    -10.96   -11.64    -0.98     15.49   4.18   0.19     0.53\n   -5.0     -1.08    -3.36     0.75     24.72   4.96   0.16     0.60\n   -8.0     -6.52    -7.45    -0.86     16.59   4.29   0.10     0.48\n   -3.0     -0.81    -2.36    -0.50     22.44   4.81   0.15     0.53\n   -6.0     -7.01    -7.33    -0.33     13.93   4.32   0.21     0.50\n   -8.0     -4.46    -7.65    -0.94     11.40   4.43   0.16     0.49\n   -8.0    -11.54   -10.03    -1.03     18.18   4.28   0.21     0.55\n</code></pre>\n\n<p>How would I regress these in python, to get the linear regression formula:</p>\n\n<blockquote>\n  <p>Y = a1x1 + a2x2 + a3x3 + a4x4 + a5x5 + a6x6 + +a7x7 + c</p>\n</blockquote>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"http://scikit-learn.org/stable/modules/linear_model.html#ordinary-least-squares\" rel=\"noreferrer\"><code>sklearn.linear_model.LinearRegression</code></a> will do it:</p>\n\n<pre><code>from sklearn import linear_model\nclf = linear_model.LinearRegression()\nclf.fit([[getattr(t, 'x%d' % i) for i in range(1, 8)] for t in texts],\n        [t.y for t in texts])\n</code></pre>\n\n<p>Then <code>clf.coef_</code> will have the regression coefficients.</p>\n\n<p><a href=\"http://scikit-learn.org/stable/modules/linear_model.html\" rel=\"noreferrer\"><code>sklearn.linear_model</code></a> also has similar interfaces to do various kinds of regularizations on the regression.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Haven't Python iterators got a <code>hasNext</code> method?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>No, there is no such method. The end of iteration is indicated by an exception. See the <a href=\"http://docs.python.org/library/stdtypes.html#iterator-types\" rel=\"noreferrer\">documentation</a>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm trying to learn how to use Python's <code>multiprocessing</code> package, but I don't understand the difference between <code>map_async</code> and <code>imap</code>.\nI noticed that both <code>map_async</code> and <code>imap</code> are executed asynchronously. So when should I use one over the other? And how should I retrieve the result returned by <code>map_async</code>?</p>\n\n<p>Should I use something like this?</p>\n\n<pre><code>def test():\n    result = pool.map_async()\n    pool.close()\n    pool.join()\n    return result.get()\n\nresult=test()\nfor i in result:\n    print i\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There are two key differences between <code>imap</code>/<code>imap_unordered</code> and <code>map</code>/<code>map_async</code>:</p>\n\n<ol>\n<li>The way they consume the iterable you pass to them.</li>\n<li>The way they return the result back to you.</li>\n</ol>\n\n<p><code>map</code> consumes your iterable by converting the iterable to a list (assuming it isn't a list already), breaking it into chunks, and sending those chunks to the worker processes in the <code>Pool</code>. Breaking the iterable into chunks performs better than passing each item in the iterable between processes one item at a time - particularly if the iterable is large. However, turning the iterable into a list in order to chunk it can have a very high memory cost, since the entire list will need to be kept in memory. </p>\n\n<p><code>imap</code> doesn't turn the iterable you give it into a list, nor does break it into chunks (by default). It will iterate over the iterable one element at a time, and send them each to a worker process. This means you don't take the memory hit of converting the whole iterable to a list, but it also means the performance is slower for large iterables, because of the lack of chunking. This can be mitigated by passing a <code>chunksize</code> argument larger than default of 1, however.</p>\n\n<p>The other major difference between <code>imap</code>/<code>imap_unordered</code> and <code>map</code>/<code>map_async</code>, is that with <code>imap</code>/<code>imap_unordered</code>, you can start receiving results from workers as soon as they're ready, rather than having to wait for all of them to be finished. With <code>map_async</code>, an <code>AsyncResult</code> is returned right away, but you can't actually retrieve results from that object until all of them have been processed, at which points it returns the same list that <code>map</code> does (<code>map</code> is actually implemented internally as <code>map_async(...).get()</code>). There's no way to get partial results; you either have the entire result, or nothing.</p>\n\n<p><code>imap</code> and <code>imap_unordered</code> both return iterables right away. With <code>imap</code>, the results will be yielded from the iterable as soon as they're ready, while still preserving the ordering of the input iterable. With <code>imap_unordered</code>, results will be yielded as soon as they're ready, regardless of the order of the input iterable. So, say you have this:</p>\n\n<pre><code>import multiprocessing\nimport time\n\ndef func(x):\n    time.sleep(x)\n    return x + 2\n\nif __name__ == \"__main__\":    \n    p = multiprocessing.Pool()\n    start = time.time()\n    for x in p.imap(func, [1,5,3]):\n        print(\"{} (Time elapsed: {}s)\".format(x, int(time.time() - start)))\n</code></pre>\n\n<p>This will output:</p>\n\n<pre><code>3 (Time elapsed: 1s)\n7 (Time elapsed: 5s)\n5 (Time elapsed: 5s)\n</code></pre>\n\n<p>If you use <code>p.imap_unordered</code> instead of <code>p.imap</code>, you'll see:</p>\n\n<pre><code>3 (Time elapsed: 1s)\n5 (Time elapsed: 3s)\n7 (Time elapsed: 5s)\n</code></pre>\n\n<p>If you use <code>p.map</code> or <code>p.map_async().get()</code>, you'll see:</p>\n\n<pre><code>3 (Time elapsed: 5s)\n7 (Time elapsed: 5s)\n5 (Time elapsed: 5s)\n</code></pre>\n\n<p>So, the primary reasons to use <code>imap</code>/<code>imap_unordered</code> over <code>map_async</code> are:</p>\n\n<ol>\n<li>Your iterable is large enough that converting it to a list would cause you to run out of/use too much memory.</li>\n<li>You want to be able to start processing the results before <em>all</em> of them are completed.</li>\n</ol>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I need a cross platform method of determining the MAC address of a computer at run time.  For windows the 'wmi' module can be used and the only method under Linux I could find was to run ifconfig and run a regex across its output.  I don't like using a package that only works on one OS, and parsing the output of another program doesn't seem very elegant not to mention error prone. </p>\n\n<p>Does anyone know a cross platform method (windows and linux) method to get the MAC address?    If not, does anyone know any more elegant methods then those I listed above?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Python 2.5 includes an uuid implementation which (in at least one version) needs the mac address.  You can import the mac finding function into your own code easily:</p>\n\n<pre><code>from uuid import getnode as get_mac\nmac = get_mac()\n</code></pre>\n\n<p>The return value is the mac address as 48 bit integer.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is there a way to programmatically force a Python script to drop into a REPL at an arbitrary point in its execution, even if the script was launched from the command line?</p>\n\n<p>I'm writing a quick and dirty plotting program, which I want to read data from stdin or a file, plot it, and then drop into the REPL to allow for the plot to be customized.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You could try using the interactive option for python:</p>\n\n<pre><code>python -i program.py\n</code></pre>\n\n<p>This will execute the code in program.py, then go to the REPL.  Anything you define or import in the top level of program.py will be available.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>If I have a list of <code>users</code> say <code>[\"Sam\", \"Bob\", \"Joe\"]</code>, I want to do something where I can output in my jinja template file:</p>\n\n<pre><code>{% for user in userlist %}\n    &lt;a href=\"/profile/{{ user }}/\"&gt;{{ user }}&lt;/a&gt;\n    {% if !loop.last %}\n        , \n    {% endif %}\n{% endfor %}   \n</code></pre>\n\n<p>I want to make the output template be:</p>\n\n<pre><code>Sam, Bob, Joe\n</code></pre>\n\n<p>I tried the above code to check if it was on the last iteration of the loop and if not, then don't insert a comma, but it does not work. How do I do this?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You want your <code>if</code> check to be:</p>\n\n<pre><code>{% if not loop.last %}\n    ,\n{% endif %}\n</code></pre>\n\n<p>Note that you can also shorten the code by using <a href=\"http://jinja.pocoo.org/docs/2.9/templates/#if-expression\" rel=\"noreferrer\">If Expression</a>:</p>\n\n<pre><code>{{ \",\" if not loop.last }}\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I want to be able to list only the directories inside some folder.\nThis means I don't want filenames listed, nor do I want additional sub-folders.</p>\n\n<p>Let's see if an example helps. In the current directory we have:</p>\n\n<pre><code>&gt;&gt;&gt; os.listdir(os.getcwd())\n['cx_Oracle-doc', 'DLLs', 'Doc', 'include', 'Lib', 'libs', 'LICENSE.txt', 'mod_p\nython-wininst.log', 'NEWS.txt', 'pymssql-wininst.log', 'python.exe', 'pythonw.ex\ne', 'README.txt', 'Removemod_python.exe', 'Removepymssql.exe', 'Scripts', 'tcl',\n 'Tools', 'w9xpopen.exe']\n</code></pre>\n\n<p>However, I don't want filenames listed. Nor do I want sub-folders such as \\Lib\\curses. Essentially what I want works with the following:</p>\n\n<pre><code>&gt;&gt;&gt; for root, dirnames, filenames in os.walk('.'):\n...     print dirnames\n...     break\n...\n['cx_Oracle-doc', 'DLLs', 'Doc', 'include', 'Lib', 'libs', 'Scripts', 'tcl', 'Tools']\n</code></pre>\n\n<p>However, I'm wondering if there's a simpler way of achieving the same results. I get the impression that using os.walk only to return the top level is inefficient/too much.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Filter the result using os.path.isdir() (and use os.path.join() to get the real path):</p>\n\n<pre><code>&gt;&gt;&gt; [ name for name in os.listdir(thedir) if os.path.isdir(os.path.join(thedir, name)) ]\n['ctypes', 'distutils', 'encodings', 'lib-tk', 'config', 'idlelib', 'xml', 'bsddb', 'hotshot', 'logging', 'doc', 'test', 'compiler', 'curses', 'site-packages', 'email', 'sqlite3', 'lib-dynload', 'wsgiref', 'plat-linux2', 'plat-mac']\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>If I want the maximum value in a list, I can just write <code>max(List)</code>, but what if I also need the index of the maximum value?</p>\n\n<p>I can write something like this:</p>\n\n<pre><code>maximum=0\nfor i,value in enumerate(List):\n    if value&gt;maximum:\n        maximum=value\n        index=i\n</code></pre>\n\n<p>But it looks tedious to me.</p>\n\n<p>And if I write:</p>\n\n<pre><code>List.index(max(List))\n</code></pre>\n\n<p>Then it will iterate the list twice.</p>\n\n<p>Is there a better way?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There are many options, for example:</p>\n\n<pre><code>import operator\nindex, value = max(enumerate(my_list), key=operator.itemgetter(1))\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/2535760/python-try-except-comma-vs-as-in-except\" dir=\"ltr\">Python try\u2026except comma vs 'as' in except</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    4 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>In python, there are two ways to catch an exception </p>\n\n<pre><code>except Exception, e:\n\nexcept Exception as e:\n</code></pre>\n\n<p>It seems like 'as e' is the one to use going forward.  In what version of python did this change?  Any idea why?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<blockquote>\n  <p>This PEP introduces changes intended to help eliminate ambiguities in Python's grammar, simplify exception classes, simplify garbage collection for exceptions and reduce the size of the language in Python 3.0.</p>\n</blockquote>\n\n<p><a href=\"http://www.python.org/dev/peps/pep-3110/\" rel=\"noreferrer\">PEP 3110: \"Catching Exceptions in Python 3000\"</a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>The <a href=\"http://www.python.org/dev/peps/pep-0008/#imports\">python style guide</a> suggests to group imports like this:</p>\n\n<blockquote>\n  <p>Imports should be grouped in the following order:</p>\n  \n  <ol>\n  <li>standard library imports</li>\n  <li>related third party imports</li>\n  <li>local application/library specific imports</li>\n  </ol>\n</blockquote>\n\n<p>However, it does not mention anything how the two different ways of imports should be laid out:</p>\n\n<pre><code>from foo import bar\nimport foo\n</code></pre>\n\n<p>There are multiple ways to sort them (let's assume all those import belong to the same group):</p>\n\n<ul>\n<li><p>first <code>from..import</code>, then <code>import</code></p>\n\n<pre><code>from g import gg\nfrom x import xx\nimport abc\nimport def\nimport x\n</code></pre></li>\n<li><p>first <code>import</code>, then <code>from..import</code></p>\n\n<pre><code>import abc\nimport def\nimport x\nfrom g import gg\nfrom x import xx\n</code></pre></li>\n<li><p>alphabetic order by module name, ignoring the kind of import</p>\n\n<pre><code>import abc\nimport def\nfrom g import gg\nimport x\nfrom xx import xx\n</code></pre></li>\n</ul>\n\n<p>PEP8 does not mention the preferred order for this and the \"cleanup imports\" features some IDEs have probably just do whatever the developer of that feature preferred.</p>\n\n<p><strong>I'm looking for another PEP clarifying this or a relevant comment/email from the <a href=\"http://en.wikipedia.org/wiki/Guido_van_Rossum\">BDFL</a></strong> (or another Python core developer). <em>Please don't post subjective answers stating your own preference.</em></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Imports are generally sorted alphabetically and described in various places beside PEP 8.</p>\n\n<p><strong>Alphabetically sorted modules are quicker to read and searchable</strong>. After all python is all about readability.\nAlso It is easier to verify that something is imported, and avoids duplicated imports</p>\n\n<p>There is nothing available in PEP 8 regarding sorting.So its all about choice what you use.</p>\n\n<p>According to few references from reputable sites and repositories also popularity, Alphabetical ordering is the way.</p>\n\n<p>for eg like this:</p>\n\n<pre><code>import httplib\nimport logging\nimport random\nimport StringIO\nimport time\nimport unittest\nfrom nova.api import openstack\nfrom nova.auth import users\nfrom nova.endpoint import cloud\n</code></pre>\n\n<p>OR</p>\n\n<pre><code>import a_standard\nimport b_standard\n\nimport a_third_party\nimport b_third_party\n\nfrom a_soc import f\nfrom a_soc import g\nfrom b_soc import d\n</code></pre>\n\n<p>Reddit official repository also states that, In general PEP-8 import ordering should be used. However there are a few additions which is</p>\n\n<pre><code>for each imported group the order of imports should be:\nimport &lt;package&gt;.&lt;module&gt; style lines in alphabetical order\nfrom &lt;package&gt;.&lt;module&gt; import &lt;symbol&gt; style in alphabetical order\n</code></pre>\n\n<p>References:</p>\n\n<ul>\n<li><a href=\"https://code.google.com/p/soc/wiki/PythonStyleGuide\" rel=\"noreferrer\">https://code.google.com/p/soc/wiki/PythonStyleGuide</a></li>\n<li><a href=\"https://github.com/reddit/reddit/wiki/PythonImportGuidelines\" rel=\"noreferrer\">https://github.com/reddit/reddit/wiki/PythonImportGuidelines</a></li>\n<li><a href=\"http://docs.openstack.org/developer/hacking/\" rel=\"noreferrer\">http://docs.openstack.org/developer/hacking/</a></li>\n<li><a href=\"http://developer.plone.org/reference_manuals/external/plone.api/contribute/conventions.html#grouping-and-sorting\" rel=\"noreferrer\">http://developer.plone.org/reference_manuals/external/plone.api/contribute/conventions.html#grouping-and-sorting</a></li>\n</ul>\n\n<p>PS: the <a href=\"https://pypi.python.org/pypi/isort/\" rel=\"noreferrer\">isort utility</a> automatically sorts your imports.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm building an app on Google App Engine. I'm incredibly new to Python and have been beating my head against the following problem for the past 3 days.</p>\n\n<p>I have a class to represent an RSS Feed and in this class I have a method called setUrl. Input to this method is a URL. </p>\n\n<p>I'm trying to use the re python module to validate off of the RFC 3986 Reg-ex (<a href=\"http://www.ietf.org/rfc/rfc3986.txt\" rel=\"noreferrer\">http://www.ietf.org/rfc/rfc3986.txt</a>)</p>\n\n<p>Below is a snipped which <em>should</em> work? </p>\n\n<pre><code>p = re.compile('^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?')\nm = p.match(url)\nif m:\n  self.url = url\n  return url\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>An easy way to parse (and validate) URL's is the <code>urlparse</code> (<a href=\"https://docs.python.org/2/library/urlparse.html\" rel=\"noreferrer\">py2</a>, <a href=\"https://docs.python.org/3.0/library/urllib.parse.html\" rel=\"noreferrer\">py3</a>) module.  </p>\n\n<p>A regex is too much work.</p>\n\n<hr>\n\n<p>There's no \"validate\" method because almost anything is a valid URL.  There are some punctuation rules for splitting it up.  Absent any punctuation, you still have a valid URL.</p>\n\n<p>Check the RFC carefully and see if you can construct an \"invalid\" URL.  The rules are very flexible.  </p>\n\n<p>For example <code>:::::</code> is a valid URL.  The path is <code>\":::::\"</code>.  A pretty stupid filename, but a valid filename.</p>\n\n<p>Also, <code>/////</code> is a valid URL.  The netloc (\"hostname\") is <code>\"\"</code>.  The path is <code>\"///\"</code>.  Again, stupid.  Also valid.  This URL normalizes to <code>\"///\"</code> which is the equivalent.</p>\n\n<p>Something like <code>\"bad://///worse/////\"</code> is perfectly valid.  Dumb but valid.</p>\n\n<p><strong>Bottom Line</strong>.  Parse it, and look at the pieces to see if they're displeasing in some way.  </p>\n\n<p>Do you want the scheme to always be \"http\"?  Do you want the netloc to always be \"www.somename.somedomain\"?  Do you want the path to look unix-like?  Or windows-like?  Do you want to remove the query string?  Or preserve it?</p>\n\n<p>These are not RFC-specified validations.  These are validations unique to your application.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I find myself typing <code>import numpy as np</code> almost every single time I fire up the python interpreter. How do I set up the python or ipython interpreter so that numpy is automatically imported?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use the environment variable <a href=\"http://docs.python.org/using/cmdline.html#envvar-PYTHONSTARTUP\" rel=\"noreferrer\">PYTHONSTARTUP</a>. From the official documentation:</p>\n\n<blockquote>\n  <p>If this is the name of a readable file, the Python commands in that\n  file are executed before the first prompt is displayed in interactive\n  mode. The file is executed in the same namespace where interactive\n  commands are executed so that objects defined or imported in it can be\n  used without qualification in the interactive session.</p>\n</blockquote>\n\n<p>So, just create a python script with the import statement and point the environment variable to it. Having said that, remember that 'Explicit is always better than implicit', so don't rely on this behavior for production scripts.</p>\n\n<p>For Ipython, see <a href=\"http://ipython.readthedocs.io/en/stable/config/intro.html\" rel=\"noreferrer\">this</a> tutorial on how to make a ipython_config file</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'd like to make a Python package containing some <a href=\"http://cython.org/\" rel=\"noreferrer\">Cython</a> code. I've got the the Cython code working nicely. However, now I want to know how best to package it.</p>\n\n<p>For most people who just want to install the package, I'd like to include the <code>.c</code> file that Cython creates, and arrange for <code>setup.py</code> to compile that to produce the module. Then the user doesn't need Cython installed in order to install the package.</p>\n\n<p>But for people who may want to modify the package, I'd also like to provide the Cython <code>.pyx</code> files, and somehow also allow for <code>setup.py</code> to build them using Cython (so those users <em>would</em> need Cython installed).</p>\n\n<p>How should I structure the files in the package to cater for both these scenarios?</p>\n\n<p>The <a href=\"http://docs.cython.org/src/userguide/source_files_and_compilation.html#distributing-cython-modules\" rel=\"noreferrer\">Cython documentation gives a little guidance</a>. But it doesn't say how to make a single <code>setup.py</code> that handles both the with/without Cython cases.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I've done this myself now, in a Python package <a href=\"http://pypi.python.org/pypi/simplerandom\" rel=\"noreferrer\"><code>simplerandom</code></a> (<a href=\"http://bitbucket.org/cmcqueen1975/simplerandom\" rel=\"noreferrer\">BitBucket repo</a> - EDIT: now <a href=\"https://github.com/cmcqueen/simplerandom\" rel=\"noreferrer\">github</a>) (I don't expect this to be a popular package, but it was a good chance to learn Cython).</p>\n\n<p>This method relies on the fact that building a <code>.pyx</code> file with <code>Cython.Distutils.build_ext</code> (at least with Cython version 0.14) always seems to create a <code>.c</code> file in the same directory as the source <code>.pyx</code> file.</p>\n\n<p>Here is a cut-down version of <code>setup.py</code> which I hope shows the essentials:</p>\n\n<pre><code>from distutils.core import setup\nfrom distutils.extension import Extension\n\ntry:\n    from Cython.Distutils import build_ext\nexcept ImportError:\n    use_cython = False\nelse:\n    use_cython = True\n\ncmdclass = { }\next_modules = [ ]\n\nif use_cython:\n    ext_modules += [\n        Extension(\"mypackage.mycythonmodule\", [ \"cython/mycythonmodule.pyx\" ]),\n    ]\n    cmdclass.update({ 'build_ext': build_ext })\nelse:\n    ext_modules += [\n        Extension(\"mypackage.mycythonmodule\", [ \"cython/mycythonmodule.c\" ]),\n    ]\n\nsetup(\n    name='mypackage',\n    ...\n    cmdclass = cmdclass,\n    ext_modules=ext_modules,\n    ...\n)\n</code></pre>\n\n<p>I also edited <code>MANIFEST.in</code> to ensure that <code>mycythonmodule.c</code> is included in a source distribution (a source distribution that is created with <code>python setup.py sdist</code>):</p>\n\n<pre><code>...\nrecursive-include cython *\n...\n</code></pre>\n\n<p>I don't commit <code>mycythonmodule.c</code> to version control 'trunk' (or 'default' for Mercurial). When I make a release, I need to remember to do a <code>python setup.py build_ext</code> first, to ensure that <code>mycythonmodule.c</code> is present and up-to-date for the source code distribution. I also make a release branch, and commit the C file into the branch. That way I have a historical record of the C file that was distributed with that release.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am trying to use one-time passwords that can be generated using <a href=\"https://market.android.com/details?id=com.google.android.apps.authenticator\" rel=\"noreferrer\">Google Authenticator application</a>.</p>\n\n<h2>What Google Authenticator does</h2>\n\n<p>Basically, Google Authenticator implements two types of passwords:</p>\n\n<ul>\n<li><strong>HOTP</strong> - HMAC-based One-Time Password, which means the password is changed with each call, in compliance to <a href=\"http://tools.ietf.org/html/rfc4226\" rel=\"noreferrer\">RFC4226</a>, and</li>\n<li><strong>TOTP</strong> - Time-based One-Time Password, which changes for every 30-seconds period (as far as I know).</li>\n</ul>\n\n<p>Google Authenticator is also available as Open Source here: <a href=\"http://code.google.com/p/google-authenticator/\" rel=\"noreferrer\">code.google.com/p/google-authenticator</a></p>\n\n<h2>Current code</h2>\n\n<p>I was looking for existing solutions to generate HOTP and TOTP passwords, but did not find much. The code I have is the following snippet responsible for generating HOTP:</p>\n\n<pre><code>import hmac, base64, struct, hashlib, time\n\ndef get_token(secret, digest_mode=hashlib.sha1, intervals_no=None):\n    if intervals_no == None:\n        intervals_no = int(time.time()) // 30\n    key = base64.b32decode(secret)\n    msg = struct.pack(\"&gt;Q\", intervals_no)\n    h = hmac.new(key, msg, digest_mode).digest()\n    o = ord(h[19]) &amp; 15\n    h = (struct.unpack(\"&gt;I\", h[o:o+4])[0] &amp; 0x7fffffff) % 1000000\n    return h\n</code></pre>\n\n<p>The problem I am facing is that the password I generate using the above code is not the same as generated using Google Authenticator app for Android. Even though I tried multiple <code>intervals_no</code> values (exactly first 10000, beginning with <code>intervals_no = 0</code>), with <code>secret</code> being equal to key provided within the GA app.</p>\n\n<h2>Questions I have</h2>\n\n<p>My questions are:</p>\n\n<ol>\n<li>What am I doing wrong?</li>\n<li>How can I generate HOTP and/or TOTP in Python?</li>\n<li>Are there any existing Python libraries for this?</li>\n</ol>\n\n<p>To sum up: please give me any clues that will help me implement Google Authenticator authentication within my Python code.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I wanted to set a bounty on my question, but I have succeeded in creating solution. My problem seemed to be connected with incorrect value of <code>secret</code> key (it must be correct parameter for <code>base64.b32decode()</code> function).</p>\n\n<p>Below I post full working solution with explanation on how to use it.</p>\n\n<h2>Code</h2>\n\n<p>The following code is enough. I have also uploaded it to GitHub as separate module called <em>onetimepass</em> (available here: <a href=\"https://github.com/tadeck/onetimepass\">https://github.com/tadeck/onetimepass</a>).</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>import hmac, base64, struct, hashlib, time\n\ndef get_hotp_token(secret, intervals_no):\n    key = base64.b32decode(secret, True)\n    msg = struct.pack(\"&gt;Q\", intervals_no)\n    h = hmac.new(key, msg, hashlib.sha1).digest()\n    o = ord(h[19]) &amp; 15\n    h = (struct.unpack(\"&gt;I\", h[o:o+4])[0] &amp; 0x7fffffff) % 1000000\n    return h\n\ndef get_totp_token(secret):\n    return get_hotp_token(secret, intervals_no=int(time.time())//30)\n</code></pre>\n\n<p>It has two functions:</p>\n\n<ul>\n<li><code>get_hotp_token()</code> generates one-time token (that should invalidate after single use),</li>\n<li><code>get_totp_token()</code> generates token based on time (changed in 30-second intervals),</li>\n</ul>\n\n<h2>Parameters</h2>\n\n<p>When it comes to parameters:</p>\n\n<ul>\n<li><code>secret</code> is a secret value known to server (the above script) and client (Google Authenticator, by providing it as password within application),</li>\n<li><code>intervals_no</code> is the number incremeneted after each generation of the token (this should be probably resolved on the server by checking some finite number of integers after last successful one checked in the past)</li>\n</ul>\n\n<h2>How to use it</h2>\n\n<ol>\n<li>Generate <code>secret</code> (it must be correct parameter for <code>base64.b32decode()</code>) - preferably 16-char (no <code>=</code> signs), as it surely worked for both script and Google Authenticator.</li>\n<li>Use <code>get_hotp_token()</code> if you want one-time passwords invalidated after each use. In Google Authenticator this type of passwords i  mentioned as based on the counter. For checking it on the server you will need to check several values of <code>intervals_no</code> (as you have no quarantee that user did not generate the pass between the requests for some reason), but not less than the last working <code>intervals_no</code> value (thus you should probably store it somewhere).</li>\n<li>Use <code>get_totp_token()</code>, if you want a token working in 30-second intervals. You have to make sure both systems have correct time set (meaning that they both generate the same Unix timestamp in any given moment in time).</li>\n<li>Make sure to protect yourself from brute-force attack. If time-based password is used, then trying 1000000 values in less than 30 seconds gives 100% chance of guessing the password. In case of HMAC-based passowrds (HOTPs) it seems to be even worse.</li>\n</ol>\n\n<h2>Example</h2>\n\n<p>When using the following code for one-time HMAC-based password:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>secret = 'MZXW633PN5XW6MZX'\nfor i in xrange(1, 10):\n    print i, get_hotp_token(secret, intervals_no=i)\n</code></pre>\n\n<p>you will get the following result:</p>\n\n<pre><code>1 448400\n2 656122\n3 457125\n4 35022\n5 401553\n6 581333\n7 16329\n8 529359\n9 171710\n</code></pre>\n\n<p>which is corresponding to the tokens generated by the Google Authenticator app (except if shorter than 6 signs, app adds zeros to the beginning to reach a length of 6 chars).</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What's a correct and good way to implement <code>__hash__()</code>?</p>\n\n<p>I am talking about the function that returns a hashcode that is then used to insert objects into hashtables aka dictionaries.</p>\n\n<p>As <code>__hash__()</code> returns an integer and is used for \"binning\" objects into hashtables I assume that the values of the returned integer should be uniformly distributed for common data (to minimize collisions).\nWhat's a good practice to get such values? Are collisions a problem?\nIn my case I have a small class which acts as a container class holding some ints, some floats and a string.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>An easy, correct way to implement <code>__hash__()</code> is to use a key tuple. It won't be as fast as a specialized hash, but if you need that then you should probably implement the type in C.</p>\n\n<p>Here's an example of using a key for hash and equality:</p>\n\n<pre><code>class A(object):\n    def __key(self):\n        return (self.attr_a, self.attr_b, self.attr_c)\n\n    def __eq__(x, y):\n        return x.__key() == y.__key()\n\n    def __hash__(self):\n        return hash(self.__key())\n</code></pre>\n\n<p>Also, the <a href=\"https://docs.python.org/3.5/reference/datamodel.html#object.__hash__\" rel=\"noreferrer\">documentation of <code>__hash__</code></a> has more information, that may be valuable in some particular circumstances.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Python 2.x has two ways to overload comparison operators, <a href=\"http://docs.python.org/2.6/reference/datamodel.html#object.__cmp__\" rel=\"nofollow noreferrer\"><code>__cmp__</code></a> or the \"rich comparison operators\" such as <a href=\"http://docs.python.org/2.6/reference/datamodel.html#object.__lt__\" rel=\"nofollow noreferrer\"><code>__lt__</code></a>.  <strong>The rich comparison overloads are said to be preferred, but why is this so?</strong></p>\n\n<p>Rich comparison operators are simpler to implement each, but you must implement several of them with nearly identical logic.  However, if you can use the builtin <code>cmp</code> and tuple ordering, then <code>__cmp__</code> gets quite simple and fulfills all the comparisons:</p>\n\n<pre><code>class A(object):\n  def __init__(self, name, age, other):\n    self.name = name\n    self.age = age\n    self.other = other\n  def __cmp__(self, other):\n    assert isinstance(other, A) # assumption for this example\n    return cmp((self.name, self.age, self.other),\n               (other.name, other.age, other.other))\n</code></pre>\n\n<p>This simplicity seems to meet my needs much better than overloading all 6(!) of the rich comparisons.  (However, you can get it down to \"just\" 4 if you rely on the \"swapped argument\"/reflected behavior, but that results in a net increase of complication, in my humble opinion.)</p>\n\n<p><strong>Are there any unforeseen pitfalls I need to be made aware of if I only overload <code>__cmp__</code>?</strong></p>\n\n<p>I understand the <code>&lt;</code>, <code>&lt;=</code>, <code>==</code>, etc. operators can be overloaded for other purposes, and can return any object they like.  I am not asking about the merits of that approach, but only about differences when using these operators for comparisons in the same sense that they mean for numbers.</p>\n\n<p><em>Update:</em> As Christopher <a href=\"https://stackoverflow.com/questions/1061283/style-why-lt-instead-of-cmp/1061323#1061323\">pointed out</a>, <code>cmp</code> is disappearing in 3.x. <strong>Are there any alternatives that make implementing comparisons as easy as the above <code>__cmp__</code>?</strong></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Yep, it's easy to implement everything in terms of e.g. <code>__lt__</code> with a mixin class (or a metaclass, or a class decorator if your taste runs that way).</p>\n\n<p>For example:</p>\n\n<pre><code>class ComparableMixin:\n  def __eq__(self, other):\n    return not self&lt;other and not other&lt;self\n  def __ne__(self, other):\n    return self&lt;other or other&lt;self\n  def __gt__(self, other):\n    return other&lt;self\n  def __ge__(self, other):\n    return not self&lt;other\n  def __le__(self, other):\n    return not other&lt;self\n</code></pre>\n\n<p>Now your class can define just <code>__lt__</code> and multiply inherit from ComparableMixin (after whatever other bases it needs, if any). A class decorator would be quite similar, just inserting similar functions as attributes of the new class it's decorating (the result might be microscopically faster at runtime, at equally minute cost in terms of memory).</p>\n\n<p>Of course, if your class has some particularly fast way to implement (e.g.) <code>__eq__</code> and <code>__ne__</code>, it should define them directly so the mixin's versions are not use (for example, that is the case for <code>dict</code>) -- in fact <code>__ne__</code> might well be defined to facilitate that as:</p>\n\n<pre><code>def __ne__(self, other):\n  return not self == other\n</code></pre>\n\n<p>but in the code above I wanted to keep the pleasing symmetry of only using <code>&lt;</code>;-).\nAs to why <code>__cmp__</code> had to go, since we <em>did</em> have <code>__lt__</code> and friends, why keep another, different way to do exactly the same thing around?  It's just so much dead-weight in every Python runtime (Classic, Jython, IronPython, PyPy, ...).  The code that <strong>definitely</strong> won't have bugs is the code that isn't there -- whence Python's principle that there ought to be ideally one obvious way to perform a task (C has the same principle in the \"Spirit of C\" section of the ISO standard, btw).</p>\n\n<p>This doesn't mean we go out of our way to prohibit things (e.g., near-equivalence between mixins and class decorators for some uses), but it definitely <strong>does</strong> mean that we don't like to carry around code in the compilers and/or runtimes that redundantly exists just to support multiple equivalent approaches to perform exactly the same task.</p>\n\n<p>Further edit: there's actually an even better way to provide comparison AND hashing for many classes, including that in the question -- a <code>__key__</code> method, as I mentioned on my comment to the question. Since I never got around to writing the PEP for it, you must currently implement it with a Mixin (&amp;c) if you like it:</p>\n\n<pre><code>class KeyedMixin:\n  def __lt__(self, other):\n    return self.__key__() &lt; other.__key__()\n  # and so on for other comparators, as above, plus:\n  def __hash__(self):\n    return hash(self.__key__())\n</code></pre>\n\n<p>It's a very common case for an instance's comparisons with other instances to boil down to comparing a tuple for each with a few fields -- and then, hashing should be implemented on exactly the same basis. The <code>__key__</code> special method addresses that need directly.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I use <a href=\"http://docs.python.org/library/profile.html\" rel=\"nofollow noreferrer\">cProfile</a> now but I find it tedious to write pstats code just to query the statistics data.</p>\n\n<p>I'm looking for a visual tool that shows me what my Python code is doing in terms of CPU time and memory allocation.</p>\n\n<p>Some examples from the Java world are <a href=\"https://visualvm.dev.java.net/features.html\" rel=\"nofollow noreferrer\">visualvm</a> and <a href=\"http://www.ej-technologies.com/products/jprofiler/top10.html\" rel=\"nofollow noreferrer\">JProfiler</a>.</p>\n\n<ul>\n<li>Does something like this exist?</li>\n<li>Is there an IDE that does this?</li>\n<li>Would <a href=\"http://developer.apple.com/mac/library/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/ViewingandAnalyzingData/ViewingandAnalyzingData.html#//apple_ref/doc/uid/TP40004652-CH5-SW2\" rel=\"nofollow noreferrer\">dtrace</a> help?</li>\n</ul>\n\n<p>I know about <a href=\"https://stackoverflow.com/questions/1896032/using-cprofile-results-with-kcachegrind\">KCachegrind</a> for Linux, but I would prefer something that I can run on Windows/Mac without installing KDE.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>A friend and I have written a Python profile viewer called <a href=\"http://jiffyclub.github.io/snakeviz/\">SnakeViz</a> that runs in a web browser. If you are already successfully using <a href=\"http://www.vrplumber.com/programming/runsnakerun/\">RunSnakeRun</a> SnakeViz may not add that much value, but SnakeViz is much easier to install.</p>\n\n<p>Edit: SnakeViz supports Python 2 and 3 and works on all major systems.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Given an arbitrary python object, what's the best way to determine whether it is a number? Here <code>is</code> is defined as <code>acts like a number in certain circumstances</code>.</p>\n\n<p>For example, say you are writing a vector class. If given another vector, you want to find the dot product. If given a scalar, you want to scale the whole vector.</p>\n\n<p>Checking if something is <code>int</code>, <code>float</code>, <code>long</code>, <code>bool</code> is annoying and doesn't cover user-defined objects that might act like numbers. But, checking for <code>__mul__</code>, for example, isn't good enough because the vector class I just described would define <code>__mul__</code>, but it wouldn't be the kind of number I want.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use <code>Number</code> from the <code>numbers</code> module to test <code>isinstance(n, Number)</code> (available since 2.6).</p>\n\n<pre><code>&gt;&gt;&gt; from numbers import Number\n... from decimal import Decimal\n... from fractions import Fraction\n... for n in [2, 2.0, Decimal('2.0'), complex(2,0), Fraction(2,1), '2']:\n...     print '%15s %s' % (n.__repr__(), isinstance(n, Number))\n              2 True\n            2.0 True\n Decimal('2.0') True\n         (2+0j) True\n Fraction(2, 1) True\n            '2' False\n</code></pre>\n\n<p>This is, of course, contrary to duck typing.  If you are more concerned about how an object <em>acts</em> rather than what it <em>is</em>, perform your operations as if you have a number and use exceptions to tell you otherwise.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What is the best way to call java from python?\n(jython and RPC are not an option for me).</p>\n\n<p>I've heard of JCC: <a href=\"http://pypi.python.org/pypi/JCC/1.9\" rel=\"noreferrer\">http://pypi.python.org/pypi/JCC/1.9</a>\na C++ code generator for calling Java from C++/Python\nBut this requires compiling every possible call; I would prefer another solution.</p>\n\n<p>I've hear about JPype: <a href=\"http://jpype.sourceforge.net/\" rel=\"noreferrer\">http://jpype.sourceforge.net/</a> \ntutorial: <a href=\"http://www.slideshare.net/onyame/mixing-python-and-java\" rel=\"noreferrer\">http://www.slideshare.net/onyame/mixing-python-and-java</a></p>\n\n<pre><code>import jpype \njpype.startJVM(path to jvm.dll, \"-ea\") \njavaPackage = jpype.JPackage(\"JavaPackageName\") \njavaClass = javaPackage.JavaClassName \njavaObject = javaClass() \njavaObject.JavaMethodName() \njpype.shutdownJVM() \n</code></pre>\n\n<p>This looks like what I need.\nHowever, the last release is from Jan 2009 and I see people failing to compile JPype.</p>\n\n<p>Is JPype a dead project?</p>\n\n<p>Are there any other alternatives?</p>\n\n<p>Regards,\nDavid</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here is my summary of this problem: 5 Ways of Calling Java from Python</p>\n\n<p><a href=\"http://baojie.org/blog/2014/06/16/call-java-from-python/\" rel=\"nofollow noreferrer\">http://baojie.org/blog/2014/06/16/call-java-from-python/</a></p>\n\n<p>Short answer: Jpype works pretty well and is proven in many projects (such as python-boilerpipe), but Pyjnius is faster and simpler than JPype</p>\n\n<p>I have tried Pyjnius/Jnius, JCC, javabridge, Jpype and Py4j.</p>\n\n<p>Py4j is a bit hard to use, as you need to start a gateway, adding another layer of fragility.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a script and I want one function to run at the same time as the other.</p>\n\n<p>Example code I have looked at:</p>\n\n<pre><code>import threading\n\n\ndef MyThread ( threading.thread ):\n\n  doing something........\n\ndef MyThread2 ( threading.thread ):\n\n  doing something........\n\nMyThread().start()\nMyThread2().start()\n</code></pre>\n\n<p>I am having trouble getting this working. I would prefer to get this going using a threaded function rather than a class.</p>\n\n<p>Thanks for any help.</p>\n\n<p>This is the working script, Thanks for all the help.</p>\n\n<pre><code>class myClass():\n\n    def help(self):\n\n        os.system('./ssh.py')\n\n    def nope(self):\n        a = [1,2,3,4,5,6,67,78]\n        for i in a:\n            print i\n            sleep(1)\n\n\nif __name__ == \"__main__\":\n    Yep = myClass()\n    thread = Thread(target = Yep.help)\n    thread2 = Thread(target = Yep.nope)\n    thread.start()\n    thread2.start()\n    thread.join()\n    print 'Finished'\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You don't need to use a subclass of <code>Thread</code> to make this work - take a look at the simple example I'm posting below to see how:</p>\n\n<pre><code>from threading import Thread\nfrom time import sleep\n\ndef threaded_function(arg):\n    for i in range(arg):\n        print \"running\"\n        sleep(1)\n\n\nif __name__ == \"__main__\":\n    thread = Thread(target = threaded_function, args = (10, ))\n    thread.start()\n    thread.join()\n    print \"thread finished...exiting\"\n</code></pre>\n\n<p>Here I show how to use the threading module to create a thread which invokes a normal function as its target.  You can see how I can pass whatever arguments I need to it in the thread constructor.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a list where I want to replace values with None where condition() returns True.</p>\n\n<pre><code>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</code></pre>\n\n<p>For example, if condition checks bool(item%2) should return:</p>\n\n<pre><code>[None, 1, None, 3, None, 5, None, 7, None, 9, None]\n</code></pre>\n\n<p>What is the most efficient way to do this?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The most efficient:</p>\n\n<pre><code>items = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfor index, item in enumerate(items):\n    if not (item % 2):\n        items[index] = None\n</code></pre>\n\n<p>The easiest to read:</p>\n\n<pre><code>new_items = [x if x % 2 else None for x in items]\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Directions from my supervisor:\n\"I want to avoid putting any logic in the <code>models.py</code>.  From here on out, let's use that as only classes for accessing the database, and keep all logic in external classes that use the models classes, or wrap them.\"</p>\n\n<p>I feel like this is the wrong way to go. I feel that keeping logic out of the models just to keep the file small is a bad idea. If the logic is best in the model, that's where it really should go regardless of file size.</p>\n\n<p>So is there a simple way to just use includes? In PHP-speak, I'd like to propose to the supervisor that we just have <code>models.py</code> include() the model classes from other places. Conceptually, this would allow the models to have all the logic we want, yet keep file size down via increasing the number of files (which leads to less revision control problems like conflicts, etc.).</p>\n\n<p>So, is there a simple way to remove model classes from the models.py file, but still have the models work with all of the Django tools? Or, is there a completely different yet elegant solution to the general problem of a \"large\" models.py file? Any input would be appreciated.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Django is designed to let you build many small applications instead of one big application.</p>\n\n<p>Inside every large application are many small applications struggling to be free.</p>\n\n<p>If your <code>models.py</code> feels big, you're doing too much.  Stop.  Relax.  Decompose.</p>\n\n<p>Find smaller, potentially reusable small application components, or pieces.  You don't have to <em>actually</em> reuse them.  Just think about them as potentially reusable.</p>\n\n<p>Consider your upgrade paths and decompose applications that you might want to replace some day.  You don't have to <em>actually</em> replace them, but you can consider them as a stand-alone \"module\" of programming that might get replaced with something cooler in the future.</p>\n\n<p>We have about a dozen applications, each <code>model.py</code> is no more than about 400 lines of code.  They're all pretty focused on less than about half-dozen discrete class definitions. (These aren't hard limits, they're observations about our code.)</p>\n\n<p>We decompose early and often.  </p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What's the difference between <code>exit(0)</code> and <code>exit(1)</code> in Python?</p>\n\n<p>I tried looking around but didn't find a specific question on these lines. If it's already been answered, a link would be sufficient.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>0 and 1 are the exit codes.</p>\n\n<p><code>exit(0)</code> means a clean exit without any errors / problems</p>\n\n<p><code>exit(1)</code> means there was some issue / error / problem and that is why the program is exiting.</p>\n\n<p>This is not Python specific and is pretty common. A non-zero exit code is treated as an abnormal exit, and at times, the error code indicates what the problem was. A zero error code means a successful exit.</p>\n\n<p>This is useful for other programs, shell, caller etc. to know what happened with your program and proceed accordingly.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I just updated Python to 2.6.4 on my Mac. \nI installed from the dmg package.</p>\n\n<p>The binary did not seem to correctly set my Python path, so I added <code>'/usr/local/lib/python2.6/site-packages'</code> in <code>.bash_profile</code></p>\n\n<pre><code>&gt;&gt;&gt; pprint.pprint(sys.path)  \n['',\n'/Users/Bryan/work/django-trunk', \n'/usr/local/lib/python2.6/site-packages',  \n'/Library/Frameworks/Python.framework/Versions/2.6/lib/python26.zip',  \n'/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6',  \n'/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/plat-darwin',  \n'/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/plat-mac',  \n'/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/plat-mac/lib-scriptpackages',  \n'/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/lib-tk',  \n'/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/lib-old',  \n'/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/lib-dynload',  \n'/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages']\n</code></pre>\n\n<p>Apparently that is not all the required paths because I can't run iPython.</p>\n\n<pre><code>$ ipython  \nTraceback (most recent call last):  \n  File \"/usr/local/bin/ipython\", line 5, in &lt;module&gt;  \n  from pkg_resources import load_entry_point  \nImportError: No module named `pkg_resources`\n</code></pre>\n\n<p>I've done Google searches and I can't really figure out how to install <code>pkg_resources</code> or make sure it's on the path.</p>\n\n<p>What do I need to do to fix this?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>[UPDATE] TL;DR <code>pkg_resources</code> is provided by either <a href=\"http://pypi.python.org/pypi/distribute/\" rel=\"noreferrer\">Distribute</a> or <a href=\"http://pypi.python.org/pypi/setuptools/\" rel=\"noreferrer\">setuptools</a>. </p>\n\n<p>[UPDATE 2] As announced at PyCon 2013, the <code>Distribute</code> and <code>setuptools</code> projects have re-merged.  <code>Distribute</code> is now deprecated and you should just use the new current <code>setuptools</code>.   Try this:</p>\n\n<pre><code>curl -O https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py\npython ez_setup.py\n</code></pre>\n\n<p>Or, better, use a current <a href=\"https://pypi.python.org/pypi/pip\" rel=\"noreferrer\"><code>pip</code></a> as the high level interface and which will use <code>setuptools</code> under the covers.</p>\n\n<p>[Longer answer for OP's specific problem]:</p>\n\n<p>You don't say in your question but I'm assuming you upgraded from the Apple-supplied Python (2.5 on 10.5 or 2.6.1 on 10.6) or that you upgraded from a python.org Python 2.5.  In any of those cases, the important point is that each Python instance has its own library, including its own site-packages library, which is where additional packages are installed. (And none of them use <code>/usr/local/lib</code> by default, by the way.) That means you'll need to install those additional packages you need for your new python 2.6.  The easiest way to do this is to first ensure that the new python2.6 appears first on your search <code>$PATH</code> (that is, typing <code>python2.6</code> invokes it as expected); the python2.6 installer should have modified your <code>.bash_profile</code> to put its framework bin directory at the front of <code>$PATH</code>.  Then install <code>easy_install</code> using <a href=\"http://pypi.python.org/pypi/setuptools/\" rel=\"noreferrer\">setuptools</a> following the instructions there.  The <code>pkg_resources</code> module is also automatically installed by this step.</p>\n\n<p>Then use the newly-installed version of <code>easy_install</code> (or <code>pip</code>) to install <code>ipython</code>.</p>\n\n<pre><code>easy_install ipython\n</code></pre>\n\n<p>or</p>\n\n<pre><code>pip install ipython\n</code></pre>\n\n<p>It should automatically get installed to the correct <code>site-packages</code> location for that python instance and you should be good to go.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a simple script blah.py (using Python 2):</p>\n\n<pre><code>import sys\nprint sys.argv[1]\n</code></pre>\n\n<p>If I execute my script by:</p>\n\n<pre><code>python c:/..../blah.py argument\n</code></pre>\n\n<p>It prints argument but if I execute script by:</p>\n\n<pre><code>blah.py argument\n</code></pre>\n\n<p>error occurs:</p>\n\n<blockquote>\n  <p>IndexError...</p>\n</blockquote>\n\n<p>So arguments do not pass to script.</p>\n\n<p>python.exe in PATH. Folder with blah.py also in PATH.<br>\npython.exe is default program to execute *.py files.</p>\n\n<p>What is the problem?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>When you execute a script without typing \"python\" in front, you need to know two things about how Windows invokes the program.  First is to find out what kind of file Windows thinks it is: </p>\n\n<pre>\n    C:\\&gt;assoc .py\n    .py=Python.File\n</pre>\n\n<p>Next, you need to know how Windows is executing things with that extension.  It's associated with the file type \"Python.File\", so this command shows what it will be doing:</p>\n\n<pre>\n    C:\\&gt;ftype Python.File\n    Python.File=\"c:\\python26\\python.exe\" \"%1\" %*\n</pre>\n\n<p>So on my machine, when I type \"blah.py foo\", it will execute this exact command, with no difference in results than if I had typed the full thing myself:</p>\n\n<pre>\n    \"c:\\python26\\python.exe\" \"blah.py\" foo\n</pre>\n\n<p>If you type the same thing, including the quotation marks, then you'll get results identical to when you just type \"blah.py foo\".  Now you're in a position to figure out the rest of your problem for yourself.  </p>\n\n<p>(Or post more helpful information in your question, like actual cut-and-paste copies of what you see in the console.  Note that people who do that type of thing get their questions voted up, and they get reputation points, and more people are likely to help them with good answers.)</p>\n\n<h1>Brought In From Comments:</h1>\n\n<p>Even if assoc and ftype display the correct information, it may happen that the arguments are stripped off. What may help in that case is directly fixing the relevant registry keys for Python. Set the </p>\n\n<pre><code>HKEY_CLASSES_ROOT\\Applications\\python26.exe\\shell\\open\\command\n</code></pre>\n\n<p>key to: </p>\n\n<pre><code>\"C:\\Python26\\python26.exe\" \"%1\" %*\n</code></pre>\n\n<p>Likely, previously, <code>%*</code> was missing. Similarly, set </p>\n\n<pre><code> HKEY_CLASSES_ROOT\\py_auto_file\\shell\\open\\command\n</code></pre>\n\n<p>to the same value. See <a href=\"http://eli.thegreenplace.net/2010/12/14/problem-passing-arguments-to-python-scripts-on-windows/\" rel=\"nofollow noreferrer\">http://eli.thegreenplace.net/2010/12/14/problem-passing-arguments-to-python-scripts-on-windows/</a></p>\n\n<p><a href=\"https://i.stack.imgur.com/Dpdzv.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/Dpdzv.png\" alt=\"example registry setting for python.exe\"></a>\n<code>HKEY_CLASSES_ROOT\\Applications\\python.exe\\shell\\open\\command</code> The registry path may vary, use <code>python26.exe</code> or <code>python.exe</code> or whichever is already in the registry.</p>\n\n<p><a href=\"https://i.stack.imgur.com/mFI0X.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/mFI0X.png\" alt=\"enter image description here\"></a>\n<code>HKEY_CLASSES_ROOT\\py_auto_file\\shell\\open\\command</code></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<pre><code>def insert(array):\n    connection=sqlite3.connect('images.db')\n    cursor=connection.cursor()\n    cnt=0\n    while cnt != len(array):\n            img = array[cnt]\n            print(array[cnt])\n            cursor.execute('INSERT INTO images VALUES(?)', (img))\n            cnt+= 1\n    connection.commit()\n    connection.close()\n</code></pre>\n\n<p>I cannot figure out why this is giving me the error, The actual string I am trying to insert is 74 chars long, it's: \"/gifs/epic-fail-photos-there-i-fixed-it-aww-man-the-tire-pressures-low.gif\"</p>\n\n<p>I've tried to str(array[cnt]) before inserting it, but the same issue is happening, the database only has one column, which is a TEXT value.</p>\n\n<p>I've been at it for hours and I cannot figure out what is going on.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You need to pass in a sequence, but you forgot the comma to make your parameters a tuple:</p>\n\n<pre><code>cursor.execute('INSERT INTO images VALUES(?)', (img,))\n</code></pre>\n\n<p>Without the comma, <code>(img)</code> is just a grouped expression, not a tuple, and thus the <code>img</code> string is treated as the input sequence. If that string is 74 characters long, then Python sees that as 74 separate bind values, each one character long.</p>\n\n<pre><code>&gt;&gt;&gt; len(img)\n74\n&gt;&gt;&gt; len((img,))\n1\n</code></pre>\n\n<p>If you find it easier to read, you can also use a list literal:</p>\n\n<pre><code>cursor.execute('INSERT INTO images VALUES(?)', [img])\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is there a Pythonic way to have only one instance of a program running? </p>\n\n<p>The only reasonable solution I've come up with is trying to run it as a server on some port, then second program trying to bind to same port - fails. But it's not really a great idea, maybe there's something more lightweight than this?  </p>\n\n<p>(Take into consideration that program is expected to fail sometimes, i.e. segfault - so things like \"lock file\" won't work)</p>\n\n<p><b>Update</b>: the solutions offered are much more complex and less reliant than just having a port occupied with a non-existent server, so I'd have to go with that one.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The following code should do the job, it is cross-platform and runs on Python 2.4-3.2. I tested it on Windows, OS X and Linux.</p>\n\n<pre><code>from tendo import singleton\nme = singleton.SingleInstance() # will sys.exit(-1) if other instance is running\n</code></pre>\n\n<p>The latest code version is available <a href=\"https://github.com/pycontribs/tendo/blob/master/tendo/singleton.py\" rel=\"noreferrer\">singleton.py</a>. Please <a href=\"https://github.com/pycontribs/tendo/issues\" rel=\"noreferrer\">file bugs here</a>.</p>\n\n<p>You can install tend using one of the following methods:</p>\n\n<ul>\n<li><code>easy_install tendo</code></li>\n<li><code>pip install tendo</code></li>\n<li>manually by getting it from <a href=\"http://pypi.python.org/pypi/tendo\" rel=\"noreferrer\">http://pypi.python.org/pypi/tendo</a></li>\n</ul>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/1060279/iterating-through-a-range-of-dates-in-python\" dir=\"ltr\">Iterating through a range of dates in Python</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    15 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>For example:</p>\n\n<pre><code>from datetime import date\n\nd1 = date(2008,8,15)\nd2 = date(2008,9,15)\n</code></pre>\n\n<p>I'm looking for simple code to print all dates in-between:</p>\n\n<pre><code>2008,8,15  \n2008,8,16  \n2008,8,17  \n...  \n2008,9,14  \n2008,9,15\n</code></pre>\n\n<p>Thanks</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I came up with this:</p>\n\n<pre><code>from datetime import date, timedelta\n\nd1 = date(2008, 8, 15)  # start date\nd2 = date(2008, 9, 15)  # end date\n\ndelta = d2 - d1         # timedelta\n\nfor i in range(delta.days + 1):\n    print(d1 + timedelta(days=i))\n</code></pre>\n\n<p>The output:</p>\n\n<pre><code>2008-08-15\n2008-08-16\n...\n2008-09-13\n2008-09-14\n2008-09-15\n</code></pre>\n\n<p>Your question asks for dates in-between but I believe you meant including the start and end points, so they are included.  To remove the end date, delete the +1 at the end of the for loop.  To remove the start date, add a 1 to the beginning of the range function.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm trying to convert an integer to binary using the bin() function in Python. However, it always removes the leading zeros, which I actually need, such that the result is always 8-bit:</p>\n\n<p>Example:</p>\n\n<pre><code>bin(1) -&gt; 0b1\n\n# What I would like:\nbin(1) -&gt; 0b00000001\n</code></pre>\n\n<p>Is there a way of doing this?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use the <a href=\"http://docs.python.org/2/library/functions.html#format\"><code>format()</code> function</a>:</p>\n\n<pre><code>&gt;&gt;&gt; format(14, '#010b')\n'0b00001110'\n</code></pre>\n\n<p>The <code>format()</code> function simply formats the input following the <a href=\"http://docs.python.org/2/library/string.html#format-specification-mini-language\">Format Specification mini language</a>. The <code>#</code> makes the format include the <code>0b</code> prefix, and the <code>010</code> size formats the output to fit in 10 characters width, with <code>0</code> padding; 2 characters for the <code>0b</code> prefix, the other 8 for the binary digits.</p>\n\n<p>This is the most compact and direct option.</p>\n\n<p>If you are putting the result in a larger string, use <a href=\"https://docs.python.org/2/library/stdtypes.html#str.format\"><code>str.format()</code></a> and put the second argument for the <code>format()</code> function after the colon of the placeholder <code>{:..}</code>:</p>\n\n<pre><code>&gt;&gt;&gt; 'The produced output, in binary, is: {:#010b}'.format(14)\n'The produced output, in binary, is: 0b00001110'\n</code></pre>\n\n<p>If you did not want the <code>0b</code> prefix, simply drop the <code>#</code> and adjust the length of the field:</p>\n\n<pre><code>&gt;&gt;&gt; format(14, '08b')\n'00001110'\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm trying to jsonify a SQLAlchemy result set in Flask/Python.</p>\n\n<p>The Flask mailing list suggested the following method <a href=\"http://librelist.com/browser//flask/2011/2/16/jsonify-sqlalchemy-pagination-collection-result/#04a0754b63387f87e59dda564bde426e\" rel=\"nofollow noreferrer\">http://librelist.com/browser//flask/2011/2/16/jsonify-sqlalchemy-pagination-collection-result/#04a0754b63387f87e59dda564bde426e</a> :</p>\n\n<pre><code>return jsonify(json_list = qryresult)\n</code></pre>\n\n<p>However I'm getting the following error back:</p>\n\n<pre><code>TypeError: &lt;flaskext.sqlalchemy.BaseQuery object at 0x102c2df90&gt; \nis not JSON serializable\n</code></pre>\n\n<p>What am I overlooking here? </p>\n\n<p>I have found this question: <a href=\"https://stackoverflow.com/questions/5022066/how-to-serialize-sqlalchemy-result-to-json\">How to serialize SqlAlchemy result to JSON?</a> which seems very similar however I didn't know whether Flask had some magic to make it easier as the mailing list post suggested.</p>\n\n<p>Edit: for clarification, this is what my model looks like</p>\n\n<pre><code>class Rating(db.Model):\n\n    __tablename__ = 'rating'\n\n    id = db.Column(db.Integer, primary_key=True)\n    fullurl = db.Column(db.String())\n    url = db.Column(db.String())\n    comments = db.Column(db.Text)\n    overall = db.Column(db.Integer)\n    shipping = db.Column(db.Integer)\n    cost = db.Column(db.Integer)\n    honesty = db.Column(db.Integer)\n    communication = db.Column(db.Integer)\n    name = db.Column(db.String())\n    ipaddr = db.Column(db.String())\n    date = db.Column(db.String())\n\n    def __init__(self, fullurl, url, comments, overall, shipping, cost, honesty, communication, name, ipaddr, date):\n        self.fullurl = fullurl\n        self.url = url\n        self.comments = comments\n        self.overall = overall\n        self.shipping = shipping\n        self.cost = cost\n        self.honesty = honesty\n        self.communication = communication\n        self.name = name\n        self.ipaddr = ipaddr\n        self.date = date\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It seems that you actually haven't executed your query. Try following:</p>\n\n<pre><code>return jsonify(json_list = qryresult.all())\n</code></pre>\n\n<p><strong>[Edit]</strong>: Problem with jsonify is, that usually the objects cannot be jsonified automatically. Even Python's datetime fails ;)</p>\n\n<p>What I have usually done, is to add an extra property (like <code>serialize</code>) to classes that need to be serialized:</p>\n\n<pre><code>def dump_datetime(value):\n    \"\"\"Deserialize datetime object into string form for JSON processing.\"\"\"\n    if value is None:\n        return None\n    return [value.strftime(\"%Y-%m-%d\"), value.strftime(\"%H:%M:%S\")]\n\nclass Foo(db.Model):\n    # ... SQLAlchemy defs here..\n    def __init__(self, ...):\n       # self.foo = ...\n       pass\n\n    @property\n    def serialize(self):\n       \"\"\"Return object data in easily serializeable format\"\"\"\n       return {\n           'id'         : self.id,\n           'modified_at': dump_datetime(self.modified_at),\n           # This is an example how to deal with Many2Many relations\n           'many2many'  : self.serialize_many2many\n       }\n    @property\n    def serialize_many2many(self):\n       \"\"\"\n       Return object's relations in easily serializeable format.\n       NB! Calls many2many's serialize property.\n       \"\"\"\n       return [ item.serialize for item in self.many2many]\n</code></pre>\n\n<p>And now for views I can just do:</p>\n\n<pre><code>return jsonify(json_list=[i.serialize for i in qryresult.all()])\n</code></pre>\n\n<p>Hope this helps ;)</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I need to download it for Python 2.7, but can't seem to find it... </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>'pywin32' is its canonical name.</p>\n\n<p><a href=\"http://sourceforge.net/projects/pywin32/\" rel=\"noreferrer\">http://sourceforge.net/projects/pywin32/</a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am learning how to use the <code>threading</code> and the <code>multiprocessing</code> modules in Python to run certain operations in parallel and speed up my code.</p>\n\n<p>I am finding this hard (maybe because I don't have any theoretical background about it) to understand what the difference is between a <code>threading.Thread()</code> object and a <code>multiprocessing.Process()</code> one.</p>\n\n<p>Also, it is not entirely clear to me how to instantiate a queue of jobs and having only 4 (for example) of them running in parallel, while the other wait for resources to free before being executed.</p>\n\n<p>I find the examples in the documentation clear, but not very exhaustive; as soon as I try to complicate things a bit, I receive a lot of weird errors (like a method that can't be pickled, and so on).</p>\n\n<p>So, when should I use the <code>threading</code> and <code>multiprocessing</code> modules?</p>\n\n<p>Can you link me to some resources that explain the concepts behind these two modules and how to use them properly for complex tasks?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"https://stackoverflow.com/a/18114475\">What Giulio Franco says</a> is true for multithreading vs. multiprocessing <em>in general</em>.</p>\n\n<p>However, Python<sup>*</sup> has an added issue: There's a Global Interpreter Lock that prevents two threads in the same process from running Python code at the same time. This means that if you have 8 cores, and change your code to use 8 threads, it won't be able to use 800% CPU and run 8x faster; it'll use the same 100% CPU and run at the same speed. (In reality, it'll run a little slower, because there's extra overhead from threading, even if you don't have any shared data, but ignore that for now.)</p>\n\n<p>There are exceptions to this. If your code's heavy computation doesn't actually happen in Python, but in some library with custom C code that does proper GIL handling, like a numpy app, you will get the expected performance benefit from threading. The same is true if the heavy computation is done by some subprocess that you run and wait on.</p>\n\n<p>More importantly, there are cases where this doesn't matter. For example, a network server spends most of its time reading packets off the network, and a GUI app spends most of its time waiting for user events. One reason to use threads in a network server or GUI app is to allow you to do long-running \"background tasks\" without stopping the main thread from continuing to service network packets or GUI events. And that works just fine with Python threads. (In technical terms, this means Python threads give you concurrency, even though they don't give you core-parallelism.)</p>\n\n<p>But if you're writing a CPU-bound program in pure Python, using more threads is generally not helpful.</p>\n\n<p>Using separate processes has no such problems with the GIL, because each process has its own separate GIL. Of course you still have all the same tradeoffs between threads and processes as in any other languages\u2014it's more difficult and more expensive to share data between processes than between threads, it can be costly to run a huge number of processes or to create and destroy them frequently, etc. But the GIL weighs heavily on the balance toward processes, in a way that isn't true for, say, C or Java. So, you will find yourself using multiprocessing a lot more often in Python than you would in C or Java.</p>\n\n<hr>\n\n<p>Meanwhile, Python's \"batteries included\" philosophy brings some good news: It's very easy to write code that can be switched back and forth between threads and processes with a one-liner change.</p>\n\n<p>If you design your code in terms of self-contained \"jobs\" that don't share anything with other jobs (or the main program) except input and output, you can use the <a href=\"http://docs.python.org/3/library/concurrent.futures.html\" rel=\"noreferrer\"><code>concurrent.futures</code></a> library to write your code around a thread pool like this:</p>\n\n<pre><code>with concurrent.futures.ThreadPoolExecutor(max_workers=4) as executor:\n    executor.submit(job, argument)\n    executor.map(some_function, collection_of_independent_things)\n    # ...\n</code></pre>\n\n<p>You can even get the results of those jobs and pass them on to further jobs, wait for things in order of execution or in order of completion, etc.; read the section on <code>Future</code> objects for details.</p>\n\n<p>Now, if it turns out that your program is constantly using 100% CPU, and adding more threads just makes it slower, then you're running into the GIL problem, so you need to switch to processes. All you have to do is change that first line:</p>\n\n<pre><code>with concurrent.futures.ProcessPoolExecutor(max_workers=4) as executor:\n</code></pre>\n\n<p>The only real caveat is that your jobs' arguments and return values have to be pickleable (and not take too much time or memory to pickle) to be usable cross-process. Usually this isn't a problem, but sometimes it is.</p>\n\n<hr>\n\n<p>But what if your jobs can't be self-contained? If you can design your code in terms of jobs that <em>pass messages</em> from one to another, it's still pretty easy. You may have to use <code>threading.Thread</code> or <code>multiprocessing.Process</code> instead of relying on pools. And you will have to create <code>queue.Queue</code> or <code>multiprocessing.Queue</code> objects explicitly. (There are plenty of other options\u2014pipes, sockets, files with flocks, \u2026 but the point is, you have to do <em>something</em> manually if the automatic magic of an Executor is insufficient.)</p>\n\n<p>But what if you can't even rely on message passing? What if you need two jobs to both mutate the same structure, and see each others' changes? In that case, you will need to do manual synchronization (locks, semaphores, conditions, etc.) and, if you want to use processes, explicit shared-memory objects to boot. This is when multithreading (or multiprocessing) gets difficult. If you can avoid it, great; if you can't, you will need to read more than someone can put into an SO answer.</p>\n\n<hr>\n\n<p>From a comment, you wanted to know what's different between threads and processes in Python. Really, if you read Giulio Franco's answer and mine and all of our links, that should cover everything\u2026\u00a0but a summary would definitely be useful, so here goes:</p>\n\n<ol>\n<li>Threads share data by default; processes do not.</li>\n<li>As a consequence of (1), sending data between processes generally requires pickling and unpickling it.<sup>**</sup></li>\n<li>As another consequence of (1), directly sharing data between processes generally requires putting it into low-level formats like Value, Array, and <code>ctypes</code> types.</li>\n<li>Processes are not subject to the GIL.</li>\n<li>On some platforms\u00a0(mainly Windows), processes are much more expensive to create and destroy.</li>\n<li>There are some extra restrictions on processes, some of which are different on different platforms. See <a href=\"http://docs.python.org/3/library/multiprocessing.html#multiprocessing-programming\" rel=\"noreferrer\">Programming guidelines</a> for details.</li>\n<li>The <code>threading</code> module doesn't have some of the features of the <code>multiprocessing</code> module. (You can use <code>multiprocessing.dummy</code> to get most of the missing API on top of threads, or you can use higher-level modules like <code>concurrent.futures</code> and not worry about it.)</li>\n</ol>\n\n<hr>\n\n<p><sub>* It's not actually Python, the language, that has this issue, but CPython, the \"standard\" implementation of that language. Some other implementations don't have a GIL, like Jython.</sub></p>\n\n<p><sub>** If you're using the <a href=\"https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods\" rel=\"noreferrer\">fork</a> start method for multiprocessing\u2014which you can on most non-Windows platforms\u2014each child process gets any resources the parent had when the child was started, which can be another way to pass data to children.</sub></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a string of this form</p>\n\n<pre><code>s='arbit'\nstring='%s hello world %s hello world %s' %(s,s,s)\n</code></pre>\n\n<p>All the %s in string have the same value (i.e. s).\nIs there a better way of writing this? (Rather than listing out s three times)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use <a href=\"http://www.python.org/dev/peps/pep-3101/\" rel=\"noreferrer\">advanced string formatting</a>, available in Python 2.6 and Python 3.x:</p>\n\n<pre><code>incoming = 'arbit'\nresult = '{0} hello world {0} hello world {0}'.format(incoming)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am a python newbie and I am trying to learn how to \"zip\" lists. To this end, I have a program, where at a particular point, I do the following:</p>\n\n<pre><code>x1, x2, x3 = stuff.calculations(withdataa)\n</code></pre>\n\n<p>This gives me three lists, <code>x1</code>, <code>x2</code>, and <code>x3</code>, each of, say, size 20.</p>\n\n<p>Now, I do:</p>\n\n<pre><code>zipall = zip(x1, x2, x3)\n</code></pre>\n\n<p>However, when I do:</p>\n\n<pre><code>print \"len of zipall %s\" % len(zipall)\n</code></pre>\n\n<p>I get 20, which is not what I expected. I expected three. I think I am doing something fundamentally wrong.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>When you <code>zip()</code> together three lists containing 20 elements each, the result has twenty elements. Each element is a three-tuple.</p>\n\n<p>See for yourself:</p>\n\n<pre><code>In [1]: a = b = c = range(20)\n\nIn [2]: zip(a, b, c)\nOut[2]: \n[(0, 0, 0),\n (1, 1, 1),\n ...\n (17, 17, 17),\n (18, 18, 18),\n (19, 19, 19)]\n</code></pre>\n\n<p>To find out how many elements each tuple contains, you could examine the length of the first element:</p>\n\n<pre><code>In [3]: result = zip(a, b, c)\n\nIn [4]: len(result[0])\nOut[4]: 3\n</code></pre>\n\n<p>Of course, this won't work if the lists were empty to start with.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Can one write sth like:</p>\n\n<pre><code>class Test(object):\n    def _decorator(self, foo):\n        foo()\n\n    @self._decorator\n    def bar(self):\n        pass\n</code></pre>\n\n<p>This fails: self in @self is unknown</p>\n\n<p>I also tried:</p>\n\n<pre><code>@Test._decorator(self)\n</code></pre>\n\n<p>which also fails: Test unknown</p>\n\n<p>If would like to temp. change some instance variables \nin the decorator and the run the decorated method, before\nchanging them back.</p>\n\n<p>Thanks.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>What you're wanting to do isn't possible. Take, for instance, whether or not the code below looks valid:</p>\n\n<pre><code>class Test(object):\n\n    def _decorator(self, foo):\n        foo()\n\n    def bar(self):\n        pass\n    bar = self._decorator(bar)\n</code></pre>\n\n<p>It, of course, isn't valid since <code>self</code> isn't defined at that point. The same goes for <code>Test</code> as it won't be defined until the class itself is defined (which its in the process of). I'm showing you this code snippet because <strong>this is what your decorator snippet transforms into.</strong></p>\n\n<p>So, as you can see, accessing the instance in a decorator like that isn't really possible since decorators are applied during the definition of whatever function/method they are attached to and not during instantiation.</p>\n\n<p>If you need <strong>class-level access</strong>, try this:</p>\n\n<pre><code>class Test(object):\n\n    @classmethod\n    def _decorator(cls, foo):\n        foo()\n\n    def bar(self):\n        pass\nTest.bar = Test._decorator(Test.bar)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Suppose you have a dictionary like:</p>\n\n<pre><code>{'a': 1,\n 'c': {'a': 2,\n       'b': {'x': 5,\n             'y' : 10}},\n 'd': [1, 2, 3]}\n</code></pre>\n\n<p>How would you go about flattening that into something like:</p>\n\n<pre><code>{'a': 1,\n 'c_a': 2,\n 'c_b_x': 5,\n 'c_b_y': 10,\n 'd': [1, 2, 3]}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Basically the same way you would flatten a nested list, you just have to do the extra work for iterating the dict by key/value, creating new keys for your new dictionary and creating the dictionary at final step.</p>\n\n<pre><code>import collections\n\ndef flatten(d, parent_key='', sep='_'):\n    items = []\n    for k, v in d.items():\n        new_key = parent_key + sep + k if parent_key else k\n        if isinstance(v, collections.MutableMapping):\n            items.extend(flatten(v, new_key, sep=sep).items())\n        else:\n            items.append((new_key, v))\n    return dict(items)\n\n&gt;&gt;&gt; flatten({'a': 1, 'c': {'a': 2, 'b': {'x': 5, 'y' : 10}}, 'd': [1, 2, 3]})\n{'a': 1, 'c_a': 2, 'c_b_x': 5, 'd': [1, 2, 3], 'c_b_y': 10}\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>In my python program I am getting this error:</p>\n\n<pre><code>KeyError: 'variablename'\n</code></pre>\n\n<p>From this code:</p>\n\n<pre><code>path = meta_entry['path'].strip('/'),\n</code></pre>\n\n<p>Can anyone please explain why this is happening?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>A <a href=\"https://docs.python.org/library/exceptions.html#KeyError\" rel=\"noreferrer\"><code>KeyError</code></a> generally means the key doesn't exist. So, are you sure the <code>path</code> key exists?</p>\n\n<p>From the official python docs:</p>\n\n<p><strong>exception KeyError</strong></p>\n\n<blockquote>\n  <p>Raised when a mapping (dictionary) key is not found in the set of\n  existing keys.</p>\n</blockquote>\n\n<p>For example:</p>\n\n<pre><code>&gt;&gt;&gt; mydict = {'a':'1','b':'2'}\n&gt;&gt;&gt; mydict['a']\n'1'\n&gt;&gt;&gt; mydict['c']\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nKeyError: 'c'\n&gt;&gt;&gt;\n</code></pre>\n\n<p>So, try to print the content of <code>meta_entry</code> and check whether <code>path</code> exists or not.</p>\n\n<pre><code>&gt;&gt;&gt; mydict = {'a':'1','b':'2'}\n&gt;&gt;&gt; print mydict\n{'a': '1', 'b': '2'}\n</code></pre>\n\n<p>Or, you can do:</p>\n\n<pre><code>&gt;&gt;&gt; 'a' in mydict\nTrue\n&gt;&gt;&gt; 'c' in mydict\nFalse\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is there a <code>range()</code> equivalent for floats in Python?</p>\n\n<pre><code>&gt;&gt;&gt; range(0.5,5,1.5)\n[0, 1, 2, 3, 4]\n&gt;&gt;&gt; range(0.5,5,0.5)\n\nTraceback (most recent call last):\n  File \"&lt;pyshell#10&gt;\", line 1, in &lt;module&gt;\n    range(0.5,5,0.5)\nValueError: range() step argument must not be zero\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I don't know a built-in function, but writing one like <a href=\"https://stackoverflow.com/a/477610/623735\">this</a> shouldn't be too complicated.</p>\n\n<pre><code>def frange(x, y, jump):\n  while x &lt; y:\n    yield x\n    x += jump\n</code></pre>\n\n<hr>\n\n<p>As the comments mention, this could produce unpredictable results like:</p>\n\n<pre><code>&gt;&gt;&gt; list(frange(0, 100, 0.1))[-1]\n99.9999999999986\n</code></pre>\n\n<p>To get the expected result, you can use one of the other answers in this question, or as @Tadhg mentioned, you can use <code>decimal.Decimal</code> as the <code>jump</code> argument. Make sure to initialize it with a string rather than a float.</p>\n\n<pre><code>&gt;&gt;&gt; import decimal\n&gt;&gt;&gt; list(frange(0, 100, decimal.Decimal('0.1')))[-1]\nDecimal('99.9')\n</code></pre>\n\n<p>Or even:</p>\n\n<pre><code>import decimal\n\ndef drange(x, y, jump):\n  while x &lt; y:\n    yield float(x)\n    x += decimal.Decimal(jump)\n</code></pre>\n\n<p>And then:</p>\n\n<pre><code>&gt;&gt;&gt; list(drange(0, 100, '0.1'))[-1]\n99.9\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a error message on django 1.4:</p>\n\n<blockquote>\n  <p>dictionary update sequence element #0 has length 1; 2 is required</p>\n</blockquote>\n\n<p>[EDIT]</p>\n\n<p>It happened when I tried  when using template tag like: `{% for v in values %}:</p>\n\n<pre><code>dictionary update sequence element #0 has length 1; 2 is required\n\nRequest Method:     GET\nRequest URL:    ...\nDjango Version:     1.4.5\nException Type:     ValueError\nException Value:    \n\ndictionary update sequence element #0 has length 1; 2 is required\n\nException Location:     /usr/local/lib/python2.7/dist-packages/djorm_hstore/fields.py in __init__, line 21\nPython Executable:  /usr/bin/uwsgi-core\nPython Version:     2.7.3\nPython Path:    \n\n['/var/www/',\n '.',\n '',\n '/usr/lib/python2.7',\n '/usr/lib/python2.7/plat-linux2',\n '/usr/lib/python2.7/lib-tk',\n '/usr/lib/python2.7/lib-old',\n '/usr/lib/python2.7/lib-dynload',\n '/usr/local/lib/python2.7/dist-packages',\n '/usr/lib/python2.7/dist-packages',\n '/usr/lib/python2.7/dist-packages/PIL',\n '/usr/lib/pymodules/python2.7']\n\nServer time:    sam, 13 Jul 2013 16:15:45 +0200\nError during template rendering\n\nIn template /var/www/templates/app/index.html, error at line 172\ndictionary update sequence element #0 has length 1; 2 is required\n\n172     {% for product in products %}\n\nTraceback Switch to copy-and-paste view\n\n/usr/lib/python2.7/dist-packages/django/core/handlers/base.py in get_response\n\n                            response = callback(request, *callback_args, **callback_kwargs)\n\n    ...\n\u25b6 Local vars\n/usr/lib/python2.7/dist-packages/django/contrib/auth/decorators.py in _wrapped_view\n\n                    return view_func(request, *args, **kwargs)\n\n    ...\n\u25b6 Local vars\n/usr/lib/python2.7/dist-packages/django/views/decorators/http.py in inner\n\n                return func(request, *args, **kwargs)\n\n    ...\n\u25b6 Local vars\n./app/views.py in index\n\n            context_instance=RequestContext(request))\n\n    ...\n\u25b6 Local vars\n/usr/lib/python2.7/dist-packages/django/shortcuts/__init__.py in render_to_response\n\n        return HttpResponse(loader.render_to_string(*args, **kwargs), **httpresponse_kwargs)\n\n    ...\n\u25b6 Local vars\n/usr/lib/python2.7/dist-packages/django/template/loader.py in render_to_string\n\n            return t.render(context_instance)\n\n    ...\n\u25b6 Local vars\n/usr/lib/python2.7/dist-packages/django/template/base.py in render\n\n                return self._render(context)\n\n    ...\n\u25b6 Local vars\n/usr/lib/python2.7/dist-packages/django/template/base.py in _render\n\n            return self.nodelist.render(context)\n\n    ...\n\u25b6 Local vars\n/usr/lib/python2.7/dist-packages/django/template/base.py in render\n\n                    bit = self.render_node(node, context)\n\n    ...\n\u25b6 Local vars\n/usr/lib/python2.7/dist-packages/django/template/debug.py in render_node\n\n                return node.render(context)\n\n    ...\n\u25b6 Local vars\n/usr/lib/python2.7/dist-packages/django/template/loader_tags.py in render\n\n            return compiled_parent._render(context)\n\n    ...\n\u25b6 Local vars\n/usr/lib/python2.7/dist-packages/django/template/base.py in _render\n\n            return self.nodelist.render(context)\n\n    ...\n\u25b6 Local vars\n/usr/lib/python2.7/dist-packages/django/template/base.py in render\n\n                    bit = self.render_node(node, context)\n\n    ...\n\u25b6 Local vars\n/usr/lib/python2.7/dist-packages/django/template/debug.py in render_node\n\n                return node.render(context)\n\n    ...\n\u25b6 Local vars\n/usr/lib/python2.7/dist-packages/django/template/loader_tags.py in render\n\n                result = block.nodelist.render(context)\n\n    ...\n\u25b6 Local vars\n/usr/lib/python2.7/dist-packages/django/template/base.py in render\n\n                    bit = self.render_node(node, context)\n\n    ...\n\u25b6 Local vars\n/usr/lib/python2.7/dist-packages/django/template/debug.py in render_node\n\n                return node.render(context)\n\n    ...\n\u25b6 Local vars\n/usr/lib/python2.7/dist-packages/django/template/defaulttags.py in render\n\n            len_values = len(values)\n\n    ...\n\u25b6 Local vars\n/usr/lib/python2.7/dist-packages/django/core/paginator.py in __len__\n\n            return len(self.object_list)\n\n    ...\n\u25b6 Local vars\n/usr/lib/python2.7/dist-packages/django/db/models/query.py in __len__\n\n                    self._result_cache = list(self.iterator())\n\n    ...\n\u25b6 Local vars\n/usr/lib/python2.7/dist-packages/django/db/models/query.py in iterator\n\n                        obj = model(*row[index_start:aggregate_start])\n\n    ...\n\u25b6 Local vars\n/usr/lib/python2.7/dist-packages/django/db/models/base.py in __init__\n\n                    setattr(self, field.attname, val)\n\n    ...\n\u25b6 Local vars\n/usr/local/lib/python2.7/dist-packages/djorm_hstore/fields.py in __set__\n\n                value = self.field._attribute_class(value, self.field, obj)\n\n    ...\n\u25b6 Local vars\n/usr/local/lib/python2.7/dist-packages/djorm_hstore/fields.py in __init__\n\n            super(HStoreDictionary, self).__init__(value, **params)\n\n    ...\n\u25b6 Local vars\n</code></pre>\n\n<p>It happens too when I try to access on a hstore queryset:</p>\n\n<p>[edit]</p>\n\n<pre><code>Traceback (most recent call last):\nFile \"manage.py\", line 14, in &lt;module&gt;\n    execute_manager(settings)\n\nFile \"/usr/local/lib/python2.7/dist-packages/django/core/management/__init__.py\", line 459, in execute_manager\n    utility.execute()\n\nFile \"/usr/local/lib/python2.7/dist-packages/django/core/management/__init__.py\", line 382, in execute\n    self.fetch_command(subcommand).run_from_argv(self.argv)\n\nFile \"/usr/local/lib/python2.7/dist-packages/django/core/management/base.py\", line 196, in run_from_argv\n    self.execute(*args, **options.__dict__)\n\nFile \"/usr/local/lib/python2.7/dist-packages/django/core/management/base.py\", line 232, in execute\n    output = self.handle(*args, **options)\n\nFile \"/home/name/workspace/project/app/data/commands/my_command.py\", line 60, in handle\n    item_id = tmp[0].id,\n\nFile \"/usr/local/lib/python2.7/dist-packages/django/db/models/query.py\", line 207, in __getitem__\n    return list(qs)[0]\n\nFile \"/usr/local/lib/python2.7/dist-packages/django/db/models/query.py\", line 87, in __len__\n    self._result_cache.extend(self._iter)\n\nFile \"/usr/local/lib/python2.7/dist-packages/django/db/models/query.py\", line 301, in iterator\n    obj = model(*row[index_start:aggregate_start])\n\nFile \"/usr/local/lib/python2.7/dist-packages/django/db/models/base.py\", line 300, in __init__\n    setattr(self, field.attname, val)\n\nFile \"/usr/local/lib/python2.7/dist-packages/djorm_hstore/fields.py\", line 38, in __set__\n    value = self.field._attribute_class(value, self.field, obj)\n\nFile \"/usr/local/lib/python2.7/dist-packages/djorm_hstore/fields.py\", line 21, in __init__\n    super(HStoreDictionary, self).__init__(value, **params)\n\nValueError: dictionary update sequence element #0 has length 1; 2 is required\n</code></pre>\n\n<p>the code is:</p>\n\n<pre><code>tmp = Item.objects.where(HE(\"kv\").contains({'key':value}))\n\nif tmp.count() &gt; 0:\n\n    item_id = tmp[0].id,\n</code></pre>\n\n<p>I just try to access to the value I don't understand the \"update sequence\" message. When I use a cursor instead of hstore queryset the function works. The error come on template rendering too , I just restarted <code>uwsgi</code> and everything works well, but error come back later</p>\n\n<p>[edit]</p>\n\n<p>Has someone an idea?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Just ran into this problem. I don't know if it's the same thing that hit your code, but for me the root cause was because I forgot to put <code>name=</code> on the last argument of the <code>url</code> function call.</p>\n\n<p>For instance, the following throws the error from the question:</p>\n\n<pre><code>url(r'^foo/(?P&lt;bar&gt;[A-Za-z]+)/$', FooBar.as_view(), 'foo')\n</code></pre>\n\n<p>But this actually works:</p>\n\n<pre><code>url(r'^foo/(?P&lt;bar&gt;[A-Za-z]+)/$', FooBar.as_view(), name='foo')\n</code></pre>\n\n<p>The reason why the traceback is unhelpful is because internally, Django wants to parse the given <em>positional</em> argument as the <em>keyword</em> argument <code>kwargs</code>, and since a string is an iterable, an atypical code path begins to unfold. Always use <code>name=</code> on your urls!</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Full stacktrace:  </p>\n\n<pre><code>\u279c  ~ pip install virtualenv\nTraceback (most recent call last):\n  File \"/usr/bin/pip\", line 11, in &lt;module&gt;\n    sys.exit(main())\n  File \"/usr/lib/python3.4/site-packages/pip/__init__.py\", line 215, in main\n    locale.setlocale(locale.LC_ALL, '')\n  File \"/usr/lib64/python3.4/locale.py\", line 592, in setlocale\n    return _setlocale(category, locale)\nlocale.Error: unsupported locale setting\n</code></pre>\n\n<p>On the same server, I previously ran <code>pip install virtualenv</code> and it's was python 2.7.x at that time.  </p>\n\n<p>Now, I've just installed python3.4 using <code>curl https://bootstrap.pypa.io/get-pip.py | python3.4</code>.  </p>\n\n<pre><code>\u279c  ~ pip --version\npip 8.1.1 from /usr/lib/python3.4/site-packages (python 3.4)\n</code></pre>\n\n<p><code>pip uninstall virtualenv</code> throws the same error too</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>try it:</p>\n\n<pre><code>$ export LC_ALL=C\n</code></pre>\n\n<p>Here is my <code>locale</code> settings:</p>\n\n<pre><code>$ locale\nLANG=en_US.UTF-8\nLANGUAGE=\nLC_CTYPE=\"C\"\nLC_NUMERIC=\"C\"\nLC_TIME=\"C\"\nLC_COLLATE=\"C\"\nLC_MONETARY=\"C\"\nLC_MESSAGES=\"C\"\nLC_PAPER=\"C\"\nLC_NAME=\"C\"\nLC_ADDRESS=\"C\"\nLC_TELEPHONE=\"C\"\nLC_MEASUREMENT=\"C\"\nLC_IDENTIFICATION=\"C\"\nLC_ALL=C\n</code></pre>\n\n<p><strong><em>Python2.7</em></strong></p>\n\n<pre><code>    $ uname -a\n    Linux debian 3.16.0-4-amd64 #1 SMP Debian 3.16.7-ckt11-1+deb8u6 (2015-11-09) x86_64 GNU/Linux\n    $ python --version\n    Python 2.7.9\n    $ pip --version\n    pip 8.1.1 from /usr/local/lib/python2.7/dist-packages (python 2.7)\n    $ unset LC_ALL\n    $ pip install virtualenv\n    Traceback (most recent call last):\n      File \"/usr/local/bin/pip\", line 11, in &lt;module&gt;\n        sys.exit(main())\n      File \"/usr/local/lib/python2.7/dist-packages/pip/__init__.py\", line 215, in main\n        locale.setlocale(locale.LC_ALL, '')\n      File \"/usr/lib/python2.7/locale.py\", line 579, in setlocale\n        return _setlocale(category, locale)\n    locale.Error: unsupported locale setting\n    $ export LC_ALL=C\n    $ pip install virtualenv\n    Requirement already satisfied (use --upgrade to upgrade): virtualenv in /usr/local/lib/python2.7/dist-packages\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Let's assume we have such a trivial daemon written in python:</p>\n\n<pre><code>def mainloop():\n    while True:\n        # 1. do\n        # 2. some\n        # 3. important\n        # 4. job\n        # 5. sleep\n\nmainloop()\n</code></pre>\n\n<p>and we daemonize it using <code>start-stop-daemon</code> which by default sends <code>SIGTERM</code> (<code>TERM</code>) signal on <code>--stop</code>.</p>\n\n<p>Let's suppose the current step performed is <code>#2</code>. And at this very moment we're sending <code>TERM</code> signal.</p>\n\n<p>What happens is that the execution terminates immediately.</p>\n\n<p>I've found that I can handle the signal event using <code>signal.signal(signal.SIGTERM, handler)</code> but the thing is that it still interrupts the current execution and passes the control to <code>handler</code>.</p>\n\n<p>So, my question is - is it possible to not interrupt the current execution but handle the <code>TERM</code> signal in a separated thread (?) so that I was able to set <code>shutdown_flag = True</code> so that <code>mainloop()</code> had a chance to stop gracefully?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>A class based clean to use solution:</p>\n\n<pre><code>import signal\nimport time\n\nclass GracefulKiller:\n  kill_now = False\n  def __init__(self):\n    signal.signal(signal.SIGINT, self.exit_gracefully)\n    signal.signal(signal.SIGTERM, self.exit_gracefully)\n\n  def exit_gracefully(self,signum, frame):\n    self.kill_now = True\n\nif __name__ == '__main__':\n  killer = GracefulKiller()\n  while True:\n    time.sleep(1)\n    print(\"doing something in a loop ...\")\n    if killer.kill_now:\n      break\n\n  print \"End of the program. I was killed gracefully :)\"\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am currently using <code>matplotlib.pyplot</code> to create graphs and would like to have the major gridlines solid and black and the minor ones either greyed or dashed. in the grid properies\nwhich=both/major/mine and then color and linestyle are defined simply by linestyle, is there any way to specify minor linestyle only?</p>\n\n<p>The appropriate code i have so far is</p>\n\n<pre><code>plt.plot(current, counts, 'rd', markersize=8)\nplt.yscale('log')\nplt.grid(b=True, which='both', color='0.65',linestyle='-')\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Actually, it is as simple as setting <code>major</code> and <code>minor</code> separately:</p>\n\n<pre><code>In [9]: plot([23, 456, 676, 89, 906, 34, 2345])\nOut[9]: [&lt;matplotlib.lines.Line2D at 0x6112f90&gt;]\n\nIn [10]: yscale('log')\n\nIn [11]: grid(b=True, which='major', color='b', linestyle='-')\n\nIn [12]: grid(b=True, which='minor', color='r', linestyle='--')\n</code></pre>\n\n<p>The gotcha with minor grids is that you have to have minor tick marks turned on too.  In the above code this is done by <code>yscale('log')</code>, but it can also be done with <code>plt.minorticks_on()</code>.</p>\n\n<p><img src=\"https://i.stack.imgur.com/C0Jen.png\" alt=\"enter image description here\"></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have been learning Python by following some <a href=\"http://www.pygame.org/wiki/tutorials\" rel=\"noreferrer\">pygame tutorials</a>.</p>\n\n<p>Therein I found extensive use of the keyword <em>self</em>, and coming from a primarily Java background, I find that I keep forgetting to type <em>self</em>.  For example, instead of <code>self.rect.centerx</code> I would type <code>rect.centerx</code>, because, to me, <em>rect</em> is already a member variable of the class.</p>\n\n<p>The Java parallel I can think of for this situation is having to prefix all references to member variables with <em>this</em>.</p>\n\n<p>Am I stuck prefixing all member variables with <em>self</em>, or is there a way to declare them that would allow me to avoid having to do so?</p>\n\n<p>Even if what I am suggesting isn't <em>pythonic</em>, I'd still like to know if it is possible.</p>\n\n<p>I have taken a look at these related SO questions, but they don't quite answer what I am after:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/475871/python-why-use-self-in-a-class\">Python - why use \u201cself\u201d in a class?</a>  </li>\n<li><a href=\"https://stackoverflow.com/questions/68282/why-do-you-need-explicitly-have-the-self-argument-into-a-python-method\">Why do you need explicitly have the \u201cself\u201d argument into a Python method?</a></li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>Python requires specifying self.</strong>  The result is there's never any confusion over what's a member and what's not, even without the full class definition visible.  This leads to useful properties, such as: you can't add members which accidentally shadow non-members and thereby break code.</p>\n\n<p>One extreme example: you can write a class without any knowledge of what base classes it might have, and always know whether you are accessing a member or not:</p>\n\n<pre><code>class A(some_function()):\n  def f(self):\n    self.member = 42\n    self.method()\n</code></pre>\n\n<p>That's the <em>complete</em> code!  (some_function returns the type used as a base.)</p>\n\n<p>Another, where the methods of a class are dynamically composed:</p>\n\n<pre><code>class B(object):\n  pass\n\nprint B()\n# &lt;__main__.B object at 0xb7e4082c&gt;\n\ndef B_init(self):\n  self.answer = 42\ndef B_str(self):\n  return \"&lt;The answer is %s.&gt;\" % self.answer\n# notice these functions require no knowledge of the actual class\n# how hard are they to read and realize that \"members\" are used?\n\nB.__init__ = B_init\nB.__str__ = B_str\n\nprint B()\n# &lt;The answer is 42.&gt;\n</code></pre>\n\n<p>Remember, both of these examples are extreme and you won't see them every day, nor am I suggesting you should often write code like this, but they do clearly show aspects of self being explicitly required.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am not able to get my head on how the partial works in functools.\nI have the following code from <a href=\"https://stackoverflow.com/questions/3252228/python-why-is-functools-partial-necessary\">here</a>:</p>\n\n<pre><code>&gt;&gt;&gt; sum = lambda x, y : x + y\n&gt;&gt;&gt; sum(1, 2)\n3\n&gt;&gt;&gt; incr = lambda y : sum(1, y)\n&gt;&gt;&gt; incr(2)\n3\n&gt;&gt;&gt; def sum2(x, y):\n    return x + y\n\n&gt;&gt;&gt; incr2 = functools.partial(sum2, 1)\n&gt;&gt;&gt; incr2(4)\n5\n</code></pre>\n\n<p>Now in the line</p>\n\n<pre><code>incr = lambda y : sum(1, y)\n</code></pre>\n\n<p>I get that whatever argument I pass to <code>incr</code> it will be passed as <code>y</code> to <code>lambda</code> which will return <code>sum(1, y)</code> i.e <code>1 + y</code>.</p>\n\n<p>I understand that. But I didn't understand this <code>incr2(4)</code>.</p>\n\n<p>How does the <code>4</code> gets passed as <code>x</code> in partial function? To me, <code>4</code> should replace the <code>sum2</code>. What is the relation between <code>x</code> and <code>4</code>?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Roughly, <code>partial</code> does something like this (apart from keyword args support etc):</p>\n\n<pre><code>def partial(func, *part_args):\n    def wrapper(*extra_args):\n        args = list(part_args)\n        args.extend(extra_args)\n        return func(*args)\n\n    return wrapper\n</code></pre>\n\n<p>So, by calling <code>partial(sum2, 4)</code> you create a new function (a callable, to be precise) that behaves like <code>sum2</code>, but has one positional argument less. That missing argument is always substituted by <code>4</code>, so that <code>partial(sum2, 4)(2) == sum2(4, 2)</code></p>\n\n<p>As for why it's needed, there's a variety of cases. Just for one, suppose you have to pass a function somewhere where it's expected to have 2 arguments:</p>\n\n<pre><code>class EventNotifier(object):\n    def __init__(self):\n        self._listeners = []\n\n    def add_listener(self, callback):\n        ''' callback should accept two positional arguments, event and params '''\n        self._listeners.append(callback)\n        # ...\n\n    def notify(self, event, *params):\n        for f in self._listeners:\n            f(event, params)\n</code></pre>\n\n<p>But a function you already have needs access to some third <code>context</code> object to do its job:</p>\n\n<pre><code>def log_event(context, event, params):\n    context.log_event(\"Something happened %s, %s\", event, params)\n</code></pre>\n\n<p>So, there are several solutions:</p>\n\n<p>A custom object:</p>\n\n<pre><code>class Listener(object):\n   def __init__(self, context):\n       self._context = context\n\n   def __call__(self, event, params):\n       self._context.log_event(\"Something happened %s, %s\", event, params)\n\n\n notifier.add_listener(Listener(context))\n</code></pre>\n\n<p>Lambda:</p>\n\n<pre><code>log_listener = lambda event, params: log_event(context, event, params)\nnotifier.add_listener(log_listener)\n</code></pre>\n\n<p>With partials:</p>\n\n<pre><code>context = get_context()  # whatever\nnotifier.add_listener(partial(log_event, context))\n</code></pre>\n\n<p>Of those three, <code>partial</code> is the shortest and the fastest.\n(For a more complex case you might want a custom object though).</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a dictionary which looks like this: <code>di = {1: \"A\", 2: \"B\"}</code></p>\n\n<p>I would like to apply it to the \"col1\" column of a dataframe similar to:</p>\n\n<pre><code>     col1   col2\n0       w      a\n1       1      2\n2       2    NaN\n</code></pre>\n\n<p>to get:</p>\n\n<pre><code>     col1   col2\n0       w      a\n1       A      2\n2       B    NaN\n</code></pre>\n\n<p>How can I best do this? For some reason googling terms relating to this only shows me links about how to make columns from dicts and vice-versa :-/ </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use <code>.replace</code>.  For example:</p>\n\n<pre><code>&gt;&gt;&gt; df = pd.DataFrame({'col2': {0: 'a', 1: 2, 2: np.nan}, 'col1': {0: 'w', 1: 1, 2: 2}})\n&gt;&gt;&gt; di = {1: \"A\", 2: \"B\"}\n&gt;&gt;&gt; df\n  col1 col2\n0    w    a\n1    1    2\n2    2  NaN\n&gt;&gt;&gt; df.replace({\"col1\": di})\n  col1 col2\n0    w    a\n1    A    2\n2    B  NaN\n</code></pre>\n\n<p>or directly on the <code>Series</code>, i.e. <code>df[\"col1\"].replace(di, inplace=True)</code>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Using SQLite3 in Python, I am trying to store a compressed version of a snippet of UTF-8 HTML code.</p>\n\n<p>Code looks like this:</p>\n\n<pre><code>...\nc = connection.cursor()\nc.execute('create table blah (cid integer primary key,html blob)')\n...\nc.execute('insert or ignore into blah values (?, ?)',(cid, zlib.compress(html)))\n</code></pre>\n\n<p>At which point at get the error:</p>\n\n<pre><code>sqlite3.ProgrammingError: You must not use 8-bit bytestrings unless you use a text_factory that can interpret 8-bit bytestrings (like text_factory = str). It is highly recommended that you instead just switch your application to Unicode strings.\n</code></pre>\n\n<p>If I use 'text' rather than 'blob' and don't compress the HTML snippet, it works all fine (db is to large though). When I use 'blob' and compress via Python zlib library, I get the above error message. I looked around but couldn't find a simple answer for this one.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you want to use 8-bit strings instead of unicode string in sqlite3, set approptiate text_factory for sqlite connection:</p>\n\n<pre><code>connection = sqlite3.connect(...)\nconnection.text_factory = str\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/41369408/how-to-change-a-variable-after-it-is-already-defined-in-python\" dir=\"ltr\">How to change a variable after it is already defined in Python</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    5 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>What am I doing wrong here?</p>\n\n<pre><code>counter = 0\n\ndef increment():\n  counter += 1\n\nincrement()\n</code></pre>\n\n<p>The above code throws a <code>UnboundLocalError</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Python doesn't have variable declarations, so it has to figure out the <a href=\"http://docs.python.org/3.3/tutorial/classes.html#python-scopes-and-namespaces\">scope</a> of variables itself.  It does so by a simple rule:  If there is an assignment to a variable inside a function, that variable is considered local.<sup><a href=\"http://docs.python.org/3.3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python\">[1]</a></sup>  Thus, the line</p>\n\n<pre><code>counter += 1\n</code></pre>\n\n<p>implicitly makes <code>counter</code> local to <code>increment()</code>.  Trying to execute this line, though, will try to read the value of the local variable <code>counter</code> before it is assigned, resulting in an <a href=\"http://docs.python.org/3.3/library/exceptions.html#UnboundLocalError\"><code>UnboundLocalError</code></a>.<sup><a href=\"http://docs.python.org/3.3/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value\">[2]</a></sup></p>\n\n<p>If <code>counter</code> is a global variable, the <a href=\"http://docs.python.org/3.3/reference/simple_stmts.html#the-global-statement\"><code>global</code></a> keyword will help.  If <code>increment()</code> is a local function and <code>counter</code> a local variable, you can use <a href=\"http://docs.python.org/3.3/reference/simple_stmts.html#the-nonlocal-statement\"><code>nonlocal</code></a> in Python 3.x.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I just realized that <code>json.dumps()</code> adds spaces in the JSON object</p>\n\n<p>e.g.</p>\n\n<pre><code>{'duration': '02:55', 'name': 'flower', 'chg': 0}\n</code></pre>\n\n<p>how can remove the spaces in order to make the JSON more compact and save bytes to be sent via HTTP?</p>\n\n<p>such as:</p>\n\n<pre><code>{'duration':'02:55','name':'flower','chg':0}\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>json.dumps(separators=(',', ':'))\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Does Python have a function that I can use to escape special characters in a regular expression?</p>\n\n<p>For example, <code>I'm \"stuck\" :\\</code> should become <code>I\\'m \\\"stuck\\\" :\\\\</code>.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Use re.escape</p>\n\n<pre><code>re.escape(string)\n&gt;&gt;&gt; re.escape('\\ a.*$')\n'\\\\\\\\\\\\ a\\\\.\\\\*\\\\$'\n&gt;&gt;&gt; print(re.escape('\\ a.*$'))\n\\\\\\ a\\.\\*\\$\n&gt;&gt;&gt; re.escape('www.stackoverflow.com')\n'www\\\\.stackoverflow\\\\.com'\n&gt;&gt;&gt; print(re.escape('www.stackoverflow.com'))\nwww\\.stackoverflow\\.com\n</code></pre>\n\n<p>See : <a href=\"http://docs.python.org/library/re.html#module-contents\" rel=\"noreferrer\">http://docs.python.org/library/re.html#module-contents</a></p>\n\n<p>Repeating it here:</p>\n\n<blockquote>\n  <p>re.escape(string)</p>\n  \n  <p>Return string with all non-alphanumerics backslashed; this is useful if you want to match an arbitrary literal string that may have regular expression metacharacters in it.</p>\n</blockquote>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How do I access the corresponding groupby dataframe in a groupby object by the key? With the following groupby:</p>\n\n<pre><code>rand = np.random.RandomState(1)\ndf = pd.DataFrame({'A': ['foo', 'bar'] * 3,\n                   'B': rand.randn(6),\n                   'C': rand.randint(0, 20, 6)})\ngb = df.groupby(['A'])\n</code></pre>\n\n<p>I can iterate through it to get the keys and groups:</p>\n\n<pre><code>In [11]: for k, gp in gb:\n             print 'key=' + str(k)\n             print gp\nkey=bar\n     A         B   C\n1  bar -0.611756  18\n3  bar -1.072969  10\n5  bar -2.301539  18\nkey=foo\n     A         B   C\n0  foo  1.624345   5\n2  foo -0.528172  11\n4  foo  0.865408  14\n</code></pre>\n\n<p>I would like to be able to do something like</p>\n\n<pre><code>In [12]: gb['foo']\nOut[12]:  \n     A         B   C\n0  foo  1.624345   5\n2  foo -0.528172  11\n4  foo  0.865408  14\n</code></pre>\n\n<p>But when I do that (well, actually I have to do <code>gb[('foo',)]</code>), I get this weird <code>pandas.core.groupby.DataFrameGroupBy</code> thing which doesn't seem to have any methods that correspond to the DataFrame I want.</p>\n\n<p>The best I can think of is</p>\n\n<pre><code>In [13]: def gb_df_key(gb, key, orig_df):\n             ix = gb.indices[key]\n             return orig_df.ix[ix]\n\n         gb_df_key(gb, 'foo', df)\nOut[13]:\n     A         B   C\n0  foo  1.624345   5\n2  foo -0.528172  11\n4  foo  0.865408  14  \n</code></pre>\n\n<p>but this is kind of nasty, considering how nice pandas usually is at these things.<br>\nWhat's the built-in way of doing this?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use the <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.core.groupby.GroupBy.get_group.html\"><code>get_group</code></a> method:</p>\n\n<pre><code>In [21]: gb.get_group('foo')\nOut[21]: \n     A         B   C\n0  foo  1.624345   5\n2  foo -0.528172  11\n4  foo  0.865408  14\n</code></pre>\n\n<p><em>Note: This doesn't require creating an intermediary dictionary / copy of every subdataframe for every group, so will be much more memory-efficient that creating the naive dictionary with <code>dict(iter(gb))</code>. This is because it uses data-structures already available in the groupby object.</em></p>\n\n<hr>\n\n<p>You can select different columns using the groupby slicing:</p>\n\n<pre><code>In [22]: gb[[\"A\", \"B\"]].get_group(\"foo\")\nOut[22]:\n     A         B\n0  foo  1.624345\n2  foo -0.528172\n4  foo  0.865408\n\nIn [23]: gb[\"C\"].get_group(\"foo\")\nOut[23]:\n0     5\n2    11\n4    14\nName: C, dtype: int64\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I want to copy already indented Python code / whole functions and classes into IPython. Everytime I try the indentation is screwed up and I get following error message:</p>\n\n<p><code>IndentationError: unindent does not match any outer indentation level (&lt;ipython-input-23-354f8c8be51b&gt;, line 12)</code></p>\n\n<p><code>If you want to paste code into IPython, try the %paste and %cpaste magic functions.</code></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can't copy to IPython directly. This are the steps:</p>\n\n<ol>\n<li>Copy the lines you want to copy into IPython into the clipboard</li>\n<li>Enter <code>%paste</code> into IPython</li>\n<li>Press enter</li>\n<li>Profit!</li>\n</ol>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is there a reference for the memory size of Python data stucture on 32- and 64-bit platforms?</p>\n\n<p>If not, this would be nice to have it on SO. The more exhaustive the better! So how many bytes are used by the following Python structures (depending on the <code>len</code> and the content type when relevant)?</p>\n\n<ul>\n<li><code>int</code></li>\n<li><code>float</code></li>\n<li>reference</li>\n<li><code>str</code></li>\n<li>unicode string</li>\n<li><code>tuple</code></li>\n<li><code>list</code></li>\n<li><code>dict</code></li>\n<li><code>set</code></li>\n<li><code>array.array</code></li>\n<li><code>numpy.array</code></li>\n<li><code>deque</code></li>\n<li>new-style classes object</li>\n<li>old-style classes object</li>\n<li>... and everything I am forgetting!</li>\n</ul>\n\n<p>(For containers that keep only references to other objects, we obviously do not want to count the size of the item themselves, since it might be shared.)</p>\n\n<p>Furthermore, is there a way to get the memory used by an object at runtime (recursively or not)?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The recommendation from <a href=\"https://stackoverflow.com/questions/449560/how-do-i-determine-the-size-of-an-object-in-python\">an earlier question</a> on this was to use <a href=\"http://docs.python.org/library/sys.html#sys.getsizeof\" rel=\"noreferrer\">sys.getsizeof()</a>, quoting:</p>\n\n<pre><code>&gt;&gt;&gt; import sys\n&gt;&gt;&gt; x = 2\n&gt;&gt;&gt; sys.getsizeof(x)\n14\n&gt;&gt;&gt; sys.getsizeof(sys.getsizeof)\n32\n&gt;&gt;&gt; sys.getsizeof('this')\n38\n&gt;&gt;&gt; sys.getsizeof('this also')\n48\n</code></pre>\n\n<p>You could take this approach:</p>\n\n<pre><code>&gt;&gt;&gt; import sys\n&gt;&gt;&gt; import decimal\n&gt;&gt;&gt; \n&gt;&gt;&gt; d = {\n...     \"int\": 0,\n...     \"float\": 0.0,\n...     \"dict\": dict(),\n...     \"set\": set(),\n...     \"tuple\": tuple(),\n...     \"list\": list(),\n...     \"str\": \"a\",\n...     \"unicode\": u\"a\",\n...     \"decimal\": decimal.Decimal(0),\n...     \"object\": object(),\n... }\n&gt;&gt;&gt; for k, v in sorted(d.iteritems()):\n...     print k, sys.getsizeof(v)\n...\ndecimal 40\ndict 140\nfloat 16\nint 12\nlist 36\nobject 8\nset 116\nstr 25\ntuple 28\nunicode 28\n</code></pre>\n\n<hr>\n\n<p>2012-09-30</p>\n\n<p>python 2.7 (linux, 32-bit):</p>\n\n<pre><code>decimal 36\ndict 136\nfloat 16\nint 12\nlist 32\nobject 8\nset 112\nstr 22\ntuple 24\nunicode 32\n</code></pre>\n\n<p>python 3.3 (linux, 32-bit)</p>\n\n<pre><code>decimal 52\ndict 144\nfloat 16\nint 14\nlist 32\nobject 8\nset 112\nstr 26\ntuple 24\nunicode 26\n</code></pre>\n\n<hr>\n\n<p>2016-08-01</p>\n\n<p>OSX, Python 2.7.10 (default, Oct 23 2015, 19:19:21) [GCC 4.2.1 Compatible Apple LLVM 7.0.0 (clang-700.0.59.5)] on darwin</p>\n\n<pre><code>decimal 80\ndict 280\nfloat 24\nint 24\nlist 72\nobject 16\nset 232\nstr 38\ntuple 56\nunicode 52\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I get the following error when trying to run Django from the command line.</p>\n\n<pre><code>File manage.py, line 8, in &lt;module&gt;\n\u00a0\u00a0\u00a0\u00a0 from django.core.management import execute_from_command_line\nImportError: No module named django.core.management\n</code></pre>\n\n<p>Any ideas on how to solve this?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It sounds like you do not have django installed. You should check the directory produced by this command: </p>\n\n<pre><code>python -c \"from distutils.sysconfig import get_python_lib; print get_python_lib()\"\n</code></pre>\n\n<p>To see if you have the django packages in there. </p>\n\n<p>If there's no django folder inside of site-packages, then you do not have django installed (at least for that version of python). </p>\n\n<p>It is possible you have more than one version of python installed and django is inside of another version. You can find out all the versions of python if you type <code>python</code> and then press TAB. Here are all the different python's I have. </p>\n\n<pre><code>$python\npython            python2-config    python2.6         python2.7-config  pythonw2.5\npython-config     python2.5         python2.6-config  pythonw           pythonw2.6\npython2           python2.5-config  python2.7         pythonw2          pythonw2.7\n</code></pre>\n\n<p>You can do the above command for each version of python and look inside the site-packages directory of each to see if any of them have django installed. For example:</p>\n\n<pre><code>python2.5 -c \"from distutils.sysconfig import get_python_lib; print get_python_lib()\"\npython2.6 -c \"from distutils.sysconfig import get_python_lib; print get_python_lib()\"\n</code></pre>\n\n<p>If you happen to find django inside of say python2.6, try your original command with</p>\n\n<pre><code>python2.6 manage.py ...\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<pre><code>soup.find(\"tagName\", { \"id\" : \"articlebody\" })\n</code></pre>\n\n<p>Why does this NOT return the <code>&lt;div id=\"articlebody\"&gt; ... &lt;/div&gt;</code> tags and stuff in between? It returns nothing. And I know for a fact it exists because I'm staring right at it from </p>\n\n<pre><code>soup.prettify()\n</code></pre>\n\n<p><code>soup.find(\"div\", { \"id\" : \"articlebody\" })</code> also does not work.</p>\n\n<p><strong>Edit:</strong> There is no answer to this post - how do I delete it? I found that BeautifulSoup is not parsing correctly, which probably actually means the page I'm trying to parse isn't properly formatted in SGML or whatever. </p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You should post your example document, because the code works fine:</p>\n\n<pre><code>&gt;&gt;&gt; import BeautifulSoup\n&gt;&gt;&gt; soup = BeautifulSoup.BeautifulSoup('&lt;html&gt;&lt;body&gt;&lt;div id=\"articlebody\"&gt; ... &lt;/div&gt;&lt;/body&gt;&lt;/html')\n&gt;&gt;&gt; soup.find(\"div\", {\"id\": \"articlebody\"})\n&lt;div id=\"articlebody\"&gt; ... &lt;/div&gt;\n</code></pre>\n\n<p>Finding <code>&lt;div&gt;</code>s inside <code>&lt;div&gt;</code>s works as well:</p>\n\n<pre><code>&gt;&gt;&gt; soup = BeautifulSoup.BeautifulSoup('&lt;html&gt;&lt;body&gt;&lt;div&gt;&lt;div id=\"articlebody\"&gt; ... &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html')\n&gt;&gt;&gt; soup.find(\"div\", {\"id\": \"articlebody\"})\n&lt;div id=\"articlebody\"&gt; ... &lt;/div&gt;\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How does one add rows to a numpy array?</p>\n\n<p>I have an array A:</p>\n\n<pre><code>A = array([[0, 1, 2], [0, 2, 0]])\n</code></pre>\n\n<p>I wish to add rows to this array from another array X if the first element of each row in X meets a specific condition.</p>\n\n<p>Numpy arrays do not have a method 'append' like that of lists, or so it seems.</p>\n\n<p>If A and X were lists I would merely do:</p>\n\n<pre><code>for i in X:\n    if i[0] &lt; 3:\n        A.append(i)\n</code></pre>\n\n<p>Is there a <em>numpythonic</em> way to do the equivalent?</p>\n\n<p>Thanks,\nS ;-)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>What is <code>X</code>? If it is a 2D-array, how can you then compare its row to a number: <code>i &lt; 3</code>?</p>\n\n<p>EDIT after OP's comment:</p>\n\n<pre><code>A = array([[0, 1, 2], [0, 2, 0]])\nX = array([[0, 1, 2], [1, 2, 0], [2, 1, 2], [3, 2, 0]])\n</code></pre>\n\n<p>add to <code>A</code> all rows from <code>X</code> where the first element <code>&lt; 3</code>:</p>\n\n<pre><code>A = vstack((A, X[X[:,0] &lt; 3]))\n\n# returns: \narray([[0, 1, 2],\n       [0, 2, 0],\n       [0, 1, 2],\n       [1, 2, 0],\n       [2, 1, 2]])\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<pre><code>d3 = dict(d1, **d2)\n</code></pre>\n\n<p>I understand that this merges the dictionary. But, is it unique? What if d1 has the same key as d2 but different value?  I would like d1 and d2 to be merged, but d1 has priority if there is duplicate key.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can use the <a href=\"http://docs.python.org/library/stdtypes.html#dict.update\" rel=\"noreferrer\"><code>.update()</code></a> method if you don't need the original <code>d2</code> any more:</p>\n\n<blockquote>\n  <p>Update the dictionary with the key/value pairs from other, <strong>overwriting existing keys</strong>. Return <code>None</code>.</p>\n</blockquote>\n\n<p>E.g.:</p>\n\n<pre><code>&gt;&gt;&gt; d1 = {'a': 1, 'b': 2} \n&gt;&gt;&gt; d2 = {'b': 1, 'c': 3}\n&gt;&gt;&gt; d2.update(d1)\n&gt;&gt;&gt; d2\n{'a': 1, 'c': 3, 'b': 2}\n</code></pre>\n\n<p><strong>Update:</strong></p>\n\n<p>Of course you can copy the dictionary first in order to create a new merged one. This might or might not be necessary. In case you have compound objects (objects that contain other objects, like lists or class instances) in your dictionary, <a href=\"http://docs.python.org/library/copy.html\" rel=\"noreferrer\"><code>copy.deepcopy</code></a> should also be considered.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have the need to take a string argument and create an object of the class named in that string in Python.  In Java, I would use <code>Class.forName().newInstance()</code>.  Is there an equivalent in Python?</p>\n\n<hr>\n\n<p>Thanks for the responses.  To answer those who want to know what I'm doing: I want to use a command line argument as the class name, and instantiate it.  I'm actually programming in Jython and instantiating Java classes, hence the Java-ness of the question.  <code>getattr()</code> works great.  Thanks much.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Reflection in python is a lot easier and far more flexible than it is in Java.</p>\n\n<p>I recommend reading this <a href=\"http://www.diveintopython.net/power_of_introspection/index.html\" rel=\"noreferrer\">tutorial</a></p>\n\n<p>There's no direct function (that I know of) which takes a fully qualified class name and returns the class, however you have all the pieces needed to build that, and you can connect them together.</p>\n\n<p>One bit of advice though: don't try to program in Java style when you're in python.</p>\n\n<p>If you can explain what is it that you're trying to do, maybe we can help you find a more pythonic way of doing it.</p>\n\n<p>Here's a function that does what you want:</p>\n\n<pre><code>def get_class( kls ):\n    parts = kls.split('.')\n    module = \".\".join(parts[:-1])\n    m = __import__( module )\n    for comp in parts[1:]:\n        m = getattr(m, comp)            \n    return m\n</code></pre>\n\n<p>You can use the return value of this function as if it were the class itself.</p>\n\n<p>Here's a usage example:</p>\n\n<pre><code>&gt;&gt;&gt; D = get_class(\"datetime.datetime\")\n&gt;&gt;&gt; D\n&lt;type 'datetime.datetime'&gt;\n&gt;&gt;&gt; D.now()\ndatetime.datetime(2009, 1, 17, 2, 15, 58, 883000)\n&gt;&gt;&gt; a = D( 2010, 4, 22 )\n&gt;&gt;&gt; a\ndatetime.datetime(2010, 4, 22, 0, 0)\n&gt;&gt;&gt; \n</code></pre>\n\n<p><strong>How does that work?</strong></p>\n\n<p>We're using <code>__import__</code> to import the module that holds the class, which required that we first extract the module name from the fully qualified name. Then we import the module:</p>\n\n<pre><code>m = __import__( module )\n</code></pre>\n\n<p>In this case, <code>m</code> will only refer to the top level module, </p>\n\n<p>For example, if your class lives in <code>foo.baz</code> module, then <code>m</code> will be the module <code>foo</code><br>\nWe can easily obtain a reference to <code>foo.baz</code> using <code>getattr( m, 'baz' )</code></p>\n\n<p>To get from the top level module to the class, have to recursively use <code>gettatr</code> on the parts of the class name</p>\n\n<p>Say for example, if you class name is <code>foo.baz.bar.Model</code> then we do this:</p>\n\n<pre><code>m = __import__( \"foo.baz.bar\" ) #m is package foo\nm = getattr( m, \"baz\" ) #m is package baz\nm = getattr( m, \"bar\" ) #m is module bar\nm = getattr( m, \"Model\" ) #m is class Model\n</code></pre>\n\n<p>This is what's happening in this loop:</p>\n\n<pre><code>for comp in parts[1:]:\n    m = getattr(m, comp)    \n</code></pre>\n\n<p>At the end of the loop, <code>m</code> will be a reference to the class. This means that <code>m</code> is actually the class itslef, you can do for instance:</p>\n\n<pre><code>a = m() #instantiate a new instance of the class    \nb = m( arg1, arg2 ) # pass arguments to the constructor\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I want to remove the first character of a string.</p>\n\n<p>For example, my string starts with a \":\" and I want to remove that only, there are a lot of \":\" in the string which shouldn't be removed.</p>\n\n<p>I am writing my code in Python</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<pre><code>s = \":dfa:sif:e\"\nprint s[1:]\n</code></pre>\n\n<p>prints</p>\n\n<pre><code>dfa:sif:e\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How can I get a random pair from a <code>dict</code>? I'm making a game where you need to guess a capital of a country and I need questions to appear randomly.</p>\n\n<p>The <code>dict</code> looks like <code>{'VENEZUELA':'CARACAS'}</code></p>\n\n<p>How can I do this?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>One way would be:</p>\n\n<pre><code>import random\nd = {'VENEZUELA':'CARACAS', 'CANADA':'OTTAWA'}\nrandom.choice(d.keys())\n</code></pre>\n\n<p><strong>EDIT</strong>:  The question was changed a couple years after the original post, and now asks for a pair, rather than a single item.  The final line should now be:</p>\n\n<pre><code>country, capital = random.choice(list(d.items()))\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm trying to use <code>matplotlib</code> to read in an RGB image and convert it to grayscale.</p>\n\n<p>In matlab I use this:</p>\n\n<pre><code>img = rgb2gray(imread('image.png'));\n</code></pre>\n\n<p>In the <a href=\"http://matplotlib.sourceforge.net/users/image_tutorial.html\" rel=\"noreferrer\">matplotlib tutorial</a> they don't cover it. They just read in the image</p>\n\n<pre><code>import matplotlib.image as mpimg\nimg = mpimg.imread('image.png')\n</code></pre>\n\n<p>and then they slice the array, but that's not the same thing as converting RGB to grayscale from what I understand.</p>\n\n<pre><code>lum_img = img[:,:,0]\n</code></pre>\n\n<p>EDIT:</p>\n\n<p>I find it hard to believe that numpy or matplotlib doesn't have a built-in function to convert from rgb to gray. Isn't this a common operation in image processing?</p>\n\n<p>I wrote a very simple function that works with the image imported using <code>imread</code> in 5 minutes. It's horribly inefficient, but that's why I was hoping for a professional implementation built-in. </p>\n\n<p>Sebastian has improved my function, but I'm still hoping to find the built-in one.</p>\n\n<p>matlab's (NTSC/PAL) implementation:</p>\n\n<pre><code>import numpy as np\n\ndef rgb2gray(rgb):\n\n    r, g, b = rgb[:,:,0], rgb[:,:,1], rgb[:,:,2]\n    gray = 0.2989 * r + 0.5870 * g + 0.1140 * b\n\n    return gray\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>How about doing it with <a href=\"http://www.pythonware.com/products/pil/\" rel=\"noreferrer\">PIL</a>:</p>\n\n<pre><code>from PIL import Image\nimg = Image.open('image.png').convert('LA')\nimg.save('greyscale.png')\n</code></pre>\n\n<hr>\n\n<p>Using matplotlib and <a href=\"http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\" rel=\"noreferrer\">the formula</a></p>\n\n<pre><code>Y' = 0.299 R + 0.587 G + 0.114 B \n</code></pre>\n\n<p>you could do:</p>\n\n<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n\ndef rgb2gray(rgb):\n    return np.dot(rgb[...,:3], [0.299, 0.587, 0.114])\n\nimg = mpimg.imread('image.png')     \ngray = rgb2gray(img)    \nplt.imshow(gray, cmap = plt.get_cmap('gray'))\nplt.show()\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I 'm trying to do :</p>\n\n<pre><code>award_dict = {\n    \"url\" : \"http://facebook.com\",\n    \"imageurl\" : \"http://farm4.static.flickr.com/3431/3939267074_feb9eb19b1_o.png\",\n    \"count\" : 1,\n}\n\ndef award(name, count, points, desc_string, my_size, parent) :\n    if my_size &gt; count :\n        a = {\n            \"name\" : name,\n            \"description\" : desc_string % count,\n            \"points\" : points,\n            \"parent_award\" : parent,\n        }\n        a.update(award_dict)\n        return self.add_award(a, siteAlias, alias).award\n</code></pre>\n\n<p>But if felt really cumbersome in the function, and I would have rather done :</p>\n\n<pre><code>        return self.add_award({\n            \"name\" : name,\n            \"description\" : desc_string % count,\n            \"points\" : points,\n            \"parent_award\" : parent,\n        }.update(award_dict), siteAlias, alias).award\n</code></pre>\n\n<p>Why doesn't update return the object so you can chain? </p>\n\n<p>JQuery does this to do chaining. Why isn't it acceptable in python?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Python's mostly implementing a pragmatically tinged flavor of <a href=\"http://en.wikipedia.org/wiki/Command-query_separation\" rel=\"noreferrer\">command-query separation</a>: mutators return <code>None</code> (with pragmatically induced exceptions such as <code>pop</code>;-) so they can't possibly be confused with accessors (and in the same vein, assignment is not an expression, the statement-expression separation is there, and so forth).</p>\n\n<p>That doesn't mean there aren't a lot of ways to merge things up when you really want, e.g., <code>dict(a, **award_dict)</code> makes a new dict much like the one you appear to wish <code>.update</code> returned -- so why not use THAT if you really feel it's important?</p>\n\n<p><strong>Edit</strong>: btw, no need, in your specific case, to create <code>a</code> along the way, either:</p>\n\n<pre><code>dict(name=name, description=desc % count, points=points, parent_award=parent,\n     **award_dict)\n</code></pre>\n\n<p>creates a single dict with exactly the same semantics as your <code>a.update(award_dict)</code> (including, in case of conflicts, the fact that entries in <code>award_dict</code> override those you're giving explicitly; to get the other semantics, i.e., to have explicit entries \"winning\" such conflicts, pass <code>award_dict</code> as the sole <em>positional</em> arg, <em>before</em> the keyword ones, and bereft of the <code>**</code> form -- <code>dict(award_dict, name=name</code> etc etc).</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm building an admin for Flask and SQLAlchemy, and I want to pass the HTML for the different inputs to my view using <code>render_template</code>. The templating framework seems to escape the html automatically, so all &lt;\"'&gt; are converted to html entities. How can I disable that so that the HTML renders correctly?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>the ideal way is to</p>\n\n<pre><code>{{ something|safe }}\n</code></pre>\n\n<p>than completely turning off auto escaping. </p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Sometimes it is useful to \"clone\" a row or column vector to a matrix. By cloning I mean converting a row vector such as</p>\n\n<pre><code>[1,2,3]\n</code></pre>\n\n<p>Into a matrix</p>\n\n<pre><code>[[1,2,3]\n [1,2,3]\n [1,2,3]\n]\n</code></pre>\n\n<p>or a column vector such as</p>\n\n<pre><code>[1\n 2\n 3\n]\n</code></pre>\n\n<p>into</p>\n\n<pre><code>[[1,1,1]\n [2,2,2]\n [3,3,3]\n]\n</code></pre>\n\n<p>In matlab or octave this is done pretty easily:</p>\n\n<pre><code> x = [1,2,3]\n a = ones(3,1) * x\n a =\n\n    1   2   3\n    1   2   3\n    1   2   3\n\n b = (x') * ones(1,3)\n b =\n\n    1   1   1\n    2   2   2\n    3   3   3\n</code></pre>\n\n<p>I want to repeat this in numpy, but unsuccessfully</p>\n\n<pre><code>In [14]: x = array([1,2,3])\nIn [14]: ones((3,1)) * x\nOut[14]:\narray([[ 1.,  2.,  3.],\n       [ 1.,  2.,  3.],\n       [ 1.,  2.,  3.]])\n# so far so good\nIn [16]: x.transpose() * ones((1,3))\nOut[16]: array([[ 1.,  2.,  3.]])\n# DAMN\n# I end up with \nIn [17]: (ones((3,1)) * x).transpose()\nOut[17]:\narray([[ 1.,  1.,  1.],\n       [ 2.,  2.,  2.],\n       [ 3.,  3.,  3.]])\n</code></pre>\n\n<p>Why wasn't the first method (In[16]) working? Is there a way to achieve this task in python in a more elegant way?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here's an elegant, Pythonic way to do it:</p>\n\n<pre><code>&gt;&gt;&gt; array([[1,2,3],]*3)\narray([[1, 2, 3],\n       [1, 2, 3],\n       [1, 2, 3]])\n\n&gt;&gt;&gt; array([[1,2,3],]*3).transpose()\narray([[1, 1, 1],\n       [2, 2, 2],\n       [3, 3, 3]])\n</code></pre>\n\n<p>the problem with <code>[16]</code> seems to be that the transpose has no effect for an array. you're probably wanting a matrix instead:</p>\n\n<pre><code>&gt;&gt;&gt; x = array([1,2,3])\n&gt;&gt;&gt; x\narray([1, 2, 3])\n&gt;&gt;&gt; x.transpose()\narray([1, 2, 3])\n&gt;&gt;&gt; matrix([1,2,3])\nmatrix([[1, 2, 3]])\n&gt;&gt;&gt; matrix([1,2,3]).transpose()\nmatrix([[1],\n        [2],\n        [3]])\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I want to check if a string is in a text file. If it is, do X. If it's not, do Y. However, this code always returns <code>True</code> for some reason. Can anyone see what is wrong?</p>\n\n<pre><code>def check():\n    datafile = file('example.txt')\n    found = False\n    for line in datafile:\n        if blabla in line:\n            found = True\n            break\n\ncheck()\nif True:\n    print \"true\"\nelse:\n    print \"false\"\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>The reason why you always got <code>True</code> has already been given, so I'll just offer another suggestion:</p>\n\n<p>If your file is not too large, you can read it into a string, and just use that (easier and often faster than reading and checking line per line):</p>\n\n<pre><code>if 'blabla' in open('example.txt').read():\n    print(\"true\")\n</code></pre>\n\n<p>Another trick: you can alleviate the possible memory problems by using <a href=\"http://docs.python.org/library/mmap.html\" rel=\"noreferrer\"><code>mmap.mmap()</code></a> to create a \"string-like\" object that uses the underlying file (instead of reading the whole file in memory):</p>\n\n<pre><code>import mmap\n\nf = open('example.txt')\ns = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)\nif s.find('blabla') != -1:\n    print('true')\n</code></pre>\n\n<p>NOTE: in python 3, mmaps behave like <code>bytearray</code> objects rather than strings, so the subsequence you look for with <code>find()</code> has to be a <code>bytes</code> object rather than a string as well, eg. <code>s.find(b'blabla')</code>:</p>\n\n<pre><code>#!/usr/bin/env python3\nimport mmap\n\nwith open('example.txt', 'rb', 0) as file, \\\n     mmap.mmap(file.fileno(), 0, access=mmap.ACCESS_READ) as s:\n    if s.find(b'blabla') != -1:\n        print('true')\n</code></pre>\n\n<p>You could also use regular expressions on <code>mmap</code> e.g., case-insensitive search: <code>if re.search(br'(?i)blabla', s):</code></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/6260089/strange-result-when-removing-item-from-a-list\" dir=\"ltr\">strange result when removing item from a list [duplicate]</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    4 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>in this code I am trying to create a function anti_vowel that will remove all vowels (aeiouAEIOU) from a string. I think it <em>should</em> work ok, but when I run it, the sample text \"Hey look Words!\" is returned as \"Hy lk Words!\". It  \"forgets\" to remove the last 'o'. How can this be?</p>\n\n<pre><code>text = \"Hey look Words!\"\n\ndef anti_vowel(text):\n\n    textlist = list(text)\n\n    for char in textlist:\n        if char.lower() in 'aeiou':\n            textlist.remove(char)\n\n    return \"\".join(textlist)\n\nprint anti_vowel(text)\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You're modifying the list you're iterating over, which is bound to result in some unintuitive behavior. Instead, make a copy of the list so you don't remove elements from what you're iterating through.</p>\n\n<pre><code>for char in textlist[:]: #shallow copy of the list\n    # etc\n</code></pre>\n\n<hr>\n\n<p>To clarify the behavior you're seeing, check this out. Put <code>print char, textlist</code> at the beginning of your (original) loop. You'd expect, perhaps, that this would print out your string vertically, alongside the list, but what you'll actually get is this:</p>\n\n<pre><code>H ['H', 'e', 'y', ' ', 'l', 'o', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\ne ['H', 'e', 'y', ' ', 'l', 'o', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\n  ['H', 'y', ' ', 'l', 'o', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!'] # !\nl ['H', 'y', ' ', 'l', 'o', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\no ['H', 'y', ' ', 'l', 'o', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\nk ['H', 'y', ' ', 'l', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!'] # Problem!!\n  ['H', 'y', ' ', 'l', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\nW ['H', 'y', ' ', 'l', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\no ['H', 'y', ' ', 'l', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!'] \nd ['H', 'y', ' ', 'l', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\ns ['H', 'y', ' ', 'l', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\n! ['H', 'y', ' ', 'l', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']\nHy lk Words!\n</code></pre>\n\n<p>So what's going on? The nice <code>for x in y</code> loop in Python is really just syntactic sugar: it still accesses list elements by index. So when you remove elements from the list while iterating over it, you start skipping values (as you can see above). As a result, you never see the second <code>o</code> in <code>\"look\"</code>; you skip over it because the index has advanced \"past\" it when you deleted the previous element. Then, when you get to the <code>o</code> in <code>\"Words\"</code>, you go to remove the first occurrence of <code>'o'</code>, which is the one you skipped before.</p>\n\n<hr>\n\n<p>As others have mentioned, list comprehensions are probably an even better (cleaner, clearer) way to do this. Make use of the fact that Python strings are iterable:</p>\n\n<pre><code>def remove_vowels(text): # function names should start with verbs! :)\n    return ''.join(ch for ch in text if ch.lower() not in 'aeiou')\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Can anyone explain why passing a generator as the only positional argument to a function seems to have special rules?</p>\n\n<p>If we have: </p>\n\n<pre><code>&gt;&gt;&gt; def f(*args):\n&gt;&gt;&gt;    print \"Success!\"\n&gt;&gt;&gt;    print args\n</code></pre>\n\n<ol>\n<li><p>This works, as expected.</p>\n\n<pre><code>&gt;&gt;&gt; f(1, *[2])\nSuccess!\n(1, 2)\n</code></pre></li>\n<li><p>This does not work, as expected.</p>\n\n<pre><code>&gt;&gt;&gt; f(*[2], 1)\n  File \"&lt;stdin&gt;\", line 1\nSyntaxError: only named arguments may follow *expression\n</code></pre></li>\n<li><p>This works, as expected</p>\n\n<pre><code>&gt;&gt;&gt; f(1 for x in [1], *[2])\nSuccess! \n(generator object &lt;genexpr&gt; at 0x7effe06bdcd0&gt;, 2)\n</code></pre></li>\n<li><p>This works, but I don't understand why. Shouldn't it fail in the same way as 2)</p>\n\n<pre><code>&gt;&gt;&gt; f(*[2], 1 for x in [1])                                               \nSuccess!\n(generator object &lt;genexpr&gt; at 0x7effe06bdcd0&gt;, 2)\n</code></pre></li>\n</ol>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>Both 3. and 4. <em>should</em> be syntax errors on all Python versions.</strong> However you've found a bug that affects Python versions 2.5 - 3.4, and which was subsequently <a href=\"https://bugs.python.org/issue25070\">posted to the Python issue tracker</a>. Because of the bug, an unparenthesized generator expression was accepted as an argument to a function if it was accompanied only by <code>*args</code> and/or <code>**kwargs</code>. While Python 2.6+ allowed both cases 3. and 4., Python 2.5 allowed only case 3. - yet both of them were against the <a href=\"https://docs.python.org/2.5/ref/calls.html\">documented grammar</a>:</p>\n\n<pre><code>call    ::=     primary \"(\" [argument_list [\",\"]\n                            | expression genexpr_for] \")\"\n</code></pre>\n\n<p>i.e. the documentation says a function call comprises of <code>primary</code> (the expression that evaluates to a callable), followed by, in parentheses, <em>either</em> an argument list <em>or</em> just an unparenthesized generator expression;\nand within the argument list, all generator expressions must be in parentheses.</p>\n\n<hr>\n\n<p>This bug (though it seems it had not been known), had been fixed in Python 3.5 prereleases. In Python 3.5 parentheses are always required around a generator expression, unless it is the only argument to the function:</p>\n\n<pre><code>Python 3.5.0a4+ (default:a3f2b171b765, May 19 2015, 16:14:41) \n[GCC 4.9.2] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; f(1 for i in [42], *a)\n  File \"&lt;stdin&gt;\", line 1\nSyntaxError: Generator expression must be parenthesized if not sole argument\n</code></pre>\n\n<p>This is now documented in the <a href=\"https://docs.python.org/3.6/whatsnew/3.5.html#changes-in-python-behavior\">What's New in Python 3.5</a>, thanks to DeTeReR spotting this bug.</p>\n\n<hr>\n\n<h2>Analysis of the bug</h2>\n\n<p>There was a change made to Python 2.6 which <a href=\"https://docs.python.org/2/whatsnew/2.6.html#other-language-changes\">allowed the use of keyword arguments <em>after</em> <code>*args</code></a>:</p>\n\n<blockquote>\n  <p>It\u2019s also become legal to provide keyword arguments after a *args\n  argument to a function call.</p>\n\n<pre><code>&gt;&gt;&gt; def f(*args, **kw):\n...     print args, kw\n...\n&gt;&gt;&gt; f(1,2,3, *(4,5,6), keyword=13)\n(1, 2, 3, 4, 5, 6) {'keyword': 13}\n</code></pre>\n  \n  <p>Previously this would have been a syntax error. (Contributed by Amaury\n  Forgeot d\u2019Arc; issue 3473.)</p>\n</blockquote>\n\n<hr>\n\n<p>However, the Python 2.6 <a href=\"https://github.com/python/cpython/blob/2.6/Grammar/Grammar#L133\">grammar</a> does not make any distinction between keyword arguments, positional arguments, or bare generator expressions - they are all of type <code>argument</code> to the parser.</p>\n\n<p>As per Python rules, a generator expression must be parenthesized if it is not the sole argument to the function. This is validated in the <a href=\"https://github.com/python/cpython/blob/2.6/Python/ast.c#L1906\"><code>Python/ast.c</code></a>:</p>\n\n<pre><code>for (i = 0; i &lt; NCH(n); i++) {\n    node *ch = CHILD(n, i);\n    if (TYPE(ch) == argument) {\n        if (NCH(ch) == 1)\n            nargs++;\n        else if (TYPE(CHILD(ch, 1)) == gen_for)\n            ngens++;\n        else\n            nkeywords++;\n    }\n}\nif (ngens &gt; 1 || (ngens &amp;&amp; (nargs || nkeywords))) {\n    ast_error(n, \"Generator expression must be parenthesized \"\n              \"if not sole argument\");\n    return NULL;\n}\n</code></pre>\n\n<p>However this function does <em>not</em> consider the <code>*args</code> at all - it specifically only looks for ordinary positional arguments and keyword arguments.</p>\n\n<p>Further down in the same function, there is an error message generated for <a href=\"https://github.com/python/cpython/blob/2.6/Python/ast.c#L1931\">non-keyword arg after keyword arg</a>:</p>\n\n<pre><code>if (TYPE(ch) == argument) {\n    expr_ty e;\n    if (NCH(ch) == 1) {\n        if (nkeywords) {\n            ast_error(CHILD(ch, 0),\n                      \"non-keyword arg after keyword arg\");\n            return NULL;\n        }\n        ...\n</code></pre>\n\n<p>But this again applies to arguments that are <em>not</em> unparenthesized generator expressions as <a href=\"https://github.com/python/cpython/blob/2.6/Python/ast.c#L1945\">evidenced by the <code>else if</code> statement</a>:</p>\n\n<pre><code>else if (TYPE(CHILD(ch, 1)) == gen_for) {\n    e = ast_for_genexp(c, ch);\n    if (!e)\n        return NULL;\n    asdl_seq_SET(args, nargs++, e);\n}\n</code></pre>\n\n<p>Thus an unparenthesized generator expression was allowed to slip pass.</p>\n\n<hr>\n\n<p>Now in Python 3.5 one can use the <code>*args</code> anywhere in a function call, so\nthe <a href=\"https://github.com/python/cpython/blob/3.5/Grammar/Grammar#L126\">Grammar</a> was changed to accommodate for this:</p>\n\n<pre><code>arglist: argument (',' argument)*  [',']\n</code></pre>\n\n<p>and </p>\n\n<pre><code>argument: ( test [comp_for] |\n            test '=' test |\n            '**' test |\n            '*' test )\n</code></pre>\n\n<p>and the <a href=\"https://github.com/python/cpython/blob/3.5/Python/ast.c#L2628\"><code>for</code> loop was changed</a> to</p>\n\n<pre><code>for (i = 0; i &lt; NCH(n); i++) {\n    node *ch = CHILD(n, i);\n    if (TYPE(ch) == argument) {\n        if (NCH(ch) == 1)\n            nargs++;\n        else if (TYPE(CHILD(ch, 1)) == comp_for)\n            ngens++;\n        else if (TYPE(CHILD(ch, 0)) == STAR)\n            nargs++;\n        else\n            /* TYPE(CHILD(ch, 0)) == DOUBLESTAR or keyword argument */\n            nkeywords++;\n    }\n}\n</code></pre>\n\n<p>Thus fixing the bug.</p>\n\n<p>However the inadvertent change is that the valid looking constructions</p>\n\n<pre><code>func(i for i in [42], *args)\n</code></pre>\n\n<p>and</p>\n\n<pre><code>func(i for i in [42], **kwargs)\n</code></pre>\n\n<p>where an unparenthesized generator precedes <code>*args</code> or <code>**kwargs</code> now stopped working.</p>\n\n<hr>\n\n<p>To locate this bug, I tried various Python versions. In 2.5 you'd get <code>SyntaxError</code>:</p>\n\n<pre><code>Python 2.5.5 (r255:77872, Nov 28 2010, 16:43:48) \n[GCC 4.4.5] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; f(*[1], 2 for x in [2])\n  File \"&lt;stdin&gt;\", line 1\n    f(*[1], 2 for x in [2])\n</code></pre>\n\n<p>And this was fixed before some prerelease of Python 3.5:</p>\n\n<pre><code>Python 3.5.0a4+ (default:a3f2b171b765, May 19 2015, 16:14:41) \n[GCC 4.9.2] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; f(*[1], 2 for x in [2])\n  File \"&lt;stdin&gt;\", line 1\nSyntaxError: Generator expression must be parenthesized if not sole argument\n</code></pre>\n\n<p>However, the parenthesized generator expression, it works in Python 3.5, but it does not work not in Python 3.4:</p>\n\n<pre><code>f(*[1], (2 for x in [2]))\n</code></pre>\n\n<p>And this is the clue. In Python 3.5 the <code>*splatting</code> is generalized; you can use it anywhere in a function call:</p>\n\n<pre><code>&gt;&gt;&gt; print(*range(5), 42)\n0 1 2 3 4 42\n</code></pre>\n\n<p>So the actual bug (generator working with <code>*star</code> without parentheses) <em>was</em> indeed fixed in Python 3.5, and the bug could be found in that what changed between Python 3.4 and 3.5</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is there a nice Pythonic way to loop over a list, retuning a pair of elements? The last element should be paired with the first.</p>\n\n<p>So for instance, if I have the list [1, 2, 3], I would like to get the following pairs:</p>\n\n<ul>\n<li>1 - 2</li>\n<li>2 - 3</li>\n<li>3 - 1</li>\n</ul>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>A Pythonic way to access a list pairwise is: <code>zip(L, L[1:])</code>. To connect the last item to the first one:</p>\n\n<pre><code>&gt;&gt;&gt; L = [1, 2, 3]\n&gt;&gt;&gt; zip(L, L[1:] + L[:1])\n[(1, 2), (2, 3), (3, 1)]\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How do I authenticate against AD using Python + LDAP. I'm currently using the python-ldap library and all it is producing is tears.</p>\n\n<p>I can't even bind to perform a simple query:</p>\n\n<pre><code>import sys\nimport ldap\n\n\nServer = \"ldap://my-ldap-server\"\nDN, Secret, un = sys.argv[1:4]\n\nBase = \"dc=mydomain,dc=co,dc=uk\"\nScope = ldap.SCOPE_SUBTREE\nFilter = \"(&amp;(objectClass=user)(sAMAccountName=\"+un+\"))\"\nAttrs = [\"displayName\"]\n\nl = ldap.initialize(Server)\nl.protocol_version = 3\nprint l.simple_bind_s(DN, Secret)\n\nr = l.search(Base, Scope, Filter, Attrs)\nType,user = l.result(r,60)\nName,Attrs = user[0]\nif hasattr(Attrs, 'has_key') and Attrs.has_key('displayName'):\n  displayName = Attrs['displayName'][0]\n  print displayName\n\nsys.exit()\n</code></pre>\n\n<p>Running this with <code>myusername@mydomain.co.uk password username</code> gives me one of two errors:</p>\n\n<p><code>Invalid Credentials</code> - When I mistype or intentionally use wrong credentials it fails to authenticate.</p>\n\n<blockquote>\n  <p>ldap.INVALID_CREDENTIALS: {'info': '80090308: LdapErr: DSID-0C090334, comment: AcceptSecurityContext error, data 52e, vece', 'desc': 'Invalid credentials'}</p>\n</blockquote>\n\n<p>Or </p>\n\n<blockquote>\n  <p>ldap.OPERATIONS_ERROR: {'info': '00000000: LdapErr: DSID-0C090627, comment: In order to perform this operation a successful bind must be completed on the connection., data 0, vece', 'desc': 'Operations error'}</p>\n</blockquote>\n\n<p>What am I missing out to bind properly?</p>\n\n<p>I am getting the same errors on fedora and windows.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I was missing </p>\n\n<pre><code>l.set_option(ldap.OPT_REFERRALS, 0)\n</code></pre>\n\n<p>From the init.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p><strong>Note:</strong> This question was originally asked <a href=\"https://stackoverflow.com/questions/1216794/python-subprocess-popen-erroring-with-oserror-errno-12-cannot-allocate-memory\">here</a> but the bounty time expired even though an acceptable answer was not actually found. I am re-asking this question including all details provided in the original question.</p>\n\n<p>A python script is running a set of class functions every 60 seconds using the <a href=\"http://docs.python.org/library/sched.html\" rel=\"noreferrer\">sched</a> module:</p>\n\n<pre><code># sc is a sched.scheduler instance\nsc.enter(60, 1, self.doChecks, (sc, False))\n</code></pre>\n\n<p>The script is running as a daemonised process using the code <a href=\"http://www.jejik.com/articles/2007/02/a_simple_unix_linux_daemon_in_python/\" rel=\"noreferrer\">here</a>.</p>\n\n<p>A number of class methods that are called as part of doChecks use the <a href=\"http://docs.python.org/library/subprocess.html\" rel=\"noreferrer\">subprocess</a> module to call system functions in order to get system statistics:</p>\n\n<pre><code>ps = subprocess.Popen(['ps', 'aux'], stdout=subprocess.PIPE).communicate()[0]\n</code></pre>\n\n<p>This runs fine for a period of time before the entire script crashing with the following error:</p>\n\n<pre><code>File \"/home/admin/sd-agent/checks.py\", line 436, in getProcesses\nFile \"/usr/lib/python2.4/subprocess.py\", line 533, in __init__\nFile \"/usr/lib/python2.4/subprocess.py\", line 835, in _get_handles\nOSError: [Errno 12] Cannot allocate memory\n</code></pre>\n\n<p>The output of free -m on the server once the script has crashed is:</p>\n\n<pre><code>$ free -m\n                  total       used       free     shared     buffers    cached\nMem:                894        345        549          0          0          0\n-/+ buffers/cache:  345        549\nSwap:                 0          0          0\n</code></pre>\n\n<p>The server is running CentOS 5.3. I am unable to reproduce on my own CentOS boxes nor with any other user reporting the same problem.</p>\n\n<p>I have tried a number of things to debug this as suggested in the original question:</p>\n\n<ol>\n<li><p>Logging the output of free -m before and after the Popen call. There is no significant change in memory usage i.e. memory is not gradually being used up as the script runs.</p></li>\n<li><p>I added close_fds=True to the Popen call but this made no difference - the script still crashed with the same error. Suggested <a href=\"https://stackoverflow.com/questions/1216794/python-subprocess-popen-erroring-with-oserror-errno-12-cannot-allocate-memory/1297785#1297785\">here</a> and <a href=\"https://stackoverflow.com/questions/1216794/python-subprocess-popen-erroring-with-oserror-errno-12-cannot-allocate-memory/1278961#1278961\">here</a>.</p></li>\n<li><p>I checked the rlimits which showed (-1, -1) on both RLIMIT_DATA and RLIMIT_AS as suggested <a href=\"https://stackoverflow.com/questions/1216794/python-subprocess-popen-erroring-with-oserror-errno-12-cannot-allocate-memory/1270442#1270442\">here</a>.</p></li>\n<li><p><a href=\"http://www.zenoss.com/community/wiki/common-error-messages-and-solutions/oserror-errno-12-cannot-allocate-memory-in-popen2.py/\" rel=\"noreferrer\">An article</a> suggested the having no swap space might be the cause but swap is actually available on demand (according to the web host) and this was also suggested as a bogus cause <a href=\"https://stackoverflow.com/questions/1216794/python-subprocess-popen-erroring-with-oserror-errno-12-cannot-allocate-memory/1270171#1270171\">here</a>.</p></li>\n<li><p>The processes are being closed because that is the behaviour of using .communicate() as backed up by the Python source code and comments <a href=\"https://stackoverflow.com/questions/1216794/python-subprocess-popen-erroring-with-oserror-errno-12-cannot-allocate-memory/1216824#1216824\">here</a>.</p></li>\n</ol>\n\n<p>The entire checks can be found at on <a href=\"http://github.com/dmytton/sd-agent/blob/82f5ff9203e54d2adeee8cfed704d09e3f00e8eb/checks.py\" rel=\"noreferrer\">GitHub here</a> with the getProcesses function defined from line 442. This is called by doChecks() starting at line 520.</p>\n\n<p>The script was run with strace with the following output before the crash:</p>\n\n<pre><code>recv(4, \"Total Accesses: 516662\\nTotal kBy\"..., 234, 0) = 234\ngettimeofday({1250893252, 887805}, NULL) = 0\nwrite(3, \"2009-08-21 17:20:52,887 - checks\"..., 91) = 91\ngettimeofday({1250893252, 888362}, NULL) = 0\nwrite(3, \"2009-08-21 17:20:52,888 - checks\"..., 74) = 74\ngettimeofday({1250893252, 888897}, NULL) = 0\nwrite(3, \"2009-08-21 17:20:52,888 - checks\"..., 67) = 67\ngettimeofday({1250893252, 889184}, NULL) = 0\nwrite(3, \"2009-08-21 17:20:52,889 - checks\"..., 81) = 81\nclose(4)                                = 0\ngettimeofday({1250893252, 889591}, NULL) = 0\nwrite(3, \"2009-08-21 17:20:52,889 - checks\"..., 63) = 63\npipe([4, 5])                            = 0\npipe([6, 7])                            = 0\nfcntl64(7, F_GETFD)                     = 0\nfcntl64(7, F_SETFD, FD_CLOEXEC)         = 0\nclone(child_stack=0, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0xb7f12708) = -1 ENOMEM (Cannot allocate memory)\nwrite(2, \"Traceback (most recent call last\"..., 35) = 35\nopen(\"/usr/bin/sd-agent/agent.py\", O_RDONLY|O_LARGEFILE) = -1 ENOMEM (Cannot allocate memory)\nopen(\"/usr/bin/sd-agent/agent.py\", O_RDONLY|O_LARGEFILE) = -1 ENOMEM (Cannot allocate memory)\nopen(\"/usr/lib/python24.zip/agent.py\", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/python2.4/agent.py\", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/python2.4/plat-linux2/agent.py\", O_RDONLY|O_LARGEFILE) = -1 ENOMEM (Cannot allocate memory)\nopen(\"/usr/lib/python2.4/lib-tk/agent.py\", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/python2.4/lib-dynload/agent.py\", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/python2.4/site-packages/agent.py\", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)\nwrite(2, \"  File \\\"/usr/bin/sd-agent/agent.\"..., 52) = 52\nopen(\"/home/admin/sd-agent/daemon.py\", O_RDONLY|O_LARGEFILE) = -1 ENOMEM (Cannot allocate memory)\nopen(\"/usr/bin/sd-agent/daemon.py\", O_RDONLY|O_LARGEFILE) = -1 ENOMEM (Cannot allocate memory)\nopen(\"/usr/lib/python24.zip/daemon.py\", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/python2.4/daemon.py\", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/python2.4/plat-linux2/daemon.py\", O_RDONLY|O_LARGEFILE) = -1 ENOMEM (Cannot allocate memory)\nopen(\"/usr/lib/python2.4/lib-tk/daemon.py\", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/python2.4/lib-dynload/daemon.py\", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/python2.4/site-packages/daemon.py\", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)\nwrite(2, \"  File \\\"/home/admin/sd-agent/dae\"..., 60) = 60\nopen(\"/usr/bin/sd-agent/agent.py\", O_RDONLY|O_LARGEFILE) = -1 ENOMEM (Cannot allocate memory)\nopen(\"/usr/bin/sd-agent/agent.py\", O_RDONLY|O_LARGEFILE) = -1 ENOMEM (Cannot allocate memory)\nopen(\"/usr/lib/python24.zip/agent.py\", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/python2.4/agent.py\", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/python2.4/plat-linux2/agent.py\", O_RDONLY|O_LARGEFILE) = -1 ENOMEM (Cannot allocate memory)\nopen(\"/usr/lib/python2.4/lib-tk/agent.py\", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/python2.4/lib-dynload/agent.py\", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/python2.4/site-packages/agent.py\", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)\nwrite(2, \"  File \\\"/usr/bin/sd-agent/agent.\"..., 54) = 54\nopen(\"/usr/lib/python2.4/sched.py\", O_RDONLY|O_LARGEFILE) = 8\nwrite(2, \"  File \\\"/usr/lib/python2.4/sched\"..., 55) = 55\nfstat64(8, {st_mode=S_IFREG|0644, st_size=4054, ...}) = 0\nmmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7d28000\nread(8, \"\\\"\\\"\\\"A generally useful event sche\"..., 4096) = 4054\nwrite(2, \"    \", 4)                     = 4\nwrite(2, \"void = action(*argument)\\n\", 25) = 25\nclose(8)                                = 0\nmunmap(0xb7d28000, 4096)                = 0\nopen(\"/usr/bin/sd-agent/checks.py\", O_RDONLY|O_LARGEFILE) = -1 ENOMEM (Cannot allocate memory)\nopen(\"/usr/bin/sd-agent/checks.py\", O_RDONLY|O_LARGEFILE) = -1 ENOMEM (Cannot allocate memory)\nopen(\"/usr/lib/python24.zip/checks.py\", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/python2.4/checks.py\", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/python2.4/plat-linux2/checks.py\", O_RDONLY|O_LARGEFILE) = -1 ENOMEM (Cannot allocate memory)\nopen(\"/usr/lib/python2.4/lib-tk/checks.py\", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/python2.4/lib-dynload/checks.py\", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/python2.4/site-packages/checks.py\", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)\nwrite(2, \"  File \\\"/usr/bin/sd-agent/checks\"..., 60) = 60\nopen(\"/usr/bin/sd-agent/checks.py\", O_RDONLY|O_LARGEFILE) = -1 ENOMEM (Cannot allocate memory)\nopen(\"/usr/bin/sd-agent/checks.py\", O_RDONLY|O_LARGEFILE) = -1 ENOMEM (Cannot allocate memory)\nopen(\"/usr/lib/python24.zip/checks.py\", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/python2.4/checks.py\", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/python2.4/plat-linux2/checks.py\", O_RDONLY|O_LARGEFILE) = -1 ENOMEM (Cannot allocate memory)\nopen(\"/usr/lib/python2.4/lib-tk/checks.py\", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/python2.4/lib-dynload/checks.py\", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)\nopen(\"/usr/lib/python2.4/site-packages/checks.py\", O_RDONLY|O_LARGEFILE) = -1 ENOENT (No such file or directory)\nwrite(2, \"  File \\\"/usr/bin/sd-agent/checks\"..., 64) = 64\nopen(\"/usr/lib/python2.4/subprocess.py\", O_RDONLY|O_LARGEFILE) = 8\nwrite(2, \"  File \\\"/usr/lib/python2.4/subpr\"..., 65) = 65\nfstat64(8, {st_mode=S_IFREG|0644, st_size=39931, ...}) = 0\nmmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7d28000\nread(8, \"# subprocess - Subprocesses with\"..., 4096) = 4096\nread(8, \"lso, the newlines attribute of t\"..., 4096) = 4096\nread(8, \"code &lt; 0:\\n        print &gt;&gt;sys.st\"..., 4096) = 4096\nread(8, \"alse does not exist on 2.2.0\\ntry\"..., 4096) = 4096\nread(8, \" p2cread\\n        # c2pread    &lt;-\"..., 4096) = 4096\nwrite(2, \"    \", 4)                     = 4\nwrite(2, \"errread, errwrite)\\n\", 19)    = 19\nclose(8)                                = 0\nmunmap(0xb7d28000, 4096)                = 0\nopen(\"/usr/lib/python2.4/subprocess.py\", O_RDONLY|O_LARGEFILE) = 8\nwrite(2, \"  File \\\"/usr/lib/python2.4/subpr\"..., 71) = 71\nfstat64(8, {st_mode=S_IFREG|0644, st_size=39931, ...}) = 0\nmmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7d28000\nread(8, \"# subprocess - Subprocesses with\"..., 4096) = 4096\nread(8, \"lso, the newlines attribute of t\"..., 4096) = 4096\nread(8, \"code &lt; 0:\\n        print &gt;&gt;sys.st\"..., 4096) = 4096\nread(8, \"alse does not exist on 2.2.0\\ntry\"..., 4096) = 4096\nread(8, \" p2cread\\n        # c2pread    &lt;-\"..., 4096) = 4096\nread(8, \"table(self, handle):\\n           \"..., 4096) = 4096\nread(8, \"rrno using _sys_errlist (or siml\"..., 4096) = 4096\nread(8, \" p2cwrite = None, None\\n         \"..., 4096) = 4096\nwrite(2, \"    \", 4)                     = 4\nwrite(2, \"self.pid = os.fork()\\n\", 21)  = 21\nclose(8)                                = 0\nmunmap(0xb7d28000, 4096)                = 0\nwrite(2, \"OSError\", 7)                  = 7\nwrite(2, \": \", 2)                       = 2\nwrite(2, \"[Errno 12] Cannot allocate memor\"..., 33) = 33\nwrite(2, \"\\n\", 1)                       = 1\nunlink(\"/var/run/sd-agent.pid\")         = 0\nclose(3)                                = 0\nmunmap(0xb7e0d000, 4096)                = 0\nrt_sigaction(SIGINT, {SIG_DFL, [], SA_RESTORER, 0x589978}, {0xb89a60, [], SA_RESTORER, 0x589978}, 8) = 0\nbrk(0xa022000)                          = 0xa022000\nexit_group(1)                           = ?\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>As a general rule (i.e. in vanilla kernels), <code>fork</code>/<code>clone</code> failures with <code>ENOMEM</code> <a href=\"https://github.com/torvalds/linux/blob/master/kernel/fork.c\" rel=\"noreferrer\"><strong>occur specifically</strong></a> because of either <strong>an honest to God out-of-memory condition</strong> (<code>dup_mm</code>, <code>dup_task_struct</code>, <code>alloc_pid</code>, <code>mpol_dup</code>, <code>mm_init</code> etc. croak), or because <code>security_vm_enough_memory_mm</code> failed you <strong>while <a href=\"https://github.com/torvalds/linux/blob/38a76013ad809beb0b52f60d365c960d035bd83c/mm/mmap.c#L91\" rel=\"noreferrer\">enforcing</a> the <a href=\"https://github.com/torvalds/linux/blob/master/Documentation/vm/overcommit-accounting\" rel=\"noreferrer\">overcommit policy</a>.</strong></p>\n\n<p>Start by checking the vmsize of the process that failed to fork, at the time of the fork attempt, and then compare to the amount of free memory (physical and swap) as it relates to the overcommit policy (plug the numbers in.)</p>\n\n<p>In your particular case, note that Virtuozzo has <a href=\"https://src.openvz.org/projects/OVZL/repos/linux-2.6.32-openvz/browse/kernel/sys.c#183\" rel=\"noreferrer\">additional checks</a> in <a href=\"https://src.openvz.org/projects/OVZL/repos/linux-2.6.32-openvz/commits/5198e6ea6a7c9c1a7d890f4c639007fce9290b05#mm/mmap.c\" rel=\"noreferrer\">overcommit enforcement</a>.  Moreover, I'm not sure how much control you truly have, from <strong>within</strong> your container, over <a href=\"http://kb.odin.com/en/112740\" rel=\"noreferrer\">swap and overcommit configuration</a> (in order to influence the outcome of the enforcement.)</p>\n\n<p>Now, in order to actually move forward I'd say you're <strong>left with two options</strong>:</p>\n\n<ul>\n<li>switch to a larger instance, or</li>\n<li>put some coding effort into <strong>more effectively controlling your script's memory</strong> footprint</li>\n</ul>\n\n<p><strong>NOTE</strong> that the coding effort may be all for naught if it turns out that it's not you, but some other guy collocated in a different instance on the same server as you running amock.</p>\n\n<p>Memory-wise, we already know that <strong><code>subprocess.Popen</code> uses <code>fork</code>/<code>clone</code></strong> <a href=\"http://svn.python.org/projects/python/trunk/Lib/subprocess.py\" rel=\"noreferrer\">under the hood</a>, meaning that every time you call it you're <strong>requesting once more as much memory as Python is already eating up</strong>, i.e. in the hundreds of additional MB, all in order to then <code>exec</code> a puny 10kB executable such as <code>free</code> or <code>ps</code>.  In the case of an unfavourable overcommit policy, you'll soon see <code>ENOMEM</code>.</p>\n\n<p>Alternatives to <code>fork</code> that do not have this parent page tables etc. copy problem are <a href=\"http://linux.die.net/man/2/vfork\" rel=\"noreferrer\"><code>vfork</code></a> and <a href=\"http://linux.die.net/man/3/posix_spawn\" rel=\"noreferrer\"><code>posix_spawn</code></a>.  But if you do not feel like rewriting chunks of <code>subprocess.Popen</code> in terms of <code>vfork</code>/<code>posix_spawn</code>, consider using <code>suprocess.Popen</code> only once, at the beginning of your script (when Python's memory footprint is minimal), to <strong>spawn a shell script that then runs <code>free</code>/<code>ps</code>/<code>sleep</code> and whatever else in a loop</strong> parallel to your script; poll the script's output or read it synchronously, possibly from a separate thread if you have other stuff to take care of asynchronously -- do your data crunching in Python but leave the forking to the subordinate process.</p>\n\n<p><strong>HOWEVER</strong>, in your particular case you can skip invoking <code>ps</code> and <code>free</code> altogether; that <strong>information is readily available to you in Python directly from <a href=\"http://www.kernel.org/doc/Documentation/filesystems/proc.txt\" rel=\"noreferrer\"><code>procfs</code></a></strong>, whether you choose to access it yourself or via <a href=\"https://www.google.com/search?q=python%20procfs\" rel=\"noreferrer\">existing libraries and/or packages</a>.  If <code>ps</code> and <code>free</code> were the only utilities you were running, then you can <strong>do away with <code>subprocess.Popen</code> completely</strong>.</p>\n\n<p>Finally, whatever you do as far as <code>subprocess.Popen</code> is concerned, if your script leaks memory you will still hit the wall eventually.  Keep an eye on it, and <a href=\"https://www.google.com/search?q=python%20memory%20leaks\" rel=\"noreferrer\">check for memory leaks</a>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/7828867/how-to-efficiently-compare-two-unordered-lists-not-sets-in-python\" dir=\"ltr\">How to efficiently compare two unordered lists (not sets) in Python?</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    9 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>When writing test cases, I often need to assert that two list contain the same elements without regard to their order.</p>\n\n<p>I have been doing this by converting the lists to sets.</p>\n\n<p>Is there any simpler way to do this?</p>\n\n<p><strong>EDIT</strong>:</p>\n\n<p>As @MarkDickinson pointed out, I can just use <a href=\"http://docs.python.org/library/unittest.html#unittest.TestCase.assertItemsEqual\" rel=\"noreferrer\">TestCase.assertItemsEqual</a>.</p>\n\n<p>Notes that <code>TestCase.assertItemsEqual</code> is new in Python2.7.\nIf you are using an older version of Python, you can use <a href=\"http://pypi.python.org/pypi/unittest2\" rel=\"noreferrer\">unittest2</a> - a backport of new features of Python 2.7.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Slightly faster version of the implementation (If you know that most couples lists will have different lengths):</p>\n\n<pre><code>def checkEqual(L1, L2):\n    return len(L1) == len(L2) and sorted(L1) == sorted(L2)\n</code></pre>\n\n<p>Comparing: </p>\n\n<pre><code>&gt;&gt;&gt; timeit(lambda: sorting([1,2,3], [3,2,1]))\n2.42745304107666\n&gt;&gt;&gt; timeit(lambda: lensorting([1,2,3], [3,2,1]))\n2.5644469261169434 # speed down not much (for large lists the difference tends to 0)\n\n&gt;&gt;&gt; timeit(lambda: sorting([1,2,3], [3,2,1,0]))\n2.4570400714874268\n&gt;&gt;&gt; timeit(lambda: lensorting([1,2,3], [3,2,1,0]))\n0.9596951007843018 # speed up\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is it possible to run a python script (not module) from inside ipython without indicating its path? I tried to set PYTHONPATH but it seems to work only for modules. \nI would like to execute</p>\n\n<pre><code>%run my_script.py\n</code></pre>\n\n<p>without being in the directory containing the file.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>from within the directory of \"my_script.py\" you can simply do:</p>\n\n<pre><code>%run ./my_script.py\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Is there a good way to do this in django without rolling my own authentication system?  I want the username to be the user's email address instead of them creating a username.</p>\n\n<p>Please advise, thank you.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>For anyone else wanting to do this, I'd recommend taking a look at <a href=\"https://github.com/dabapps/django-email-as-username\" rel=\"noreferrer\">django-email-as-username</a> which is a pretty comprehensive solution, that includes patching up the admin and the <code>createsuperuser</code> management commands, amongst other bits and pieces.</p>\n\n<p><strong>Edit</strong>: As of Django 1.5 onwards you should consider using a <a href=\"https://docs.djangoproject.com/en/dev/topics/auth/customizing/#auth-custom-user\" rel=\"noreferrer\">custom user model</a> instead of <a href=\"https://github.com/dabapps/django-email-as-username\" rel=\"noreferrer\">django-email-as-username</a>.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>This is more of a conceptual question. I recently saw a piece of code in Python (it worked in 2.7, and it might also have been run in 2.5 as well) in which a <code>for</code> loop used the same name for both the list that was being iterated over and the item in the list, which strikes me as both bad practice and something that should not work at all.</p>\n\n<p>For example:</p>\n\n<pre><code>x = [1,2,3,4,5]\nfor x in x:\n    print x\nprint x\n</code></pre>\n\n<p>Yields:</p>\n\n<pre><code>1\n2\n3\n4\n5\n5\n</code></pre>\n\n<p>Now, it makes sense to me that the last value printed would be the last value assigned to x from the loop, but I fail to understand why you'd be able to use the same variable name for both your parts of the <code>for</code> loop and have it function as intended. Are they in different scopes? What's going on under the hood that allows something like this to work?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>What does <code>dis</code> tell us:</p>\n\n<pre><code>Python 3.4.1 (default, May 19 2014, 13:10:29)\n[GCC 4.2.1 Compatible Apple LLVM 5.1 (clang-503.0.40)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; from dis import dis\n&gt;&gt;&gt; dis(\"\"\"x = [1,2,3,4,5]\n... for x in x:\n...     print(x)\n... print(x)\"\"\")\n\n  1           0 LOAD_CONST               0 (1)\n              3 LOAD_CONST               1 (2)\n              6 LOAD_CONST               2 (3)\n              9 LOAD_CONST               3 (4)\n             12 LOAD_CONST               4 (5)\n             15 BUILD_LIST               5\n             18 STORE_NAME               0 (x)\n\n  2          21 SETUP_LOOP              24 (to 48)\n             24 LOAD_NAME                0 (x)\n             27 GET_ITER\n        &gt;&gt;   28 FOR_ITER                16 (to 47)\n             31 STORE_NAME               0 (x)\n\n  3          34 LOAD_NAME                1 (print)\n             37 LOAD_NAME                0 (x)\n             40 CALL_FUNCTION            1 (1 positional, 0 keyword pair)\n             43 POP_TOP\n             44 JUMP_ABSOLUTE           28\n        &gt;&gt;   47 POP_BLOCK\n\n  4     &gt;&gt;   48 LOAD_NAME                1 (print)\n             51 LOAD_NAME                0 (x)\n             54 CALL_FUNCTION            1 (1 positional, 0 keyword pair)\n             57 POP_TOP\n             58 LOAD_CONST               5 (None)\n             61 RETURN_VALUE\n</code></pre>\n\n<p>The key bits are sections 2 and 3 - we load the value out of <code>x</code> (<code>24 LOAD_NAME 0 (x)</code>) and then we get its iterator (<code>27 GET_ITER</code>) and start iterating over it (<code>28 FOR_ITER</code>).  Python <em>never goes back to load the iterator again</em>. </p>\n\n<p><em>Aside:</em> It wouldn't make any sense to do so, since it already has the iterator, and as <a href=\"https://stackoverflow.com/a/24690950/135978\">Abhijit points out in his answer</a>, <a href=\"https://docs.python.org/3/reference/compound_stmts.html#the-for-statement\" rel=\"nofollow noreferrer\">Section 7.3 of Python's specification</a> actually requires this behavior).</p>\n\n<p>When the name <code>x</code> gets overwritten to point at each value inside of the list formerly known as <code>x</code> Python doesn't have any problems finding the iterator because it never needs to look at the name <code>x</code> again to finish the iteration protocol.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I recently switched from Django 1.6 to 1.7, and I began using migrations (I never used South).</p>\n\n<p>Before 1.7, I used to load initial data with a <code>fixture/initial_data.json</code> file, which was loaded with the <code>python manage.py syncdb</code> command (when creating the database).</p>\n\n<p>Now, I started using migrations, and this behavior is deprecated :</p>\n\n<blockquote>\n  <p>If an application uses migrations, there is no automatic loading of fixtures.\n  Since migrations will be required for applications in Django 2.0, this behavior is considered deprecated. If you want to load initial data for an app, consider doing it in a data migration.\n   (<a href=\"https://docs.djangoproject.com/en/1.7/howto/initial-data/#automatically-loading-initial-data-fixtures\" rel=\"nofollow noreferrer\">https://docs.djangoproject.com/en/1.7/howto/initial-data/#automatically-loading-initial-data-fixtures</a>)</p>\n</blockquote>\n\n<p>The <a href=\"https://docs.djangoproject.com/en/1.7/topics/migrations/#data-migrations\" rel=\"nofollow noreferrer\">official documentation</a> does not have a clear example on how to do it, so my question is :</p>\n\n<p>What is the best way to import such initial data using data migrations :</p>\n\n<ol>\n<li>Write Python code with multiple calls to <code>mymodel.create(...)</code>,</li>\n<li>Use or write a Django function (<a href=\"https://stackoverflow.com/questions/887627/programmatically-using-djangos-loaddata\">like calling <code>loaddata</code></a>) to load data from a JSON fixture file.</li>\n</ol>\n\n<p>I prefer the second option.</p>\n\n<p>I don't want to use South, as Django seems to be able to do it natively now.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><em>Update</em>: See @GwynBleidD's comment below for the problems this solution can cause, and see @rockalite's answer below for an approach that's more durable to future model changes.</p>\n\n<hr>\n\n<p>Assuming you have a fixture file in <code>&lt;yourapp&gt;/fixtures/initial_data.json</code></p>\n\n<ol>\n<li><p>Create your empty migration:</p>\n\n<p>In Django 1.7:</p>\n\n<pre><code>python manage.py makemigrations --empty &lt;yourapp&gt;\n</code></pre>\n\n<p>In Django 1.8+, you can provide a name:</p>\n\n<pre><code>python manage.py makemigrations --empty &lt;yourapp&gt; --name load_intial_data\n</code></pre></li>\n<li><p>Edit your migration file <code>&lt;yourapp&gt;/migrations/0002_auto_xxx.py</code></p>\n\n<p>2.1. Custom implementation, inspired by Django' <code>loaddata</code> (initial answer):</p>\n\n<pre><code>import os\nfrom sys import path\nfrom django.core import serializers\n\nfixture_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '../fixtures'))\nfixture_filename = 'initial_data.json'\n\ndef load_fixture(apps, schema_editor):\n    fixture_file = os.path.join(fixture_dir, fixture_filename)\n\n    fixture = open(fixture_file, 'rb')\n    objects = serializers.deserialize('json', fixture, ignorenonexistent=True)\n    for obj in objects:\n        obj.save()\n    fixture.close()\n\ndef unload_fixture(apps, schema_editor):\n    \"Brutally deleting all entries for this model...\"\n\n    MyModel = apps.get_model(\"yourapp\", \"ModelName\")\n    MyModel.objects.all().delete()\n\nclass Migration(migrations.Migration):  \n\n    dependencies = [\n        ('yourapp', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RunPython(load_fixture, reverse_code=unload_fixture),\n    ]\n</code></pre>\n\n<p>2.2. A simpler solution for <code>load_fixture</code> (per @juliocesar's suggestion):</p>\n\n<pre><code>from django.core.management import call_command\n\nfixture_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '../fixtures'))\nfixture_filename = 'initial_data.json'\n\ndef load_fixture(apps, schema_editor):\n    fixture_file = os.path.join(fixture_dir, fixture_filename)\n    call_command('loaddata', fixture_file) \n</code></pre>\n\n<p><em>Useful if you want to use a custom directory.</em></p>\n\n<p>2.3. <strong>Simplest:</strong> calling <code>loaddata</code> with <code>app_label</code> will load fixtures from the <code>&lt;yourapp&gt;</code>'s <code>fixtures</code> dir automatically :            </p>\n\n<pre><code>from django.core.management import call_command\n\nfixture = 'initial_data'\n\ndef load_fixture(apps, schema_editor):\n    call_command('loaddata', fixture, app_label='yourapp') \n</code></pre>\n\n<p><em>If you don't specify <code>app_label</code>, loaddata will try to load <code>fixture</code> filename from <strong>all</strong> apps fixtures directories (which you probably don't want).</em> </p></li>\n<li><p>Run it</p>\n\n<pre><code>python manage.py migrate &lt;yourapp&gt;\n</code></pre></li>\n</ol>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Module <code>A</code> includes <code>import B</code> at its top. However under test conditions I'd like to <a href=\"http://www.voidspace.org.uk/python/mock/\" rel=\"noreferrer\">mock</a> <code>B</code> in <code>A</code> (mock <code>A.B</code>) and completely refrain from importing <code>B</code>. </p>\n\n<p>In fact, <code>B</code> isn't installed in the test environment on purpose.</p>\n\n<p>A is the unit under test. I have to import A with all its functionality. B is the module I need to mock. But how can I mock B within A and stop A from importing the real B, if the first thing A does is import B?</p>\n\n<p>(The reason B isn't installed is that I use pypy for quick testing and unfortunately B isn't compatible with pypy yet.)</p>\n\n<p>How could this be done?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can assign to <code>sys.modules['B']</code> before importing <code>A</code> to get what you want:</p>\n\n<p><strong>test.py</strong>:</p>\n\n<pre><code>import sys\nsys.modules['B'] = __import__('mock_B')\nimport A\n\nprint(A.B.__name__)\n</code></pre>\n\n<p><strong>A.py</strong>:</p>\n\n<pre><code>import B\n</code></pre>\n\n<p>Note B.py does not exist, but when running <code>test.py</code> no error is returned and <code>print(A.B.__name__)</code> prints <code>mock_B</code>. You still have to create a <code>mock_B.py</code> where you mock B's actual functions/variables/etc. Or you can just assign a Mock() directly:</p>\n\n<p><strong>test.py</strong>:</p>\n\n<pre><code>import sys\nsys.modules['B'] = Mock()\nimport A\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What is meant by \"using the EAFP principle\" in Python? Could you provide any examples?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>From the <a href=\"http://docs.python.org//glossary.html#term-eafp\" rel=\"noreferrer\">glossary</a>:</p>\n\n<blockquote>\n  <p>Easier to ask for forgiveness than permission. This common Python coding style assumes the existence of valid keys or attributes and catches exceptions if the assumption proves false. This clean and fast style is characterized by the presence of many <code>try</code> and <code>except</code> statements. The technique contrasts with the <a href=\"http://docs.python.org//glossary.html#term-lbyl\" rel=\"noreferrer\">LBYL style</a> common to many other languages such as C.</p>\n</blockquote>\n\n<p>An example would be an attempt to access a dictionary key.</p>\n\n<p>EAFP:</p>\n\n<pre><code>try:\n    x = my_dict[\"key\"]\nexcept KeyError:\n    # handle missing key\n</code></pre>\n\n<p>LBYL:</p>\n\n<pre><code>if \"key\" in my_dict:\n    x = my_dict[\"key\"]\nelse:\n    # handle missing key\n</code></pre>\n\n<p>The LBYL version has to search the key inside the dictionary twice, and might also be considered slightly less readable.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Assume I have a <code>csv.DictReader</code> object and I want to write it out as a CSV file. How can I do this?</p>\n\n<p>I know that I can write the <strong>rows of data</strong> like this:</p>\n\n<pre><code>dr = csv.DictReader(open(f), delimiter='\\t')\n# process my dr object\n# ...\n# write out object\noutput = csv.DictWriter(open(f2, 'w'), delimiter='\\t')\nfor item in dr:\n    output.writerow(item)\n</code></pre>\n\n<p>But how can I include the fieldnames?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Edit:<br>\nIn 2.7 / 3.2 there is <a href=\"http://docs.python.org/dev/library/csv.html#csv.DictWriter.writeheader\" rel=\"noreferrer\">a new <code>writeheader()</code> method</a>. Also, John Machin's answer provides a simpler method of writing the header row.<br>\nSimple example of using the <code>writeheader()</code> method now available in 2.7 / 3.2:</p>\n\n<pre><code>from collections import OrderedDict\nordered_fieldnames = OrderedDict([('field1',None),('field2',None)])\nwith open(outfile,'wb') as fou:\n    dw = csv.DictWriter(fou, delimiter='\\t', fieldnames=ordered_fieldnames)\n    dw.writeheader()\n    # continue on to write data\n</code></pre>\n\n<hr>\n\n<p>Instantiating DictWriter requires a fieldnames argument.<br>\nFrom <a href=\"http://docs.python.org/library/csv.html#csv.DictWriter\" rel=\"noreferrer\">the documentation</a>:  </p>\n\n<blockquote>\n  <p>The fieldnames parameter identifies\n  the order in which values in the\n  dictionary passed to the writerow()\n  method are written to the csvfile.</p>\n</blockquote>\n\n<p>Put another way:  The Fieldnames argument is required because Python dicts are inherently unordered.<br>\nBelow is an example of how you'd write the header and data to a file.<br>\nNote: <code>with</code> statement was added in 2.6. If using 2.5: <code>from __future__ import with_statement</code></p>\n\n<pre><code>with open(infile,'rb') as fin:\n    dr = csv.DictReader(fin, delimiter='\\t')\n\n# dr.fieldnames contains values from first row of `f`.\nwith open(outfile,'wb') as fou:\n    dw = csv.DictWriter(fou, delimiter='\\t', fieldnames=dr.fieldnames)\n    headers = {} \n    for n in dw.fieldnames:\n        headers[n] = n\n    dw.writerow(headers)\n    for row in dr:\n        dw.writerow(row)\n</code></pre>\n\n<p>As @FM mentions in a comment, you can condense header-writing to a one-liner, e.g.:</p>\n\n<pre><code>with open(outfile,'wb') as fou:\n    dw = csv.DictWriter(fou, delimiter='\\t', fieldnames=dr.fieldnames)\n    dw.writerow(dict((fn,fn) for fn in dr.fieldnames))\n    for row in dr:\n        dw.writerow(row)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I would like to know which programming language is better for natural language processing. <em>Java</em> or <em>Python</em>? I have found lots of questions and answers regarding about it. But I am still lost in choosing which one to use.</p>\n\n<p>And I want to know which NLP library to use for Java since there are lots of libraries (LingPipe, GATE, OpenNLP, StandfordNLP). For Python, most programmers recommend NLTK.</p>\n\n<p>But if I am to do some text processing or information extraction from <strong>unstructured data</strong> (just free formed plain English text) to get some useful information, what is the best option? Java or Python? Suitable library?</p>\n\n<p><strong>Updated</strong></p>\n\n<p>What I want to do is to extract useful product information from unstructured data (E.g. users make different forms of advertisement about mobiles or laptops with not very standard English language)</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Java vs Python for NLP is very much a preference or necessity. Depending on the company/projects you'll need to use one or the other and often there isn't much of a choice unless you're heading a project.</p>\n\n<p>Other than <strong><code>NLTK</code></strong> (www.nltk.org), there are actually other libraries for text processing in <strong><code>python</code></strong>:</p>\n\n<ul>\n<li><strong>TextBlob</strong>: <a href=\"http://textblob.readthedocs.org/en/dev/\" rel=\"noreferrer\">http://textblob.readthedocs.org/en/dev/</a></li>\n<li><strong>Gensim</strong>: <a href=\"http://radimrehurek.com/gensim/\" rel=\"noreferrer\">http://radimrehurek.com/gensim/</a></li>\n<li><strong>Pattern</strong>: <a href=\"http://www.clips.ua.ac.be/pattern\" rel=\"noreferrer\">http://www.clips.ua.ac.be/pattern</a></li>\n<li><strong>Spacy</strong>:: <a href=\"http://spacy.io\" rel=\"noreferrer\">http://spacy.io</a></li>\n<li><strong>Orange</strong>: <a href=\"http://orange.biolab.si/features/\" rel=\"noreferrer\">http://orange.biolab.si/features/</a></li>\n<li><strong>Pineapple</strong>: <a href=\"https://github.com/proycon/pynlpl\" rel=\"noreferrer\">https://github.com/proycon/pynlpl</a></li>\n</ul>\n\n<p>(for more, see <a href=\"https://pypi.python.org/pypi?%3Aaction=search&amp;term=natural+language+processing&amp;submit=search\" rel=\"noreferrer\">https://pypi.python.org/pypi?%3Aaction=search&amp;term=natural+language+processing&amp;submit=search</a>)</p>\n\n<p>For <strong><code>Java</code></strong>, there're tonnes of others but here's another list:</p>\n\n<ul>\n<li><strong>Freeling</strong>: <a href=\"http://nlp.lsi.upc.edu/freeling/\" rel=\"noreferrer\">http://nlp.lsi.upc.edu/freeling/</a></li>\n<li><strong>OpenNLP</strong>: <a href=\"http://opennlp.apache.org/\" rel=\"noreferrer\">http://opennlp.apache.org/</a></li>\n<li><strong>LingPipe</strong>: <a href=\"http://alias-i.com/lingpipe/\" rel=\"noreferrer\">http://alias-i.com/lingpipe/</a></li>\n<li><strong>Stanford CoreNLP</strong>: <a href=\"http://stanfordnlp.github.io/CoreNLP/\" rel=\"noreferrer\">http://stanfordnlp.github.io/CoreNLP/</a> (comes with wrappers for other languages, python included)</li>\n<li><strong>CogComp NLP</strong>: <a href=\"https://github.com/CogComp/cogcomp-nlp\" rel=\"noreferrer\">https://github.com/CogComp/cogcomp-nlp</a></li>\n</ul>\n\n<p>This is a nice comparison for basic string processing, see <a href=\"http://nltk.googlecode.com/svn/trunk/doc/howto/nlp-python.html\" rel=\"noreferrer\">http://nltk.googlecode.com/svn/trunk/doc/howto/nlp-python.html</a></p>\n\n<p>A useful comparison of GATE vs UIMA vs OpenNLP, see <a href=\"https://www.assembla.com/spaces/extraction-of-cost-data/wiki/Gate-vs-UIMA-vs-OpenNLP?version=4\" rel=\"noreferrer\">https://www.assembla.com/spaces/extraction-of-cost-data/wiki/Gate-vs-UIMA-vs-OpenNLP?version=4</a></p>\n\n<p>If you're uncertain, which is the language to go for NLP, personally i say, \"any language that will give you the desired analysis/output\", see <a href=\"https://stackoverflow.com/questions/18558665/which-language-or-tools-to-learn-for-natural-language-processing?rq=1\">Which language or tools to learn for natural language processing?</a></p>\n\n<p>Here's a pretty recent (2017) of NLP tools: <a href=\"https://github.com/alvations/awesome-community-curated-nlp\" rel=\"noreferrer\">https://github.com/alvations/awesome-community-curated-nlp</a></p>\n\n<p>An older list of NLP tools (2013): <a href=\"http://web.archive.org/web/20130703190201/http://yauhenklimovich.wordpress.com/2013/05/20/tools-nlp\" rel=\"noreferrer\">http://web.archive.org/web/20130703190201/http://yauhenklimovich.wordpress.com/2013/05/20/tools-nlp</a></p>\n\n<hr>\n\n<p>Other than language processing tools, you would very much need <strong><code>machine learning</code></strong> tools to incorporate into <code>NLP</code> pipelines. </p>\n\n<p>There's a whole range in <code>Python</code> and <code>Java</code>, and once again it's up to preference and whether the libraries are user-friendly enough:</p>\n\n<p>Machine Learning libraries in python:</p>\n\n<ul>\n<li><strong>Sklearn</strong> (Scikit-learn): <a href=\"http://scikit-learn.org/stable/\" rel=\"noreferrer\">http://scikit-learn.org/stable/</a></li>\n<li><strong>Milk</strong>: <a href=\"http://luispedro.org/software/milk\" rel=\"noreferrer\">http://luispedro.org/software/milk</a></li>\n<li><strong>Scipy</strong>: <a href=\"http://www.scipy.org/\" rel=\"noreferrer\">http://www.scipy.org/</a></li>\n<li><strong>Theano</strong>: <a href=\"http://deeplearning.net/software/theano/\" rel=\"noreferrer\">http://deeplearning.net/software/theano/</a></li>\n<li><strong>PyML</strong>: <a href=\"http://pyml.sourceforge.net/\" rel=\"noreferrer\">http://pyml.sourceforge.net/</a></li>\n<li><strong>pyBrain</strong>: <a href=\"http://pybrain.org/\" rel=\"noreferrer\">http://pybrain.org/</a></li>\n<li><strong>Graphlab Create</strong> (Commerical tool but free academic license for 1 year): <a href=\"https://dato.com/products/create/\" rel=\"noreferrer\">https://dato.com/products/create/</a></li>\n</ul>\n\n<p>(for more, see <a href=\"https://pypi.python.org/pypi?%3Aaction=search&amp;term=machine+learning&amp;submit=search\" rel=\"noreferrer\">https://pypi.python.org/pypi?%3Aaction=search&amp;term=machine+learning&amp;submit=search</a>)</p>\n\n<ul>\n<li><strong>Weka</strong>: <a href=\"http://www.cs.waikato.ac.nz/ml/weka/index.html\" rel=\"noreferrer\">http://www.cs.waikato.ac.nz/ml/weka/index.html</a></li>\n<li><strong>Mallet</strong>: <a href=\"http://mallet.cs.umass.edu/\" rel=\"noreferrer\">http://mallet.cs.umass.edu/</a></li>\n<li><strong>Mahout</strong>: <a href=\"https://mahout.apache.org/\" rel=\"noreferrer\">https://mahout.apache.org/</a></li>\n</ul>\n\n<hr>\n\n<p>With the recent (2015) <a href=\"http://www.mitpressjournals.org/doi/pdf/10.1162/COLI_a_00239\" rel=\"noreferrer\">deep learning tsunami in NLP</a>, possibly you could consider: <a href=\"https://en.wikipedia.org/wiki/Comparison_of_deep_learning_software\" rel=\"noreferrer\">https://en.wikipedia.org/wiki/Comparison_of_deep_learning_software</a></p>\n\n<p>I'll avoid listing deep learning tools out of non-favoritism / neutrality. </p>\n\n<hr>\n\n<p>Other Stackoverflow questions that also asked for NLP/ML tools:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2233435/machine-learning-and-natural-language-processing\">Machine Learning and Natural Language Processing</a></li>\n<li><a href=\"https://stackoverflow.com/questions/212219/what-are-good-starting-points-for-someone-interested-in-natural-language-process\">What are good starting points for someone interested in natural language processing?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/4115526/natural-language-processing\">Natural language processing</a></li>\n<li><a href=\"https://stackoverflow.com/questions/11116390/natural-language-processing-in-java-nlp\">Natural Language Processing in Java (NLP)</a></li>\n<li><a href=\"https://stackoverflow.com/questions/870460/is-there-a-good-natural-language-processing-library\">Is there a good natural language processing library</a></li>\n<li><a href=\"https://stackoverflow.com/questions/5833030/simple-natural-language-processing-startup-for-java\">Simple Natural Language Processing Startup for Java</a></li>\n<li><a href=\"https://stackoverflow.com/questions/11849134/what-libraries-offer-basic-or-advanced-nlp-methods\">What libraries offer basic or advanced NLP methods?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3886913/latest-good-languages-and-books-for-natural-language-processing-the-basics?rq=1\">Latest good languages and books for Natural Language Processing, the basics</a></li>\n<li>(For NER) <a href=\"https://stackoverflow.com/questions/7455188/entity-extraction-recognition-with-free-tools-while-feeding-lucene-index\">Entity Extraction/Recognition with free tools while feeding Lucene Index</a></li>\n<li>(With PHP) <a href=\"https://stackoverflow.com/questions/4457830/nlp-programming-tools-using-php\">NLP programming tools using PHP?</a></li>\n<li>(With Ruby) <a href=\"https://stackoverflow.com/questions/3776361/ruby-nlp-libraries\">https://stackoverflow.com/questions/3776361/ruby-nlp-libraries</a></li>\n</ul>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I'm working on a certain program and I need to have it do different things if the file in question is a flac file, or an mp3 file. Could I just use this?</p>\n\n<pre>\nif m == *.mp3\n   ....\nelif m == *.flac\n   ....\n</pre>\n\n<p>I'm not sure whether it will work.</p>\n\n<p><b>EDIT:</b>\nWhen I use that, it tells me invalid syntax. So what do I do?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Assuming <code>m</code> is a string, you can use <code>endswith</code>:</p>\n\n<pre><code>if m.endswith('.mp3'):\n...\nelif m.endswith('.flac'):\n...\n</code></pre>\n\n<p>To be case-insensitive, and to eliminate a potentially large else-if chain:</p>\n\n<pre><code>m.lower().endswith(('.png', '.jpg', '.jpeg'))\n</code></pre>\n\n<p>(Thanks to Wilhem Murdoch for the list of args to <code>endswith</code>)</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a line of the following code (don't blame for naming conventions, they are not mine):</p>\n\n<pre><code>subkeyword = Session.query(\n    Subkeyword.subkeyword_id, Subkeyword.subkeyword_word\n).filter_by(\n    subkeyword_company_id=self.e_company_id\n).filter_by(\n    subkeyword_word=subkeyword_word\n).filter_by(\n    subkeyword_active=True\n).one()\n</code></pre>\n\n<p>I don't like how it looks like (not too readable) but I don't have any better idea to limit lines to 79 characters in this situation. Is there a better way of breaking it (preferably without backslashes)?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You could use additional parenthesis:</p>\n\n<pre><code>subkeyword = (\n        Session.query(Subkeyword.subkeyword_id, Subkeyword.subkeyword_word)\n        .filter_by(subkeyword_company_id=self.e_company_id)\n        .filter_by(subkeyword_word=subkeyword_word)\n        .filter_by(subkeyword_active=True)\n        .one()\n    )\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>What is exactly the function of Python's Global Interpreter Lock?\nDo other languages that are compiled to bytecode employ a similar mechanism?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>In general, for any thread safety problem you will need to protect your internal data structures with locks.\nThis can be done with various levels of granularity.</p>\n\n<ul>\n<li><p>You can use fine-grained locking, where every separate structure has its own lock.</p></li>\n<li><p>You can use coarse-grained locking where one lock protects everything (the GIL approach).</p></li>\n</ul>\n\n<p>There are various pros and cons of each method.  Fine-grained locking allows greater parallelism - two threads can\nexecute in parallel when they don't share any resources.  However there is a much larger administrative overhead.  For\nevery line of code, you may need to acquire and release several locks.</p>\n\n<p>The coarse grained approach is the opposite.  Two threads can't run at the same time, but an individual thread will run faster because its not doing so much bookkeeping.  Ultimately it comes down to a tradeoff between single-threaded speed and parallelism.</p>\n\n<p>There have been a few attempts to remove the GIL in python, but the extra overhead for single threaded machines was generally too large.  Some cases can actually be slower even on multi-processor machines\ndue to lock contention.  </p>\n\n<blockquote>\n  <p>Do other languages that are compiled to bytecode employ a similar mechanism?</p>\n</blockquote>\n\n<p>It varies, and it probably shouldn't be considered a language property so much as an implementation property.\nFor instance, there are Python implementations such as Jython and IronPython which use the threading approach of their underlying VM, rather than a GIL approach. Additionally, the next version of Ruby looks to be moving <a href=\"http://www.infoq.com/news/2007/05/ruby-threading-futures\" rel=\"noreferrer\">towards</a> introducing a GIL.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How do you find the median of a list in Python? The list can be of any size and the numbers are not guaranteed to be in any particular order.</p>\n\n<p>If the list contains an even number of elements, the function should return the average of the middle two.</p>\n\n<p>Here are some examples (sorted for display purposes):</p>\n\n<pre><code>median([1]) == 1\nmedian([1, 1]) == 1\nmedian([1, 1, 2, 4]) == 1.5\nmedian([0, 2, 5, 6, 8, 9, 9]) == 6\nmedian([0, 0, 0, 0, 4, 4, 6, 8]) == 2\n</code></pre>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Python 3.4 has <a href=\"https://docs.python.org/3/library/statistics.html#statistics.median\"><code>statistics.median</code></a>:</p>\n\n<blockquote>\n  <p>Return the median (middle value) of numeric data.</p>\n  \n  <p>When the number of data points is odd, return the middle data point.\n  When the number of data points is even, the median is interpolated by taking the average of the two middle values:</p>\n\n<pre><code>&gt;&gt;&gt; median([1, 3, 5])\n3\n&gt;&gt;&gt; median([1, 3, 5, 7])\n4.0\n</code></pre>\n</blockquote>\n\n<p>Usage:</p>\n\n<pre><code>import statistics\n\nitems = [1, 2, 3, 6, 8]\n\nstatistics.median(items)\n#&gt;&gt;&gt; 3\n</code></pre>\n\n<p>It's pretty careful with types, too:</p>\n\n<pre><code>statistics.median(map(float, items))\n#&gt;&gt;&gt; 3.0\n\nfrom decimal import Decimal\nstatistics.median(map(Decimal, items))\n#&gt;&gt;&gt; Decimal('3')\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am using the following command to run a python script in the background:</p>\n\n<pre><code>nohup ./cmd.py &gt; cmd.log &amp;\n</code></pre>\n\n<p>But it appears that nohup is not writing anything to the log file. cmd.log is created but is always empty. In the python script, I am using <code>sys.stdout.write</code> instead of <code>print</code> to print to standard output. Am I doing anything wrong?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It looks like you need to flush stdout periodically (e.g. <code>sys.stdout.flush()</code>). In my testing Python doesn't automatically do this even with <code>print</code> until the program exits.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I want to dynamically query Google Maps through the Google Directions API. As an example, this request calculates the route from Chicago, IL to Los Angeles, CA via two waypoints in Joplin, MO and Oklahoma City, OK:</p>\n\n<p><a href=\"http://maps.googleapis.com/maps/api/directions/json?origin=Chicago,IL&amp;destination=Los+Angeles,CA&amp;waypoints=Joplin,MO%7COklahoma+City,OK&amp;sensor=false\" rel=\"noreferrer\">http://maps.googleapis.com/maps/api/directions/json?origin=Chicago,IL&amp;destination=Los+Angeles,CA&amp;waypoints=Joplin,MO|Oklahoma+City,OK&amp;sensor=false</a></p>\n\n<p>It returns a result <a href=\"https://developers.google.com/maps/documentation/directions/intro?csw=1#Waypoints\" rel=\"noreferrer\">in the JSON format</a>.</p>\n\n<p>How can I do this in Python? I want to send such a request, receive the result and parse it.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I recommend using the awesome <a href=\"http://docs.python-requests.org/en/latest/index.html\" rel=\"noreferrer\">requests</a> library:</p>\n\n<pre><code>import json, requests\n\nurl = 'http://maps.googleapis.com/maps/api/directions/json'\n\nparams = dict(\n    origin='Chicago,IL',\n    destination='Los+Angeles,CA',\n    waypoints='Joplin,MO|Oklahoma+City,OK',\n    sensor='false'\n)\n\nresp = requests.get(url=url, params=params)\ndata = json.loads(resp.text)\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have questions about egg files in Python.</p>\n\n<p>I have much Python code organized by package and I'm trying to create egg files.\nI'm following <a href=\"http://peak.telecommunity.com/DevCenter/PythonEggs#building-eggs\" rel=\"noreferrer\">instructions</a>, but they are very common.</p>\n\n<p>According to that, it seems I need to have a setup.py file.</p>\n\n<ol>\n<li>Would you please tell me what I need to put into setup.py file and where it should reside?</li>\n<li>I suppose it's enough to create setup.py and then start \"setup.py bdist_egg\" for getting egg file. Could you please confirm?</li>\n<li>Is it possible to include only .pyc files into egg file?</li>\n<li>Having .egg file how I can just start the code from it without unpacking like <code>java -jar &lt;jar file&gt;</code> does?</li>\n</ol>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You are reading the wrong documentation. You want this: <a href=\"http://peak.telecommunity.com/DevCenter/setuptools\" rel=\"noreferrer\">http://peak.telecommunity.com/DevCenter/setuptools</a></p>\n\n<ol>\n<li><p>Creating setup.py is covered in the distutils documentation in Python's standard library documentation <a href=\"http://docs.python.org/distutils/setupscript.html\" rel=\"noreferrer\">here</a>. The main difference (for python eggs) is you <code>import setup</code> from <code>setuptools</code>, not <code>distutils</code>.</p></li>\n<li><p>Yep. That should be right.</p></li>\n<li><p>I don't think so. <code>pyc</code> files can be version and platform dependent. You might be able to open the egg (they should just be zip files) and delete <code>.py</code> files leaving <code>.pyc</code> files, but it wouldn't be recommended.</p></li>\n<li><p>I'm not sure. That might be \u201cDevelopment Mode\u201d. Or are you looking for some \u201cpy2exe\u201d or \u201cpy2app\u201d mode?</p></li>\n</ol>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have an XML file and an XML schema in another file and I'd like to validate that my XML file adheres to the schema.  How do I do this in Python?</p>\n\n<p>I'd prefer something using the standard library, but I can install a third-party package if necessary.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I am assuming you mean using XSD files. Surprisingly there aren't many python XML libraries that support this. lxml does however. Check <a href=\"http://lxml.de/validation.html\" rel=\"noreferrer\">Validation with lxml</a>. The page also lists how to use lxml to validate with other schema types.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>My understanding is that <em>MagicMock</em> is a superset of <em>Mock</em> that automatically does \"magic methods\" thus seamlessly providing support for lists, iterations and so on... Then what is the reason for plain <em>Mock</em> existing? Isn't that just a stripped down version of <em>MagicMock</em> that can be practically ignored? Does <em>Mock</em> class know any tricks that are not available in <em>MagicMock</em>?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<h3>What is the reason for plain <em>Mock</em> existing?</h3>\n\n<p>Mock's author, Michael Foord, addressed <a href=\"http://pyvideo.org/video/392/pycon-2011--testing-with-mock\">a very similar question at Pycon 2011 (31:00)</a>:</p>\n\n<blockquote>\n  <p><strong>Q:</strong> Why was MagicMock made a separate thing rather than just folding the ability into the default mock object?</p>\n  \n  <p><strong>A:</strong> One reasonable answer is that the way MagicMock works is that it preconfigures all these protocol methods by creating new Mocks and\n  setting them, so if every new mock created a bunch of new mocks and\n  set those as protocol methods and then all of those protocol methods\n  created a bunch more mocks and set them on their protocol methods,\n  you've got infinite recursion...</p>\n  \n  <p>What if you want accessing your mock as a container object to be an\n  error -- you don't want that to work? If every mock has automatically\n  got every protocol method, then it becomes much more difficult to do\n  that. And also, MagicMock does some of this preconfiguring for you,\n  setting return values that might not be appropriate, so I thought it\n  would be better to have this convenience one that has everything\n  preconfigured and available for you, but you can also take a ordinary\n  mock object and just configure the magic methods you want to exist...</p>\n  \n  <p>The simple answer is: just use MagicMock everywhere if that's the\n  behavior you want.</p>\n</blockquote>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a string variable which represents a dos path e.g:</p>\n\n<p><code>var = \"d:\\stuff\\morestuff\\furtherdown\\THEFILE.txt\"</code></p>\n\n<p>I want to split this string into:</p>\n\n<p><code>[ \"d\", \"stuff\", \"morestuff\", \"furtherdown\", \"THEFILE.txt\" ]</code></p>\n\n<p>I have tried using <code>split()</code> and <code>replace()</code> but they either only process the first backslash or they insert hex numbers into the string.</p>\n\n<p>I need to convert this string variable into a raw string somehow so that I can parse it.</p>\n\n<p>What's the best way to do this?</p>\n\n<p>I should also add that the contents of <code>var</code> i.e. the path that I'm trying to parse, is actually the return value of a command line query. It's not path data that I generate myself. Its stored in a file, and the command line tool is not going to escape the backslashes.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>I've been bitten loads of times by people writing their own path fiddling functions and getting it wrong. Spaces, slashes, backslashes, colons -- the possibilities for confusion are not endless, but mistakes are easily made anyway. So I'm a stickler for the use of <code>os.path</code>, and recommend it on that basis.</p>\n\n<p>(However, the path to virtue is not the one most easily taken, and many people when finding this are tempted to take a slippery path straight to damnation. They won't realise until one day everything falls to pieces, and they -- or, more likely, somebody else -- has to work out why everything has gone wrong, and it turns out somebody made a filename that mixes slashes and backslashes -- and some person suggests that the answer is \"not to do that\". Don't be any of these people. Except for the one who mixed up slashes and backslashes -- you could be them if you like.)</p>\n\n<p>You can get the drive and path+file like this:</p>\n\n<pre><code>drive, path_and_file = os.path.splitdrive(path)\n</code></pre>\n\n<p>Get the path and the file:</p>\n\n<pre><code>path, file = os.path.split(path_and_file)\n</code></pre>\n\n<p>Getting the individual folder names is not especially convenient, but it is the sort of honest middling discomfort that heightens the pleasure of later finding something that actually works well:</p>\n\n<pre><code>folders = []\nwhile 1:\n    path, folder = os.path.split(path)\n\n    if folder != \"\":\n        folders.append(folder)\n    else:\n        if path != \"\":\n            folders.append(path)\n\n        break\n\nfolders.reverse()\n</code></pre>\n\n<p>(This pops a <code>\"\\\"</code> at the start of <code>folders</code> if the path was originally absolute. You could lose a bit of code if you didn't want that.)</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How can I find the index of the first occurrence of a number in a Numpy array?\nSpeed is important to me. I am not interested in the following answers because they scan the whole array and don't stop when they find the first occurrence:</p>\n\n<pre><code>itemindex = numpy.where(array==item)[0][0]\nnonzero(array == item)[0][0]\n</code></pre>\n\n<p>Note 1: none of the answers from that question seem relevant <a href=\"https://stackoverflow.com/questions/432112/python-numpy-array-help-is-there-a-function-to-return-the-index-of-something-in\">Is there a Numpy function to return the first index of something in an array?</a></p>\n\n<p>Note 2: using a C-compiled method is preferred to a Python loop.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There is a feature request for this scheduled for Numpy 2.0.0: <a href=\"https://github.com/numpy/numpy/issues/2269\" rel=\"noreferrer\">https://github.com/numpy/numpy/issues/2269</a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I always read that I should use</p>\n\n<pre><code>model = Model(a=5, b=6)\nmodel.save()\n</code></pre>\n\n<p>But I just saw there is a manager function create, because I saw an opensource django app using it.</p>\n\n<pre><code>model = Model.objects.create(a=5, b=6)\nprint model.pk\n1\n</code></pre>\n\n<p>So is it suggested to use it? Or is it still preferred to use the .save method. I'm guessing that objects.create will try to create it no matter what, whereas save may save an existing object if the pk is specified.</p>\n\n<p>These are the docs that I found: <a href=\"https://docs.djangoproject.com/en/dev/topics/db/queries/#creating-objects\" rel=\"noreferrer\">https://docs.djangoproject.com/en/dev/topics/db/queries/#creating-objects</a></p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>It's in the page <a href=\"https://docs.djangoproject.com/en/1.9/ref/models/querysets/#create\" rel=\"noreferrer\">\"QuerySet API reference\"</a>, linked from the documentation index.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Hi I have something roughly like the following.  Basically I need to access the class of an instance method from a decorator used upon the instance method in its definition.</p>\n\n<pre><code>def decorator(view):\n    # do something that requires view's class\n    print view.im_class\n    return view\n\nclass ModelA(object):\n    @decorator\n    def a_method(self):\n        # do some stuff\n        pass\n</code></pre>\n\n<p>The code as-is gives</p>\n\n<p><code>\nAttributeError: 'function' object has no attribute 'im_class'\n</code></p>\n\n<p>I found similar question/answers - <a href=\"https://stackoverflow.com/questions/306130/\">Python decorator makes function forget that it belongs to a class</a> and <a href=\"https://stackoverflow.com/questions/2309124\">Get class in Python decorator</a> - but these rely upon a workaround that grabs the instance at run-time by snatching the first parameter.  In my case I will be calling the method based upon the information gleaned from its class, so I can't wait for a call to come in.</p>\n\n<p>Thank you.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>If you are using Python 2.6 or later you could use a class decorator, perhaps something like this (warning: untested code).</p>\n\n<pre><code>def class_decorator(cls):\n   for name, method in cls.__dict__.iteritems():\n        if hasattr(method, \"use_class\"):\n            # do something with the method and class\n            print name, cls\n   return cls\n\ndef method_decorator(view):\n    # mark the method as something that requires view's class\n    view.use_class = True\n    return view\n\n@class_decorator\nclass ModelA(object):\n    @method_decorator\n    def a_method(self):\n        # do some stuff\n        pass\n</code></pre>\n\n<p>The method decorator marks the method as one that is of interest by adding a \"use_class\" attribute - functions and methods are also objects, so you can attach additional metadata to them.</p>\n\n<p>After the class has been created the class decorator then goes through all the methods and does whatever is needed on the methods that have been marked.</p>\n\n<p>If you want all the methods to be affected then you could leave out the method decorator and just use the class decorator.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>How can I tell if a file is binary (non-text) in python? I am searching through a large set of files in python, and keep getting matches in binary files. This makes the output look incredibly messy.</p>\n\n<p>I know I could use grep -I, but I am doing more with the data than what grep allows for.</p>\n\n<p>In the past I would have just searched for characters greater than 0x7f, but utf8 and the like make that impossible on modern systems. Ideally the solution would be fast, but any solution will do.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You can also use the mimetypes module:</p>\n\n<pre><code>import mimetypes\n...\nmime = mimetypes.guess_type(file)\n</code></pre>\n\n<p>It's fairly easy to compile a list of binary mime types. For example Apache distributes with a mime.types file that you could parse into a set of lists, binary and text and then check to see if the mime is in your text or binary list.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<div class=\"question-status question-originals-of-duplicate\">\r\n    <p>This question already has an answer here:</p>\r\n    <ul>\r\n        <li>\r\n            <a href=\"/questions/1465036/install-python-2-6-in-centos\" dir=\"ltr\">Install python 2.6 in CentOS</a>\r\n                <span class=\"question-originals-answer-count\">\r\n                    14 answers\r\n                </span>\r\n        </li>\r\n    </ul>\r\n    </div>\r\n<p>I've got two versions of python on my linuxbox:</p>\n\n<pre><code>$python\nPython 2.6.6 (r266:84292, Jul 10 2013, 22:48:45) \n[GCC 4.4.7 20120313 (Red Hat 4.4.7-3)] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; \n\n\n$ /usr/local/bin/python2.7\nPython 2.7.3 (default, Oct  8 2013, 15:53:09) \n[GCC 4.4.7 20120313 (Red Hat 4.4.7-3)] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; \n\n$ which python\n/usr/bin/python\n$ ls -al /usr/bin/python\n-rwxr-xr-x. 2 root root 4864 Jul 10 22:49 /usr/bin/python\n</code></pre>\n\n<p>How can I make 2.7 be the default version so when I type <code>python</code> it puts me in 2.7?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>You probably don't actually want to change your default Python.</p>\n\n<p>Your distro installed a standard system Python in <code>/usr/bin</code>, and may have scripts that depend on this being present, and selected by <code>#! /usr/bin/env python</code>. You can <em>usually</em> get away with running Python 2.6 scripts in 2.7, but do you want to risk it?</p>\n\n<p>On top of that, monkeying with <code>/usr/bin</code> can break your package manager's ability to manage packages. And changing the order of directories in your <code>PATH</code> will affect a lot of other things besides Python. (In fact, it's more common to have <code>/usr/local/bin</code> ahead of <code>/usr/bin</code>, and it may be what you actually want\u2014but if you have it the other way around, presumably there's a good reason for that.)</p>\n\n<p>But you don't <em>need</em> to change your default Python to get the system to run 2.7 when you type <code>python</code>.</p>\n\n<hr>\n\n<p>First, you can set up a shell alias:</p>\n\n<pre><code>alias python=/usr/local/bin/python2.7\n</code></pre>\n\n<p>Type that at a prompt, or put it in your <code>~/.bashrc</code> if you want the change to be persistent, and now when <em>you</em> type <code>python</code> it runs your chosen 2.7, but when some program on your system tries to run a script with <code>/usr/bin/env python</code> it runs the standard 2.6.</p>\n\n<hr>\n\n<p>Alternatively, just create a <a href=\"https://pypi.python.org/pypi/virtualenv\" rel=\"noreferrer\">virtual environment</a> out of your 2.7 (or separate venvs for different projects), and do your work inside the venv.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Python 3.3 includes in its standard library the new package <code>venv</code>. What does it do, and how does it differ from all the other packages that seem to match the regex <code>(py)?(v|virtual|pip)?env</code>?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<h1>PyPI packages not in the standard library:</h1>\n\n<ul>\n<li><p><strong><a href=\"https://pypi.python.org/pypi/virtualenv\" rel=\"noreferrer\"><code>virtualenv</code></a></strong> is a very popular tool that creates isolated Python environments for Python libraries. If you're not familiar with this tool, I highly recommend learning it, as it is a very useful tool, and I'll be making comparisons to it for the rest of this answer.</p>\n\n<p>It works by installing a bunch of files in a directory (eg: <code>env/</code>), and then modifying the <code>PATH</code> environment variable to prefix it with a custom <code>bin</code> directory (eg: <code>env/bin/</code>). An exact copy of the <code>python</code> or <code>python3</code> binary is placed in this directory, but Python is programmed to look for libraries relative to its path first, in the environment directory. It's not part of Python's standard library, but is officially blessed by the PyPA (Python Packaging Authority). Once activated, you can install packages in the virtual environment using <code>pip</code>.</p></li>\n<li><p><strong><a href=\"https://github.com/yyuu/pyenv\" rel=\"noreferrer\"><code>pyenv</code></a></strong> is used to isolate Python versions. For example, you may want to test your code against Python 2.6, 2.7, 3.3, 3.4 and 3.5, so you'll need a way to switch between them. Once activated, it prefixes the <code>PATH</code> environment variable with <code>~/.pyenv/shims</code>, where there are special files matching the Python commands (<code>python</code>, <code>pip</code>). These are not copies of the Python-shipped commands; they are special scripts that decide on the fly which version of Python to run based on the <code>PYENV_VERSION</code> environment variable, or the <code>.python-version</code> file, or the <code>~/.pyenv/version</code> file. <code>pyenv</code> also makes the process of downloading and installing multiple Python versions easier, using the command <code>pyenv install</code>.</p></li>\n<li><p><strong><a href=\"https://github.com/yyuu/pyenv-virtualenv\" rel=\"noreferrer\"><code>pyenv-virtualenv</code></a></strong> is a plugin for <code>pyenv</code> by the same author as <code>pyenv</code>, to allow you to use <code>pyenv</code> and <code>virtualenv</code> at the same time conveniently. However, if you're using Python 3.3 or later, <code>pyenv-virtualenv</code> will try to run <code>python -m venv</code> if it is available, instead of <code>virtualenv</code>. You can use <code>virtualenv</code> and <code>pyenv</code> together without <code>pyenv-virtualenv</code>, if you don't want the convenience features.</p></li>\n<li><p><strong><a href=\"https://pypi.python.org/pypi/virtualenvwrapper\" rel=\"noreferrer\"><code>virtualenvwrapper</code></a></strong> is a set of extensions to <code>virtualenv</code> (see <a href=\"http://virtualenvwrapper.readthedocs.io/en/latest/\" rel=\"noreferrer\">docs</a>). It gives you commands like <code>mkvirtualenv</code>, <code>lssitepackages</code>, and especially <code>workon</code> for switching between different <code>virtualenv</code> directories. This tool is especially useful if you want multiple <code>virtualenv</code> directories.</p></li>\n<li><p><strong><a href=\"https://github.com/yyuu/pyenv-virtualenvwrapper\" rel=\"noreferrer\"><code>pyenv-virtualenvwrapper</code></a></strong> is a plugin for <code>pyenv</code> by the same author as <code>pyenv</code>, to conveniently integrate <code>virtualenvwrapper</code> into <code>pyenv</code>.</p></li>\n<li><p><strong><a href=\"https://pypi.python.org/pypi/pipenv\" rel=\"noreferrer\"><code>pipenv</code></a></strong>, by Kenneth Reitz (the author of <code>requests</code>), is a brand new (possibly experimental) project that aims to combine Pipfile, pip and virtualenv into one command on the command-line.</p></li>\n</ul>\n\n<h1>Standard library:</h1>\n\n<ul>\n<li><p><strong><code>pyvenv</code></strong> is a script shipped with Python 3 but <a href=\"https://docs.python.org/dev/whatsnew/3.6.html#id8\" rel=\"noreferrer\">deprecated in Python 3.6</a> as it had problems (not to mention the confusing name). In Python 3.6+, the exact equivalent is <code>python3 -m venv</code>.</p></li>\n<li><p><strong><a href=\"https://docs.python.org/3/library/venv.html\" rel=\"noreferrer\"><code>venv</code></a></strong> is a package shipped with Python 3, which you can run using <code>python3 -m venv</code> (although for some reason some distros separate it out into a separate distro package, such as <code>python3-venv</code> on Ubuntu/Debian). It serves a similar purpose to <code>virtualenv</code>, and works in a very similar way, but it doesn't need to copy Python binaries around (except on Windows). Use this if you don't need to support Python 2. At the time of writing, the Python community seems to be happy with <code>virtualenv</code> and I haven't heard much talk of <code>venv</code>.</p></li>\n</ul>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Recently began branching out from my safe place (R) into Python and and am a bit confused by the cell localization/selection in <code>Pandas</code>. I've read the documentation but I'm struggling to understand the practical implications of the various localization/selection options. </p>\n\n<p>Is there a reason why I should ever use <code>.loc</code> or <code>.iloc</code> over the most general option <code>.ix</code>? </p>\n\n<p>I understand that <code>.loc</code>, <code>iloc</code>, <code>at</code>, and <code>iat</code> may provide some guaranteed correctness that <code>.ix</code> can't offer, but I've also read where <code>.ix</code> tends to be the fastest solution across the board. </p>\n\n<p>Can someone please explain the real world, best practices reasoning behind utilizing anything other than <code>.ix</code>?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><strong>loc:</strong> only work on index<br>\n<strong>iloc:</strong> work on position<br>\n<strong>ix:</strong> You can get data from dataframe without it being in the index<br>\n<strong>at:</strong> get scalar values. It's a very fast loc<br>\n<strong>iat:</strong> Get scalar values. It's a very fast iloc<br></p>\n\n<p><a href=\"http://pyciencia.blogspot.com/2015/05/obtener-y-filtrar-datos-de-un-dataframe.html\">http://pyciencia.blogspot.com/2015/05/obtener-y-filtrar-datos-de-un-dataframe.html</a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am planning to create a web app that allows users to downgrade their visual studio project files. However, It seems Google App Engine accepts files uploading and flat file storing on the Google Server through <code>db.TextProperty</code> and <code>db.BlobProperty</code>.</p>\n\n<p>I'll be glad anyone can provide code sample (both the client and the server side) on how this can be done.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here is a complete, working file.  I pulled the original from the Google site and modified it to make it slightly more real world.</p>\n\n<p>A few things to notice:</p>\n\n<ol>\n<li>This code uses the <a href=\"http://code.google.com/appengine/docs/python/blobstore/\" rel=\"noreferrer\">BlobStore API</a></li>\n<li><p>The purpose of this line in the\nServeHandler class is to \"fix\" the\nkey so that it gets rid of any name\nmangling that may have occurred in\nthe browser (I didn't observe any in\nChrome)</p>\n\n<pre><code>blob_key = str(urllib.unquote(blob_key))\n</code></pre></li>\n<li><p>The \"save_as\" clause at the end of this is important.  It will make sure that the file name does not get mangled when it is sent to your browser.  Get rid of it to observe what happens.</p>\n\n<pre><code>self.send_blob(blobstore.BlobInfo.get(blob_key), save_as=True)\n</code></pre></li>\n</ol>\n\n<p>Good Luck!</p>\n\n<pre><code>import os\nimport urllib\n\nfrom google.appengine.ext import blobstore\nfrom google.appengine.ext import webapp\nfrom google.appengine.ext.webapp import blobstore_handlers\nfrom google.appengine.ext.webapp import template\nfrom google.appengine.ext.webapp.util import run_wsgi_app\n\nclass MainHandler(webapp.RequestHandler):\n    def get(self):\n        upload_url = blobstore.create_upload_url('/upload')\n        self.response.out.write('&lt;html&gt;&lt;body&gt;')\n        self.response.out.write('&lt;form action=\"%s\" method=\"POST\" enctype=\"multipart/form-data\"&gt;' % upload_url)\n        self.response.out.write(\"\"\"Upload File: &lt;input type=\"file\" name=\"file\"&gt;&lt;br&gt; &lt;input type=\"submit\" name=\"submit\" value=\"Submit\"&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;\"\"\")\n\n        for b in blobstore.BlobInfo.all():\n            self.response.out.write('&lt;li&gt;&lt;a href=\"/serve/%s' % str(b.key()) + '\"&gt;' + str(b.filename) + '&lt;/a&gt;')\n\nclass UploadHandler(blobstore_handlers.BlobstoreUploadHandler):\n    def post(self):\n        upload_files = self.get_uploads('file')\n        blob_info = upload_files[0]\n        self.redirect('/')\n\nclass ServeHandler(blobstore_handlers.BlobstoreDownloadHandler):\n    def get(self, blob_key):\n        blob_key = str(urllib.unquote(blob_key))\n        if not blobstore.get(blob_key):\n            self.error(404)\n        else:\n            self.send_blob(blobstore.BlobInfo.get(blob_key), save_as=True)\n\ndef main():\n    application = webapp.WSGIApplication(\n          [('/', MainHandler),\n           ('/upload', UploadHandler),\n           ('/serve/([^/]+)?', ServeHandler),\n          ], debug=True)\n    run_wsgi_app(application)\n\nif __name__ == '__main__':\n  main()\n</code></pre>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>Which of these two frameworks is better suited to a developer with 11 months experience. I have decided to learn python for my server side coding and wanted to know which of these would be better suited for someone at my skill level. I have just spent a few days playing around with web2py and really like it and i am wondering if Django offers something more that i am missing out on?</p>\n\n<p>PS. UPDATE: Thank you all for the wonderful input, after buying three django books and going through a few small projects/tutorials for both django and web2py, i have settled on web2py. This is a wonderful framework, which makes web development really fun for a newbe. I would recommend all newbies to learn this framework as it will be mainstream in the future. Django is also a wonderful framework but web2py is just better in my limited experience opinion.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>(disclaimer: I am the project leader for web2py)</p>\n\n<p>Django has been around 5 years longer than web2py therefore it has more users and more applications to show off. Django has what they call \"admin\" which is not the same as web2py's \"admin\" but more like web2py's \"appadmin\". Django's \"admin\" is better and more customizable than web2py's \"appadmin\". Django does not have the equivalent of web2py's \"admin\". (sorry for the name confusion).</p>\n\n<p>web2py is more compact and has more functionality out of the box (more supported databases, web based IDE, ticketing system, runs on GAE without patches, multiple login methods, role based access control, web based translation interface, support for multiple database connections, distributed transactions, and more).</p>\n\n<p>For me the most important functionality of web2py is automatic migrations. Django does not provide them out of the box.</p>\n\n<p>For web2py long term backward compatibility is a primary goal, together with security. Django is comparable to web2py in terms of security (except that web2py had CSRF prevention and default escaping in templates before they did) but Django broke backward compatibility when 1.0 was released. web2py never did since Oct 2007.</p>\n\n<p>To me the web2py syntax is more natural:</p>\n\n<pre><code> db(db.tablename.fieldname &lt;= value).select() # web2py\n Tablename.objects.filter(fieldname__lt=value) # Django\n</code></pre>\n\n<p>I am not aware of any functionality of web2py that is not present in Django. I have asked that question many times because, if there is, we want to add it to web2py, but I have not yet received a satisfactory answer.</p>\n\n<p>Of course there are things that we both do but differently. Django follows \"explicit is better than implicit\". web2py does not and instead follows \"everything should have a default behavior\". I believe this makes web2py code and configuration more compact.</p>\n\n<p>Anyway, whatever you choose, they are too good solid web frameworks and the similarities are less than the differences. The Django developers are very smart people.</p>\n\n<p>The web2py community is very friendly. You should try ask a question on the web2py google group and on the Django group. Just as an experiment.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I am a totally blind programmer who would like to learn Python. Unfortunately the fact that code blocks are represented with different levels of indentation is a major stumbling block. I was wondering if there were any tools available that would allow me to write code using braces or some other code block delimiter and then convert that format into a properly indented representation that the Python interpreter could use?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>There's a solution to your problem that is distributed with python itself. <code>pindent.py</code>, it's located in the Tools\\Scripts directory in a windows install (my path to it is C:\\Python25\\Tools\\Scripts), it looks like you'd have grab it from svn.python.org if you are running on Linux or OSX. </p>\n\n<p>It adds comments when blocks are closed, or can properly indent code if comments are put in. Here's an example of the code outputted by pindent with the command:</p>\n\n<p><code>pindent -c myfile.py</code></p>\n\n<pre><code>def foobar(a, b):\n   if a == b:\n       a = a+1\n   elif a &lt; b:\n       b = b-1\n       if b &gt; a: a = a-1\n       # end if\n   else:\n       print 'oops!'\n   # end if\n# end def foobar\n</code></pre>\n\n<p>Where the original <code>myfile.py</code> was: </p>\n\n<pre><code>def foobar(a, b):\n   if a == b:\n       a = a+1\n   elif a &lt; b:\n       b = b-1\n       if b &gt; a: a = a-1\n   else:\n       print 'oops!'\n</code></pre>\n\n<p>You can also use <code>pindent.py -d</code> to insert the correct indentation based on comments (read the header of pindent.py for details), this should allow you to code in python without worrying about indentation.</p>\n\n<p>I'd be interested to learn what solution you end up using, if you require any further assistance, please comment on this post and I'll try to help.</p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have some text that uses Unicode punctuation, like left double quote, right single quote for apostrophe, and so on, and I need it in ASCII. Does Python have a database of these characters with obvious ASCII substitutes so I can do better than turning them all into \"?\" ?</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p><a href=\"http://pypi.python.org/pypi/Unidecode\" rel=\"noreferrer\">Unidecode</a> looks like a complete solution. It converts fancy quotes to ascii quotes, accented latin characters to unaccented and even attempts transliteration to deal with characters that don't have ASCII equivalents. That way your users don't have to see a bunch of ? when you had to pass their text through a legacy 7-bit ascii system.</p>\n\n<pre><code>&gt;&gt;&gt; from unidecode import unidecode\n&gt;&gt;&gt; print unidecode(u\"\\u5317\\u4EB0\")\nBei Jing \n</code></pre>\n\n<p><a href=\"http://www.tablix.org/~avian/blog/archives/2009/01/unicode_transliteration_in_python/\" rel=\"noreferrer\">http://www.tablix.org/~avian/blog/archives/2009/01/unicode_transliteration_in_python/</a></p>\n    </div>"]},
{"posts": ["<div class=\"post-text\" itemprop=\"text\">\r\n\r\n<p>I have a multi-line string defined like this:</p>\n\n<pre><code>foo = \"\"\"\nthis is \na multi-line string.\n\"\"\"\n</code></pre>\n\n<p>This string we used as test-input for a parser I am writing. The parser-function receives a <code>file</code>-object as input and iterates over it. It does also call the <code>next()</code> method directly to skip lines, so I really need an iterator as input, not an iterable.\nI need an iterator that iterates over the individual lines of that string like a <code>file</code>-object would over the lines of a text-file. I could of course do it like this:</p>\n\n<pre><code>lineiterator = iter(foo.splitlines())\n</code></pre>\n\n<p>Is there a more direct way of doing this? In this scenario the string has to traversed once for the splitting, and then again by the parser. It doesn't matter in my test-case, since the string is very short there, I am just asking out of curiosity. Python has so many useful and efficient built-ins for such stuff, but I could find nothing that suits this need.</p>\n    </div>", "<div class=\"post-text\" itemprop=\"text\">\r\n<p>Here are three possibilities:</p>\n\n<pre><code>foo = \"\"\"\nthis is \na multi-line string.\n\"\"\"\n\ndef f1(foo=foo): return iter(foo.splitlines())\n\ndef f2(foo=foo):\n    retval = ''\n    for char in foo:\n        retval += char if not char == '\\n' else ''\n        if char == '\\n':\n            yield retval\n            retval = ''\n    if retval:\n        yield retval\n\ndef f3(foo=foo):\n    prevnl = -1\n    while True:\n      nextnl = foo.find('\\n', prevnl + 1)\n      if nextnl &lt; 0: break\n      yield foo[prevnl + 1:nextnl]\n      prevnl = nextnl\n\nif __name__ == '__main__':\n  for f in f1, f2, f3:\n    print list(f())\n</code></pre>\n\n<p>Running this as the main script confirms the three functions are equivalent. With <code>timeit</code> (and a <code>* 100</code> for <code>foo</code> to get substantial strings for more precise measurement):</p>\n\n<pre><code>$ python -mtimeit -s'import asp' 'list(asp.f3())'\n1000 loops, best of 3: 370 usec per loop\n$ python -mtimeit -s'import asp' 'list(asp.f2())'\n1000 loops, best of 3: 1.36 msec per loop\n$ python -mtimeit -s'import asp' 'list(asp.f1())'\n10000 loops, best of 3: 61.5 usec per loop\n</code></pre>\n\n<p>Note we need the <code>list()</code> call to ensure the iterators are traversed, not just built.</p>\n\n<p>IOW, the naive implementation is so much faster it isn't even funny: 6 times faster than my attempt with <code>find</code> calls, which in turn is 4 times faster than a lower-level approach.</p>\n\n<p>Lessons to retain: measurement is always a good thing (but must be accurate); string methods like <code>splitlines</code> are implemented in very fast ways; putting strings together by programming at a very low level (esp. by loops of <code>+=</code> of very small pieces) can be quite slow.</p>\n\n<p><strong>Edit</strong>: added @Jacob's proposal, slightly modified to give the same results as the others (trailing blanks on a line are kept), i.e.:</p>\n\n<pre><code>from cStringIO import StringIO\n\ndef f4(foo=foo):\n    stri = StringIO(foo)\n    while True:\n        nl = stri.readline()\n        if nl != '':\n            yield nl.strip('\\n')\n        else:\n            raise StopIteration\n</code></pre>\n\n<p>Measuring gives:</p>\n\n<pre><code>$ python -mtimeit -s'import asp' 'list(asp.f4())'\n1000 loops, best of 3: 406 usec per loop\n</code></pre>\n\n<p>not quite as good as the <code>.find</code> based approach -- still, worth keeping in mind because it might be less prone to small off-by-one bugs (any loop where you see occurrences of +1 and -1, like my <code>f3</code> above, should automatically trigger off-by-one suspicions -- and so should many loops which lack such tweaks and should have them -- though I believe my code is also right since I was able to check its output with other functions').</p>\n\n<p>But the split-based approach still rules.</p>\n\n<p>An aside: possibly better style for <code>f4</code> would be:</p>\n\n<pre><code>from cStringIO import StringIO\n\ndef f4(foo=foo):\n    stri = StringIO(foo)\n    while True:\n        nl = stri.readline()\n        if nl == '': break\n        yield nl.strip('\\n')\n</code></pre>\n\n<p>at least, it's a bit less verbose.  The need to strip trailing <code>\\n</code>s unfortunately prohibits the clearer and faster replacement of the <code>while</code> loop with <code>return iter(stri)</code> (the <code>iter</code> part whereof is redundant in modern versions of Python, I believe since 2.3 or 2.4, but it's also innocuous).  Maybe worth trying, also:</p>\n\n<pre><code>    return itertools.imap(lambda s: s.strip('\\n'), stri)\n</code></pre>\n\n<p>or variations thereof -- but I'm stopping here since it's pretty much a theoretical exercise wrt the <code>strip</code> based, simplest and fastest, one.</p>\n    </div>"]}
]